package org.osiam.client;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest13 {

    public static boolean debug = false;

    @Test
    public void test06501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06501");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.query.Query query3 = null;
        org.osiam.client.AuthService.Builder builder5 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientId("ME");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService14 = builder13.build();
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        java.lang.String str23 = authService14.extractErrorMessageForbidden(accessToken21);
        org.osiam.client.helper.ScopeSerializer scopeSerializer24 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException32 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean33 = scope30.equals((java.lang.Object) invalidAttributeException32);
        java.lang.String str34 = scope30.getValue();
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str37 = scope36.toString();
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str40 = scope39.getValue();
        java.lang.String str41 = scope39.getValue();
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException44 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean45 = scope42.equals((java.lang.Object) invalidAttributeException44);
        java.lang.String str46 = scope42.getValue();
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException52 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean53 = scope50.equals((java.lang.Object) invalidAttributeException52);
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope56 = org.osiam.client.oauth.Scope.GET;
        boolean boolean58 = scope56.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope59 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray60 = new org.osiam.client.oauth.Scope[] { scope29, scope30, scope35, scope36, scope38, scope39, scope42, scope47, scope48, scope49, scope50, scope54, scope55, scope56, scope59 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet61 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet61, scopeArray60);
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder26.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet61);
        boolean boolean64 = scopeSerializer24.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet61);
        org.osiam.client.oauth.AccessToken.Builder builder66 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date67 = null;
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder66.setRefreshTokenExpiresAt(date67);
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder66.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken71 = builder70.build();
        boolean boolean72 = accessToken71.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet73 = accessToken71.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator74 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider75 = null;
        scopeSerializer24.serialize(scopeSet73, jsonGenerator74, serializerProvider75);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider77 = null;
        org.osiam.client.oauth.AccessToken.Builder builder79 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date80 = null;
        org.osiam.client.oauth.AccessToken.Builder builder81 = builder79.setRefreshTokenExpiresAt(date80);
        org.osiam.client.oauth.AccessToken.Builder builder83 = builder79.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken84 = builder83.build();
        boolean boolean85 = accessToken84.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet86 = accessToken84.getScopes();
        boolean boolean87 = scopeSerializer24.isEmpty(serializerProvider77, scopeSet86);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper88 = null;
        com.fasterxml.jackson.databind.JavaType javaType89 = null;
        scopeSerializer24.acceptJsonFormatVisitor(jsonFormatVisitorWrapper88, javaType89);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer91 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer92 = scopeSerializer24.unwrappingSerializer(nameTransformer91);
        boolean boolean93 = accessToken21.equals((java.lang.Object) scopeSetJsonSerializer92);
        java.lang.String str94 = accessToken21.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult95 = osiamGroupService2.searchGroups(query3, accessToken21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given query must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(authService14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Insufficient scopes: []" + "'", str23, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "GET" + "'", str34, "GET");
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ME" + "'", str37, "ME");
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PATCH" + "'", str40, "PATCH");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PATCH" + "'", str41, "PATCH");
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "GET" + "'", str46, "GET");
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(scope59);
        org.junit.Assert.assertNotNull(scopeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(accessToken71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(scopeSet73);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(accessToken84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(scopeSet86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
    }

    @Test
    public void test06502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06502");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET POST PUT PATCH DELETE");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.lang.String str11 = accessToken10.toString();
        java.lang.String str12 = accessToken10.getType();
        boolean boolean13 = accessToken10.isExpired();
        java.util.Date date14 = accessToken10.getExpiresAt();
        boolean boolean15 = accessToken10.isRefreshTokenExpired();
        java.lang.String str16 = accessToken10.getRefreshToken();
        java.lang.String str17 = accessToken10.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user18 = osiamUserService2.getUser("org.osiam.client.exception.UnauthorizedException: client_credentials", accessToken10);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str11, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test06503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06503");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector.Builder builder12 = builder2.setEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector osiamConnector13 = builder2.build();
        org.osiam.client.OsiamConnector.Builder builder14 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector19 = builder18.build();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        java.lang.String str28 = accessToken26.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder29 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder31.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.descending("hi!");
        org.osiam.client.query.Query query38 = queryBuilder37.build();
        java.lang.String str39 = query38.toString();
        java.lang.String str40 = query38.getSortOrder();
        java.lang.String str41 = query38.getSortBy();
        java.lang.String str42 = query38.getFilter();
        java.lang.String str43 = query38.toString();
        boolean boolean44 = accessToken26.equals((java.lang.Object) query38);
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector19.createQueryBuilder(query38);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.getAttributes();
        java.lang.String str57 = query55.toString();
        java.lang.String str58 = query55.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder59 = osiamConnector19.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder60 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder62 = queryBuilder60.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder62.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder66 = queryBuilder64.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query67 = queryBuilder64.build();
        org.osiam.client.query.QueryBuilder queryBuilder68 = osiamConnector19.createQueryBuilder(query67);
        java.lang.String str69 = query67.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder70 = osiamConnector13.createQueryBuilder(query67);
        org.osiam.client.query.QueryBuilder queryBuilder71 = osiamConnector13.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder72 = osiamConnector13.createQueryBuilder();
        org.osiam.client.AuthService.Builder builder74 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder76 = builder74.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder78 = builder76.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder80 = builder78.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder82 = builder80.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder84 = builder82.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder86 = builder82.setClientSecret("PATCH");
        org.osiam.client.AuthService.Builder builder88 = builder86.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService89 = builder86.build();
        org.osiam.client.oauth.Scope scope90 = org.osiam.client.oauth.Scope.GET;
        java.lang.String str91 = scope90.getValue();
        java.lang.String str92 = scope90.getValue();
        java.lang.String str93 = scope90.toString();
        java.lang.String str94 = scope90.toString();
        org.osiam.client.oauth.Scope[] scopeArray95 = new org.osiam.client.oauth.Scope[] { scope90 };
        java.net.URI uRI96 = authService89.getAuthorizationUri(scopeArray95);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken97 = osiamConnector13.retrieveAccessToken(scopeArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(query38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str39, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "descending" + "'", str40, "descending");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Authorization" + "'", str56, "Authorization");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str57, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "descending" + "'", str58, "descending");
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertNotNull(query67);
        org.junit.Assert.assertNotNull(queryBuilder68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(queryBuilder70);
        org.junit.Assert.assertNotNull(queryBuilder71);
        org.junit.Assert.assertNotNull(queryBuilder72);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(authService89);
        org.junit.Assert.assertNotNull(scope90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "GET" + "'", str91, "GET");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "GET" + "'", str92, "GET");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "GET" + "'", str93, "GET");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "GET" + "'", str94, "GET");
        org.junit.Assert.assertNotNull(scopeArray95);
        org.junit.Assert.assertNotNull(uRI96);
    }

    @Test
    public void test06504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06504");
        org.osiam.client.exception.ScimErrorMessage scimErrorMessage0 = new org.osiam.client.exception.ScimErrorMessage();
        java.lang.String str1 = scimErrorMessage0.getErrorCode();
        java.lang.String str2 = scimErrorMessage0.getDescription();
        java.lang.String str3 = scimErrorMessage0.getErrorCode();
        java.lang.String str4 = scimErrorMessage0.getDescription();
        java.lang.String str5 = scimErrorMessage0.getDescription();
        java.lang.String str6 = scimErrorMessage0.getErrorCode();
        java.lang.String str7 = scimErrorMessage0.getDescription();
        java.lang.String str8 = scimErrorMessage0.getErrorCode();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test06505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06505");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector.Builder builder12 = builder2.setEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientSecret("org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder18 = builder12.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET POST PUT PATCH DELETE], refreshTokenId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=refresh_token, userId=org.osiam.client.exception.ConflictException: PATCH, userName=]");
        org.osiam.client.OsiamConnector.Builder builder20 = builder12.setAuthServerEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder22 = builder12.setEndpoint("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder24 = builder12.setClientRedirectUri("Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test06506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06506");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientSecret("");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        java.util.Date date15 = accessToken14.getExpiresAt();
        java.lang.String str16 = accessToken14.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken14);
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        boolean boolean25 = accessToken24.isRefreshTokenExpired();
        boolean boolean26 = accessToken24.isClientOnly();
        java.lang.String str27 = accessToken24.getClientId();
        boolean boolean28 = accessToken24.isClientOnly();
        boolean boolean29 = accessToken14.equals((java.lang.Object) accessToken24);
        org.osiam.client.query.QueryBuilder queryBuilder30 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder32 = queryBuilder30.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.descending("hi!");
        org.osiam.client.query.Query query39 = queryBuilder38.build();
        org.osiam.client.query.Query query40 = queryBuilder38.build();
        org.osiam.client.query.QueryBuilder queryBuilder42 = queryBuilder38.ascending("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        boolean boolean43 = accessToken14.equals((java.lang.Object) "org.osiam.client.exception.ConnectionInitializationException: PATCH");
        java.lang.String str44 = accessToken14.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList45 = osiamConnector7.getAllUsers(accessToken14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(query39);
        org.junit.Assert.assertNotNull(query40);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test06507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06507");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.getEmptyValue();
        java.util.Collection<java.lang.Object> objCollection7 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeDeserializer0.getEmptyValue();
        boolean boolean9 = scopeDeserializer0.isCachable();
        boolean boolean10 = scopeDeserializer0.isCachable();
        boolean boolean11 = scopeDeserializer0.isCachable();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer12 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass13 = scopeDeserializer12.handledType();
        boolean boolean14 = scopeDeserializer12.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet15 = scopeDeserializer12.getNullValue();
        java.lang.Class<?> wildcardClass16 = scopeDeserializer12.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer17 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer18 = scopeDeserializer12.unwrappingDeserializer(nameTransformer17);
        java.util.Collection<java.lang.Object> objCollection19 = scopeSetJsonDeserializer18.getKnownPropertyNames();
        java.util.Collection<java.lang.Object> objCollection20 = scopeSetJsonDeserializer18.getKnownPropertyNames();
        boolean boolean21 = scopeSetJsonDeserializer18.isCachable();
        boolean boolean22 = scopeSetJsonDeserializer18.isCachable();
        java.util.Collection<java.lang.Object> objCollection23 = scopeSetJsonDeserializer18.getKnownPropertyNames();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer24 = scopeDeserializer0.replaceDelegatee(scopeSetJsonDeserializer18);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNull(scopeSet6);
        org.junit.Assert.assertNull(objCollection7);
        org.junit.Assert.assertNull(scopeSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(scopeSet15);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer18);
        org.junit.Assert.assertNull(objCollection19);
        org.junit.Assert.assertNull(objCollection20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(objCollection23);
    }

    @Test
    public void test06508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06508");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet62 = accessToken60.getScopes();
        boolean boolean63 = scopeSerializer0.isEmpty(serializerProvider53, scopeSet62);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper64 = null;
        com.fasterxml.jackson.databind.JavaType javaType65 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper64, javaType65);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass67 = scopeSerializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer68 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer69 = scopeSerializer0.unwrappingSerializer(nameTransformer68);
        boolean boolean70 = scopeSetJsonSerializer69.usesObjectId();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(scopeSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(scopeSetClass67);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test06509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06509");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = accessToken6.getScopes();
        boolean boolean9 = accessToken6.isExpired();
        java.lang.String str10 = accessToken6.getRefreshToken();
        java.lang.String str11 = accessToken6.getUserId();
        java.lang.String str12 = accessToken6.getUserId();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(scopeSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test06510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06510");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setAuthServerEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setResourceServerEndpoint("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector15 = builder10.build();
        org.osiam.resources.scim.User user17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        java.util.Date date25 = accessToken24.getExpiresAt();
        java.lang.String str26 = accessToken24.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken24);
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date30 = null;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setRefreshTokenExpiresAt(date30);
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken34 = builder33.build();
        boolean boolean35 = accessToken34.isRefreshTokenExpired();
        boolean boolean36 = accessToken34.isClientOnly();
        java.lang.String str37 = accessToken34.getClientId();
        boolean boolean38 = accessToken34.isClientOnly();
        boolean boolean39 = accessToken24.equals((java.lang.Object) accessToken34);
        java.lang.String str40 = accessToken34.getUserId();
        boolean boolean41 = accessToken34.isExpired();
        java.lang.String str42 = accessToken34.getUserId();
        boolean boolean43 = accessToken34.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user44 = osiamConnector15.replaceUser("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME", user17, accessToken34);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(accessToken34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test06511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06511");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector osiamConnector11 = builder2.build();
        org.osiam.client.OsiamGroupService.Builder builder14 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService15 = builder14.build();
        org.osiam.client.OsiamGroupService osiamGroupService16 = builder14.build();
        org.osiam.client.OsiamGroupService osiamGroupService17 = builder14.build();
        javax.ws.rs.client.WebTarget webTarget18 = osiamGroupService17.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder20 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService21 = builder20.build();
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        boolean boolean29 = accessToken28.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet30 = accessToken28.getScopes();
        java.lang.String str31 = osiamGroupService21.extractErrorMessageForbidden(accessToken28);
        boolean boolean32 = accessToken28.isClientOnly();
        boolean boolean33 = accessToken28.isClientOnly();
        java.lang.String str34 = accessToken28.toString();
        java.lang.String str35 = osiamGroupService17.extractErrorMessageForbidden(accessToken28);
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken42 = builder41.build();
        boolean boolean43 = accessToken42.isRefreshTokenExpired();
        boolean boolean44 = accessToken42.isClientOnly();
        java.lang.String str45 = accessToken42.getRefreshToken();
        boolean boolean46 = accessToken42.isExpired();
        boolean boolean47 = accessToken42.isRefreshTokenExpired();
        java.lang.String str48 = accessToken42.getToken();
        java.util.Date date49 = accessToken42.getRefreshTokenExpiresAt();
        boolean boolean50 = accessToken42.isClientOnly();
        java.lang.String str51 = osiamGroupService17.extractErrorMessageForbidden(accessToken42);
        java.lang.String str52 = accessToken42.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user53 = osiamConnector11.getUser("ascending", accessToken42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(osiamConnector11);
        org.junit.Assert.assertNotNull(osiamGroupService15);
        org.junit.Assert.assertNotNull(osiamGroupService16);
        org.junit.Assert.assertNotNull(osiamGroupService17);
        org.junit.Assert.assertNotNull(webTarget18);
        org.junit.Assert.assertNotNull(osiamGroupService21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(scopeSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Insufficient scopes: []" + "'", str31, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str34, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Bearer " + "'", str48, "Bearer ");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Insufficient scopes: []" + "'", str51, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
    }

    @Test
    public void test06512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06512");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder1.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService6 = builder1.build();
        org.osiam.client.oauth.Scope[] scopeArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI8 = authService6.getAuthorizationUri(scopeArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Can't create the login uri: redirect URI was not set.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
    }

    @Test
    public void test06513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06513");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.OsiamGroupService.Builder builder12 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService13 = builder12.build();
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        boolean boolean21 = accessToken20.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet22 = accessToken20.getScopes();
        java.lang.String str23 = osiamGroupService13.extractErrorMessageForbidden(accessToken20);
        boolean boolean24 = accessToken20.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken20);
        java.lang.String str26 = authService10.extractErrorMessageForbidden(accessToken20);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken33);
        java.util.Date date35 = accessToken33.getExpiresAt();
        boolean boolean36 = accessToken33.isClientOnly();
        boolean boolean37 = accessToken33.isClientOnly();
        java.lang.String str38 = authService10.extractErrorMessageForbidden(accessToken33);
        org.osiam.client.oauth.AccessToken.Builder builder40 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date41 = null;
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setRefreshTokenExpiresAt(date41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder40.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken45 = builder44.build();
        boolean boolean46 = accessToken45.isRefreshTokenExpired();
        java.lang.String str47 = accessToken45.getUserId();
        java.lang.String str48 = accessToken45.getClientId();
        java.util.Date date49 = accessToken45.getRefreshTokenExpiresAt();
        java.lang.String str50 = authService10.extractErrorMessageForbidden(accessToken45);
        java.lang.Class<?> wildcardClass51 = authService10.getClass();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(osiamGroupService13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(scopeSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Insufficient scopes: []" + "'", str23, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Insufficient scopes: []" + "'", str26, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Insufficient scopes: []" + "'", str38, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(accessToken45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Insufficient scopes: []" + "'", str50, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test06514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06514");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder12.setEndpoint("Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setAuthServerEndpoint("PATCH");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test06515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06515");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getEmptyValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        java.util.Collection<java.lang.Object> objCollection6 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer7 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer8 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer9 = scopeDeserializer0.getDelegatee();
        boolean boolean10 = scopeDeserializer0.isCachable();
        boolean boolean11 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet12 = scopeDeserializer0.getNullValue();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertNull(objCollection6);
        org.junit.Assert.assertNull(wildcardJsonDeserializer7);
        org.junit.Assert.assertNull(wildcardJsonDeserializer8);
        org.junit.Assert.assertNull(wildcardJsonDeserializer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(scopeSet12);
    }

    @Test
    public void test06516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06516");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.descending("hi!");
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        java.lang.String str16 = query15.toString();
        java.lang.String str17 = query15.toString();
        java.lang.String str18 = query15.getSortBy();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken27 = builder24.build();
        boolean boolean28 = accessToken27.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult29 = osiamGroupService3.searchResources(query15, accessToken27);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str16, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str17, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test06517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06517");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("PATCH");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.resources.scim.User user5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        java.util.Date date13 = accessToken12.getExpiresAt();
        java.lang.String str14 = accessToken12.getUserName();
        java.lang.String str15 = accessToken12.getType();
        java.lang.String str16 = accessToken12.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user17 = osiamUserService3.replaceUser("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: descending", user5, accessToken12);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test06518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06518");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.NoResultException: authorization_code");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        java.lang.String str12 = accessToken10.getUserId();
        java.lang.String str13 = accessToken10.getClientId();
        boolean boolean14 = accessToken10.isClientOnly();
        java.lang.String str15 = accessToken10.getClientId();
        java.lang.String str16 = accessToken10.getRefreshToken();
        boolean boolean17 = accessToken10.isRefreshTokenExpired();
        boolean boolean18 = accessToken10.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            osiamUserService2.deleteUser("org.osiam.client.exception.ForbiddenException: DELETE", accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test06519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06519");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.getUserName();
        java.lang.String str15 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService2.targetEndpoint;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group19 = osiamGroupService2.mapToResource("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget16);
        org.junit.Assert.assertNotNull(webTarget17);
    }

    @Test
    public void test06520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06520");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Cannot connect to server");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder4 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query11 = queryBuilder8.build();
        org.osiam.client.query.Query query12 = query11.nextPage();
        java.lang.String str13 = query12.getSortBy();
        org.osiam.client.query.Query query14 = query12.nextPage();
        org.osiam.client.AuthService.Builder builder16 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder18 = builder16.setClientId("ME");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService21 = builder20.build();
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        boolean boolean29 = accessToken28.isRefreshTokenExpired();
        boolean boolean30 = accessToken28.isClientOnly();
        java.lang.String str31 = accessToken28.getClientId();
        java.lang.String str32 = authService21.extractErrorMessageForbidden(accessToken28);
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        java.util.Date date44 = accessToken43.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder34.setRefreshTokenExpiresAt(date44);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder34.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder34.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder51 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date52 = null;
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setRefreshTokenExpiresAt(date52);
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder51.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken56 = builder55.build();
        boolean boolean57 = accessToken56.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet58 = accessToken56.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder49.addScopes(scopeSet58);
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.lang.String str62 = accessToken60.getType();
        java.lang.String str63 = authService21.extractErrorMessageForbidden(accessToken60);
        java.lang.String str64 = accessToken60.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult65 = osiamUserService3.searchUsers(query12, accessToken60);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(query11);
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(query14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(authService21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(accessToken56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(scopeSet58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "descending" + "'", str62, "descending");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Insufficient scopes: []" + "'", str63, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Bearer " + "'", str64, "Bearer ");
    }

    @Test
    public void test06521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06521");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        boolean boolean4 = scopeSerializer0.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass5 = scopeSerializer0.handledType();
        org.osiam.client.helper.ScopeSerializer scopeSerializer6 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean7 = scopeSerializer6.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer8 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer9 = scopeSerializer6.unwrappingSerializer(nameTransformer8);
        boolean boolean10 = scopeSerializer6.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer11 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer12 = scopeSerializer6.unwrappingSerializer(nameTransformer11);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper13 = null;
        com.fasterxml.jackson.databind.JavaType javaType14 = null;
        scopeSerializer6.acceptJsonFormatVisitor(jsonFormatVisitorWrapper13, javaType14);
        boolean boolean16 = scopeSerializer6.usesObjectId();
        boolean boolean17 = scopeSerializer6.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider18 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer19 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean20 = scopeSerializer19.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass21 = scopeSerializer19.handledType();
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        java.util.Date date29 = accessToken28.getExpiresAt();
        java.lang.String str30 = accessToken28.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet31 = accessToken28.getScopes();
        boolean boolean32 = scopeSerializer19.isEmpty(scopeSet31);
        boolean boolean33 = scopeSerializer6.isEmpty(serializerProvider18, scopeSet31);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider34 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer35 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken42 = builder41.build();
        boolean boolean43 = accessToken42.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet44 = accessToken42.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator45 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider46 = null;
        scopeSerializer35.serialize(scopeSet44, jsonGenerator45, serializerProvider46);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider48 = null;
        org.osiam.client.oauth.AccessToken.Builder builder50 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date51 = null;
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.setRefreshTokenExpiresAt(date51);
        org.osiam.client.oauth.AccessToken.Builder builder54 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date55 = null;
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setRefreshTokenExpiresAt(date55);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder54.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken59 = builder58.build();
        java.util.Date date60 = accessToken59.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder50.setRefreshTokenExpiresAt(date60);
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder50.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder50.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder67 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date68 = null;
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder67.setRefreshTokenExpiresAt(date68);
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder67.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken72 = builder71.build();
        boolean boolean73 = accessToken72.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet74 = accessToken72.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder65.addScopes(scopeSet74);
        boolean boolean76 = scopeSerializer35.isEmpty(serializerProvider48, scopeSet74);
        boolean boolean77 = scopeSerializer6.isEmpty(serializerProvider34, scopeSet74);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator78 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider79 = null;
        scopeSerializer0.serialize(scopeSet74, jsonGenerator78, serializerProvider79);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(scopeSetClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(scopeSetClass21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(scopeSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(scopeSet44);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(accessToken59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(accessToken72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(scopeSet74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test06522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06522");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.getAttributes();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query41);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.toString();
        java.lang.String str57 = query55.toString();
        org.osiam.client.query.Query query58 = query55.nextPage();
        java.lang.String str59 = query55.toString();
        org.osiam.client.query.QueryBuilder queryBuilder60 = osiamConnector5.createQueryBuilder(query55);
        java.lang.String str61 = query55.getAttributes();
        java.lang.String str62 = query55.getAttributes();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Authorization" + "'", str42, "Authorization");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str56, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str57, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str59, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Authorization" + "'", str61, "Authorization");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Authorization" + "'", str62, "Authorization");
    }

    @Test
    public void test06523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06523");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("org.osiam.client.exception.InvalidAttributeException: refresh_token");
        org.osiam.client.OsiamConnector osiamConnector11 = builder10.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken13 = osiamConnector11.retrieveAccessToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(osiamConnector11);
    }

    @Test
    public void test06524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06524");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector9.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = osiamConnector9.createQueryBuilder();
        org.osiam.client.OsiamGroupService.Builder builder14 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService15 = builder14.build();
        org.osiam.client.OsiamGroupService osiamGroupService16 = builder14.build();
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken23);
        java.lang.String str25 = osiamGroupService16.extractErrorMessageForbidden(accessToken23);
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector9.deleteGroup("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConnectionInitializationException: PATCH", accessToken23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(osiamGroupService15);
        org.junit.Assert.assertNotNull(osiamGroupService16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
    }

    @Test
    public void test06525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06525");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getUserName();
        java.lang.String str12 = accessToken9.toString();
        java.lang.String str13 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.resources.scim.Group group15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        java.util.Date date23 = accessToken22.getExpiresAt();
        java.lang.String str24 = accessToken22.getUserName();
        java.lang.String str25 = accessToken22.toString();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken22);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group27 = osiamGroupService2.updateGroup("org.osiam.client.exception.UnauthorizedException: GET", group15, accessToken22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str12, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Insufficient scopes: []" + "'", str13, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str25, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test06526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06526");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setClientId("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder14 = builder8.setClientSecret("org.osiam.client.exception.NoResultException: authorization_code");
        org.osiam.client.OsiamConnector osiamConnector15 = builder14.build();
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        boolean boolean23 = accessToken22.isRefreshTokenExpired();
        java.lang.String str24 = accessToken22.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder25 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.descending("hi!");
        org.osiam.client.query.Query query34 = queryBuilder33.build();
        java.lang.String str35 = query34.toString();
        java.lang.String str36 = query34.getSortOrder();
        java.lang.String str37 = query34.getSortBy();
        java.lang.String str38 = query34.getFilter();
        java.lang.String str39 = query34.getSortOrder();
        java.lang.String str40 = query34.getAttributes();
        boolean boolean41 = accessToken22.equals((java.lang.Object) query34);
        org.osiam.client.OsiamConnector.Builder builder42 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder44 = builder42.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder46 = builder44.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder48 = builder46.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder50 = builder46.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder52 = builder46.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder54 = builder52.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder56 = builder52.setClientRedirectUri("PUT");
        boolean boolean57 = accessToken22.equals((java.lang.Object) builder56);
        java.lang.String str58 = accessToken22.getClientId();
        java.lang.String str59 = accessToken22.getToken();
        java.lang.String str60 = accessToken22.getRefreshToken();
        java.lang.String str61 = accessToken22.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector15.revokeAccessToken(accessToken22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(query34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str35, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "descending" + "'", str36, "descending");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "descending" + "'", str39, "descending");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Authorization" + "'", str40, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Bearer " + "'", str59, "Bearer ");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }

    @Test
    public void test06527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06527");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet62 = accessToken60.getScopes();
        boolean boolean63 = scopeSerializer0.isEmpty(serializerProvider53, scopeSet62);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass64 = scopeSerializer0.handledType();
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper65 = null;
        com.fasterxml.jackson.databind.JavaType javaType66 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper65, javaType66);
        boolean boolean68 = scopeSerializer0.isUnwrappingSerializer();
        boolean boolean69 = scopeSerializer0.usesObjectId();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(scopeSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(scopeSetClass64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test06528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06528");
        org.osiam.client.exception.OsiamClientException osiamClientException2 = new org.osiam.client.exception.OsiamClientException("Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]");
        org.osiam.client.exception.OsiamClientException osiamClientException3 = new org.osiam.client.exception.OsiamClientException("GET", (java.lang.Throwable) osiamClientException2);
    }

    @Test
    public void test06529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06529");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.getUserName();
        java.lang.String str15 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = osiamGroupService2.extractErrorMessageUnauthorized("org.osiam.client.exception.OsiamRequestException: hi!", statusType18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget16);
    }

    @Test
    public void test06530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06530");
        org.osiam.client.exception.ForbiddenException forbiddenException1 = new org.osiam.client.exception.ForbiddenException("org.osiam.client.exception.OsiamRequestException: hi!");
        org.osiam.client.exception.UnauthorizedException unauthorizedException3 = new org.osiam.client.exception.UnauthorizedException("org.osiam.client.exception.OsiamRequestException: hi!");
        forbiddenException1.addSuppressed((java.lang.Throwable) unauthorizedException3);
    }

    @Test
    public void test06531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06531");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.OsiamConnector.Builder builder9 = builder6.setClientId("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector osiamConnector10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        java.lang.String str19 = accessToken18.toString();
        java.lang.String str20 = accessToken18.getClientId();
        java.util.Date date21 = accessToken18.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector10.revokeAllAccessTokens("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken18);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(osiamConnector10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str19, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test06532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06532");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.getAttributes();
        java.lang.String str11 = query9.toString();
        java.lang.String str12 = query9.getSortBy();
        org.osiam.client.query.Query query13 = query9.nextPage();
        int int14 = query9.getCount();
        java.lang.String str15 = query9.getFilter();
        java.lang.String str16 = query9.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder17 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.startIndex(11L);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.descending("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Authorization" + "'", str10, "Authorization");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str11, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
    }

    @Test
    public void test06533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06533");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.resources.scim.UpdateUser updateUser5 = null;
        org.osiam.client.AuthService.Builder builder7 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientSecret("");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService authService16 = builder15.build();
        org.osiam.client.AuthService authService17 = builder15.build();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        boolean boolean25 = accessToken24.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet26 = accessToken24.getScopes();
        boolean boolean27 = accessToken24.isRefreshTokenExpired();
        boolean boolean28 = accessToken24.isExpired();
        java.util.Date date29 = accessToken24.getExpiresAt();
        java.lang.String str30 = authService17.extractErrorMessageForbidden(accessToken24);
        java.lang.String str31 = accessToken24.getRefreshToken();
        java.lang.String str32 = accessToken24.getUserName();
        java.lang.String str33 = accessToken24.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user34 = osiamUserService3.updateUser("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.OsiamClientException: ME", updateUser5, accessToken24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(authService16);
        org.junit.Assert.assertNotNull(authService17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(scopeSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Insufficient scopes: []" + "'", str30, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test06534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06534");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setClientRedirectUri("org.osiam.client.exception.OsiamClientException: descending");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientId("ascending");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=GET, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test06535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06535");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientId("org.osiam.client.exception.ConflictException: org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.count((int) (short) 0);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder10.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.ascending("password");
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder16.count((int) (short) -1);
        org.osiam.client.query.Query query21 = queryBuilder16.build();
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector5.createQueryBuilder(query21);
        org.osiam.client.OsiamGroupService.Builder builder24 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService25 = builder24.build();
        org.osiam.client.OsiamGroupService osiamGroupService26 = builder24.build();
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken33);
        java.lang.String str35 = osiamGroupService26.extractErrorMessageForbidden(accessToken33);
        java.util.Date date36 = accessToken33.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken33);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken33);
        java.lang.String str39 = accessToken33.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser40 = osiamConnector5.getCurrentUserBasic(accessToken33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(osiamGroupService25);
        org.junit.Assert.assertNotNull(osiamGroupService26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test06536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06536");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector5 = builder0.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.descending("hi!");
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder14.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Cannot connect to server");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.startIndex((long) (byte) 10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.count(0);
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        org.osiam.client.query.Query query25 = query24.previousPage();
        org.osiam.client.query.Query query26 = query25.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder27 = osiamConnector5.createQueryBuilder(query25);
        org.osiam.client.OsiamGroupService.Builder builder30 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService31 = builder30.build();
        org.osiam.client.OsiamGroupService osiamGroupService32 = builder30.build();
        javax.ws.rs.client.WebTarget webTarget33 = osiamGroupService32.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget34 = osiamGroupService32.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder36 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date37 = null;
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setRefreshTokenExpiresAt(date37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder36.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken41 = builder40.build();
        boolean boolean42 = accessToken41.isRefreshTokenExpired();
        java.lang.String str43 = accessToken41.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet44 = accessToken41.getScopes();
        java.lang.String str45 = osiamGroupService32.extractErrorMessageForbidden(accessToken41);
        java.lang.String str46 = accessToken41.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user47 = osiamConnector5.getUser("Insufficient scopes: [null, PATCH, GET, ME, ADMIN, GET POST PUT PATCH DELETE, PUT]", accessToken41);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertNotNull(query25);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(osiamGroupService31);
        org.junit.Assert.assertNotNull(osiamGroupService32);
        org.junit.Assert.assertNotNull(webTarget33);
        org.junit.Assert.assertNotNull(webTarget34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(accessToken41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(scopeSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Insufficient scopes: []" + "'", str45, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test06537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06537");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet62 = accessToken60.getScopes();
        boolean boolean63 = scopeSerializer0.isEmpty(serializerProvider53, scopeSet62);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass64 = scopeSerializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer65 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer66 = scopeSerializer0.unwrappingSerializer(nameTransformer65);
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer67 = scopeSerializer0.getDelegatee();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass68 = scopeSerializer0.handledType();
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer69 = scopeSerializer0.getDelegatee();
        boolean boolean70 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer71 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer72 = scopeSerializer0.unwrappingSerializer(nameTransformer71);
        org.osiam.client.helper.ScopeSerializer scopeSerializer73 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean74 = scopeSerializer73.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer75 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer76 = scopeSerializer73.unwrappingSerializer(nameTransformer75);
        boolean boolean77 = scopeSerializer73.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass78 = scopeSerializer73.handledType();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer79 = scopeSetJsonSerializer72.replaceDelegatee((com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeSerializer73);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(scopeSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(scopeSetClass64);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer66);
        org.junit.Assert.assertNull(wildcardJsonSerializer67);
        org.junit.Assert.assertNull(scopeSetClass68);
        org.junit.Assert.assertNull(wildcardJsonSerializer69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(scopeSetClass78);
    }

    @Test
    public void test06538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06538");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("hi!");
        org.osiam.client.AuthService authService2 = builder1.build();
        org.osiam.client.AuthService.Builder builder4 = builder1.setClientSecret("org.osiam.client.exception.OsiamClientException: hi!");
        org.osiam.client.AuthService authService5 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.addScope(scope8);
        org.osiam.client.oauth.Scope scope10 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException12 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean13 = scope10.equals((java.lang.Object) invalidAttributeException12);
        java.lang.String str14 = scope10.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder7.addScope(scope10);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshToken("GET");
        org.osiam.client.OsiamGroupService.Builder builder25 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService26 = builder25.build();
        org.osiam.client.OsiamGroupService osiamGroupService27 = builder25.build();
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date30 = null;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setRefreshTokenExpiresAt(date30);
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken34 = builder33.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken34);
        java.lang.String str36 = osiamGroupService27.extractErrorMessageForbidden(accessToken34);
        java.util.Date date37 = accessToken34.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder21.setRefreshTokenExpiresAt(date37);
        org.osiam.client.oauth.AccessToken accessToken39 = builder21.build();
        org.osiam.client.query.QueryBuilder queryBuilder40 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder42 = queryBuilder40.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder44 = queryBuilder42.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder46 = queryBuilder42.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.descending("hi!");
        org.osiam.client.query.Query query49 = queryBuilder48.build();
        java.lang.String str50 = query49.toString();
        java.lang.String str51 = query49.getSortOrder();
        java.lang.String str52 = query49.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder53 = new org.osiam.client.query.QueryBuilder(query49);
        org.osiam.client.query.Query query54 = query49.nextPage();
        java.lang.String str55 = query49.toString();
        boolean boolean56 = accessToken39.equals((java.lang.Object) str55);
        java.lang.String str57 = accessToken39.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            authService5.revokeAccessToken(accessToken39);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(authService2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(authService5);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(scope10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GET" + "'", str14, "GET");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(osiamGroupService26);
        org.junit.Assert.assertNotNull(osiamGroupService27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(accessToken34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(queryBuilder46);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(query49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str50, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "descending" + "'", str51, "descending");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(query54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str55, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
    }

    @Test
    public void test06539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06539");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = osiamGroupService3.extractErrorMessage("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME", statusType5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
    }

    @Test
    public void test06540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06540");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setResourceServerEndpoint("PATCH");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.descending("hi!");
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        java.lang.String str16 = query15.toString();
        java.lang.String str17 = query15.getSortOrder();
        java.lang.String str18 = query15.getSortBy();
        java.lang.String str19 = query15.getFilter();
        java.lang.String str20 = query15.getSortOrder();
        java.lang.String str21 = query15.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder(query15);
        long long23 = query15.getStartIndex();
        org.osiam.client.query.Query query24 = query15.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder25 = new org.osiam.client.query.QueryBuilder(query24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        boolean boolean33 = accessToken32.isRefreshTokenExpired();
        java.lang.String str34 = accessToken32.getUserId();
        java.lang.String str35 = accessToken32.getToken();
        java.lang.String str36 = accessToken32.getClientId();
        boolean boolean37 = accessToken32.isExpired();
        java.util.Date date38 = accessToken32.getExpiresAt();
        java.lang.String str39 = accessToken32.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult40 = osiamConnector5.searchUsers(query24, accessToken32);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str16, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "descending" + "'", str17, "descending");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "descending" + "'", str20, "descending");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Authorization" + "'", str21, "Authorization");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Bearer " + "'", str35, "Bearer ");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test06541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06541");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Cannot connect to server");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.UpdateUser updateUser4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        java.lang.String str13 = accessToken11.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder14 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder16.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.descending("hi!");
        org.osiam.client.query.Query query23 = queryBuilder22.build();
        java.lang.String str24 = query23.toString();
        java.lang.String str25 = query23.getSortOrder();
        java.lang.String str26 = query23.getSortBy();
        java.lang.String str27 = query23.getFilter();
        java.lang.String str28 = query23.getSortOrder();
        java.lang.String str29 = query23.getAttributes();
        boolean boolean30 = accessToken11.equals((java.lang.Object) query23);
        org.osiam.client.OsiamConnector.Builder builder31 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder33 = builder31.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder35 = builder33.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder37 = builder35.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder39 = builder35.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder41 = builder35.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder43 = builder41.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder45 = builder41.setClientRedirectUri("PUT");
        boolean boolean46 = accessToken11.equals((java.lang.Object) builder45);
        java.lang.String str47 = accessToken11.getClientId();
        boolean boolean48 = accessToken11.isClientOnly();
        java.lang.String str49 = accessToken11.getUserId();
        java.lang.String str50 = accessToken11.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user51 = osiamUserService2.updateUser("Cannot connect to server", updateUser4, accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(query23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str24, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "descending" + "'", str25, "descending");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "descending" + "'", str28, "descending");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Authorization" + "'", str29, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
    }

    @Test
    public void test06542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06542");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder1.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        java.util.Date date19 = accessToken18.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder9.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder7.setRefreshTokenExpiresAt(date19);
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamClientException: descending");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test06543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06543");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Cannot connect to server");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.resources.scim.User user4 = null;
        org.osiam.client.AuthService.Builder builder6 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientId("ME");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService11 = builder10.build();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        boolean boolean19 = accessToken18.isRefreshTokenExpired();
        boolean boolean20 = accessToken18.isClientOnly();
        java.lang.String str21 = accessToken18.getClientId();
        java.lang.String str22 = authService11.extractErrorMessageForbidden(accessToken18);
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        java.util.Date date34 = accessToken33.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder24.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder24.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder24.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder41 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date42 = null;
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setRefreshTokenExpiresAt(date42);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder41.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken46 = builder45.build();
        boolean boolean47 = accessToken46.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet48 = accessToken46.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder39.addScopes(scopeSet48);
        org.osiam.client.oauth.AccessToken accessToken50 = builder49.build();
        boolean boolean51 = accessToken50.isRefreshTokenExpired();
        java.lang.String str52 = accessToken50.getType();
        java.lang.String str53 = authService11.extractErrorMessageForbidden(accessToken50);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken50);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user55 = osiamUserService3.createUser(user4, accessToken50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(authService11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Insufficient scopes: []" + "'", str22, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(accessToken46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(scopeSet48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(accessToken50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "descending" + "'", str52, "descending");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Insufficient scopes: []" + "'", str53, "Insufficient scopes: []");
    }

    @Test
    public void test06544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06544");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientSecret("");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        boolean boolean17 = accessToken15.isClientOnly();
        java.lang.String str18 = accessToken15.getClientId();
        java.lang.String str19 = accessToken15.getUserId();
        java.lang.String str20 = accessToken15.getClientId();
        java.lang.String str21 = accessToken15.getRefreshToken();
        java.lang.String str22 = accessToken15.getClientId();
        org.osiam.client.AuthService.Builder builder24 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder26 = builder24.setClientId("ME");
        org.osiam.client.AuthService.Builder builder28 = builder26.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder30 = builder28.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder32 = builder30.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService33 = builder32.build();
        org.osiam.client.oauth.AccessToken.Builder builder35 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date36 = null;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setRefreshTokenExpiresAt(date36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder35.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken40 = builder39.build();
        boolean boolean41 = accessToken40.isRefreshTokenExpired();
        java.lang.String str42 = accessToken40.getUserId();
        java.lang.String str43 = accessToken40.getToken();
        java.lang.String str44 = authService33.extractErrorMessageForbidden(accessToken40);
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str46 = scope45.getValue();
        java.lang.String str47 = scope45.toString();
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray49 = new org.osiam.client.oauth.Scope[] { scope45, scope48 };
        java.net.URI uRI50 = authService33.getAuthorizationUri(scopeArray49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setRefreshTokenExpiresAt(date53);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder52.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken59 = builder56.build();
        java.lang.String str60 = accessToken59.getRefreshToken();
        java.lang.String str61 = authService33.extractErrorMessageForbidden(accessToken59);
        org.osiam.client.AuthService.Builder builder63 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder65 = builder63.setClientId("ME");
        org.osiam.client.AuthService.Builder builder67 = builder65.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder69 = builder67.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder71 = builder69.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder73 = builder69.setClientId("");
        org.osiam.client.AuthService.Builder builder75 = builder69.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService76 = builder75.build();
        org.osiam.client.oauth.Scope scope78 = new org.osiam.client.oauth.Scope("");
        java.lang.String str79 = scope78.getValue();
        org.osiam.client.oauth.Scope scope81 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.Scope[] scopeArray82 = new org.osiam.client.oauth.Scope[] { scope78, scope81 };
        java.net.URI uRI83 = authService76.getAuthorizationUri(scopeArray82);
        java.net.URI uRI84 = authService33.getAuthorizationUri(scopeArray82);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken85 = osiamConnector7.refreshAccessToken(accessToken15, scopeArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(authService33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(accessToken40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Bearer " + "'", str43, "Bearer ");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Insufficient scopes: []" + "'", str44, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PATCH" + "'", str46, "PATCH");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PATCH" + "'", str47, "PATCH");
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertNotNull(scopeArray49);
        org.junit.Assert.assertNotNull(uRI50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(accessToken59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Insufficient scopes: []" + "'", str61, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(authService76);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(scopeArray82);
        org.junit.Assert.assertNotNull(uRI83);
        org.junit.Assert.assertNotNull(uRI84);
    }

    @Test
    public void test06545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06545");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder11 = builder7.setClientId("");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientSecret("org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388");
        org.osiam.client.AuthService authService14 = builder13.build();
        org.osiam.client.oauth.AccessToken accessToken15 = null;
        // The following exception was thrown during execution in test generation
        try {
            authService14.revokeAccessToken(accessToken15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(authService14);
    }

    @Test
    public void test06546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06546");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group6 = osiamGroupService4.mapToResource("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
    }

    @Test
    public void test06547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06547");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setResourceServerEndpoint("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientRedirectUri("Authorization");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientId("ADMIN");
        org.osiam.client.OsiamConnector.Builder builder12 = builder2.setAuthServerEndpoint("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test06548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06548");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("ascending");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.resources.scim.User user4 = null;
        org.osiam.client.oauth.AccessToken accessToken5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user6 = osiamUserService3.createUser(user4, accessToken5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
    }

    @Test
    public void test06549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06549");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        boolean boolean4 = scopeSetJsonSerializer3.isUnwrappingSerializer();
        boolean boolean5 = scopeSetJsonSerializer3.usesObjectId();
        boolean boolean6 = scopeSetJsonSerializer3.isUnwrappingSerializer();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test06550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06550");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass4 = scopeSetJsonSerializer3.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer6 = scopeSetJsonSerializer3.unwrappingSerializer(nameTransformer5);
        java.lang.Class<?> wildcardClass7 = scopeSetJsonSerializer3.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertNull(scopeSetClass4);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test06551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06551");
        org.osiam.client.exception.NoResultException noResultException1 = new org.osiam.client.exception.NoResultException("org.osiam.client.exception.UnauthorizedException: GET");
    }

    @Test
    public void test06552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06552");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setResourceServerEndpoint("GET POST PUT PATCH DELETE");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken24);
        java.lang.String str26 = accessToken24.getRefreshToken();
        java.util.Date date27 = accessToken24.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser28 = osiamConnector17.getCurrentUserBasic(accessToken24);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test06553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06553");
        org.osiam.client.exception.OsiamRequestException osiamRequestException2 = new org.osiam.client.exception.OsiamRequestException(10, "");
    }

    @Test
    public void test06554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06554");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer7 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer8 = scopeDeserializer0.unwrappingDeserializer(nameTransformer7);
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer9 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass10 = scopeDeserializer9.handledType();
        boolean boolean11 = scopeDeserializer9.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet12 = scopeDeserializer9.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader13 = scopeDeserializer9.getObjectIdReader();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer14 = scopeDeserializer9.getDelegatee();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer15 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer16 = scopeDeserializer9.unwrappingDeserializer(nameTransformer15);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer17 = scopeDeserializer0.replaceDelegatee(scopeSetJsonDeserializer16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(scopeSet12);
        org.junit.Assert.assertNull(objectIdReader13);
        org.junit.Assert.assertNull(wildcardJsonDeserializer14);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer16);
    }

    @Test
    public void test06555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06555");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Cannot connect to server");
        org.osiam.client.AuthService.Builder builder11 = builder7.setClientSecret("2024-03-22T13:51:20.388");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService.Builder builder15 = builder11.setClientRedirectUri("ME");
        org.osiam.client.AuthService authService16 = builder15.build();
        org.osiam.client.AuthService.Builder builder18 = builder15.setClientRedirectUri("Query [attributes=null, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=100]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(authService16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test06556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06556");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.getSortOrder();
        java.lang.String str20 = query17.getSortBy();
        java.lang.String str21 = query17.getFilter();
        java.lang.String str22 = query17.getSortOrder();
        java.lang.String str23 = query17.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder24 = new org.osiam.client.query.QueryBuilder(query17);
        long long25 = query17.getStartIndex();
        org.osiam.client.query.Query query26 = query17.nextPage();
        long long27 = query26.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder28 = osiamConnector7.createQueryBuilder(query26);
        org.osiam.client.query.QueryBuilder queryBuilder29 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder31.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.descending("hi!");
        org.osiam.client.query.Query query38 = queryBuilder37.build();
        java.lang.String str39 = query38.getAttributes();
        java.lang.String str40 = query38.toString();
        java.lang.String str41 = query38.getSortBy();
        org.osiam.client.query.Query query42 = query38.nextPage();
        int int43 = query42.getCount();
        long long44 = query42.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder45 = new org.osiam.client.query.QueryBuilder(query42);
        org.osiam.client.query.QueryBuilder queryBuilder46 = osiamConnector7.createQueryBuilder(query42);
        org.osiam.client.query.QueryBuilder queryBuilder47 = osiamConnector7.createQueryBuilder();
        org.osiam.resources.scim.UpdateGroup updateGroup49 = null;
        org.osiam.client.OsiamGroupService.Builder builder51 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService52 = builder51.build();
        org.osiam.client.oauth.AccessToken.Builder builder54 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date55 = null;
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setRefreshTokenExpiresAt(date55);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder54.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken59 = builder58.build();
        boolean boolean60 = accessToken59.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet61 = accessToken59.getScopes();
        java.lang.String str62 = osiamGroupService52.extractErrorMessageForbidden(accessToken59);
        boolean boolean63 = accessToken59.isClientOnly();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet64 = accessToken59.getScopes();
        boolean boolean65 = accessToken59.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group66 = osiamConnector7.updateGroup("ascending", updateGroup49, accessToken59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "descending" + "'", str19, "descending");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "descending" + "'", str22, "descending");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Authorization" + "'", str23, "Authorization");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 11L + "'", long27 == 11L);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(query38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Authorization" + "'", str39, "Authorization");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str40, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 11L + "'", long44 == 11L);
        org.junit.Assert.assertNotNull(queryBuilder46);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(osiamGroupService52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(accessToken59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(scopeSet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Insufficient scopes: []" + "'", str62, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(scopeSet64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test06557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06557");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        boolean boolean18 = accessToken17.isRefreshTokenExpired();
        java.lang.String str19 = authService10.extractErrorMessageForbidden(accessToken17);
        org.osiam.client.AuthService.Builder builder21 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientId("ME");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService26 = builder25.build();
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        boolean boolean34 = accessToken33.isRefreshTokenExpired();
        java.lang.String str35 = accessToken33.getUserId();
        java.lang.String str36 = accessToken33.getClientId();
        boolean boolean37 = accessToken33.isClientOnly();
        java.lang.String str38 = authService26.extractErrorMessageForbidden(accessToken33);
        boolean boolean39 = accessToken33.isExpired();
        java.lang.String str40 = authService10.extractErrorMessageForbidden(accessToken33);
        org.osiam.client.oauth.AccessToken.Builder builder43 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date44 = null;
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setRefreshTokenExpiresAt(date44);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder43.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken48 = builder47.build();
        java.lang.String str49 = accessToken48.toString();
        // The following exception was thrown during execution in test generation
        try {
            authService10.revokeAllAccessTokens("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken48);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(authService26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Insufficient scopes: []" + "'", str38, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Insufficient scopes: []" + "'", str40, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(accessToken48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str49, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test06558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06558");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.getSortOrder();
        java.lang.String str30 = query24.getAttributes();
        boolean boolean31 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.OsiamConnector.Builder builder32 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder34 = builder32.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder36 = builder34.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder38 = builder36.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder40 = builder36.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder42 = builder36.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder44 = builder42.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder46 = builder42.setClientRedirectUri("PUT");
        boolean boolean47 = accessToken12.equals((java.lang.Object) builder46);
        java.lang.String str48 = osiamGroupService5.extractErrorMessageForbidden(accessToken12);
        javax.ws.rs.core.Response.StatusType statusType50 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = osiamGroupService5.extractErrorMessageUnauthorized("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: descending", statusType50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "descending" + "'", str29, "descending");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Authorization" + "'", str30, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Insufficient scopes: []" + "'", str48, "Insufficient scopes: []");
    }

    @Test
    public void test06559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06559");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("ME");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamConnector.Builder builder4 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector11 = builder10.build();
        org.osiam.client.query.QueryBuilder queryBuilder12 = osiamConnector11.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = osiamConnector11.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder14 = osiamConnector11.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.getSortOrder();
        java.lang.String str30 = query24.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder31 = new org.osiam.client.query.QueryBuilder(query24);
        long long32 = query24.getStartIndex();
        org.osiam.client.query.Query query33 = query24.nextPage();
        java.lang.String str34 = query24.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder35 = new org.osiam.client.query.QueryBuilder(query24);
        java.lang.String str36 = query24.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder37 = osiamConnector11.createQueryBuilder(query24);
        org.osiam.client.query.Query query38 = query24.nextPage();
        org.osiam.client.query.Query query39 = query38.nextPage();
        int int40 = query38.getCount();
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.lang.String str49 = accessToken47.getUserId();
        java.lang.String str50 = accessToken47.getClientId();
        java.lang.String str51 = accessToken47.getClientId();
        java.lang.String str52 = accessToken47.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult53 = osiamGroupService3.searchResources(query38, accessToken47);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(osiamConnector11);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "descending" + "'", str29, "descending");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Authorization" + "'", str30, "Authorization");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(query33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Authorization" + "'", str36, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(query38);
        org.junit.Assert.assertNotNull(query39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str52, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test06560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06560");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientSecret("GET");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setEndpoint("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector osiamConnector19 = builder16.build();
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken29 = builder26.build();
        java.util.Date date30 = accessToken29.getExpiresAt();
        java.util.Date date31 = accessToken29.getRefreshTokenExpiresAt();
        java.lang.String str32 = accessToken29.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector19.revokeAllAccessTokens("Insufficient scopes: [Authorization, GET, GET POST PUT PATCH DELETE, PUT]", accessToken29);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test06561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06561");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder23 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.descending("hi!");
        org.osiam.client.query.Query query32 = queryBuilder31.build();
        java.lang.String str33 = query32.toString();
        java.lang.String str34 = query32.getSortOrder();
        java.lang.String str35 = query32.getSortBy();
        java.lang.String str36 = query32.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder37 = osiamConnector7.createQueryBuilder(query32);
        org.osiam.client.OsiamGroupService.Builder builder39 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService40 = builder39.build();
        javax.ws.rs.client.WebTarget webTarget41 = osiamGroupService40.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget42 = osiamGroupService40.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget43 = osiamGroupService40.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget44 = osiamGroupService40.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder46 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date47 = null;
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.setRefreshTokenExpiresAt(date47);
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder46.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken51 = builder50.build();
        boolean boolean52 = accessToken51.isRefreshTokenExpired();
        boolean boolean53 = accessToken51.isClientOnly();
        java.lang.String str54 = accessToken51.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet55 = accessToken51.getScopes();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken51);
        java.lang.String str57 = osiamGroupService40.extractErrorMessageForbidden(accessToken51);
        boolean boolean58 = accessToken51.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user59 = osiamConnector7.getCurrentUser(accessToken51);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(query32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str33, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "descending" + "'", str34, "descending");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(osiamGroupService40);
        org.junit.Assert.assertNotNull(webTarget41);
        org.junit.Assert.assertNotNull(webTarget42);
        org.junit.Assert.assertNotNull(webTarget43);
        org.junit.Assert.assertNotNull(webTarget44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(accessToken51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(scopeSet55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Insufficient scopes: []" + "'", str57, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test06562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06562");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientId("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = osiamConnector5.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        java.util.Date date14 = accessToken13.getExpiresAt();
        java.lang.String str15 = accessToken13.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        boolean boolean24 = accessToken23.isRefreshTokenExpired();
        boolean boolean25 = accessToken23.isClientOnly();
        java.lang.String str26 = accessToken23.getClientId();
        boolean boolean27 = accessToken23.isClientOnly();
        boolean boolean28 = accessToken13.equals((java.lang.Object) accessToken23);
        java.lang.String str29 = accessToken23.getUserId();
        boolean boolean30 = accessToken23.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken31 = osiamConnector5.validateAccessToken(accessToken23);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test06563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06563");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService3.targetEndpoint;
        org.osiam.client.AuthService.Builder builder16 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder18 = builder16.setClientId("ME");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService21 = builder20.build();
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        boolean boolean29 = accessToken28.isRefreshTokenExpired();
        boolean boolean30 = accessToken28.isClientOnly();
        java.lang.String str31 = accessToken28.getClientId();
        java.lang.String str32 = authService21.extractErrorMessageForbidden(accessToken28);
        java.lang.String str33 = accessToken28.getUserId();
        java.lang.String str34 = accessToken28.getClientId();
        java.lang.String str35 = osiamGroupService3.extractErrorMessageForbidden(accessToken28);
        org.osiam.client.query.QueryBuilder queryBuilder36 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder42 = queryBuilder38.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder44 = queryBuilder42.descending("hi!");
        org.osiam.client.query.Query query45 = queryBuilder44.build();
        java.lang.String str46 = query45.toString();
        java.lang.String str47 = query45.getSortOrder();
        java.lang.String str48 = query45.getSortBy();
        java.lang.String str49 = query45.getSortBy();
        java.lang.String str50 = query45.getFilter();
        java.lang.String str51 = query45.getFilter();
        java.lang.String str52 = query45.getFilter();
        org.osiam.client.oauth.AccessToken.Builder builder54 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date55 = null;
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setRefreshTokenExpiresAt(date55);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder54.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken59 = builder58.build();
        boolean boolean60 = accessToken59.isRefreshTokenExpired();
        java.lang.String str61 = accessToken59.getUserId();
        java.lang.String str62 = accessToken59.getToken();
        java.util.Date date63 = accessToken59.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken59);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult65 = osiamGroupService3.searchGroups(query45, accessToken59);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(authService21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(query45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str46, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "descending" + "'", str47, "descending");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(accessToken59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Bearer " + "'", str62, "Bearer ");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test06564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06564");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope10 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str11 = scope10.toString();
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder5.addScope(scope10);
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setClientId("ME");
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder18.setUserId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken31 = builder30.build();
        java.lang.Object obj32 = null;
        boolean boolean33 = accessToken31.equals(obj32);
        boolean boolean34 = accessToken31.isExpired();
        java.util.Date date35 = accessToken31.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder18.setExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder5.setExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder39 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.addScope(scope40);
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException44 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean45 = scope42.equals((java.lang.Object) invalidAttributeException44);
        java.lang.String str46 = scope42.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder39.addScope(scope42);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.setUserId("");
        org.osiam.client.oauth.Scope scope52 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.addScope(scope52);
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.setClientId("GET");
        org.osiam.client.oauth.AccessToken.Builder builder57 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date58 = null;
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setRefreshTokenExpiresAt(date58);
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder57.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken62 = builder61.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken62);
        java.util.Date date64 = accessToken62.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder55.setExpiresAt(date64);
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder55.setClientId("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder69 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date70 = null;
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder69.setRefreshTokenExpiresAt(date70);
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder69.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder69.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder77 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date78 = null;
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder77.setRefreshTokenExpiresAt(date78);
        org.osiam.client.oauth.AccessToken.Builder builder81 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date82 = null;
        org.osiam.client.oauth.AccessToken.Builder builder83 = builder81.setRefreshTokenExpiresAt(date82);
        org.osiam.client.oauth.AccessToken.Builder builder85 = builder81.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken86 = builder85.build();
        java.util.Date date87 = accessToken86.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder88 = builder77.setRefreshTokenExpiresAt(date87);
        org.osiam.client.oauth.AccessToken.Builder builder89 = builder75.setRefreshTokenExpiresAt(date87);
        org.osiam.client.oauth.AccessToken.Builder builder90 = builder67.setExpiresAt(date87);
        org.osiam.client.oauth.AccessToken.Builder builder91 = builder5.setRefreshTokenExpiresAt(date87);
        org.osiam.client.oauth.AccessToken.Builder builder93 = builder91.setUserName("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamRequestException: hi!");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(scope10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PUT" + "'", str11, "PUT");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(accessToken31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "GET" + "'", str46, "GET");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(scope52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(accessToken62);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(accessToken86);
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test06565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06565");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        java.lang.String str23 = accessToken21.getUserName();
        java.lang.String str24 = accessToken21.toString();
        java.lang.String str25 = osiamGroupService2.extractErrorMessageForbidden(accessToken21);
        javax.ws.rs.client.WebTarget webTarget26 = osiamGroupService2.targetEndpoint;
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        java.lang.String str37 = query36.toString();
        java.lang.String str38 = query36.getSortOrder();
        java.lang.String str39 = query36.getFilter();
        java.lang.String str40 = query36.getSortOrder();
        java.lang.String str41 = query36.getAttributes();
        int int42 = query36.getCount();
        long long43 = query36.getStartIndex();
        org.osiam.client.OsiamGroupService.Builder builder45 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService46 = builder45.build();
        javax.ws.rs.client.WebTarget webTarget47 = osiamGroupService46.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget48 = osiamGroupService46.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget49 = osiamGroupService46.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget50 = osiamGroupService46.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder52 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setRefreshTokenExpiresAt(date53);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder52.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken57 = builder56.build();
        boolean boolean58 = accessToken57.isRefreshTokenExpired();
        boolean boolean59 = accessToken57.isClientOnly();
        java.lang.String str60 = accessToken57.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet61 = accessToken57.getScopes();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken57);
        java.lang.String str63 = osiamGroupService46.extractErrorMessageForbidden(accessToken57);
        boolean boolean64 = accessToken57.isExpired();
        java.lang.String str65 = accessToken57.getToken();
        java.lang.String str66 = accessToken57.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult67 = osiamGroupService2.searchGroups(query36, accessToken57);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str24, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget26);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str37, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "descending" + "'", str38, "descending");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "descending" + "'", str40, "descending");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Authorization" + "'", str41, "Authorization");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(osiamGroupService46);
        org.junit.Assert.assertNotNull(webTarget47);
        org.junit.Assert.assertNotNull(webTarget48);
        org.junit.Assert.assertNotNull(webTarget49);
        org.junit.Assert.assertNotNull(webTarget50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(accessToken57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(scopeSet61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Insufficient scopes: []" + "'", str63, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Bearer " + "'", str65, "Bearer ");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test06566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06566");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setResourceServerEndpoint("org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector5 = builder0.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        java.util.Date date15 = accessToken13.getExpiresAt();
        boolean boolean16 = accessToken13.isRefreshTokenExpired();
        java.util.Date date17 = accessToken13.getExpiresAt();
        java.lang.String str18 = accessToken13.getUserName();
        boolean boolean19 = accessToken13.isRefreshTokenExpired();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector5.deleteUser("org.osiam.client.exception.ConflictException: ", accessToken13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test06567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06567");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test06568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06568");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        org.osiam.client.OsiamGroupService.Builder builder14 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService15 = builder14.build();
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        boolean boolean23 = accessToken22.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet24 = accessToken22.getScopes();
        java.lang.String str25 = osiamGroupService15.extractErrorMessageForbidden(accessToken22);
        boolean boolean26 = accessToken22.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken22);
        java.lang.String str28 = osiamGroupService3.extractErrorMessageForbidden(accessToken22);
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken35);
        java.util.Date date37 = accessToken35.getExpiresAt();
        boolean boolean38 = accessToken35.isRefreshTokenExpired();
        java.util.Date date39 = accessToken35.getExpiresAt();
        java.util.Date date40 = accessToken35.getRefreshTokenExpiresAt();
        java.lang.String str41 = accessToken35.getUserId();
        java.util.Date date42 = accessToken35.getRefreshTokenExpiresAt();
        java.lang.String str43 = osiamGroupService3.extractErrorMessageForbidden(accessToken35);
        org.osiam.resources.scim.UpdateGroup updateGroup45 = null;
        org.osiam.client.oauth.AccessToken accessToken46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group47 = osiamGroupService3.updateGroup("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]", updateGroup45, accessToken46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(scopeSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Insufficient scopes: []" + "'", str28, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Insufficient scopes: []" + "'", str43, "Insufficient scopes: []");
    }

    @Test
    public void test06569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06569");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector5.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder33 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder35.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.descending("hi!");
        org.osiam.client.query.Query query42 = queryBuilder41.build();
        java.lang.String str43 = query42.toString();
        java.lang.String str44 = query42.toString();
        org.osiam.client.query.Query query45 = query42.nextPage();
        java.lang.String str46 = query42.toString();
        int int47 = query42.getCount();
        java.lang.String str48 = query42.getSortOrder();
        int int49 = query42.getCount();
        org.osiam.client.query.QueryBuilder queryBuilder50 = osiamConnector5.createQueryBuilder(query42);
        org.osiam.client.query.QueryBuilder queryBuilder51 = osiamConnector5.createQueryBuilder();
        org.osiam.resources.scim.User user52 = null;
        org.osiam.client.oauth.AccessToken.Builder builder54 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date55 = null;
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setRefreshTokenExpiresAt(date55);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder54.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken59 = builder58.build();
        java.util.Date date60 = accessToken59.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user61 = osiamConnector5.createUser(user52, accessToken59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str44, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str46, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "descending" + "'", str48, "descending");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(accessToken59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test06570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06570");
        org.osiam.client.exception.NoResultException noResultException1 = new org.osiam.client.exception.NoResultException("org.osiam.client.exception.UnauthorizedException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
    }

    @Test
    public void test06571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06571");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("org.osiam.client.exception.ForbiddenException: DELETE");
    }

    @Test
    public void test06572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06572");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.OsiamGroupService.Builder builder12 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService13 = builder12.build();
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        boolean boolean21 = accessToken20.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet22 = accessToken20.getScopes();
        java.lang.String str23 = osiamGroupService13.extractErrorMessageForbidden(accessToken20);
        boolean boolean24 = accessToken20.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken20);
        java.lang.String str26 = authService10.extractErrorMessageForbidden(accessToken20);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken33);
        java.util.Date date35 = accessToken33.getExpiresAt();
        boolean boolean36 = accessToken33.isClientOnly();
        boolean boolean37 = accessToken33.isClientOnly();
        java.lang.String str38 = authService10.extractErrorMessageForbidden(accessToken33);
        org.osiam.client.AuthService.Builder builder40 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder42 = builder40.setClientId("ME");
        org.osiam.client.AuthService.Builder builder44 = builder42.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService45 = builder44.build();
        org.osiam.client.OsiamGroupService.Builder builder47 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService48 = builder47.build();
        org.osiam.client.oauth.AccessToken.Builder builder50 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date51 = null;
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.setRefreshTokenExpiresAt(date51);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder50.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken55 = builder54.build();
        boolean boolean56 = accessToken55.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet57 = accessToken55.getScopes();
        java.lang.String str58 = osiamGroupService48.extractErrorMessageForbidden(accessToken55);
        boolean boolean59 = accessToken55.isClientOnly();
        java.lang.String str60 = authService45.extractErrorMessageForbidden(accessToken55);
        org.osiam.client.oauth.AccessToken.Builder builder62 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date63 = null;
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder62.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder66.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken69 = builder66.build();
        java.util.Date date70 = accessToken69.getExpiresAt();
        java.lang.String str71 = accessToken69.toString();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken69);
        java.lang.String str73 = authService45.extractErrorMessageForbidden(accessToken69);
        java.lang.String str74 = authService10.extractErrorMessageForbidden(accessToken69);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken76 = authService10.retrieveAccessToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=GET, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(osiamGroupService13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(scopeSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Insufficient scopes: []" + "'", str23, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Insufficient scopes: []" + "'", str26, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Insufficient scopes: []" + "'", str38, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(authService45);
        org.junit.Assert.assertNotNull(osiamGroupService48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(accessToken55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(scopeSet57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Insufficient scopes: []" + "'", str58, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Insufficient scopes: []" + "'", str60, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(accessToken69);
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str71, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Insufficient scopes: []" + "'", str73, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Insufficient scopes: []" + "'", str74, "Insufficient scopes: []");
    }

    @Test
    public void test06573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06573");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        org.osiam.client.AuthService.Builder builder6 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientId("ME");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService11 = builder10.build();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        boolean boolean19 = accessToken18.isRefreshTokenExpired();
        java.lang.String str20 = accessToken18.getUserId();
        java.lang.String str21 = accessToken18.getClientId();
        boolean boolean22 = accessToken18.isClientOnly();
        java.lang.String str23 = authService11.extractErrorMessageForbidden(accessToken18);
        java.lang.String str24 = accessToken18.toString();
        java.lang.String str25 = accessToken18.getClientId();
        java.lang.String str26 = osiamGroupService3.extractErrorMessageForbidden(accessToken18);
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date30 = null;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setRefreshTokenExpiresAt(date30);
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken36 = builder33.build();
        java.util.Date date37 = accessToken36.getExpiresAt();
        java.lang.String str38 = accessToken36.toString();
        java.lang.String str39 = accessToken36.toString();
        boolean boolean40 = accessToken36.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group41 = osiamGroupService3.getResource("org.osiam.client.exception.InvalidAttributeException: refresh_token", accessToken36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(authService11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Insufficient scopes: []" + "'", str23, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str24, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Insufficient scopes: []" + "'", str26, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(accessToken36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str38, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str39, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test06574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06574");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException7 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean8 = scope5.equals((java.lang.Object) invalidAttributeException7);
        java.lang.String str9 = scope5.getValue();
        org.osiam.client.oauth.Scope scope10 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str12 = scope11.toString();
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str15 = scope14.getValue();
        java.lang.String str16 = scope14.getValue();
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException19 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean20 = scope17.equals((java.lang.Object) invalidAttributeException19);
        java.lang.String str21 = scope17.getValue();
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException27 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean28 = scope25.equals((java.lang.Object) invalidAttributeException27);
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        boolean boolean33 = scope31.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray35 = new org.osiam.client.oauth.Scope[] { scope4, scope5, scope10, scope11, scope13, scope14, scope17, scope22, scope23, scope24, scope25, scope29, scope30, scope31, scope34 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet36 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet36, scopeArray35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder1.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet36);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setType("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setType("org.osiam.client.exception.ConnectionInitializationException: descending");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GET" + "'", str9, "GET");
        org.junit.Assert.assertNotNull(scope10);
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ME" + "'", str12, "ME");
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PATCH" + "'", str15, "PATCH");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GET" + "'", str21, "GET");
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(scopeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test06575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06575");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException7 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean8 = scope5.equals((java.lang.Object) invalidAttributeException7);
        java.lang.String str9 = scope5.getValue();
        org.osiam.client.oauth.Scope scope10 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str12 = scope11.toString();
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str15 = scope14.getValue();
        java.lang.String str16 = scope14.getValue();
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException19 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean20 = scope17.equals((java.lang.Object) invalidAttributeException19);
        java.lang.String str21 = scope17.getValue();
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException27 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean28 = scope25.equals((java.lang.Object) invalidAttributeException27);
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        boolean boolean33 = scope31.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray35 = new org.osiam.client.oauth.Scope[] { scope4, scope5, scope10, scope11, scope13, scope14, scope17, scope22, scope23, scope24, scope25, scope29, scope30, scope31, scope34 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet36 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet36, scopeArray35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder1.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet36);
        java.lang.Class<?> wildcardClass39 = builder38.getClass();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GET" + "'", str9, "GET");
        org.junit.Assert.assertNotNull(scope10);
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ME" + "'", str12, "ME");
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PATCH" + "'", str15, "PATCH");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GET" + "'", str21, "GET");
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(scopeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test06576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06576");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setResourceServerEndpoint("PATCH");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.resources.scim.User user7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        boolean boolean15 = accessToken14.isRefreshTokenExpired();
        java.lang.String str16 = accessToken14.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder17 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder19.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.descending("hi!");
        org.osiam.client.query.Query query26 = queryBuilder25.build();
        java.lang.String str27 = query26.toString();
        java.lang.String str28 = query26.getSortOrder();
        java.lang.String str29 = query26.getSortBy();
        java.lang.String str30 = query26.getFilter();
        java.lang.String str31 = query26.getSortOrder();
        java.lang.String str32 = query26.getAttributes();
        boolean boolean33 = accessToken14.equals((java.lang.Object) query26);
        org.osiam.client.OsiamConnector.Builder builder34 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder36 = builder34.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder38 = builder36.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder40 = builder38.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder42 = builder38.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder44 = builder38.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder46 = builder44.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder48 = builder44.setClientRedirectUri("PUT");
        boolean boolean49 = accessToken14.equals((java.lang.Object) builder48);
        java.lang.String str50 = accessToken14.getClientId();
        boolean boolean51 = accessToken14.isClientOnly();
        java.lang.String str52 = accessToken14.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user53 = osiamConnector5.replaceUser("Insufficient scopes: [GET, GET POST PUT PATCH DELETE]", user7, accessToken14);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "descending" + "'", str28, "descending");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "descending" + "'", str31, "descending");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Authorization" + "'", str32, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
    }

    @Test
    public void test06577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06577");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Bearer ");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.AuthService.Builder builder4 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder6 = builder4.setClientId("ME");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService13 = builder12.build();
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        boolean boolean21 = accessToken20.isRefreshTokenExpired();
        java.lang.String str22 = authService13.extractErrorMessageForbidden(accessToken20);
        boolean boolean23 = accessToken20.isRefreshTokenExpired();
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException25 = new org.osiam.client.exception.InvalidAttributeException("POST");
        boolean boolean26 = accessToken20.equals((java.lang.Object) invalidAttributeException25);
        java.lang.String str27 = accessToken20.getType();
        java.lang.String str28 = accessToken20.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser29 = osiamUserService2.getCurrentUserBasic(accessToken20);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(authService13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Insufficient scopes: []" + "'", str22, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str28, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test06578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06578");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientId("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setAuthServerEndpoint("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setResourceServerEndpoint("ADMIN");
        org.osiam.client.OsiamConnector.Builder builder20 = builder16.setClientSecret("hi!");
        org.osiam.client.OsiamConnector osiamConnector21 = builder16.build();
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        java.util.Date date29 = accessToken28.getExpiresAt();
        java.lang.String str30 = accessToken28.getRefreshToken();
        boolean boolean31 = accessToken28.isClientOnly();
        java.lang.String str32 = accessToken28.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user33 = osiamConnector21.getCurrentUser(accessToken28);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test06579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06579");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        java.lang.String str7 = accessToken6.toString();
        java.lang.String str8 = accessToken6.getClientId();
        org.osiam.client.OsiamConnector.Builder builder9 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder11 = builder9.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder13 = builder11.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder15 = builder13.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector16 = builder15.build();
        org.osiam.client.query.QueryBuilder queryBuilder17 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder19.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.descending("hi!");
        org.osiam.client.query.Query query26 = queryBuilder25.build();
        java.lang.String str27 = query26.toString();
        java.lang.String str28 = query26.toString();
        java.lang.String str29 = query26.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder30 = osiamConnector16.createQueryBuilder(query26);
        org.osiam.client.query.QueryBuilder queryBuilder31 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder33.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder37.descending("hi!");
        org.osiam.client.query.Query query40 = queryBuilder39.build();
        org.osiam.client.query.QueryBuilder queryBuilder41 = osiamConnector16.createQueryBuilder(query40);
        boolean boolean42 = accessToken6.equals((java.lang.Object) queryBuilder41);
        org.osiam.client.query.QueryBuilder queryBuilder43 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder45.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder45.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder49.descending("hi!");
        org.osiam.client.query.Query query52 = queryBuilder51.build();
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder51.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder56 = queryBuilder54.attributes("Cannot connect to server");
        org.osiam.client.query.Query query57 = queryBuilder54.build();
        boolean boolean58 = accessToken6.equals((java.lang.Object) queryBuilder54);
        org.osiam.client.query.QueryBuilder queryBuilder60 = queryBuilder54.startIndex(0L);
        org.osiam.client.query.QueryBuilder queryBuilder62 = queryBuilder54.filter("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder62.attributes("org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388");
        org.osiam.client.query.Query query65 = queryBuilder62.build();
        org.osiam.client.query.QueryBuilder queryBuilder67 = queryBuilder62.attributes("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str7, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(osiamConnector16);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str28, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(query40);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(query52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(queryBuilder56);
        org.junit.Assert.assertNotNull(query57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(queryBuilder60);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertNotNull(query65);
        org.junit.Assert.assertNotNull(queryBuilder67);
    }

    @Test
    public void test06580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06580");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = accessToken6.getScopes();
        boolean boolean9 = accessToken6.isExpired();
        java.lang.String str10 = accessToken6.getClientId();
        java.lang.String str11 = accessToken6.getRefreshToken();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(scopeSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test06581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06581");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet17 = accessToken13.getScopes();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        java.lang.String str19 = osiamGroupService2.extractErrorMessageForbidden(accessToken13);
        org.osiam.client.OsiamConnector.Builder builder20 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder24 = builder22.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder26 = builder24.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder28 = builder24.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder30 = builder28.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder32 = builder30.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder34 = builder32.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder36 = builder34.setResourceServerEndpoint("GET POST PUT PATCH DELETE");
        org.osiam.client.OsiamConnector osiamConnector37 = builder36.build();
        boolean boolean38 = accessToken13.equals((java.lang.Object) osiamConnector37);
        org.osiam.client.query.QueryBuilder queryBuilder39 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder43 = queryBuilder41.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query46 = queryBuilder43.build();
        org.osiam.client.query.Query query47 = query46.nextPage();
        org.osiam.client.query.Query query48 = query47.previousPage();
        java.lang.String str49 = query47.getSortOrder();
        java.lang.String str50 = query47.getSortOrder();
        org.osiam.client.query.Query query51 = query47.previousPage();
        org.osiam.client.AuthService.Builder builder53 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder55 = builder53.setClientId("ME");
        org.osiam.client.AuthService.Builder builder57 = builder55.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder59 = builder57.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder61 = builder59.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService62 = builder61.build();
        org.osiam.client.oauth.AccessToken.Builder builder64 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date65 = null;
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder64.setRefreshTokenExpiresAt(date65);
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder64.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken69 = builder68.build();
        boolean boolean70 = accessToken69.isRefreshTokenExpired();
        java.lang.String str71 = authService62.extractErrorMessageForbidden(accessToken69);
        boolean boolean72 = accessToken69.isRefreshTokenExpired();
        java.lang.String str73 = accessToken69.getType();
        java.util.Date date74 = accessToken69.getExpiresAt();
        boolean boolean75 = accessToken69.isRefreshTokenExpired();
        boolean boolean76 = accessToken69.isClientOnly();
        java.util.Date date77 = accessToken69.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult78 = osiamConnector37.searchUsers(query47, accessToken69);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(scopeSet17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(osiamConnector37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(query46);
        org.junit.Assert.assertNotNull(query47);
        org.junit.Assert.assertNotNull(query48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(query51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(authService62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(accessToken69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Insufficient scopes: []" + "'", str71, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test06582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06582");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setEndpoint("DELETE");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setClientId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test06583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06583");
        org.osiam.client.exception.ConflictException conflictException1 = new org.osiam.client.exception.ConflictException("org.osiam.client.exception.OsiamClientException: client_credentials");
    }

    @Test
    public void test06584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06584");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService6 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder7 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder7.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder9.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.descending("hi!");
        org.osiam.client.query.Query query16 = queryBuilder15.build();
        java.lang.String str17 = query16.toString();
        java.lang.String str18 = query16.getSortOrder();
        java.lang.String str19 = query16.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder20 = new org.osiam.client.query.QueryBuilder(query16);
        java.lang.String str21 = query16.toString();
        java.lang.String str22 = query16.toString();
        org.osiam.client.query.QueryBuilder queryBuilder23 = new org.osiam.client.query.QueryBuilder(query16);
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        org.osiam.client.query.QueryBuilder queryBuilder25 = new org.osiam.client.query.QueryBuilder(query24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        boolean boolean33 = accessToken32.isRefreshTokenExpired();
        java.lang.String str34 = accessToken32.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult35 = osiamUserService6.searchUsers(query24, accessToken32);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(osiamUserService6);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str17, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "descending" + "'", str18, "descending");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test06585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06585");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Query [attributes=Authorization, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=10]");
    }

    @Test
    public void test06586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06586");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.toString();
        org.osiam.client.query.Query query12 = query9.nextPage();
        org.osiam.client.query.Query query13 = query9.nextPage();
        int int14 = query13.getCount();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder(query13);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.attributes("hi!");
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("org.osiam.client.exception.ForbiddenException: DELETE");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.filter("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str11, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
    }

    @Test
    public void test06587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06587");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.getAttributes();
        java.lang.String str11 = query9.toString();
        java.lang.String str12 = query9.getSortOrder();
        java.lang.String str13 = query9.getAttributes();
        java.lang.String str14 = query9.getAttributes();
        java.lang.String str15 = query9.getAttributes();
        java.lang.String str16 = query9.getSortBy();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.query.Query query17 = query9.previousPage();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: StartIndex < 1 is not possible.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Authorization" + "'", str10, "Authorization");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str11, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "descending" + "'", str12, "descending");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Authorization" + "'", str13, "Authorization");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Authorization" + "'", str14, "Authorization");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Authorization" + "'", str15, "Authorization");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test06588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06588");
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException1 = new org.osiam.client.exception.InvalidAttributeException("org.osiam.client.exception.UnauthorizedException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test06589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06589");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        java.lang.String str23 = accessToken21.getUserName();
        java.lang.String str24 = accessToken21.toString();
        java.lang.String str25 = osiamGroupService2.extractErrorMessageForbidden(accessToken21);
        javax.ws.rs.client.WebTarget webTarget26 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget27 = osiamGroupService2.targetEndpoint;
        org.osiam.client.AuthService.Builder builder29 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder31 = builder29.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService32 = builder31.build();
        org.osiam.client.AuthService.Builder builder34 = builder31.setClientRedirectUri("PATCH");
        org.osiam.client.AuthService authService35 = builder34.build();
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken42 = builder41.build();
        java.util.Date date43 = accessToken42.getExpiresAt();
        java.lang.String str44 = accessToken42.getRefreshToken();
        java.lang.String str45 = accessToken42.getType();
        java.lang.String str46 = accessToken42.getClientId();
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException48 = new org.osiam.client.exception.InvalidAttributeException("ADMIN");
        boolean boolean49 = accessToken42.equals((java.lang.Object) invalidAttributeException48);
        java.lang.String str50 = authService35.extractErrorMessageForbidden(accessToken42);
        java.lang.String str51 = osiamGroupService2.extractErrorMessageForbidden(accessToken42);
        javax.ws.rs.client.WebTarget webTarget52 = osiamGroupService2.targetEndpoint;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group54 = osiamGroupService2.mapToResource("org.osiam.client.exception.UnauthorizedException: GET");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: org.osiam.client.exception.UnauthorizedException: GET");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str24, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget26);
        org.junit.Assert.assertNotNull(webTarget27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(authService32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(authService35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Insufficient scopes: []" + "'", str50, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Insufficient scopes: []" + "'", str51, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget52);
    }

    @Test
    public void test06590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06590");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = osiamConnector5.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder7 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder7.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder9.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.descending("hi!");
        org.osiam.client.query.Query query16 = queryBuilder15.build();
        java.lang.String str17 = query16.toString();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder(query16);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.ascending("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.query.Query query21 = queryBuilder18.build();
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector5.createQueryBuilder(query21);
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.attributes("org.osiam.client.exception.NoResultException: org.osiam.client.exception.ConnectionInitializationException: descending");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str17, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
    }

    @Test
    public void test06591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06591");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer7 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer6);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeSetJsonDeserializer5.getEmptyValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = scopeSetJsonDeserializer5.getEmptyValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader10 = scopeSetJsonDeserializer5.getObjectIdReader();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader11 = scopeSetJsonDeserializer5.getObjectIdReader();
        java.lang.Class<?> wildcardClass12 = scopeSetJsonDeserializer5.handledType();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader13 = scopeSetJsonDeserializer5.getObjectIdReader();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet14 = scopeSetJsonDeserializer5.getEmptyValue();
        java.util.Collection<java.lang.Object> objCollection15 = scopeSetJsonDeserializer5.getKnownPropertyNames();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer7);
        org.junit.Assert.assertNull(scopeSet8);
        org.junit.Assert.assertNull(scopeSet9);
        org.junit.Assert.assertNull(objectIdReader10);
        org.junit.Assert.assertNull(objectIdReader11);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(objectIdReader13);
        org.junit.Assert.assertNull(scopeSet14);
        org.junit.Assert.assertNull(objCollection15);
    }

    @Test
    public void test06592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06592");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getClientId();
        boolean boolean17 = accessToken13.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.addScope(scope20);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException24 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean25 = scope22.equals((java.lang.Object) invalidAttributeException24);
        java.lang.String str26 = scope22.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder19.addScope(scope22);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setUserName("Authorization");
        boolean boolean34 = accessToken13.equals((java.lang.Object) builder31);
        java.lang.String str35 = osiamGroupService6.extractErrorMessageForbidden(accessToken13);
        javax.ws.rs.client.WebTarget webTarget36 = osiamGroupService6.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        java.util.Date date48 = accessToken47.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder38.setRefreshTokenExpiresAt(date48);
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder38.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder38.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet62 = accessToken60.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder53.addScopes(scopeSet62);
        org.osiam.client.oauth.AccessToken accessToken64 = builder63.build();
        java.lang.String str65 = accessToken64.getClientId();
        java.util.Date date66 = accessToken64.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList67 = osiamGroupService6.getAllResources(accessToken64);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GET" + "'", str26, "GET");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(scopeSet62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(accessToken64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test06593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06593");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getClientId();
        boolean boolean17 = accessToken13.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.addScope(scope20);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException24 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean25 = scope22.equals((java.lang.Object) invalidAttributeException24);
        java.lang.String str26 = scope22.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder19.addScope(scope22);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setUserName("Authorization");
        boolean boolean34 = accessToken13.equals((java.lang.Object) builder31);
        java.lang.String str35 = osiamGroupService6.extractErrorMessageForbidden(accessToken13);
        javax.ws.rs.client.WebTarget webTarget36 = osiamGroupService6.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget37 = osiamGroupService6.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = osiamGroupService6.extractErrorMessage("org.osiam.client.exception.UnauthorizedException: client_credentials", statusType39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GET" + "'", str26, "GET");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget36);
        org.junit.Assert.assertNotNull(webTarget37);
    }

    @Test
    public void test06594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06594");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService4 = builder3.build();
        org.osiam.client.AuthService.Builder builder7 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientId("ME");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService16 = builder15.build();
        org.osiam.client.OsiamGroupService.Builder builder18 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService19 = builder18.build();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet28 = accessToken26.getScopes();
        java.lang.String str29 = osiamGroupService19.extractErrorMessageForbidden(accessToken26);
        boolean boolean30 = accessToken26.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken26);
        java.lang.String str32 = authService16.extractErrorMessageForbidden(accessToken26);
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken39);
        java.util.Date date41 = accessToken39.getExpiresAt();
        boolean boolean42 = accessToken39.isClientOnly();
        boolean boolean43 = accessToken39.isClientOnly();
        java.lang.String str44 = authService16.extractErrorMessageForbidden(accessToken39);
        // The following exception was thrown during execution in test generation
        try {
            authService4.revokeAllAccessTokens("org.osiam.client.exception.ForbiddenException: Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]", accessToken39);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(authService4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(authService16);
        org.junit.Assert.assertNotNull(osiamGroupService19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(scopeSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Insufficient scopes: []" + "'", str29, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Insufficient scopes: []" + "'", str44, "Insufficient scopes: []");
    }

    @Test
    public void test06595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06595");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder11 = builder7.setClientRedirectUri("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.AuthService.Builder builder13 = builder7.setClientSecret("authorization_code");
        org.osiam.client.AuthService authService14 = builder13.build();
        org.osiam.client.OsiamGroupService.Builder builder16 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService17 = builder16.build();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        boolean boolean25 = accessToken24.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet26 = accessToken24.getScopes();
        java.lang.String str27 = osiamGroupService17.extractErrorMessageForbidden(accessToken24);
        boolean boolean28 = accessToken24.isClientOnly();
        boolean boolean29 = accessToken24.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            authService14.revokeAccessToken(accessToken24);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(authService14);
        org.junit.Assert.assertNotNull(osiamGroupService17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(scopeSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Insufficient scopes: []" + "'", str27, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test06596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06596");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken6);
        java.util.Date date8 = accessToken6.getExpiresAt();
        boolean boolean9 = accessToken6.isRefreshTokenExpired();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer10 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass11 = scopeDeserializer10.handledType();
        java.lang.Class<?> wildcardClass12 = scopeDeserializer10.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer13 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer14 = scopeDeserializer10.unwrappingDeserializer(nameTransformer13);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader15 = scopeDeserializer10.getObjectIdReader();
        boolean boolean16 = scopeDeserializer10.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet17 = scopeDeserializer10.getNullValue();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer18 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer19 = scopeDeserializer10.unwrappingDeserializer(nameTransformer18);
        boolean boolean20 = accessToken6.equals((java.lang.Object) scopeDeserializer10);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty22 = scopeDeserializer10.findBackReference("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference '': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer14);
        org.junit.Assert.assertNull(objectIdReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(scopeSet17);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test06597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06597");
        org.osiam.client.oauth.Scope scope1 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConnectionInitializationException: PATCH");
    }

    @Test
    public void test06598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06598");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.getUserName();
        java.lang.String str15 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.descending("hi!");
        org.osiam.client.query.Query query25 = queryBuilder24.build();
        java.lang.String str26 = query25.toString();
        java.lang.String str27 = query25.getSortOrder();
        java.lang.String str28 = query25.getSortBy();
        long long29 = query25.getStartIndex();
        org.osiam.client.query.Query query30 = query25.nextPage();
        java.lang.String str31 = query25.getAttributes();
        long long32 = query25.getStartIndex();
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        boolean boolean40 = accessToken39.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet41 = accessToken39.getScopes();
        boolean boolean42 = accessToken39.isRefreshTokenExpired();
        boolean boolean43 = accessToken39.isExpired();
        org.osiam.client.AuthService.Builder builder45 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder47 = builder45.setClientId("ME");
        org.osiam.client.AuthService.Builder builder49 = builder45.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService50 = builder45.build();
        boolean boolean51 = accessToken39.equals((java.lang.Object) builder45);
        java.lang.String str52 = accessToken39.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult53 = osiamGroupService2.searchGroups(query25, accessToken39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(query25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str26, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "descending" + "'", str27, "descending");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(query30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Authorization" + "'", str31, "Authorization");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(scopeSet41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(authService50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Bearer " + "'", str52, "Bearer ");
    }

    @Test
    public void test06599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06599");
        org.osiam.client.oauth.Scope scope1 = new org.osiam.client.oauth.Scope("authorization_code");
        java.lang.String str2 = scope1.getValue();
        java.lang.String str3 = scope1.toString();
        java.lang.String str4 = scope1.getValue();
        org.osiam.client.OsiamGroupService.Builder builder6 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder6.build();
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken15);
        java.lang.String str17 = osiamGroupService8.extractErrorMessageForbidden(accessToken15);
        boolean boolean18 = scope1.equals((java.lang.Object) osiamGroupService8);
        org.osiam.client.oauth.AccessToken accessToken20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group21 = osiamGroupService8.getResource("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]", accessToken20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "authorization_code" + "'", str2, "authorization_code");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "authorization_code" + "'", str3, "authorization_code");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "authorization_code" + "'", str4, "authorization_code");
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Insufficient scopes: []" + "'", str17, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test06600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06600");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass2 = scopeSerializer0.handledType();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet12 = accessToken9.getScopes();
        boolean boolean13 = scopeSerializer0.isEmpty(scopeSet12);
        boolean boolean14 = scopeSerializer0.usesObjectId();
        boolean boolean15 = scopeSerializer0.usesObjectId();
        boolean boolean16 = scopeSerializer0.isUnwrappingSerializer();
        org.osiam.client.helper.ScopeSerializer scopeSerializer17 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException25 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean26 = scope23.equals((java.lang.Object) invalidAttributeException25);
        java.lang.String str27 = scope23.getValue();
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str30 = scope29.toString();
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str33 = scope32.getValue();
        java.lang.String str34 = scope32.getValue();
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException37 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean38 = scope35.equals((java.lang.Object) invalidAttributeException37);
        java.lang.String str39 = scope35.getValue();
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException45 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean46 = scope43.equals((java.lang.Object) invalidAttributeException45);
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.GET;
        boolean boolean51 = scope49.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope52 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray53 = new org.osiam.client.oauth.Scope[] { scope22, scope23, scope28, scope29, scope31, scope32, scope35, scope40, scope41, scope42, scope43, scope47, scope48, scope49, scope52 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet54 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet54, scopeArray53);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder19.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet54);
        boolean boolean57 = scopeSerializer17.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet54);
        org.osiam.client.oauth.AccessToken.Builder builder59 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date60 = null;
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.setRefreshTokenExpiresAt(date60);
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder59.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken64 = builder63.build();
        boolean boolean65 = accessToken64.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet66 = accessToken64.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator67 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider68 = null;
        scopeSerializer17.serialize(scopeSet66, jsonGenerator67, serializerProvider68);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider70 = null;
        org.osiam.client.oauth.AccessToken.Builder builder72 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date73 = null;
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder72.setRefreshTokenExpiresAt(date73);
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder72.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken77 = builder76.build();
        boolean boolean78 = accessToken77.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet79 = accessToken77.getScopes();
        boolean boolean80 = scopeSerializer17.isEmpty(serializerProvider70, scopeSet79);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass81 = scopeSerializer17.handledType();
        org.osiam.client.oauth.Scope scope83 = new org.osiam.client.oauth.Scope("");
        org.osiam.client.oauth.AccessToken.Builder builder85 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope86 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder87 = builder85.addScope(scope86);
        org.osiam.client.oauth.Scope[] scopeArray88 = new org.osiam.client.oauth.Scope[] { scope83, scope86 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet89 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet89, scopeArray88);
        boolean boolean91 = scopeSerializer17.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet89);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator92 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider93 = null;
        // The following exception was thrown during execution in test generation
        try {
            scopeSerializer0.serialize((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet89, jsonGenerator92, serializerProvider93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(scopeSetClass2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(scopeSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "GET" + "'", str27, "GET");
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ME" + "'", str30, "ME");
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PATCH" + "'", str33, "PATCH");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PATCH" + "'", str34, "PATCH");
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GET" + "'", str39, "GET");
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(scope52);
        org.junit.Assert.assertNotNull(scopeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(accessToken64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(scopeSet66);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(accessToken77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(scopeSet79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(scopeSetClass81);
        org.junit.Assert.assertNotNull(scope86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(scopeArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test06601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06601");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        boolean boolean1 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer3 = scopeDeserializer0.unwrappingDeserializer(nameTransformer2);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader4 = scopeSetJsonDeserializer3.getObjectIdReader();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet5 = scopeSetJsonDeserializer3.getNullValue();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty7 = scopeSetJsonDeserializer3.findBackReference("org.osiam.client.exception.UnauthorizedException: DELETE");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'org.osiam.client.exception.UnauthorizedException: DELETE': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer3);
        org.junit.Assert.assertNull(objectIdReader4);
        org.junit.Assert.assertNull(scopeSet5);
    }

    @Test
    public void test06602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06602");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.descending("hi!");
        org.osiam.client.query.Query query31 = queryBuilder30.build();
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector7.createQueryBuilder(query31);
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.descending("ADMIN");
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.filter("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.attributes("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.ascending("org.osiam.client.exception.InvalidAttributeException: refresh_token");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(query31);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
    }

    @Test
    public void test06603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06603");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("password");
        org.osiam.client.OsiamConnector.Builder builder10 = builder6.setAuthServerEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder12 = builder6.setClientRedirectUri("client_credentials");
        org.osiam.client.OsiamConnector osiamConnector13 = builder12.build();
        org.osiam.client.query.QueryBuilder queryBuilder14 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder16.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.descending("hi!");
        org.osiam.client.query.Query query23 = queryBuilder22.build();
        java.lang.String str24 = query23.toString();
        java.lang.String str25 = query23.getSortOrder();
        java.lang.String str26 = query23.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder(query23);
        java.lang.String str28 = query23.toString();
        int int29 = query23.getCount();
        org.osiam.client.query.QueryBuilder queryBuilder30 = new org.osiam.client.query.QueryBuilder(query23);
        org.osiam.client.OsiamGroupService.Builder builder32 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService33 = builder32.build();
        org.osiam.client.OsiamGroupService osiamGroupService34 = builder32.build();
        org.osiam.client.oauth.AccessToken.Builder builder36 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date37 = null;
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setRefreshTokenExpiresAt(date37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder36.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken41 = builder40.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken41);
        java.lang.String str43 = osiamGroupService34.extractErrorMessageForbidden(accessToken41);
        java.util.Date date44 = accessToken41.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken41);
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean47 = accessToken41.equals((java.lang.Object) scope46);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken41);
        java.util.Date date49 = accessToken41.getExpiresAt();
        java.lang.String str50 = accessToken41.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult51 = osiamConnector13.searchGroups(query23, accessToken41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(query23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str24, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "descending" + "'", str25, "descending");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str28, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(osiamGroupService33);
        org.junit.Assert.assertNotNull(osiamGroupService34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(accessToken41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Insufficient scopes: []" + "'", str43, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
    }

    @Test
    public void test06604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06604");
        org.osiam.client.exception.UnauthorizedException unauthorizedException1 = new org.osiam.client.exception.UnauthorizedException("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.OsiamRequestException: hi!");
    }

    @Test
    public void test06605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06605");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        java.lang.String str13 = query9.getFilter();
        java.lang.String str14 = query9.getSortOrder();
        java.lang.String str15 = query9.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.QueryBuilder queryBuilder17 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder(query9);
        java.lang.String str19 = query9.getAttributes();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "descending" + "'", str14, "descending");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Authorization" + "'", str15, "Authorization");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Authorization" + "'", str19, "Authorization");
    }

    @Test
    public void test06606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06606");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.getUserName();
        java.lang.String str15 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = osiamGroupService2.extractErrorMessageDefault("", statusType19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget16);
        org.junit.Assert.assertNotNull(webTarget17);
    }

    @Test
    public void test06607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06607");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        boolean boolean12 = accessToken9.isClientOnly();
        java.lang.String str13 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        java.util.Date date21 = accessToken20.getExpiresAt();
        java.lang.String str22 = accessToken20.getUserName();
        java.util.Date date23 = accessToken20.getRefreshTokenExpiresAt();
        java.lang.String str24 = osiamGroupService2.extractErrorMessageForbidden(accessToken20);
        org.osiam.client.AuthService.Builder builder26 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder28 = builder26.setClientId("ME");
        org.osiam.client.AuthService.Builder builder30 = builder28.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService31 = builder30.build();
        org.osiam.client.OsiamGroupService.Builder builder33 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService34 = builder33.build();
        org.osiam.client.oauth.AccessToken.Builder builder36 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date37 = null;
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setRefreshTokenExpiresAt(date37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder36.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken41 = builder40.build();
        boolean boolean42 = accessToken41.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet43 = accessToken41.getScopes();
        java.lang.String str44 = osiamGroupService34.extractErrorMessageForbidden(accessToken41);
        boolean boolean45 = accessToken41.isClientOnly();
        java.lang.String str46 = authService31.extractErrorMessageForbidden(accessToken41);
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder48.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken55 = builder52.build();
        java.lang.String str56 = accessToken55.toString();
        java.lang.String str57 = authService31.extractErrorMessageForbidden(accessToken55);
        org.osiam.client.oauth.AccessToken.Builder builder59 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date60 = null;
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.setRefreshTokenExpiresAt(date60);
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder59.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken64 = builder63.build();
        java.util.Date date65 = accessToken64.getExpiresAt();
        java.lang.String str66 = accessToken64.getRefreshToken();
        java.lang.String str67 = accessToken64.getType();
        java.lang.String str68 = accessToken64.getClientId();
        java.lang.String str69 = accessToken64.getUserName();
        java.lang.String str70 = authService31.extractErrorMessageForbidden(accessToken64);
        org.osiam.client.exception.UnauthorizedException unauthorizedException72 = new org.osiam.client.exception.UnauthorizedException("client_credentials");
        int int73 = unauthorizedException72.getHttpStatusCode();
        int int74 = unauthorizedException72.getHttpStatusCode();
        java.lang.Throwable[] throwableArray75 = unauthorizedException72.getSuppressed();
        boolean boolean76 = accessToken64.equals((java.lang.Object) unauthorizedException72);
        java.lang.String str77 = accessToken64.getType();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet78 = accessToken64.getScopes();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken64);
        java.lang.String str80 = osiamGroupService2.extractErrorMessageForbidden(accessToken64);
        javax.ws.rs.core.Response.StatusType statusType82 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str83 = osiamGroupService2.extractErrorMessage("", statusType82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Insufficient scopes: []" + "'", str13, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Insufficient scopes: []" + "'", str24, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(authService31);
        org.junit.Assert.assertNotNull(osiamGroupService34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(accessToken41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(scopeSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Insufficient scopes: []" + "'", str44, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Insufficient scopes: []" + "'", str46, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(accessToken55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str56, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Insufficient scopes: []" + "'", str57, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(accessToken64);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Insufficient scopes: []" + "'", str70, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 401 + "'", int73 == 401);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 401 + "'", int74 == 401);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(scopeSet78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Insufficient scopes: []" + "'", str80, "Insufficient scopes: []");
    }

    @Test
    public void test06608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06608");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: descending");
    }

    @Test
    public void test06609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06609");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.toString();
        java.lang.String str23 = query20.toString();
        int int24 = query20.getCount();
        long long25 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder26 = osiamConnector7.createQueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        org.osiam.client.query.Query query37 = queryBuilder35.build();
        java.lang.String str38 = query37.getSortBy();
        java.lang.String str39 = query37.getFilter();
        int int40 = query37.getCount();
        long long41 = query37.getStartIndex();
        java.lang.String str42 = query37.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder43 = osiamConnector7.createQueryBuilder(query37);
        org.osiam.resources.scim.User user45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder47 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date48 = null;
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.setRefreshTokenExpiresAt(date48);
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder47.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken52 = builder51.build();
        java.util.Date date53 = accessToken52.getExpiresAt();
        java.lang.String str54 = accessToken52.getRefreshToken();
        java.lang.String str55 = accessToken52.getType();
        java.lang.String str56 = accessToken52.getClientId();
        java.lang.String str57 = accessToken52.toString();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet58 = accessToken52.getScopes();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken52);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user60 = osiamConnector7.replaceUser("ADMIN", user45, accessToken52);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertNotNull(query37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "descending" + "'", str42, "descending");
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(accessToken52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str57, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(scopeSet58);
    }

    @Test
    public void test06610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06610");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        java.lang.String str12 = accessToken10.getUserId();
        java.lang.String str13 = accessToken10.getClientId();
        boolean boolean14 = accessToken10.isClientOnly();
        java.lang.String str15 = accessToken10.getClientId();
        java.lang.String str16 = accessToken10.getType();
        boolean boolean17 = accessToken10.isClientOnly();
        java.lang.String str18 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken27 = builder24.build();
        java.lang.String str28 = accessToken27.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList29 = osiamGroupService3.getAllGroups(accessToken27);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test06611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06611");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        boolean boolean18 = accessToken17.isRefreshTokenExpired();
        java.lang.String str19 = accessToken17.getUserId();
        java.lang.String str20 = accessToken17.getToken();
        java.lang.String str21 = authService10.extractErrorMessageForbidden(accessToken17);
        org.osiam.client.AuthService.Builder builder23 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientId("ME");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService28 = builder27.build();
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        boolean boolean36 = accessToken35.isRefreshTokenExpired();
        java.lang.String str37 = accessToken35.getUserId();
        java.lang.String str38 = accessToken35.getClientId();
        boolean boolean39 = accessToken35.isClientOnly();
        java.lang.String str40 = authService28.extractErrorMessageForbidden(accessToken35);
        // The following exception was thrown during execution in test generation
        try {
            authService10.revokeAccessToken(accessToken35);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Bearer " + "'", str20, "Bearer ");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(authService28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Insufficient scopes: []" + "'", str40, "Insufficient scopes: []");
    }

    @Test
    public void test06612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06612");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder3 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder3.setRefreshTokenExpiresAt(date4);
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope7 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException9 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean10 = scope7.equals((java.lang.Object) invalidAttributeException9);
        java.lang.String str11 = scope7.getValue();
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str14 = scope13.toString();
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str17 = scope16.getValue();
        java.lang.String str18 = scope16.getValue();
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException21 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean22 = scope19.equals((java.lang.Object) invalidAttributeException21);
        java.lang.String str23 = scope19.getValue();
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException29 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean30 = scope27.equals((java.lang.Object) invalidAttributeException29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.GET;
        boolean boolean35 = scope33.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray37 = new org.osiam.client.oauth.Scope[] { scope6, scope7, scope12, scope13, scope15, scope16, scope19, scope24, scope25, scope26, scope27, scope31, scope32, scope33, scope36 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet38 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet38, scopeArray37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder3.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet38);
        boolean boolean41 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet38);
        org.osiam.client.oauth.AccessToken.Builder builder43 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date44 = null;
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setRefreshTokenExpiresAt(date44);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder43.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken48 = builder47.build();
        boolean boolean49 = accessToken48.isRefreshTokenExpired();
        java.lang.String str50 = accessToken48.getUserId();
        java.lang.String str51 = accessToken48.getClientId();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet52 = accessToken48.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator53 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider54 = null;
        scopeSerializer0.serialize(scopeSet52, jsonGenerator53, serializerProvider54);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer56 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer57 = scopeSerializer0.unwrappingSerializer(nameTransformer56);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass58 = scopeSetJsonSerializer57.handledType();
        org.osiam.client.AuthService.Builder builder60 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder62 = builder60.setClientId("ME");
        org.osiam.client.AuthService.Builder builder64 = builder62.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService65 = builder64.build();
        org.osiam.client.oauth.AccessToken.Builder builder67 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date68 = null;
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder67.setRefreshTokenExpiresAt(date68);
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder67.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken72 = builder71.build();
        boolean boolean73 = accessToken72.isRefreshTokenExpired();
        boolean boolean74 = accessToken72.isClientOnly();
        java.lang.String str75 = accessToken72.getClientId();
        java.lang.String str76 = authService65.extractErrorMessageForbidden(accessToken72);
        java.lang.String str77 = accessToken72.getUserId();
        org.osiam.client.oauth.AccessToken.Builder builder79 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date80 = null;
        org.osiam.client.oauth.AccessToken.Builder builder81 = builder79.setRefreshTokenExpiresAt(date80);
        org.osiam.client.oauth.AccessToken.Builder builder83 = builder79.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken84 = builder83.build();
        boolean boolean85 = accessToken84.isRefreshTokenExpired();
        java.lang.String str86 = accessToken84.getUserId();
        boolean boolean87 = accessToken84.isRefreshTokenExpired();
        boolean boolean88 = accessToken72.equals((java.lang.Object) accessToken84);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet89 = accessToken84.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator90 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider91 = null;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer typeSerializer92 = null;
        // The following exception was thrown during execution in test generation
        try {
            scopeSetJsonSerializer57.serializeWithType(scopeSet89, jsonGenerator90, serializerProvider91, typeSerializer92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertNotNull(scope7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GET" + "'", str11, "GET");
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ME" + "'", str14, "ME");
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PATCH" + "'", str18, "PATCH");
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GET" + "'", str23, "GET");
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(scopeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(accessToken48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(scopeSet52);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer57);
        org.junit.Assert.assertNull(scopeSetClass58);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(authService65);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(accessToken72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Insufficient scopes: []" + "'", str76, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(accessToken84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(scopeSet89);
    }

    @Test
    public void test06613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06613");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer3 = scopeDeserializer0.getDelegatee();
        boolean boolean4 = scopeDeserializer0.isCachable();
        java.util.Collection<java.lang.Object> objCollection5 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.getEmptyValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader7 = scopeDeserializer0.getObjectIdReader();
        java.util.Collection<java.lang.Object> objCollection8 = scopeDeserializer0.getKnownPropertyNames();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer9 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass10 = scopeDeserializer9.handledType();
        boolean boolean11 = scopeDeserializer9.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet12 = scopeDeserializer9.getEmptyValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet13 = scopeDeserializer9.getNullValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet14 = scopeDeserializer9.getEmptyValue();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer15 = scopeDeserializer0.replaceDelegatee((com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeDeserializer9);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(wildcardJsonDeserializer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(objCollection5);
        org.junit.Assert.assertNull(scopeSet6);
        org.junit.Assert.assertNull(objectIdReader7);
        org.junit.Assert.assertNull(objCollection8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(scopeSet12);
        org.junit.Assert.assertNull(scopeSet13);
        org.junit.Assert.assertNull(scopeSet14);
    }

    @Test
    public void test06614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06614");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean41 = scopeSerializer0.isUnwrappingSerializer();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet42 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator43 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider44 = null;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer typeSerializer45 = null;
        // The following exception was thrown during execution in test generation
        try {
            scopeSerializer0.serializeWithType(scopeSet42, jsonGenerator43, serializerProvider44, typeSerializer45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test06615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06615");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.usesObjectId();
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope3 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.addScope(scope6);
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException10 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean11 = scope8.equals((java.lang.Object) invalidAttributeException10);
        java.lang.String str12 = scope8.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder5.addScope(scope8);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setUserId("");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.addScope(scope18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.addScope(scope22);
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str25 = scope24.getValue();
        org.osiam.client.oauth.Scope[] scopeArray26 = new org.osiam.client.oauth.Scope[] { scope2, scope3, scope18, scope22, scope24 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet27 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet27, scopeArray26);
        boolean boolean29 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet27);
        org.osiam.client.helper.ScopeSerializer scopeSerializer30 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException38 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean39 = scope36.equals((java.lang.Object) invalidAttributeException38);
        java.lang.String str40 = scope36.getValue();
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str43 = scope42.toString();
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str46 = scope45.getValue();
        java.lang.String str47 = scope45.getValue();
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException50 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean51 = scope48.equals((java.lang.Object) invalidAttributeException50);
        java.lang.String str52 = scope48.getValue();
        org.osiam.client.oauth.Scope scope53 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope56 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException58 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean59 = scope56.equals((java.lang.Object) invalidAttributeException58);
        org.osiam.client.oauth.Scope scope60 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope61 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope62 = org.osiam.client.oauth.Scope.GET;
        boolean boolean64 = scope62.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope65 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray66 = new org.osiam.client.oauth.Scope[] { scope35, scope36, scope41, scope42, scope44, scope45, scope48, scope53, scope54, scope55, scope56, scope60, scope61, scope62, scope65 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet67 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet67, scopeArray66);
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder32.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet67);
        boolean boolean70 = scopeSerializer30.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet67);
        org.osiam.client.oauth.AccessToken.Builder builder72 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date73 = null;
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder72.setRefreshTokenExpiresAt(date73);
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder72.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken77 = builder76.build();
        boolean boolean78 = accessToken77.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet79 = accessToken77.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator80 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider81 = null;
        scopeSerializer30.serialize(scopeSet79, jsonGenerator80, serializerProvider81);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider83 = null;
        org.osiam.client.oauth.AccessToken.Builder builder85 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date86 = null;
        org.osiam.client.oauth.AccessToken.Builder builder87 = builder85.setRefreshTokenExpiresAt(date86);
        org.osiam.client.oauth.AccessToken.Builder builder89 = builder85.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken90 = builder89.build();
        boolean boolean91 = accessToken90.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet92 = accessToken90.getScopes();
        boolean boolean93 = scopeSerializer30.isEmpty(serializerProvider83, scopeSet92);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer94 = scopeSerializer0.replaceDelegatee((com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeSerializer30);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(scope3);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GET" + "'", str12, "GET");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PATCH" + "'", str25, "PATCH");
        org.junit.Assert.assertNotNull(scopeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "GET" + "'", str40, "GET");
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ME" + "'", str43, "ME");
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PATCH" + "'", str46, "PATCH");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PATCH" + "'", str47, "PATCH");
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "GET" + "'", str52, "GET");
        org.junit.Assert.assertNotNull(scope53);
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(scope60);
        org.junit.Assert.assertNotNull(scope61);
        org.junit.Assert.assertNotNull(scope62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(scope65);
        org.junit.Assert.assertNotNull(scopeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(accessToken77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(scopeSet79);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(accessToken90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(scopeSet92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test06616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06616");
        org.osiam.client.exception.NoResultException noResultException1 = new org.osiam.client.exception.NoResultException("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
        int int2 = noResultException1.getHttpStatusCode();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 404 + "'", int2 == 404);
    }

    @Test
    public void test06617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06617");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.OsiamConnector.Builder builder10 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder22 = builder18.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector23 = builder18.build();
        org.osiam.client.OsiamConnector.Builder builder24 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder26 = builder24.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder28 = builder26.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder30 = builder28.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector31 = builder30.build();
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.toString();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector31.createQueryBuilder(query41);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        org.osiam.client.query.QueryBuilder queryBuilder56 = osiamConnector31.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder57 = osiamConnector23.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder58 = osiamConnector9.createQueryBuilder(query55);
        org.osiam.resources.scim.User user60 = null;
        org.osiam.client.oauth.AccessToken.Builder builder62 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date63 = null;
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder62.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken67 = builder66.build();
        boolean boolean68 = accessToken67.isRefreshTokenExpired();
        boolean boolean69 = accessToken67.isClientOnly();
        java.lang.String str70 = accessToken67.getClientId();
        boolean boolean71 = accessToken67.isClientOnly();
        java.lang.String str72 = accessToken67.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user73 = osiamConnector9.replaceUser("org.osiam.client.exception.OsiamClientException: hi!", user60, accessToken67);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(osiamConnector23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(osiamConnector31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str42, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertNotNull(queryBuilder56);
        org.junit.Assert.assertNotNull(queryBuilder57);
        org.junit.Assert.assertNotNull(queryBuilder58);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(accessToken67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Bearer " + "'", str72, "Bearer ");
    }

    @Test
    public void test06618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06618");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.getSortOrder();
        java.lang.String str20 = query17.getSortBy();
        java.lang.String str21 = query17.getFilter();
        java.lang.String str22 = query17.getSortOrder();
        java.lang.String str23 = query17.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder24 = new org.osiam.client.query.QueryBuilder(query17);
        long long25 = query17.getStartIndex();
        org.osiam.client.query.Query query26 = query17.nextPage();
        long long27 = query26.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder28 = osiamConnector7.createQueryBuilder(query26);
        org.osiam.client.query.QueryBuilder queryBuilder29 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder31.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.descending("hi!");
        org.osiam.client.query.Query query38 = queryBuilder37.build();
        java.lang.String str39 = query38.getAttributes();
        java.lang.String str40 = query38.toString();
        java.lang.String str41 = query38.getSortBy();
        org.osiam.client.query.Query query42 = query38.nextPage();
        int int43 = query42.getCount();
        long long44 = query42.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder45 = new org.osiam.client.query.QueryBuilder(query42);
        org.osiam.client.query.QueryBuilder queryBuilder46 = osiamConnector7.createQueryBuilder(query42);
        org.osiam.client.query.QueryBuilder queryBuilder47 = osiamConnector7.createQueryBuilder();
        org.osiam.resources.scim.UpdateUser updateUser49 = null;
        org.osiam.client.AuthService.Builder builder51 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder53 = builder51.setClientId("ME");
        org.osiam.client.AuthService.Builder builder55 = builder53.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService56 = builder55.build();
        org.osiam.client.oauth.AccessToken.Builder builder58 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date59 = null;
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setRefreshTokenExpiresAt(date59);
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder58.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken63 = builder62.build();
        boolean boolean64 = accessToken63.isRefreshTokenExpired();
        boolean boolean65 = accessToken63.isClientOnly();
        java.lang.String str66 = accessToken63.getClientId();
        java.lang.String str67 = authService56.extractErrorMessageForbidden(accessToken63);
        java.lang.String str68 = accessToken63.getUserId();
        java.lang.String str69 = accessToken63.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user70 = osiamConnector7.updateUser("org.osiam.client.exception.InvalidAttributeException: authorization_code", updateUser49, accessToken63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "descending" + "'", str19, "descending");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "descending" + "'", str22, "descending");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Authorization" + "'", str23, "Authorization");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 11L + "'", long27 == 11L);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(query38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Authorization" + "'", str39, "Authorization");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str40, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 11L + "'", long44 == 11L);
        org.junit.Assert.assertNotNull(queryBuilder46);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(authService56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(accessToken63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Insufficient scopes: []" + "'", str67, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
    }

    @Test
    public void test06619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06619");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet15 = accessToken12.getScopes();
        java.lang.String str16 = osiamGroupService3.extractErrorMessageForbidden(accessToken12);
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        java.util.Date date24 = accessToken23.getExpiresAt();
        java.lang.String str25 = accessToken23.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken23);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        boolean boolean34 = accessToken33.isRefreshTokenExpired();
        boolean boolean35 = accessToken33.isClientOnly();
        java.lang.String str36 = accessToken33.getClientId();
        boolean boolean37 = accessToken33.isClientOnly();
        boolean boolean38 = accessToken23.equals((java.lang.Object) accessToken33);
        java.lang.String str39 = accessToken33.getUserId();
        boolean boolean40 = accessToken33.isExpired();
        java.lang.String str41 = osiamGroupService3.extractErrorMessageForbidden(accessToken33);
        javax.ws.rs.client.WebTarget webTarget42 = osiamGroupService3.targetEndpoint;
        org.osiam.client.query.QueryBuilder queryBuilder43 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder45.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder45.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder49.descending("hi!");
        org.osiam.client.query.Query query52 = queryBuilder51.build();
        java.lang.String str53 = query52.toString();
        java.lang.String str54 = query52.getSortOrder();
        java.lang.String str55 = query52.getSortBy();
        long long56 = query52.getStartIndex();
        java.lang.String str57 = query52.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder58 = new org.osiam.client.query.QueryBuilder(query52);
        java.lang.String str59 = query52.getSortOrder();
        int int60 = query52.getCount();
        java.lang.String str61 = query52.getAttributes();
        org.osiam.client.oauth.AccessToken.Builder builder63 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date64 = null;
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder63.setRefreshTokenExpiresAt(date64);
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder63.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken68 = builder67.build();
        boolean boolean69 = accessToken68.isRefreshTokenExpired();
        boolean boolean70 = accessToken68.isClientOnly();
        java.lang.String str71 = accessToken68.getRefreshToken();
        boolean boolean72 = accessToken68.isExpired();
        boolean boolean73 = accessToken68.isExpired();
        java.lang.String str74 = accessToken68.getClientId();
        boolean boolean75 = accessToken68.isExpired();
        java.util.Date date76 = accessToken68.getRefreshTokenExpiresAt();
        java.lang.String str77 = accessToken68.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult78 = osiamGroupService3.searchResources(query52, accessToken68);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(scopeSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Insufficient scopes: []" + "'", str16, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: []" + "'", str41, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget42);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(query52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str53, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "descending" + "'", str54, "descending");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "descending" + "'", str59, "descending");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Authorization" + "'", str61, "Authorization");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(accessToken68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Bearer " + "'", str77, "Bearer ");
    }

    @Test
    public void test06620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06620");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass4 = scopeSerializer0.handledType();
        org.osiam.client.helper.ScopeSerializer scopeSerializer5 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet14 = accessToken12.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator15 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider16 = null;
        scopeSerializer5.serialize(scopeSet14, jsonGenerator15, serializerProvider16);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator18 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider19 = null;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer typeSerializer20 = null;
        // The following exception was thrown during execution in test generation
        try {
            scopeSerializer0.serializeWithType(scopeSet14, jsonGenerator18, serializerProvider19, typeSerializer20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertNull(scopeSetClass4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(scopeSet14);
    }

    @Test
    public void test06621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06621");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        boolean boolean13 = accessToken11.isClientOnly();
        java.lang.String str14 = accessToken11.getClientId();
        boolean boolean15 = accessToken11.isClientOnly();
        java.lang.String str16 = accessToken11.getToken();
        java.lang.String str17 = accessToken11.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user18 = osiamUserService2.replaceUser("org.osiam.client.exception.NoResultException: authorization_code", user4, accessToken11);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Bearer " + "'", str16, "Bearer ");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Bearer " + "'", str17, "Bearer ");
    }

    @Test
    public void test06622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06622");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.toString();
        java.lang.String str23 = query20.toString();
        int int24 = query20.getCount();
        long long25 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder26 = osiamConnector7.createQueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        java.lang.String str37 = query36.toString();
        java.lang.String str38 = query36.getSortOrder();
        java.lang.String str39 = query36.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder40 = new org.osiam.client.query.QueryBuilder(query36);
        org.osiam.client.query.QueryBuilder queryBuilder41 = osiamConnector7.createQueryBuilder(query36);
        org.osiam.resources.scim.UpdateUser updateUser43 = null;
        org.osiam.client.oauth.AccessToken accessToken44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user45 = osiamConnector7.updateUser("", updateUser43, accessToken44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str37, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "descending" + "'", str38, "descending");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNotNull(queryBuilder41);
    }

    @Test
    public void test06623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06623");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder4 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.descending("hi!");
        org.osiam.client.query.Query query13 = queryBuilder12.build();
        java.lang.String str14 = query13.toString();
        java.lang.String str15 = query13.getSortOrder();
        java.lang.String str16 = query13.getSortBy();
        java.lang.String str17 = query13.getFilter();
        java.lang.String str18 = query13.toString();
        java.lang.String str19 = query13.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder20 = new org.osiam.client.query.QueryBuilder(query13);
        org.osiam.client.query.Query query21 = queryBuilder20.build();
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder20.ascending("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken31 = builder30.build();
        boolean boolean32 = accessToken31.isRefreshTokenExpired();
        boolean boolean33 = accessToken31.isClientOnly();
        java.lang.String str34 = accessToken31.getClientId();
        boolean boolean35 = accessToken31.isExpired();
        java.util.Date date36 = accessToken31.getRefreshTokenExpiresAt();
        java.lang.String str37 = accessToken31.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult38 = osiamGroupService3.searchGroups(query24, accessToken31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "descending" + "'", str15, "descending");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "descending" + "'", str19, "descending");
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(accessToken31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test06624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06624");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setAuthServerEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setAuthServerEndpoint("refresh_token");
        org.osiam.client.OsiamConnector osiamConnector15 = builder10.build();
        org.osiam.client.oauth.AccessToken accessToken16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser17 = osiamConnector15.getCurrentUserBasic(accessToken16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
    }

    @Test
    public void test06625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06625");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet62 = accessToken60.getScopes();
        boolean boolean63 = scopeSerializer0.isEmpty(serializerProvider53, scopeSet62);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass64 = scopeSerializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer65 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer66 = scopeSerializer0.unwrappingSerializer(nameTransformer65);
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer67 = scopeSerializer0.getDelegatee();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass68 = scopeSerializer0.handledType();
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer69 = scopeSerializer0.getDelegatee();
        boolean boolean70 = scopeSerializer0.usesObjectId();
        boolean boolean71 = scopeSerializer0.isUnwrappingSerializer();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(scopeSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(scopeSetClass64);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer66);
        org.junit.Assert.assertNull(wildcardJsonSerializer67);
        org.junit.Assert.assertNull(scopeSetClass68);
        org.junit.Assert.assertNull(wildcardJsonSerializer69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test06626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06626");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=GET, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=Cannot connect to server, userName=Authorization]");
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The string \"AccessToken [token=Bearer , expiresAt=Sun Dec 02 16\" for the URI component SCHEME contains an invalid character, ' ', at index 11.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06627");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET POST PUT PATCH DELETE");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope7 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.addScope(scope7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setClientId("ADMIN");
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setClientId("refresh_token");
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshToken("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setUserId("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        java.lang.String str18 = accessToken17.getType();
        java.lang.String str19 = accessToken17.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user20 = osiamUserService2.replaceUser("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamRequestException: hi!", user4, accessToken17);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(scope7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.osiam.client.exception.ConflictException: PATCH" + "'", str19, "org.osiam.client.exception.ConflictException: PATCH");
    }

    @Test
    public void test06628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06628");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query7 = queryBuilder4.build();
        org.osiam.client.query.Query query8 = query7.nextPage();
        org.osiam.client.query.Query query9 = query8.previousPage();
        org.osiam.client.query.QueryBuilder queryBuilder10 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.filter("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.descending("org.osiam.client.exception.OsiamClientException: descending");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(query7);
        org.junit.Assert.assertNotNull(query8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
    }

    @Test
    public void test06629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06629");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("password");
        org.osiam.client.OsiamConnector.Builder builder10 = builder6.setAuthServerEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder12 = builder6.setClientRedirectUri("client_credentials");
        org.osiam.client.OsiamConnector osiamConnector13 = builder12.build();
        org.osiam.client.query.QueryBuilder queryBuilder14 = osiamConnector13.createQueryBuilder();
        org.osiam.client.AuthService.Builder builder16 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder18 = builder16.setClientId("ME");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService21 = builder20.build();
        org.osiam.client.OsiamGroupService.Builder builder23 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService24 = builder23.build();
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken31 = builder30.build();
        boolean boolean32 = accessToken31.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet33 = accessToken31.getScopes();
        java.lang.String str34 = osiamGroupService24.extractErrorMessageForbidden(accessToken31);
        boolean boolean35 = accessToken31.isClientOnly();
        java.lang.String str36 = authService21.extractErrorMessageForbidden(accessToken31);
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken45 = builder42.build();
        java.lang.String str46 = accessToken45.toString();
        java.lang.String str47 = authService21.extractErrorMessageForbidden(accessToken45);
        java.lang.String str48 = accessToken45.toString();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector13.revokeAccessToken(accessToken45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(authService21);
        org.junit.Assert.assertNotNull(osiamGroupService24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(accessToken31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(scopeSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Insufficient scopes: []" + "'", str34, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(accessToken45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str46, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Insufficient scopes: []" + "'", str47, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str48, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
    }

    @Test
    public void test06630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06630");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder4 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.descending("hi!");
        org.osiam.client.query.Query query13 = queryBuilder12.build();
        java.lang.String str14 = query13.getAttributes();
        java.lang.String str15 = query13.toString();
        java.lang.String str16 = query13.getSortBy();
        org.osiam.client.query.Query query17 = query13.nextPage();
        org.osiam.client.AuthService.Builder builder19 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder21 = builder19.setClientId("ME");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService28 = builder27.build();
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        boolean boolean36 = accessToken35.isRefreshTokenExpired();
        java.lang.String str37 = authService28.extractErrorMessageForbidden(accessToken35);
        boolean boolean38 = accessToken35.isRefreshTokenExpired();
        java.lang.String str39 = accessToken35.getType();
        java.lang.String str40 = accessToken35.getToken();
        java.util.Date date41 = accessToken35.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult42 = osiamUserService3.searchUsers(query17, accessToken35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Authorization" + "'", str14, "Authorization");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str15, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(authService28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Insufficient scopes: []" + "'", str37, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Bearer " + "'", str40, "Bearer ");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test06631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06631");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Cannot connect to server");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.AuthService.Builder builder4 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder6 = builder4.setClientId("ME");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService9 = builder8.build();
        org.osiam.client.OsiamGroupService.Builder builder11 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService12 = builder11.build();
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        boolean boolean20 = accessToken19.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet21 = accessToken19.getScopes();
        java.lang.String str22 = osiamGroupService12.extractErrorMessageForbidden(accessToken19);
        boolean boolean23 = accessToken19.isClientOnly();
        java.lang.String str24 = authService9.extractErrorMessageForbidden(accessToken19);
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken33 = builder30.build();
        java.lang.String str34 = accessToken33.toString();
        java.lang.String str35 = authService9.extractErrorMessageForbidden(accessToken33);
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken42 = builder41.build();
        java.util.Date date43 = accessToken42.getExpiresAt();
        java.lang.String str44 = accessToken42.getRefreshToken();
        java.lang.String str45 = accessToken42.getType();
        java.lang.String str46 = accessToken42.getClientId();
        java.lang.String str47 = accessToken42.getUserName();
        java.lang.String str48 = authService9.extractErrorMessageForbidden(accessToken42);
        org.osiam.client.oauth.AccessToken.Builder builder50 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date51 = null;
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.setRefreshTokenExpiresAt(date51);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder50.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken55 = builder54.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken55);
        java.util.Date date57 = accessToken55.getExpiresAt();
        java.lang.String str58 = authService9.extractErrorMessageForbidden(accessToken55);
        java.util.Date date59 = accessToken55.getExpiresAt();
        boolean boolean60 = accessToken55.isRefreshTokenExpired();
        boolean boolean61 = accessToken55.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user62 = osiamUserService2.getCurrentUser(accessToken55);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(authService9);
        org.junit.Assert.assertNotNull(osiamGroupService12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(scopeSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Insufficient scopes: []" + "'", str22, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Insufficient scopes: []" + "'", str24, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str34, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Insufficient scopes: []" + "'", str48, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(accessToken55);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Insufficient scopes: []" + "'", str58, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test06632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06632");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshToken("GET");
        org.osiam.client.OsiamGroupService.Builder builder19 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService20 = builder19.build();
        org.osiam.client.OsiamGroupService osiamGroupService21 = builder19.build();
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken28);
        java.lang.String str30 = osiamGroupService21.extractErrorMessageForbidden(accessToken28);
        java.util.Date date31 = accessToken28.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder15.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.addScope(scope35);
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException39 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean40 = scope37.equals((java.lang.Object) invalidAttributeException39);
        java.lang.String str41 = scope37.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder34.addScope(scope37);
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder50 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope51 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.addScope(scope51);
        org.osiam.client.oauth.Scope scope53 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException55 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean56 = scope53.equals((java.lang.Object) invalidAttributeException55);
        java.lang.String str57 = scope53.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder50.addScope(scope53);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder46.addScope(scope53);
        org.osiam.client.oauth.AccessToken.Builder builder61 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope62 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder61.addScope(scope62);
        org.osiam.client.oauth.Scope scope64 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException66 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean67 = scope64.equals((java.lang.Object) invalidAttributeException66);
        java.lang.String str68 = scope64.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder61.addScope(scope64);
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder69.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder71.setUserId("");
        org.osiam.client.oauth.Scope scope74 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder73.addScope(scope74);
        org.osiam.client.oauth.AccessToken.Builder builder77 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date78 = null;
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder77.setRefreshTokenExpiresAt(date78);
        org.osiam.client.oauth.AccessToken.Builder builder81 = builder77.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken82 = builder81.build();
        java.util.Date date83 = accessToken82.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder84 = builder73.setRefreshTokenExpiresAt(date83);
        org.osiam.client.oauth.AccessToken.Builder builder85 = builder46.setRefreshTokenExpiresAt(date83);
        org.osiam.client.oauth.AccessToken.Builder builder87 = builder85.setRefreshToken("");
        org.osiam.client.oauth.AccessToken.Builder builder89 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date90 = null;
        org.osiam.client.oauth.AccessToken.Builder builder91 = builder89.setRefreshTokenExpiresAt(date90);
        org.osiam.client.oauth.AccessToken.Builder builder93 = builder89.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken94 = builder93.build();
        java.util.Date date95 = accessToken94.getExpiresAt();
        java.util.Date date96 = accessToken94.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder97 = builder85.setRefreshTokenExpiresAt(date96);
        org.osiam.client.oauth.AccessToken.Builder builder98 = builder32.setRefreshTokenExpiresAt(date96);
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(osiamGroupService20);
        org.junit.Assert.assertNotNull(osiamGroupService21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Insufficient scopes: []" + "'", str30, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "GET" + "'", str41, "GET");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(scope51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(scope53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "GET" + "'", str57, "GET");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(scope62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(scope64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "GET" + "'", str68, "GET");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(scope74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(accessToken82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(accessToken94);
        org.junit.Assert.assertNotNull(date95);
        org.junit.Assert.assertEquals(date95.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date96);
        org.junit.Assert.assertEquals(date96.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test06633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06633");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.OsiamGroupService.Builder builder8 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken16.getScopes();
        java.lang.String str19 = osiamGroupService9.extractErrorMessageForbidden(accessToken16);
        boolean boolean20 = accessToken16.isClientOnly();
        java.lang.String str21 = authService6.extractErrorMessageForbidden(accessToken16);
        org.osiam.client.AuthService.Builder builder23 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientId("ME");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService28 = builder27.build();
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        boolean boolean36 = accessToken35.isRefreshTokenExpired();
        boolean boolean37 = accessToken35.isClientOnly();
        java.lang.String str38 = accessToken35.getClientId();
        java.lang.String str39 = authService28.extractErrorMessageForbidden(accessToken35);
        java.lang.String str40 = accessToken35.getUserId();
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.lang.String str49 = accessToken47.getUserId();
        boolean boolean50 = accessToken47.isRefreshTokenExpired();
        boolean boolean51 = accessToken35.equals((java.lang.Object) accessToken47);
        java.lang.String str52 = accessToken35.getUserName();
        java.lang.String str53 = authService6.extractErrorMessageForbidden(accessToken35);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken55 = authService6.retrieveAccessToken("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(authService28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Insufficient scopes: []" + "'", str53, "Insufficient scopes: []");
    }

    @Test
    public void test06634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06634");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientId("org.osiam.client.exception.ConflictException: org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.AuthService.Builder builder7 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientId("ME");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService12 = builder11.build();
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        boolean boolean20 = accessToken19.isRefreshTokenExpired();
        boolean boolean21 = accessToken19.isClientOnly();
        java.lang.String str22 = accessToken19.getClientId();
        java.lang.String str23 = authService12.extractErrorMessageForbidden(accessToken19);
        java.lang.String str24 = accessToken19.getUserId();
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken31 = builder30.build();
        boolean boolean32 = accessToken31.isRefreshTokenExpired();
        java.lang.String str33 = accessToken31.getUserId();
        boolean boolean34 = accessToken31.isRefreshTokenExpired();
        boolean boolean35 = accessToken19.equals((java.lang.Object) accessToken31);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList36 = osiamConnector5.getAllGroups(accessToken19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(authService12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Insufficient scopes: []" + "'", str23, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(accessToken31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test06635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06635");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        java.util.Collection<java.lang.Object> objCollection7 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader8 = scopeDeserializer0.getObjectIdReader();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = scopeDeserializer0.getEmptyValue();
        boolean boolean10 = scopeDeserializer0.isCachable();
        boolean boolean11 = scopeDeserializer0.isCachable();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNull(objCollection7);
        org.junit.Assert.assertNull(objectIdReader8);
        org.junit.Assert.assertNull(scopeSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test06636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06636");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.OsiamGroupService.Builder builder8 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken16.getScopes();
        java.lang.String str19 = osiamGroupService9.extractErrorMessageForbidden(accessToken16);
        boolean boolean20 = accessToken16.isClientOnly();
        java.lang.String str21 = authService6.extractErrorMessageForbidden(accessToken16);
        org.osiam.client.AuthService.Builder builder23 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientId("ME");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService28 = builder27.build();
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        boolean boolean36 = accessToken35.isRefreshTokenExpired();
        boolean boolean37 = accessToken35.isClientOnly();
        java.lang.String str38 = accessToken35.getClientId();
        java.lang.String str39 = authService28.extractErrorMessageForbidden(accessToken35);
        java.lang.String str40 = accessToken35.getUserId();
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.lang.String str49 = accessToken47.getUserId();
        boolean boolean50 = accessToken47.isRefreshTokenExpired();
        boolean boolean51 = accessToken35.equals((java.lang.Object) accessToken47);
        java.lang.String str52 = accessToken35.getUserName();
        java.lang.String str53 = authService6.extractErrorMessageForbidden(accessToken35);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken55 = authService6.retrieveAccessToken("org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(authService28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Insufficient scopes: []" + "'", str53, "Insufficient scopes: []");
    }

    @Test
    public void test06637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06637");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("ME");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder6 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        java.util.Date date15 = accessToken14.getExpiresAt();
        java.lang.String str16 = accessToken14.getRefreshToken();
        boolean boolean17 = accessToken14.isClientOnly();
        java.lang.String str18 = osiamGroupService7.extractErrorMessageForbidden(accessToken14);
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        java.util.Date date26 = accessToken25.getExpiresAt();
        java.lang.String str27 = accessToken25.getUserName();
        java.util.Date date28 = accessToken25.getRefreshTokenExpiresAt();
        java.lang.String str29 = osiamGroupService7.extractErrorMessageForbidden(accessToken25);
        org.osiam.client.AuthService.Builder builder31 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder33 = builder31.setClientId("ME");
        org.osiam.client.AuthService.Builder builder35 = builder33.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService36 = builder35.build();
        org.osiam.client.OsiamGroupService.Builder builder38 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService39 = builder38.build();
        org.osiam.client.oauth.AccessToken.Builder builder41 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date42 = null;
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setRefreshTokenExpiresAt(date42);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder41.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken46 = builder45.build();
        boolean boolean47 = accessToken46.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet48 = accessToken46.getScopes();
        java.lang.String str49 = osiamGroupService39.extractErrorMessageForbidden(accessToken46);
        boolean boolean50 = accessToken46.isClientOnly();
        java.lang.String str51 = authService36.extractErrorMessageForbidden(accessToken46);
        org.osiam.client.oauth.AccessToken.Builder builder53 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date54 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.setRefreshTokenExpiresAt(date54);
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder53.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken60 = builder57.build();
        java.lang.String str61 = accessToken60.toString();
        java.lang.String str62 = authService36.extractErrorMessageForbidden(accessToken60);
        org.osiam.client.oauth.AccessToken.Builder builder64 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date65 = null;
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder64.setRefreshTokenExpiresAt(date65);
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder64.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken69 = builder68.build();
        java.util.Date date70 = accessToken69.getExpiresAt();
        java.lang.String str71 = accessToken69.getRefreshToken();
        java.lang.String str72 = accessToken69.getType();
        java.lang.String str73 = accessToken69.getClientId();
        java.lang.String str74 = accessToken69.getUserName();
        java.lang.String str75 = authService36.extractErrorMessageForbidden(accessToken69);
        org.osiam.client.exception.UnauthorizedException unauthorizedException77 = new org.osiam.client.exception.UnauthorizedException("client_credentials");
        int int78 = unauthorizedException77.getHttpStatusCode();
        int int79 = unauthorizedException77.getHttpStatusCode();
        java.lang.Throwable[] throwableArray80 = unauthorizedException77.getSuppressed();
        boolean boolean81 = accessToken69.equals((java.lang.Object) unauthorizedException77);
        java.lang.String str82 = accessToken69.getType();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet83 = accessToken69.getScopes();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken69);
        java.lang.String str85 = osiamGroupService7.extractErrorMessageForbidden(accessToken69);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user86 = osiamUserService3.getUser("Insufficient scopes: [Authorization, GET, GET POST PUT PATCH DELETE, PUT]", accessToken69);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Insufficient scopes: []" + "'", str29, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(authService36);
        org.junit.Assert.assertNotNull(osiamGroupService39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(accessToken46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(scopeSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Insufficient scopes: []" + "'", str49, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Insufficient scopes: []" + "'", str51, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str61, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Insufficient scopes: []" + "'", str62, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(accessToken69);
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Insufficient scopes: []" + "'", str75, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 401 + "'", int78 == 401);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 401 + "'", int79 == 401);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(scopeSet83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Insufficient scopes: []" + "'", str85, "Insufficient scopes: []");
    }

    @Test
    public void test06638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06638");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("ME");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamConnector.Builder builder4 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        java.lang.String str18 = accessToken16.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder19 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder21.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.descending("hi!");
        org.osiam.client.query.Query query28 = queryBuilder27.build();
        java.lang.String str29 = query28.toString();
        java.lang.String str30 = query28.getSortOrder();
        java.lang.String str31 = query28.getSortBy();
        java.lang.String str32 = query28.getFilter();
        java.lang.String str33 = query28.toString();
        boolean boolean34 = accessToken16.equals((java.lang.Object) query28);
        org.osiam.client.query.QueryBuilder queryBuilder35 = osiamConnector9.createQueryBuilder(query28);
        org.osiam.client.query.QueryBuilder queryBuilder36 = osiamConnector9.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder37 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder37.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder43 = queryBuilder39.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.descending("hi!");
        org.osiam.client.query.Query query46 = queryBuilder45.build();
        java.lang.String str47 = query46.toString();
        java.lang.String str48 = query46.getSortOrder();
        java.lang.String str49 = query46.getSortBy();
        java.lang.String str50 = query46.getFilter();
        java.lang.String str51 = query46.getSortOrder();
        java.lang.String str52 = query46.getAttributes();
        java.lang.String str53 = query46.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder54 = osiamConnector9.createQueryBuilder(query46);
        int int55 = query46.getCount();
        org.osiam.client.AuthService.Builder builder57 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder59 = builder57.setClientId("ME");
        org.osiam.client.AuthService.Builder builder61 = builder59.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder63 = builder61.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder65 = builder63.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService66 = builder65.build();
        org.osiam.client.oauth.AccessToken.Builder builder68 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date69 = null;
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder68.setRefreshTokenExpiresAt(date69);
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder68.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken73 = builder72.build();
        boolean boolean74 = accessToken73.isRefreshTokenExpired();
        java.lang.String str75 = authService66.extractErrorMessageForbidden(accessToken73);
        boolean boolean76 = accessToken73.isRefreshTokenExpired();
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException78 = new org.osiam.client.exception.InvalidAttributeException("POST");
        boolean boolean79 = accessToken73.equals((java.lang.Object) invalidAttributeException78);
        java.lang.String str80 = accessToken73.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult81 = osiamUserService3.searchUsers(query46, accessToken73);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(query28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "descending" + "'", str30, "descending");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str33, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(query46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str47, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "descending" + "'", str48, "descending");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "descending" + "'", str51, "descending");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Authorization" + "'", str52, "Authorization");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Authorization" + "'", str53, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(authService66);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(accessToken73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Insufficient scopes: []" + "'", str75, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
    }

    @Test
    public void test06639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06639");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.resources.scim.Group group5 = null;
        org.osiam.client.AuthService.Builder builder7 = new org.osiam.client.AuthService.Builder("hi!");
        org.osiam.client.AuthService authService8 = builder7.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        java.lang.String str16 = accessToken15.toString();
        boolean boolean17 = accessToken15.isRefreshTokenExpired();
        java.lang.String str18 = authService8.extractErrorMessageForbidden(accessToken15);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group19 = osiamGroupService3.updateGroup("org.osiam.client.exception.OsiamClientException: ADMIN", group5, accessToken15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(authService8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str16, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
    }

    @Test
    public void test06640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06640");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet15 = accessToken12.getScopes();
        java.lang.String str16 = osiamGroupService3.extractErrorMessageForbidden(accessToken12);
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget18 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        boolean boolean26 = accessToken25.isRefreshTokenExpired();
        boolean boolean27 = accessToken25.isClientOnly();
        java.lang.String str28 = accessToken25.getClientId();
        boolean boolean29 = accessToken25.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList30 = osiamGroupService3.getAllGroups(accessToken25);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(scopeSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Insufficient scopes: []" + "'", str16, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget17);
        org.junit.Assert.assertNotNull(webTarget18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test06641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06641");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientSecret("");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        java.lang.String str13 = accessToken12.toString();
        java.lang.String str14 = accessToken12.getToken();
        boolean boolean15 = accessToken12.isExpired();
        java.lang.String str16 = accessToken12.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user17 = osiamConnector7.getUser("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET POST PUT PATCH DELETE], refreshTokenId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=refresh_token, userId=org.osiam.client.exception.ConflictException: PATCH, userName=]", accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str13, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "client_credentials" + "'", str14, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test06642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06642");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientId("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("2024-03-22T13:51:20.388");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test06643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06643");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientId("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector osiamConnector13 = builder12.build();
        org.osiam.client.AuthService.Builder builder16 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder18 = builder16.setClientId("ME");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService25 = builder24.build();
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        boolean boolean33 = accessToken32.isRefreshTokenExpired();
        java.lang.String str34 = authService25.extractErrorMessageForbidden(accessToken32);
        boolean boolean35 = accessToken32.isRefreshTokenExpired();
        java.lang.String str36 = accessToken32.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group37 = osiamConnector13.getGroup("org.osiam.client.exception.ConnectionInitializationException: AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", accessToken32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The string \"Insufficient scopes\" for the URI component SCHEME contains an invalid character, ' ', at index 12.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(authService25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Insufficient scopes: []" + "'", str34, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test06644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06644");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.ascending("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(0);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.attributes("hi!");
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder17.ascending("org.osiam.client.exception.OsiamRequestException: hi!");
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder17.count((int) (byte) 1);
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.descending("org.osiam.client.exception.NoResultException: refresh_token");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
    }

    @Test
    public void test06645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06645");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer7 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer6);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader8 = scopeSetJsonDeserializer5.getObjectIdReader();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = scopeSetJsonDeserializer5.getEmptyValue();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer7);
        org.junit.Assert.assertNull(objectIdReader8);
        org.junit.Assert.assertNull(scopeSet9);
    }

    @Test
    public void test06646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06646");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget15 = osiamGroupService3.targetEndpoint;
        org.osiam.client.AuthService.Builder builder17 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder19 = builder17.setClientId("ME");
        org.osiam.client.AuthService.Builder builder21 = builder19.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService22 = builder21.build();
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken29 = builder28.build();
        boolean boolean30 = accessToken29.isRefreshTokenExpired();
        java.lang.String str31 = accessToken29.getUserId();
        java.lang.String str32 = accessToken29.getClientId();
        boolean boolean33 = accessToken29.isClientOnly();
        java.lang.String str34 = authService22.extractErrorMessageForbidden(accessToken29);
        java.lang.String str35 = accessToken29.toString();
        java.lang.String str36 = accessToken29.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList37 = osiamGroupService3.getAllGroups(accessToken29);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(webTarget15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(authService22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Insufficient scopes: []" + "'", str34, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str35, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test06647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06647");
        org.osiam.client.exception.OsiamClientException osiamClientException1 = new org.osiam.client.exception.OsiamClientException("PATCH");
        java.lang.String str2 = osiamClientException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.osiam.client.exception.OsiamClientException: PATCH" + "'", str2, "org.osiam.client.exception.OsiamClientException: PATCH");
    }

    @Test
    public void test06648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06648");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("refresh_token");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = osiamGroupService3.extractErrorMessageUnauthorized("POST", statusType5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
    }

    @Test
    public void test06649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06649");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder7 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder7.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet17 = accessToken15.getScopes();
        java.lang.String str18 = osiamGroupService8.extractErrorMessageForbidden(accessToken15);
        boolean boolean19 = accessToken15.isClientOnly();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet20 = accessToken15.getScopes();
        java.lang.String str21 = accessToken15.getToken();
        java.lang.String str22 = osiamGroupService3.extractErrorMessageForbidden(accessToken15);
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken29 = builder28.build();
        java.util.Date date30 = accessToken29.getExpiresAt();
        java.lang.String str31 = accessToken29.getRefreshToken();
        java.lang.String str32 = accessToken29.getType();
        java.lang.String str33 = accessToken29.getClientId();
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException35 = new org.osiam.client.exception.InvalidAttributeException("ADMIN");
        boolean boolean36 = accessToken29.equals((java.lang.Object) invalidAttributeException35);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList37 = osiamGroupService3.getAllResources(accessToken29);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(scopeSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(scopeSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Bearer " + "'", str21, "Bearer ");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Insufficient scopes: []" + "'", str22, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test06650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06650");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getClientId();
        boolean boolean17 = accessToken13.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.addScope(scope20);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException24 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean25 = scope22.equals((java.lang.Object) invalidAttributeException24);
        java.lang.String str26 = scope22.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder19.addScope(scope22);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setUserName("Authorization");
        boolean boolean34 = accessToken13.equals((java.lang.Object) builder31);
        java.lang.String str35 = osiamGroupService6.extractErrorMessageForbidden(accessToken13);
        org.osiam.client.query.QueryBuilder queryBuilder36 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder42 = queryBuilder38.count((int) (short) -1);
        org.osiam.client.query.QueryBuilder queryBuilder44 = queryBuilder42.filter("Bearer ");
        org.osiam.client.query.QueryBuilder queryBuilder46 = queryBuilder42.filter("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.query.Query query47 = queryBuilder46.build();
        org.osiam.client.OsiamGroupService.Builder builder49 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService50 = builder49.build();
        org.osiam.client.oauth.AccessToken.Builder builder52 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setRefreshTokenExpiresAt(date53);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder52.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken57 = builder56.build();
        java.util.Date date58 = accessToken57.getExpiresAt();
        java.lang.String str59 = accessToken57.getRefreshToken();
        boolean boolean60 = accessToken57.isClientOnly();
        java.lang.String str61 = osiamGroupService50.extractErrorMessageForbidden(accessToken57);
        org.osiam.client.oauth.AccessToken.Builder builder63 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date64 = null;
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder63.setRefreshTokenExpiresAt(date64);
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder63.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken68 = builder67.build();
        boolean boolean69 = accessToken68.isRefreshTokenExpired();
        java.lang.String str70 = accessToken68.getUserId();
        java.lang.String str71 = accessToken68.getToken();
        boolean boolean72 = accessToken68.isExpired();
        java.lang.String str73 = accessToken68.getClientId();
        java.lang.String str74 = accessToken68.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet75 = accessToken68.getScopes();
        java.lang.String str76 = osiamGroupService50.extractErrorMessageForbidden(accessToken68);
        java.lang.String str77 = accessToken68.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult78 = osiamGroupService6.searchResources(query47, accessToken68);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GET" + "'", str26, "GET");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(queryBuilder46);
        org.junit.Assert.assertNotNull(query47);
        org.junit.Assert.assertNotNull(osiamGroupService50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(accessToken57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Insufficient scopes: []" + "'", str61, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(accessToken68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Bearer " + "'", str71, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(scopeSet75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Insufficient scopes: []" + "'", str76, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
    }

    @Test
    public void test06651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06651");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder2.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken7 = builder6.build();
        boolean boolean8 = accessToken7.isRefreshTokenExpired();
        java.lang.String str9 = accessToken7.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet10 = accessToken7.getScopes();
        boolean boolean11 = scopeSerializer0.isEmpty(scopeSet10);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer12 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer13 = scopeSerializer0.unwrappingSerializer(nameTransformer12);
        org.osiam.client.helper.ScopeSerializer scopeSerializer14 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean15 = scopeSerializer14.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer16 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer17 = scopeSerializer14.unwrappingSerializer(nameTransformer16);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass18 = scopeSetJsonSerializer17.handledType();
        boolean boolean19 = scopeSetJsonSerializer17.usesObjectId();
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer20 = scopeSetJsonSerializer17.getDelegatee();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider21 = null;
        org.osiam.client.AuthService.Builder builder23 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService26 = builder25.build();
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        java.util.Date date34 = accessToken33.getExpiresAt();
        java.lang.String str35 = accessToken33.getRefreshToken();
        java.lang.String str36 = accessToken33.getType();
        java.lang.String str37 = accessToken33.getClientId();
        java.lang.String str38 = accessToken33.getUserName();
        java.lang.String str39 = accessToken33.toString();
        java.lang.String str40 = accessToken33.getUserName();
        java.lang.String str41 = authService26.extractErrorMessageForbidden(accessToken33);
        org.osiam.client.oauth.AccessToken.Builder builder43 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date44 = null;
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setRefreshTokenExpiresAt(date44);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder43.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken48 = builder47.build();
        boolean boolean49 = accessToken48.isRefreshTokenExpired();
        java.lang.String str50 = accessToken48.getUserId();
        java.lang.String str51 = accessToken48.getClientId();
        boolean boolean52 = accessToken48.isClientOnly();
        java.lang.String str53 = accessToken48.getRefreshToken();
        java.lang.String str54 = authService26.extractErrorMessageForbidden(accessToken48);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet55 = accessToken48.getScopes();
        boolean boolean56 = scopeSetJsonSerializer17.isEmpty(serializerProvider21, scopeSet55);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator57 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider58 = null;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer typeSerializer59 = null;
        // The following exception was thrown during execution in test generation
        try {
            scopeSetJsonSerializer13.serializeWithType(scopeSet55, jsonGenerator57, serializerProvider58, typeSerializer59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(accessToken7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(scopeSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer17);
        org.junit.Assert.assertNull(scopeSetClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardJsonSerializer20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(authService26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str39, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: []" + "'", str41, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(accessToken48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Insufficient scopes: []" + "'", str54, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scopeSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test06652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06652");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.getAttributes();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getSortOrder();
        java.lang.String str21 = query17.getAttributes();
        java.lang.String str22 = query17.getAttributes();
        long long23 = query17.getStartIndex();
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        boolean boolean31 = accessToken30.isRefreshTokenExpired();
        java.lang.String str32 = accessToken30.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder33 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder35.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.descending("hi!");
        org.osiam.client.query.Query query42 = queryBuilder41.build();
        java.lang.String str43 = query42.toString();
        java.lang.String str44 = query42.getSortOrder();
        java.lang.String str45 = query42.getSortBy();
        java.lang.String str46 = query42.getFilter();
        java.lang.String str47 = query42.getSortOrder();
        java.lang.String str48 = query42.getAttributes();
        boolean boolean49 = accessToken30.equals((java.lang.Object) query42);
        java.lang.String str50 = accessToken30.getToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken30);
        boolean boolean52 = accessToken30.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult53 = osiamConnector7.searchUsers(query17, accessToken30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Authorization" + "'", str18, "Authorization");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "descending" + "'", str20, "descending");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Authorization" + "'", str21, "Authorization");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Authorization" + "'", str22, "Authorization");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "descending" + "'", str47, "descending");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Authorization" + "'", str48, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Bearer " + "'", str50, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test06653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06653");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder23 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.descending("hi!");
        org.osiam.client.query.Query query32 = queryBuilder31.build();
        java.lang.String str33 = query32.toString();
        java.lang.String str34 = query32.toString();
        org.osiam.client.query.Query query35 = query32.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder36 = osiamConnector7.createQueryBuilder(query32);
        org.osiam.client.query.QueryBuilder queryBuilder37 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder38 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder42 = queryBuilder40.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder44 = queryBuilder40.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder46 = queryBuilder44.descending("hi!");
        org.osiam.client.query.Query query47 = queryBuilder46.build();
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder46.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder46.filter("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.query.QueryBuilder queryBuilder53 = queryBuilder46.descending("ME");
        org.osiam.client.query.Query query54 = queryBuilder46.build();
        long long55 = query54.getStartIndex();
        int int56 = query54.getCount();
        org.osiam.client.oauth.AccessToken.Builder builder58 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date59 = null;
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setRefreshTokenExpiresAt(date59);
        org.osiam.client.oauth.AccessToken.Builder builder62 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date63 = null;
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder62.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken67 = builder66.build();
        java.util.Date date68 = accessToken67.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder58.setRefreshTokenExpiresAt(date68);
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder58.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder58.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder75 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date76 = null;
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder75.setRefreshTokenExpiresAt(date76);
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder75.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken80 = builder79.build();
        boolean boolean81 = accessToken80.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet82 = accessToken80.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder83 = builder73.addScopes(scopeSet82);
        org.osiam.client.oauth.AccessToken accessToken84 = builder73.build();
        org.osiam.client.oauth.AccessToken.Builder builder86 = builder73.setClientId("org.osiam.client.exception.ConflictException: ");
        org.osiam.client.oauth.AccessToken accessToken87 = builder73.build();
        boolean boolean88 = accessToken87.isExpired();
        boolean boolean89 = accessToken87.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult90 = osiamConnector7.searchGroups(query54, accessToken87);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(query32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str33, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str34, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query35);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(queryBuilder46);
        org.junit.Assert.assertNotNull(query47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(queryBuilder53);
        org.junit.Assert.assertNotNull(query54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 100L + "'", long55 == 100L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(accessToken67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(accessToken80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(scopeSet82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(accessToken84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(accessToken87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test06654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06654");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        boolean boolean6 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer7 = scopeDeserializer0.getDelegatee();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty9 = scopeDeserializer0.findBackReference("authorization_code");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'authorization_code': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardJsonDeserializer7);
    }

    @Test
    public void test06655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06655");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService4 = builder3.build();
        org.osiam.client.AuthService.Builder builder6 = builder3.setClientRedirectUri("PATCH");
        org.osiam.client.AuthService authService7 = builder6.build();
        org.osiam.client.OsiamGroupService.Builder builder9 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        java.util.Date date18 = accessToken17.getExpiresAt();
        java.lang.String str19 = accessToken17.getRefreshToken();
        boolean boolean20 = accessToken17.isClientOnly();
        java.lang.String str21 = osiamGroupService10.extractErrorMessageForbidden(accessToken17);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        boolean boolean29 = accessToken28.isRefreshTokenExpired();
        java.lang.String str30 = accessToken28.getUserId();
        java.lang.String str31 = accessToken28.getToken();
        boolean boolean32 = accessToken28.isExpired();
        java.lang.String str33 = accessToken28.getClientId();
        java.lang.String str34 = accessToken28.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet35 = accessToken28.getScopes();
        java.lang.String str36 = osiamGroupService10.extractErrorMessageForbidden(accessToken28);
        java.util.Date date37 = accessToken28.getExpiresAt();
        java.lang.String str38 = authService7.extractErrorMessageForbidden(accessToken28);
        org.osiam.client.oauth.AccessToken.Builder builder40 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date41 = null;
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setRefreshTokenExpiresAt(date41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder40.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken45 = builder44.build();
        boolean boolean46 = accessToken45.isRefreshTokenExpired();
        java.lang.String str47 = accessToken45.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder48 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder50.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder50.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder56 = queryBuilder54.descending("hi!");
        org.osiam.client.query.Query query57 = queryBuilder56.build();
        java.lang.String str58 = query57.toString();
        java.lang.String str59 = query57.getSortOrder();
        java.lang.String str60 = query57.getSortBy();
        java.lang.String str61 = query57.getFilter();
        java.lang.String str62 = query57.getSortOrder();
        java.lang.String str63 = query57.getAttributes();
        boolean boolean64 = accessToken45.equals((java.lang.Object) query57);
        java.lang.String str65 = accessToken45.getToken();
        java.lang.String str66 = accessToken45.getRefreshToken();
        java.lang.String str67 = authService7.extractErrorMessageForbidden(accessToken45);
        org.osiam.client.oauth.AccessToken.Builder builder70 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date71 = null;
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder70.setRefreshTokenExpiresAt(date71);
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder70.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken75 = builder74.build();
        java.lang.String str76 = accessToken75.toString();
        java.lang.String str77 = accessToken75.getType();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken75);
        java.lang.String str79 = accessToken75.getClientId();
        boolean boolean80 = accessToken75.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            authService7.revokeAllAccessTokens("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]", accessToken75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(authService4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(authService7);
        org.junit.Assert.assertNotNull(osiamGroupService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Bearer " + "'", str31, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(scopeSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Insufficient scopes: []" + "'", str38, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(accessToken45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(queryBuilder56);
        org.junit.Assert.assertNotNull(query57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str58, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "descending" + "'", str59, "descending");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "descending" + "'", str62, "descending");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Authorization" + "'", str63, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Bearer " + "'", str65, "Bearer ");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Insufficient scopes: []" + "'", str67, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(accessToken75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str76, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test06656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06656");
        org.osiam.client.oauth.Scope scope1 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
    }

    @Test
    public void test06657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06657");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder3 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder3.setRefreshTokenExpiresAt(date4);
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope7 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException9 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean10 = scope7.equals((java.lang.Object) invalidAttributeException9);
        java.lang.String str11 = scope7.getValue();
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str14 = scope13.toString();
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str17 = scope16.getValue();
        java.lang.String str18 = scope16.getValue();
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException21 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean22 = scope19.equals((java.lang.Object) invalidAttributeException21);
        java.lang.String str23 = scope19.getValue();
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException29 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean30 = scope27.equals((java.lang.Object) invalidAttributeException29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.GET;
        boolean boolean35 = scope33.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray37 = new org.osiam.client.oauth.Scope[] { scope6, scope7, scope12, scope13, scope15, scope16, scope19, scope24, scope25, scope26, scope27, scope31, scope32, scope33, scope36 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet38 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet38, scopeArray37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder3.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet38);
        boolean boolean41 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet38);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider42 = null;
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet43 = null;
        boolean boolean44 = scopeSerializer0.isEmpty(serializerProvider42, scopeSet43);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder47 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date48 = null;
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.setRefreshTokenExpiresAt(date48);
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder47.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder47.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder47.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope56 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.addScope(scope56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setUserName("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.helper.ScopeSerializer scopeSerializer60 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean61 = scopeSerializer60.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer62 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer63 = scopeSerializer60.unwrappingSerializer(nameTransformer62);
        boolean boolean64 = scopeSerializer60.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer65 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer66 = scopeSerializer60.unwrappingSerializer(nameTransformer65);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper67 = null;
        com.fasterxml.jackson.databind.JavaType javaType68 = null;
        scopeSerializer60.acceptJsonFormatVisitor(jsonFormatVisitorWrapper67, javaType68);
        boolean boolean70 = scopeSerializer60.usesObjectId();
        boolean boolean71 = scopeSerializer60.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider72 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer73 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean74 = scopeSerializer73.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass75 = scopeSerializer73.handledType();
        org.osiam.client.oauth.AccessToken.Builder builder77 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date78 = null;
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder77.setRefreshTokenExpiresAt(date78);
        org.osiam.client.oauth.AccessToken.Builder builder81 = builder77.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken82 = builder81.build();
        java.util.Date date83 = accessToken82.getExpiresAt();
        java.lang.String str84 = accessToken82.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet85 = accessToken82.getScopes();
        boolean boolean86 = scopeSerializer73.isEmpty(scopeSet85);
        boolean boolean87 = scopeSerializer60.isEmpty(serializerProvider72, scopeSet85);
        org.osiam.client.oauth.AccessToken.Builder builder88 = builder59.addScopes(scopeSet85);
        boolean boolean89 = scopeSerializer0.isEmpty(serializerProvider45, scopeSet85);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertNotNull(scope7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GET" + "'", str11, "GET");
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ME" + "'", str14, "ME");
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PATCH" + "'", str18, "PATCH");
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GET" + "'", str23, "GET");
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(scopeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(scopeSetClass75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(accessToken82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(scopeSet85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test06658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06658");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET POST PUT PATCH DELETE");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.UpdateUser updateUser4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        boolean boolean13 = accessToken11.isClientOnly();
        java.lang.String str14 = accessToken11.getRefreshToken();
        boolean boolean15 = accessToken11.isExpired();
        boolean boolean16 = accessToken11.isExpired();
        boolean boolean17 = accessToken11.isClientOnly();
        java.util.Date date18 = accessToken11.getExpiresAt();
        java.lang.String str19 = accessToken11.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user20 = osiamUserService2.updateUser("org.osiam.client.exception.NoResultException: authorization_code", updateUser4, accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test06659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06659");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.resources.scim.Group group6 = null;
        org.osiam.client.OsiamGroupService.Builder builder8 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder8.build();
        org.osiam.client.OsiamGroupService osiamGroupService10 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken17);
        java.lang.String str19 = osiamGroupService10.extractErrorMessageForbidden(accessToken17);
        javax.ws.rs.client.WebTarget webTarget20 = osiamGroupService10.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget21 = osiamGroupService10.targetEndpoint;
        org.osiam.client.AuthService.Builder builder23 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientId("ME");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService28 = builder27.build();
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        boolean boolean36 = accessToken35.isRefreshTokenExpired();
        boolean boolean37 = accessToken35.isClientOnly();
        java.lang.String str38 = accessToken35.getClientId();
        java.lang.String str39 = authService28.extractErrorMessageForbidden(accessToken35);
        java.lang.String str40 = accessToken35.getUserId();
        java.lang.String str41 = accessToken35.getClientId();
        java.lang.String str42 = osiamGroupService10.extractErrorMessageForbidden(accessToken35);
        boolean boolean43 = accessToken35.isRefreshTokenExpired();
        java.lang.String str44 = accessToken35.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group45 = osiamGroupService4.replaceResource("org.osiam.client.exception.UnauthorizedException: DELETE", group6, accessToken35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(osiamGroupService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget20);
        org.junit.Assert.assertNotNull(webTarget21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(authService28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Insufficient scopes: []" + "'", str42, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test06660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06660");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.getEmptyValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet7 = scopeDeserializer0.getNullValue();
        java.util.Collection<java.lang.Object> objCollection8 = scopeDeserializer0.getKnownPropertyNames();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertNull(scopeSet6);
        org.junit.Assert.assertNull(scopeSet7);
        org.junit.Assert.assertNull(objCollection8);
    }

    @Test
    public void test06661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06661");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.resources.scim.Group group5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        java.util.Date date13 = accessToken12.getExpiresAt();
        java.lang.String str14 = accessToken12.getUserName();
        java.lang.String str15 = accessToken12.getUserName();
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        boolean boolean23 = accessToken22.isRefreshTokenExpired();
        java.lang.String str24 = accessToken22.getClientId();
        boolean boolean25 = accessToken12.equals((java.lang.Object) accessToken22);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group26 = osiamGroupService3.replaceResource("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[PATCH, GET, GET POST PUT PATCH DELETE], refreshTokenId=AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]", group5, accessToken22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test06662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06662");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.addScope(scope14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setClientId("GET");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setType("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.addScope(scope22);
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException26 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean27 = scope24.equals((java.lang.Object) invalidAttributeException26);
        java.lang.String str28 = scope24.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder21.addScope(scope24);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder21.setRefreshToken("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date34 = null;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder33.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken38 = builder37.build();
        java.util.Date date39 = accessToken38.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder31.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder15.setExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setType("PUT");
        org.osiam.client.OsiamGroupService.Builder builder45 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService46 = builder45.build();
        org.osiam.client.OsiamGroupService osiamGroupService47 = builder45.build();
        org.osiam.client.oauth.AccessToken.Builder builder49 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date50 = null;
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder49.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken54 = builder53.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken54);
        java.lang.String str56 = osiamGroupService47.extractErrorMessageForbidden(accessToken54);
        java.util.Date date57 = accessToken54.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder41.setExpiresAt(date57);
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder41.setUserId("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GET" + "'", str28, "GET");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(osiamGroupService46);
        org.junit.Assert.assertNotNull(osiamGroupService47);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(accessToken54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Insufficient scopes: []" + "'", str56, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test06663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06663");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        boolean boolean1 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer3 = scopeDeserializer0.unwrappingDeserializer(nameTransformer2);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader4 = scopeDeserializer0.getObjectIdReader();
        java.util.Collection<java.lang.Object> objCollection5 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader6 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.core.JsonParser jsonParser7 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.lang.String str12 = accessToken11.toString();
        java.lang.String str13 = accessToken11.getUserId();
        java.lang.String str14 = accessToken11.getType();
        java.lang.String str15 = accessToken11.getToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet16 = accessToken11.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet17 = scopeDeserializer0.deserialize(jsonParser7, deserializationContext8, scopeSet16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Can not update object of type java.util.HashSet (by deserializer of type org.osiam.client.helper.ScopeDeserializer)");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer3);
        org.junit.Assert.assertNull(objectIdReader4);
        org.junit.Assert.assertNull(objCollection5);
        org.junit.Assert.assertNull(objectIdReader6);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str12, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "client_credentials" + "'", str15, "client_credentials");
        org.junit.Assert.assertNotNull(scopeSet16);
    }

    @Test
    public void test06664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06664");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer7 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer6);
        boolean boolean8 = scopeSetJsonDeserializer5.isCachable();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer9 = scopeSetJsonDeserializer5.getDelegatee();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet10 = scopeSetJsonDeserializer5.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader11 = scopeSetJsonDeserializer5.getObjectIdReader();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardJsonDeserializer9);
        org.junit.Assert.assertNull(scopeSet10);
        org.junit.Assert.assertNull(objectIdReader11);
    }

    @Test
    public void test06665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06665");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        boolean boolean6 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader7 = scopeDeserializer0.getObjectIdReader();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeDeserializer0.getEmptyValue();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer9 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass10 = scopeDeserializer9.handledType();
        boolean boolean11 = scopeDeserializer9.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet12 = scopeDeserializer9.getEmptyValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet13 = scopeDeserializer9.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader14 = scopeDeserializer9.getObjectIdReader();
        boolean boolean15 = scopeDeserializer9.isCachable();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer16 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer17 = scopeDeserializer9.unwrappingDeserializer(nameTransformer16);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader18 = scopeSetJsonDeserializer17.getObjectIdReader();
        boolean boolean19 = scopeSetJsonDeserializer17.isCachable();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer20 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer21 = scopeSetJsonDeserializer17.unwrappingDeserializer(nameTransformer20);
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer22 = scopeSetJsonDeserializer17.getDelegatee();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer23 = scopeDeserializer0.replaceDelegatee(scopeSetJsonDeserializer17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(objectIdReader7);
        org.junit.Assert.assertNull(scopeSet8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(scopeSet12);
        org.junit.Assert.assertNull(scopeSet13);
        org.junit.Assert.assertNull(objectIdReader14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer17);
        org.junit.Assert.assertNull(objectIdReader18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer21);
        org.junit.Assert.assertNull(wildcardJsonDeserializer22);
    }

    @Test
    public void test06666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06666");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.getEmptyValue();
        java.util.Collection<java.lang.Object> objCollection7 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeDeserializer0.getEmptyValue();
        boolean boolean9 = scopeDeserializer0.isCachable();
        boolean boolean10 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer11 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.core.JsonParser jsonParser12 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext13 = null;
        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeserializer14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj15 = scopeDeserializer0.deserializeWithType(jsonParser12, deserializationContext13, typeDeserializer14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNull(scopeSet6);
        org.junit.Assert.assertNull(objCollection7);
        org.junit.Assert.assertNull(scopeSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardJsonDeserializer11);
    }

    @Test
    public void test06667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06667");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.Query query10 = queryBuilder8.build();
        int int11 = query10.getCount();
        org.osiam.client.query.Query query12 = query10.nextPage();
        long long13 = query12.getStartIndex();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(query10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 11L + "'", long13 == 11L);
    }

    @Test
    public void test06668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06668");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder11 = builder7.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService12 = builder11.build();
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        java.util.Date date20 = accessToken19.getExpiresAt();
        java.lang.String str21 = accessToken19.getRefreshToken();
        boolean boolean22 = accessToken19.isClientOnly();
        java.lang.String str23 = accessToken19.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken24 = authService12.validateAccessToken(accessToken19);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(authService12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test06669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06669");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("PUT");
        org.osiam.client.OsiamConnector osiamConnector7 = builder4.build();
        org.osiam.client.OsiamConnector.Builder builder9 = builder4.setResourceServerEndpoint("org.osiam.client.exception.OsiamClientException: hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test06670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06670");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.OsiamGroupService.Builder builder8 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken16.getScopes();
        java.lang.String str19 = osiamGroupService9.extractErrorMessageForbidden(accessToken16);
        boolean boolean20 = accessToken16.isClientOnly();
        java.lang.String str21 = authService6.extractErrorMessageForbidden(accessToken16);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken30 = builder27.build();
        java.lang.String str31 = accessToken30.toString();
        java.lang.String str32 = authService6.extractErrorMessageForbidden(accessToken30);
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        java.util.Date date40 = accessToken39.getExpiresAt();
        java.lang.String str41 = accessToken39.getRefreshToken();
        java.lang.String str42 = accessToken39.getType();
        java.lang.String str43 = accessToken39.getClientId();
        java.lang.String str44 = accessToken39.getUserName();
        java.lang.String str45 = authService6.extractErrorMessageForbidden(accessToken39);
        org.osiam.client.oauth.AccessToken.Builder builder47 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date48 = null;
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.setRefreshTokenExpiresAt(date48);
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder47.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken52 = builder51.build();
        boolean boolean53 = accessToken52.isRefreshTokenExpired();
        java.lang.String str54 = accessToken52.getUserId();
        java.lang.String str55 = authService6.extractErrorMessageForbidden(accessToken52);
        java.lang.String str56 = accessToken52.getUserName();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str31, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Insufficient scopes: []" + "'", str45, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(accessToken52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Insufficient scopes: []" + "'", str55, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
    }

    @Test
    public void test06671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06671");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("ME");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getUserName();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.toString();
        java.lang.String str14 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.core.Response.StatusType statusType16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = osiamGroupService2.extractErrorMessageUnauthorized("org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388", statusType16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str13, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
    }

    @Test
    public void test06672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06672");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType8 = null;
        org.osiam.client.oauth.AccessToken accessToken9 = null;
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService3.checkAndHandleResponse("", statusType8, accessToken9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
    }

    @Test
    public void test06673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06673");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder23 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.descending("hi!");
        org.osiam.client.query.Query query32 = queryBuilder31.build();
        java.lang.String str33 = query32.toString();
        java.lang.String str34 = query32.toString();
        org.osiam.client.query.Query query35 = query32.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder36 = osiamConnector7.createQueryBuilder(query32);
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.addScope(scope39);
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException43 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean44 = scope41.equals((java.lang.Object) invalidAttributeException43);
        java.lang.String str45 = scope41.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder38.addScope(scope41);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder52.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken57 = builder56.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken57);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet59 = accessToken57.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user60 = osiamConnector7.getCurrentUser(accessToken57);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(query32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str33, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str34, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query35);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "GET" + "'", str45, "GET");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(accessToken57);
        org.junit.Assert.assertNotNull(scopeSet59);
    }

    @Test
    public void test06674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06674");
        org.osiam.client.oauth.Scope scope0 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.OsiamConnector.Builder builder1 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder3 = builder1.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder5 = builder3.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder7 = builder5.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder9 = builder7.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector10 = builder7.build();
        org.osiam.client.query.QueryBuilder queryBuilder11 = osiamConnector10.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder12 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query19 = queryBuilder16.build();
        org.osiam.client.query.Query query20 = query19.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector10.createQueryBuilder(query19);
        boolean boolean22 = scope0.equals((java.lang.Object) osiamConnector10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = osiamConnector10.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken31 = builder30.build();
        java.util.Date date32 = accessToken31.getExpiresAt();
        java.lang.String str33 = accessToken31.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken31);
        org.osiam.client.oauth.AccessToken.Builder builder36 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date37 = null;
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setRefreshTokenExpiresAt(date37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder36.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken41 = builder40.build();
        boolean boolean42 = accessToken41.isRefreshTokenExpired();
        boolean boolean43 = accessToken41.isClientOnly();
        java.lang.String str44 = accessToken41.getClientId();
        boolean boolean45 = accessToken41.isClientOnly();
        boolean boolean46 = accessToken31.equals((java.lang.Object) accessToken41);
        org.osiam.client.query.QueryBuilder queryBuilder47 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder47.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder49.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder53 = queryBuilder49.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder55 = queryBuilder53.descending("hi!");
        org.osiam.client.query.Query query56 = queryBuilder55.build();
        org.osiam.client.query.Query query57 = queryBuilder55.build();
        org.osiam.client.query.QueryBuilder queryBuilder59 = queryBuilder55.ascending("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        boolean boolean60 = accessToken31.equals((java.lang.Object) "org.osiam.client.exception.ConnectionInitializationException: PATCH");
        java.lang.String str61 = accessToken31.getRefreshToken();
        java.util.Date date62 = accessToken31.getRefreshTokenExpiresAt();
        boolean boolean63 = accessToken31.isClientOnly();
        boolean boolean64 = accessToken31.isClientOnly();
        java.util.Date date65 = accessToken31.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector10.deleteGroup("org.osiam.client.exception.ConflictException: ", accessToken31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scope0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(osiamConnector10);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(accessToken31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(accessToken41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(queryBuilder53);
        org.junit.Assert.assertNotNull(queryBuilder55);
        org.junit.Assert.assertNotNull(query56);
        org.junit.Assert.assertNotNull(query57);
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test06675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06675");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.descending("hi!");
        org.osiam.client.query.Query query19 = queryBuilder18.build();
        java.lang.String str20 = query19.toString();
        java.lang.String str21 = query19.getSortOrder();
        java.lang.String str22 = query19.getSortBy();
        java.lang.String str23 = query19.getFilter();
        java.lang.String str24 = query19.getSortOrder();
        java.lang.String str25 = query19.getAttributes();
        long long26 = query19.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder27 = osiamConnector9.createQueryBuilder(query19);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.query.Query query28 = query19.previousPage();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: StartIndex < 1 is not possible.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str20, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "descending" + "'", str21, "descending");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "descending" + "'", str24, "descending");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Authorization" + "'", str25, "Authorization");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder27);
    }

    @Test
    public void test06676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06676");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder12.setClientRedirectUri("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector23 = builder22.build();
        org.osiam.client.query.QueryBuilder queryBuilder24 = osiamConnector23.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder25 = osiamConnector23.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder26 = osiamConnector23.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        java.lang.String str31 = accessToken30.toString();
        java.lang.String str32 = accessToken30.getUserId();
        java.util.Date date33 = accessToken30.getExpiresAt();
        boolean boolean34 = accessToken30.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector23.deleteGroup("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]", accessToken30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(osiamConnector23);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str31, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test06677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06677");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer7 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer8 = scopeDeserializer0.unwrappingDeserializer(nameTransformer7);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer9 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer10 = scopeDeserializer0.unwrappingDeserializer(nameTransformer9);
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer11 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass12 = scopeDeserializer11.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer13 = scopeDeserializer11.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection14 = scopeDeserializer11.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer15 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer16 = scopeDeserializer11.unwrappingDeserializer(nameTransformer15);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer17 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer18 = scopeSetJsonDeserializer16.unwrappingDeserializer(nameTransformer17);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet19 = scopeSetJsonDeserializer16.getEmptyValue();
        boolean boolean20 = scopeSetJsonDeserializer16.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet21 = scopeSetJsonDeserializer16.getEmptyValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader22 = scopeSetJsonDeserializer16.getObjectIdReader();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer23 = scopeDeserializer0.replaceDelegatee(scopeSetJsonDeserializer16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer8);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardJsonDeserializer13);
        org.junit.Assert.assertNull(objCollection14);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer16);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer18);
        org.junit.Assert.assertNull(scopeSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(scopeSet21);
        org.junit.Assert.assertNull(objectIdReader22);
    }

    @Test
    public void test06678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06678");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.OsiamConnector.Builder builder32 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder34 = builder32.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder36 = builder34.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder38 = builder36.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder40 = builder38.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector41 = builder38.build();
        org.osiam.client.query.QueryBuilder queryBuilder42 = osiamConnector41.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder43 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder45.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder45.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder49.descending("hi!");
        org.osiam.client.query.Query query52 = queryBuilder51.build();
        org.osiam.client.query.Query query53 = queryBuilder51.build();
        long long54 = query53.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder55 = osiamConnector41.createQueryBuilder(query53);
        java.lang.String str56 = query53.getAttributes();
        long long57 = query53.getStartIndex();
        org.osiam.client.AuthService.Builder builder59 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder61 = builder59.setClientId("ME");
        org.osiam.client.AuthService.Builder builder63 = builder61.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService64 = builder63.build();
        org.osiam.client.oauth.AccessToken.Builder builder66 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date67 = null;
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder66.setRefreshTokenExpiresAt(date67);
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder66.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken71 = builder70.build();
        boolean boolean72 = accessToken71.isRefreshTokenExpired();
        boolean boolean73 = accessToken71.isClientOnly();
        java.lang.String str74 = accessToken71.getClientId();
        java.lang.String str75 = authService64.extractErrorMessageForbidden(accessToken71);
        boolean boolean76 = accessToken71.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult77 = osiamConnector5.searchGroups(query53, accessToken71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(osiamConnector41);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(query52);
        org.junit.Assert.assertNotNull(query53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Authorization" + "'", str56, "Authorization");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(authService64);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(accessToken71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Insufficient scopes: []" + "'", str75, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test06679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06679");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken accessToken7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group8 = osiamGroupService3.getResource("2024-03-22T13:51:20.388", accessToken7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
    }

    @Test
    public void test06680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06680");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService3.targetEndpoint;
        org.osiam.resources.scim.Group group16 = null;
        org.osiam.client.AuthService.Builder builder18 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientId("ME");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder26 = builder24.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService27 = builder26.build();
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date30 = null;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setRefreshTokenExpiresAt(date30);
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken34 = builder33.build();
        boolean boolean35 = accessToken34.isRefreshTokenExpired();
        java.lang.String str36 = authService27.extractErrorMessageForbidden(accessToken34);
        boolean boolean37 = accessToken34.isRefreshTokenExpired();
        java.lang.String str38 = accessToken34.getType();
        java.util.Date date39 = accessToken34.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group40 = osiamGroupService3.updateResource("org.osiam.client.exception.ConflictException: ", group16, accessToken34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(authService27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(accessToken34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test06681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06681");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getEmptyValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getNullValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet5 = scopeDeserializer0.getNullValue();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNull(scopeSet5);
    }

    @Test
    public void test06682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06682");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientId("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientId("Bearer ");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test06683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06683");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget7 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget8 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken16.getScopes();
        boolean boolean19 = accessToken16.isClientOnly();
        java.lang.String str20 = accessToken16.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet21 = accessToken16.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.deleteResource("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamRequestException: hi!", accessToken16);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(webTarget7);
        org.junit.Assert.assertNotNull(webTarget8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(scopeSet21);
    }

    @Test
    public void test06684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06684");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str15 = scope14.toString();
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder13.addScope(scope14);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setType("Insufficient scopes: []");
        org.osiam.client.oauth.Scope scope20 = new org.osiam.client.oauth.Scope("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder18.addScope(scope20);
        org.osiam.client.oauth.AccessToken accessToken22 = builder18.build();
        java.util.Date date23 = accessToken22.getExpiresAt();
        java.lang.String str24 = accessToken22.getUserName();
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PUT" + "'", str15, "PUT");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test06685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06685");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.OsiamClientException: descending");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        java.lang.String str13 = accessToken11.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder14 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder16.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.descending("hi!");
        org.osiam.client.query.Query query23 = queryBuilder22.build();
        java.lang.String str24 = query23.toString();
        java.lang.String str25 = query23.getSortOrder();
        java.lang.String str26 = query23.getSortBy();
        java.lang.String str27 = query23.getFilter();
        java.lang.String str28 = query23.getSortOrder();
        java.lang.String str29 = query23.getAttributes();
        boolean boolean30 = accessToken11.equals((java.lang.Object) query23);
        org.osiam.client.OsiamConnector.Builder builder31 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder33 = builder31.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder35 = builder33.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder37 = builder35.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder39 = builder35.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder41 = builder35.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder43 = builder41.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder45 = builder41.setClientRedirectUri("PUT");
        boolean boolean46 = accessToken11.equals((java.lang.Object) builder45);
        java.lang.String str47 = accessToken11.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.deleteGroup("org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(query23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str24, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "descending" + "'", str25, "descending");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "descending" + "'", str28, "descending");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Authorization" + "'", str29, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test06686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06686");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken14);
        java.util.Date date16 = accessToken14.getExpiresAt();
        boolean boolean17 = accessToken14.isRefreshTokenExpired();
        java.util.Date date18 = accessToken14.getExpiresAt();
        java.lang.String str19 = accessToken14.getUserName();
        boolean boolean20 = accessToken14.isRefreshTokenExpired();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken14);
        java.util.Date date22 = accessToken14.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user23 = osiamConnector7.getCurrentUser(accessToken14);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test06687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06687");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]");
        org.osiam.client.AuthService.Builder builder5 = builder1.setClientId("Query [attributes=null, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=100]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test06688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06688");
        org.osiam.client.oauth.Scope scope1 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        java.lang.String str2 = scope1.getValue();
        java.lang.String str3 = scope1.getValue();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str2, "org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str3, "org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test06689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06689");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.addScope(scope14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        java.util.Date date23 = accessToken22.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder13.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshToken("org.osiam.client.exception.OsiamClientException: descending");
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setType("");
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder24.setUserName("org.osiam.client.exception.InvalidAttributeException: authorization_code");
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        java.util.Date date38 = accessToken37.getExpiresAt();
        java.lang.String str39 = accessToken37.getUserName();
        java.lang.String str40 = accessToken37.getClientId();
        java.util.Date date41 = accessToken37.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder24.setExpiresAt(date41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setClientId("org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test06690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06690");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count((int) (short) 0);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder4.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder4.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.ascending("password");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count((int) (short) -1);
        org.osiam.client.query.Query query15 = queryBuilder10.build();
        java.lang.String str16 = query15.toString();
        org.osiam.client.query.Query query17 = query15.nextPage();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.query.Query query18 = query15.previousPage();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: StartIndex < 1 is not possible.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]" + "'", str16, "Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
        org.junit.Assert.assertNotNull(query17);
    }

    @Test
    public void test06691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06691");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.descending("hi!");
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        java.lang.String str16 = query15.toString();
        java.lang.String str17 = query15.getSortOrder();
        java.lang.String str18 = query15.getSortBy();
        java.lang.String str19 = query15.getFilter();
        java.lang.String str20 = query15.getSortOrder();
        java.lang.String str21 = query15.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder(query15);
        long long23 = query15.getStartIndex();
        org.osiam.client.query.Query query24 = query15.nextPage();
        int int25 = query24.getCount();
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.addScope(scope28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException32 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean33 = scope30.equals((java.lang.Object) invalidAttributeException32);
        java.lang.String str34 = scope30.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder27.addScope(scope30);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder39.addScope(scope42);
        org.osiam.client.oauth.GrantType grantType44 = org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS;
        java.lang.String str45 = grantType44.getUrlParam();
        boolean boolean46 = scope42.equals((java.lang.Object) grantType44);
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.addScope(scope49);
        boolean boolean51 = scope42.equals((java.lang.Object) builder48);
        org.osiam.client.oauth.AccessToken.Builder builder53 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.addScope(scope54);
        org.osiam.client.oauth.Scope scope56 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException58 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean59 = scope56.equals((java.lang.Object) invalidAttributeException58);
        java.lang.String str60 = scope56.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder53.addScope(scope56);
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder48.addScope(scope56);
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder48.setRefreshToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken65 = builder48.build();
        boolean boolean66 = accessToken65.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult67 = osiamUserService5.searchUsers(query24, accessToken65);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str16, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "descending" + "'", str17, "descending");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "descending" + "'", str20, "descending");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Authorization" + "'", str21, "Authorization");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "GET" + "'", str34, "GET");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + grantType44 + "' != '" + org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS + "'", grantType44.equals(org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "client_credentials" + "'", str45, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "GET" + "'", str60, "GET");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(accessToken65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test06692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06692");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("PUT");
        org.osiam.client.OsiamConnector osiamConnector7 = builder4.build();
        org.osiam.resources.scim.UpdateUser updateUser9 = null;
        org.osiam.client.OsiamGroupService.Builder builder11 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService12 = builder11.build();
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        java.util.Date date20 = accessToken19.getExpiresAt();
        java.lang.String str21 = accessToken19.getRefreshToken();
        java.lang.String str22 = accessToken19.getType();
        java.lang.String str23 = osiamGroupService12.extractErrorMessageForbidden(accessToken19);
        java.lang.String str24 = accessToken19.getUserId();
        java.lang.String str25 = accessToken19.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user26 = osiamConnector7.updateUser("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]", updateUser9, accessToken19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(osiamGroupService12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Insufficient scopes: []" + "'", str23, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test06693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06693");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        boolean boolean7 = scopeSetJsonDeserializer6.isCachable();
        boolean boolean8 = scopeSetJsonDeserializer6.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = scopeSetJsonDeserializer6.getEmptyValue();
        java.lang.Class<?> wildcardClass10 = scopeSetJsonDeserializer6.handledType();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader11 = scopeSetJsonDeserializer6.getObjectIdReader();
        com.fasterxml.jackson.core.JsonParser jsonParser12 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext13 = null;
        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeserializer14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj15 = scopeSetJsonDeserializer6.deserializeWithType(jsonParser12, deserializationContext13, typeDeserializer14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(scopeSet9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(objectIdReader11);
    }

    @Test
    public void test06694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06694");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("authorization_code");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken9);
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        boolean boolean20 = accessToken19.isRefreshTokenExpired();
        boolean boolean21 = accessToken19.isClientOnly();
        java.lang.String str22 = accessToken19.getClientId();
        boolean boolean23 = accessToken19.isClientOnly();
        boolean boolean24 = accessToken9.equals((java.lang.Object) accessToken19);
        java.lang.String str25 = accessToken9.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user26 = osiamUserService2.getCurrentUser(accessToken9);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Bearer " + "'", str25, "Bearer ");
    }

    @Test
    public void test06695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06695");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.AuthService.Builder builder7 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        java.util.Date date18 = accessToken17.getExpiresAt();
        java.lang.String str19 = accessToken17.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken17);
        java.lang.String str21 = accessToken17.getClientId();
        boolean boolean22 = accessToken17.isRefreshTokenExpired();
        java.lang.String str23 = authService10.extractErrorMessageForbidden(accessToken17);
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        boolean boolean31 = accessToken30.isRefreshTokenExpired();
        boolean boolean32 = accessToken30.isClientOnly();
        java.lang.String str33 = accessToken30.getClientId();
        java.lang.String str34 = accessToken30.getClientId();
        java.util.Date date35 = accessToken30.getRefreshTokenExpiresAt();
        java.lang.String str36 = authService10.extractErrorMessageForbidden(accessToken30);
        org.osiam.client.OsiamGroupService.Builder builder38 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService39 = builder38.build();
        org.osiam.client.OsiamGroupService osiamGroupService40 = builder38.build();
        javax.ws.rs.client.WebTarget webTarget41 = osiamGroupService40.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget42 = osiamGroupService40.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget43 = osiamGroupService40.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget44 = osiamGroupService40.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder46 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date47 = null;
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.setRefreshTokenExpiresAt(date47);
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder46.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken51 = builder50.build();
        boolean boolean52 = accessToken51.isRefreshTokenExpired();
        java.lang.String str53 = accessToken51.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder54 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder56 = queryBuilder54.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder58 = queryBuilder56.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder60 = queryBuilder56.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder62 = queryBuilder60.descending("hi!");
        org.osiam.client.query.Query query63 = queryBuilder62.build();
        java.lang.String str64 = query63.toString();
        java.lang.String str65 = query63.getSortOrder();
        java.lang.String str66 = query63.getSortBy();
        java.lang.String str67 = query63.getFilter();
        java.lang.String str68 = query63.toString();
        boolean boolean69 = accessToken51.equals((java.lang.Object) query63);
        java.lang.String str70 = osiamGroupService40.extractErrorMessageForbidden(accessToken51);
        java.lang.String str71 = authService10.extractErrorMessageForbidden(accessToken51);
        java.lang.String str72 = accessToken51.getUserName();
        java.util.Date date73 = accessToken51.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService4.deleteResource("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken51);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Insufficient scopes: []" + "'", str23, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService39);
        org.junit.Assert.assertNotNull(osiamGroupService40);
        org.junit.Assert.assertNotNull(webTarget41);
        org.junit.Assert.assertNotNull(webTarget42);
        org.junit.Assert.assertNotNull(webTarget43);
        org.junit.Assert.assertNotNull(webTarget44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(accessToken51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(queryBuilder56);
        org.junit.Assert.assertNotNull(queryBuilder58);
        org.junit.Assert.assertNotNull(queryBuilder60);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNotNull(query63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str64, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "descending" + "'", str65, "descending");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str68, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Insufficient scopes: []" + "'", str70, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Insufficient scopes: []" + "'", str71, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test06696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06696");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count((int) (short) 0);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder4.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder4.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.ascending("password");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count((int) (short) -1);
        org.osiam.client.query.Query query15 = queryBuilder10.build();
        int int16 = query15.getCount();
        java.lang.String str17 = query15.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.query.Query query18 = query15.previousPage();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: StartIndex < 1 is not possible.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]" + "'", str17, "Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
    }

    @Test
    public void test06697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06697");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.addScope(scope18);
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder17.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder13.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder13.setRefreshToken("");
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder32.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder32.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.addScope(scope41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken49 = builder48.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken49);
        java.util.Date date51 = accessToken49.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder42.setExpiresAt(date51);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder30.setExpiresAt(date51);
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder30.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test06698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06698");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("password");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.addScope(scope8);
        org.osiam.client.oauth.Scope scope10 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException12 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean13 = scope10.equals((java.lang.Object) invalidAttributeException12);
        java.lang.String str14 = scope10.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder7.addScope(scope10);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.helper.ScopeSerializer scopeSerializer22 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean23 = scopeSerializer22.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass24 = scopeSerializer22.handledType();
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken31 = builder30.build();
        java.util.Date date32 = accessToken31.getExpiresAt();
        java.lang.String str33 = accessToken31.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet34 = accessToken31.getScopes();
        boolean boolean35 = scopeSerializer22.isEmpty(scopeSet34);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder21.addScopes(scopeSet34);
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        boolean boolean44 = accessToken43.isRefreshTokenExpired();
        boolean boolean45 = accessToken43.isClientOnly();
        java.lang.String str46 = accessToken43.getClientId();
        java.lang.String str47 = accessToken43.getClientId();
        java.util.Date date48 = accessToken43.getRefreshTokenExpiresAt();
        java.util.Date date49 = accessToken43.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder36.setExpiresAt(date49);
        org.osiam.client.oauth.AccessToken accessToken51 = builder50.build();
        org.osiam.client.oauth.AccessToken accessToken52 = builder50.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user53 = osiamUserService5.getCurrentUser(accessToken52);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(scope10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GET" + "'", str14, "GET");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(scopeSetClass24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(accessToken31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(scopeSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(accessToken51);
        org.junit.Assert.assertNotNull(accessToken52);
    }

    @Test
    public void test06699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06699");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientSecret("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.AuthService authService12 = builder11.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken14 = authService12.retrieveAccessToken("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(authService12);
    }

    @Test
    public void test06700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06700");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder6.filter("Cannot connect to server");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder6.count((int) (short) 1);
        org.osiam.client.query.Query query13 = queryBuilder12.build();
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder12.attributes("org.osiam.client.exception.ForbiddenException: DELETE");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertNotNull(queryBuilder15);
    }

    @Test
    public void test06701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06701");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet15 = accessToken12.getScopes();
        java.lang.String str16 = osiamGroupService3.extractErrorMessageForbidden(accessToken12);
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        java.util.Date date24 = accessToken23.getExpiresAt();
        java.lang.String str25 = accessToken23.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken23);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        boolean boolean34 = accessToken33.isRefreshTokenExpired();
        boolean boolean35 = accessToken33.isClientOnly();
        java.lang.String str36 = accessToken33.getClientId();
        boolean boolean37 = accessToken33.isClientOnly();
        boolean boolean38 = accessToken23.equals((java.lang.Object) accessToken33);
        java.lang.String str39 = accessToken33.getUserId();
        boolean boolean40 = accessToken33.isExpired();
        java.lang.String str41 = osiamGroupService3.extractErrorMessageForbidden(accessToken33);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group43 = osiamGroupService3.mapToResource("org.osiam.client.exception.OsiamClientException: ME");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: org.osiam.client.exception.OsiamClientException: ME");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(scopeSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Insufficient scopes: []" + "'", str16, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: []" + "'", str41, "Insufficient scopes: []");
    }

    @Test
    public void test06702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06702");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("ME");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getUserName();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.toString();
        java.lang.String str14 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.client.OsiamGroupService.Builder builder17 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService18 = builder17.build();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        java.util.Date date26 = accessToken25.getExpiresAt();
        java.lang.String str27 = accessToken25.getUserName();
        java.lang.String str28 = accessToken25.toString();
        java.lang.String str29 = osiamGroupService18.extractErrorMessageForbidden(accessToken25);
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken36 = builder35.build();
        java.lang.String str37 = accessToken36.toString();
        java.lang.String str38 = accessToken36.getType();
        boolean boolean39 = accessToken36.isExpired();
        java.util.Date date40 = accessToken36.getExpiresAt();
        boolean boolean41 = accessToken36.isClientOnly();
        java.lang.String str42 = osiamGroupService18.extractErrorMessageForbidden(accessToken36);
        java.lang.String str43 = accessToken36.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group44 = osiamGroupService2.getGroup("org.osiam.client.exception.ForbiddenException: DELETE", accessToken36);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str13, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str28, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Insufficient scopes: []" + "'", str29, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(accessToken36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str37, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Insufficient scopes: []" + "'", str42, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test06703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06703");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.usesObjectId();
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope3 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.addScope(scope6);
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException10 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean11 = scope8.equals((java.lang.Object) invalidAttributeException10);
        java.lang.String str12 = scope8.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder5.addScope(scope8);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setUserId("");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.addScope(scope18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.addScope(scope22);
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str25 = scope24.getValue();
        org.osiam.client.oauth.Scope[] scopeArray26 = new org.osiam.client.oauth.Scope[] { scope2, scope3, scope18, scope22, scope24 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet27 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet27, scopeArray26);
        boolean boolean29 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet27);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper30 = null;
        com.fasterxml.jackson.databind.JavaType javaType31 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper30, javaType31);
        org.osiam.client.helper.ScopeSerializer scopeSerializer33 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean34 = scopeSerializer33.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer35 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer36 = scopeSerializer33.unwrappingSerializer(nameTransformer35);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider37 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date40 = null;
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setRefreshTokenExpiresAt(date40);
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException45 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean46 = scope43.equals((java.lang.Object) invalidAttributeException45);
        java.lang.String str47 = scope43.getValue();
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str50 = scope49.toString();
        org.osiam.client.oauth.Scope scope51 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope52 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str53 = scope52.getValue();
        java.lang.String str54 = scope52.getValue();
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException57 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean58 = scope55.equals((java.lang.Object) invalidAttributeException57);
        java.lang.String str59 = scope55.getValue();
        org.osiam.client.oauth.Scope scope60 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope61 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope62 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope63 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException65 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean66 = scope63.equals((java.lang.Object) invalidAttributeException65);
        org.osiam.client.oauth.Scope scope67 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope68 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope69 = org.osiam.client.oauth.Scope.GET;
        boolean boolean71 = scope69.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope72 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray73 = new org.osiam.client.oauth.Scope[] { scope42, scope43, scope48, scope49, scope51, scope52, scope55, scope60, scope61, scope62, scope63, scope67, scope68, scope69, scope72 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet74 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet74, scopeArray73);
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder39.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet74);
        boolean boolean77 = scopeSetJsonSerializer36.isEmpty(serializerProvider37, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet74);
        boolean boolean78 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet74);
        boolean boolean79 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider80 = null;
        org.osiam.client.oauth.AccessToken.Builder builder82 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date83 = null;
        org.osiam.client.oauth.AccessToken.Builder builder84 = builder82.setRefreshTokenExpiresAt(date83);
        org.osiam.client.oauth.AccessToken.Builder builder86 = builder82.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken87 = builder86.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken87);
        java.lang.String str89 = accessToken87.getRefreshToken();
        java.lang.String str90 = accessToken87.toString();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet91 = accessToken87.getScopes();
        boolean boolean92 = scopeSerializer0.isEmpty(serializerProvider80, scopeSet91);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(scope3);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GET" + "'", str12, "GET");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PATCH" + "'", str25, "PATCH");
        org.junit.Assert.assertNotNull(scopeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer36);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "GET" + "'", str47, "GET");
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ME" + "'", str50, "ME");
        org.junit.Assert.assertNotNull(scope51);
        org.junit.Assert.assertNotNull(scope52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "PATCH" + "'", str53, "PATCH");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PATCH" + "'", str54, "PATCH");
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "GET" + "'", str59, "GET");
        org.junit.Assert.assertNotNull(scope60);
        org.junit.Assert.assertNotNull(scope61);
        org.junit.Assert.assertNotNull(scope62);
        org.junit.Assert.assertNotNull(scope63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(scope67);
        org.junit.Assert.assertNotNull(scope68);
        org.junit.Assert.assertNotNull(scope69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(scope72);
        org.junit.Assert.assertNotNull(scopeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(accessToken87);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str90, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(scopeSet91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test06704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06704");
        org.osiam.client.exception.UnauthorizedException unauthorizedException1 = new org.osiam.client.exception.UnauthorizedException("Insufficient scopes: [null, PATCH, GET, ME, ADMIN, GET POST PUT PATCH DELETE, PUT]");
    }

    @Test
    public void test06705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06705");
        org.osiam.client.exception.UnauthorizedException unauthorizedException1 = new org.osiam.client.exception.UnauthorizedException("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        java.lang.Throwable[] throwableArray2 = unauthorizedException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test06706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06706");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setEndpoint("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientRedirectUri("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET POST PUT PATCH DELETE], refreshTokenId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=refresh_token, userId=org.osiam.client.exception.ConflictException: PATCH, userName=]");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.client.AuthService.Builder builder19 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder21 = builder19.setClientId("ME");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService28 = builder27.build();
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        boolean boolean36 = accessToken35.isRefreshTokenExpired();
        java.lang.String str37 = accessToken35.getUserId();
        java.lang.String str38 = accessToken35.getToken();
        java.lang.String str39 = authService28.extractErrorMessageForbidden(accessToken35);
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str41 = scope40.getValue();
        java.lang.String str42 = scope40.toString();
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray44 = new org.osiam.client.oauth.Scope[] { scope40, scope43 };
        java.net.URI uRI45 = authService28.getAuthorizationUri(scopeArray44);
        org.osiam.client.oauth.AccessToken.Builder builder47 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date48 = null;
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.setRefreshTokenExpiresAt(date48);
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder47.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken54 = builder51.build();
        java.lang.String str55 = accessToken54.getRefreshToken();
        java.lang.String str56 = authService28.extractErrorMessageForbidden(accessToken54);
        org.osiam.client.AuthService.Builder builder58 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder60 = builder58.setClientId("ME");
        org.osiam.client.AuthService.Builder builder62 = builder60.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder64 = builder62.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder66 = builder64.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder68 = builder64.setClientId("");
        org.osiam.client.AuthService.Builder builder70 = builder64.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService71 = builder70.build();
        org.osiam.client.oauth.Scope scope73 = new org.osiam.client.oauth.Scope("");
        java.lang.String str74 = scope73.getValue();
        org.osiam.client.oauth.Scope scope76 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.Scope[] scopeArray77 = new org.osiam.client.oauth.Scope[] { scope73, scope76 };
        java.net.URI uRI78 = authService71.getAuthorizationUri(scopeArray77);
        java.net.URI uRI79 = authService28.getAuthorizationUri(scopeArray77);
        java.net.URI uRI80 = osiamConnector17.getAuthorizationUri(scopeArray77);
        org.osiam.client.query.QueryBuilder queryBuilder81 = osiamConnector17.createQueryBuilder();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(authService28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Bearer " + "'", str38, "Bearer ");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PATCH" + "'", str41, "PATCH");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PATCH" + "'", str42, "PATCH");
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertNotNull(scopeArray44);
        org.junit.Assert.assertNotNull(uRI45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(accessToken54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Insufficient scopes: []" + "'", str56, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(authService71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(scopeArray77);
        org.junit.Assert.assertNotNull(uRI78);
        org.junit.Assert.assertNotNull(uRI79);
        org.junit.Assert.assertNotNull(uRI80);
        org.junit.Assert.assertNotNull(queryBuilder81);
    }

    @Test
    public void test06707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06707");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.UpdateUser updateUser4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.lang.String str12 = accessToken11.toString();
        java.lang.String str13 = accessToken11.getType();
        boolean boolean14 = accessToken11.isExpired();
        java.lang.String str15 = accessToken11.getToken();
        java.lang.String str16 = accessToken11.getUserName();
        boolean boolean17 = accessToken11.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user18 = osiamUserService2.updateUser("Query [attributes=null, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=100]", updateUser4, accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str12, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Bearer " + "'", str15, "Bearer ");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test06708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06708");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientId("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setEndpoint("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector osiamConnector19 = builder18.build();
        org.osiam.resources.scim.UpdateUser updateUser21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        java.lang.String str29 = accessToken28.toString();
        java.lang.String str30 = accessToken28.getClientId();
        org.osiam.client.OsiamConnector.Builder builder31 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder33 = builder31.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder35 = builder33.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder37 = builder35.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector38 = builder37.build();
        org.osiam.client.query.QueryBuilder queryBuilder39 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder43 = queryBuilder41.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder41.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder45.descending("hi!");
        org.osiam.client.query.Query query48 = queryBuilder47.build();
        java.lang.String str49 = query48.toString();
        java.lang.String str50 = query48.toString();
        java.lang.String str51 = query48.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder52 = osiamConnector38.createQueryBuilder(query48);
        org.osiam.client.query.QueryBuilder queryBuilder53 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder55 = queryBuilder53.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder57 = queryBuilder55.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder59 = queryBuilder55.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder61 = queryBuilder59.descending("hi!");
        org.osiam.client.query.Query query62 = queryBuilder61.build();
        org.osiam.client.query.QueryBuilder queryBuilder63 = osiamConnector38.createQueryBuilder(query62);
        boolean boolean64 = accessToken28.equals((java.lang.Object) queryBuilder63);
        org.osiam.client.query.QueryBuilder queryBuilder65 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder67 = queryBuilder65.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder69 = queryBuilder67.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder71 = queryBuilder67.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder73 = queryBuilder71.descending("hi!");
        org.osiam.client.query.Query query74 = queryBuilder73.build();
        org.osiam.client.query.QueryBuilder queryBuilder76 = queryBuilder73.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder78 = queryBuilder76.attributes("Cannot connect to server");
        org.osiam.client.query.Query query79 = queryBuilder76.build();
        boolean boolean80 = accessToken28.equals((java.lang.Object) queryBuilder76);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user81 = osiamConnector19.updateUser("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]", updateUser21, accessToken28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str29, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(osiamConnector38);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(query48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str49, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str50, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder55);
        org.junit.Assert.assertNotNull(queryBuilder57);
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(query62);
        org.junit.Assert.assertNotNull(queryBuilder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(queryBuilder67);
        org.junit.Assert.assertNotNull(queryBuilder69);
        org.junit.Assert.assertNotNull(queryBuilder71);
        org.junit.Assert.assertNotNull(queryBuilder73);
        org.junit.Assert.assertNotNull(query74);
        org.junit.Assert.assertNotNull(queryBuilder76);
        org.junit.Assert.assertNotNull(queryBuilder78);
        org.junit.Assert.assertNotNull(query79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test06709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06709");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget7 = osiamGroupService6.targetEndpoint;
        org.osiam.resources.scim.Group group9 = null;
        org.osiam.client.OsiamGroupService.Builder builder11 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService12 = builder11.build();
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService12.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService12.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget15 = osiamGroupService12.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService12.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService12.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.addScope(scope20);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException24 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean25 = scope22.equals((java.lang.Object) invalidAttributeException24);
        java.lang.String str26 = scope22.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder19.addScope(scope22);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setRefreshToken("GET");
        org.osiam.client.OsiamGroupService.Builder builder37 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService38 = builder37.build();
        org.osiam.client.OsiamGroupService osiamGroupService39 = builder37.build();
        org.osiam.client.oauth.AccessToken.Builder builder41 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date42 = null;
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setRefreshTokenExpiresAt(date42);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder41.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken46 = builder45.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken46);
        java.lang.String str48 = osiamGroupService39.extractErrorMessageForbidden(accessToken46);
        java.util.Date date49 = accessToken46.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder33.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.AccessToken accessToken51 = builder33.build();
        boolean boolean52 = accessToken51.isRefreshTokenExpired();
        java.lang.String str53 = accessToken51.getClientId();
        java.lang.String str54 = osiamGroupService12.extractErrorMessageForbidden(accessToken51);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group55 = osiamGroupService6.updateGroup("ME", group9, accessToken51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(webTarget7);
        org.junit.Assert.assertNotNull(osiamGroupService12);
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(webTarget15);
        org.junit.Assert.assertNotNull(webTarget16);
        org.junit.Assert.assertNotNull(webTarget17);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GET" + "'", str26, "GET");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(osiamGroupService38);
        org.junit.Assert.assertNotNull(osiamGroupService39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(accessToken46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Insufficient scopes: []" + "'", str48, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(accessToken51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Bearer " + "'", str53, "Bearer ");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Insufficient scopes: [GET, GET POST PUT PATCH DELETE]" + "'", str54, "Insufficient scopes: [GET, GET POST PUT PATCH DELETE]");
    }

    @Test
    public void test06710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06710");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388");
        org.osiam.client.AuthService authService2 = builder1.build();
        org.osiam.client.AuthService.Builder builder4 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder6 = builder4.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientSecret("");
        org.osiam.client.AuthService.Builder builder12 = builder8.setClientId("authorization_code");
        org.osiam.client.AuthService authService13 = builder8.build();
        org.osiam.client.AuthService.Builder builder15 = builder8.setClientSecret("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService authService16 = builder15.build();
        org.osiam.client.AuthService.Builder builder18 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientId("ME");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder26 = builder24.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService27 = builder26.build();
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.addScope(scope30);
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException34 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean35 = scope32.equals((java.lang.Object) invalidAttributeException34);
        java.lang.String str36 = scope32.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder29.addScope(scope32);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder45 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.addScope(scope46);
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException50 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean51 = scope48.equals((java.lang.Object) invalidAttributeException50);
        java.lang.String str52 = scope48.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder45.addScope(scope48);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder41.addScope(scope48);
        org.osiam.client.oauth.AccessToken.Builder builder56 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope57 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.addScope(scope57);
        org.osiam.client.oauth.Scope scope59 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException61 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean62 = scope59.equals((java.lang.Object) invalidAttributeException61);
        java.lang.String str63 = scope59.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder56.addScope(scope59);
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder64.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder66.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder68.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder72 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope73 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder72.addScope(scope73);
        org.osiam.client.oauth.Scope scope75 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException77 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean78 = scope75.equals((java.lang.Object) invalidAttributeException77);
        java.lang.String str79 = scope75.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder80 = builder72.addScope(scope75);
        org.osiam.client.oauth.AccessToken.Builder builder81 = builder68.addScope(scope75);
        org.osiam.client.oauth.AccessToken.Builder builder82 = builder41.addScope(scope75);
        org.osiam.client.oauth.AccessToken.Builder builder84 = builder82.setType("");
        org.osiam.client.oauth.AccessToken.Builder builder86 = builder82.setClientId("Insufficient scopes: []");
        org.osiam.client.oauth.Scope scope87 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str88 = scope87.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder89 = builder82.addScope(scope87);
        org.osiam.client.oauth.Scope[] scopeArray90 = new org.osiam.client.oauth.Scope[] { scope87 };
        java.net.URI uRI91 = authService27.getAuthorizationUri(scopeArray90);
        java.net.URI uRI92 = authService16.getAuthorizationUri(scopeArray90);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken93 = authService2.retrieveAccessToken(scopeArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(authService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(authService13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(authService16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(authService27);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GET" + "'", str36, "GET");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "GET" + "'", str52, "GET");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(scope57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(scope59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "GET" + "'", str63, "GET");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(scope73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(scope75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "GET" + "'", str79, "GET");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(scope87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "PUT" + "'", str88, "PUT");
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(scopeArray90);
        org.junit.Assert.assertNotNull(uRI91);
        org.junit.Assert.assertNotNull(uRI92);
    }

    @Test
    public void test06711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06711");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientId("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setEndpoint("org.osiam.client.exception.ConflictException: org.osiam.client.exception.UnauthorizedException: PATCH");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test06712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06712");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.usesObjectId();
        boolean boolean2 = scopeSerializer0.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass3 = scopeSerializer0.handledType();
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer4 = scopeSerializer0.getDelegatee();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer6 = scopeSerializer0.unwrappingSerializer(nameTransformer5);
        org.osiam.client.helper.ScopeSerializer scopeSerializer7 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean8 = scopeSerializer7.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer9 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer10 = scopeSerializer7.unwrappingSerializer(nameTransformer9);
        boolean boolean11 = scopeSerializer7.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer12 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer13 = scopeSerializer7.unwrappingSerializer(nameTransformer12);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper14 = null;
        com.fasterxml.jackson.databind.JavaType javaType15 = null;
        scopeSerializer7.acceptJsonFormatVisitor(jsonFormatVisitorWrapper14, javaType15);
        boolean boolean17 = scopeSerializer7.usesObjectId();
        boolean boolean18 = scopeSerializer7.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider19 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer20 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean21 = scopeSerializer20.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass22 = scopeSerializer20.handledType();
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken29 = builder28.build();
        java.util.Date date30 = accessToken29.getExpiresAt();
        java.lang.String str31 = accessToken29.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet32 = accessToken29.getScopes();
        boolean boolean33 = scopeSerializer20.isEmpty(scopeSet32);
        boolean boolean34 = scopeSerializer7.isEmpty(serializerProvider19, scopeSet32);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider35 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer36 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        boolean boolean44 = accessToken43.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet45 = accessToken43.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator46 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider47 = null;
        scopeSerializer36.serialize(scopeSet45, jsonGenerator46, serializerProvider47);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder51 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date52 = null;
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setRefreshTokenExpiresAt(date52);
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        java.util.Date date61 = accessToken60.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder51.setRefreshTokenExpiresAt(date61);
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder51.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder51.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder68 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date69 = null;
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder68.setRefreshTokenExpiresAt(date69);
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder68.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken73 = builder72.build();
        boolean boolean74 = accessToken73.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet75 = accessToken73.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder66.addScopes(scopeSet75);
        boolean boolean77 = scopeSerializer36.isEmpty(serializerProvider49, scopeSet75);
        boolean boolean78 = scopeSerializer7.isEmpty(serializerProvider35, scopeSet75);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator79 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider80 = null;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer typeSerializer81 = null;
        // The following exception was thrown during execution in test generation
        try {
            scopeSerializer0.serializeWithType(scopeSet75, jsonGenerator79, serializerProvider80, typeSerializer81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSetClass3);
        org.junit.Assert.assertNull(wildcardJsonSerializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(scopeSetClass22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(scopeSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(scopeSet45);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(accessToken73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(scopeSet75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test06713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06713");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.OsiamConnector.Builder builder11 = builder6.setAuthServerEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder13 = builder11.setClientId("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector osiamConnector14 = builder11.build();
        org.osiam.client.AuthService.Builder builder16 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder18 = builder16.setClientId("ME");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService25 = builder24.build();
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        boolean boolean33 = accessToken32.isRefreshTokenExpired();
        java.lang.String str34 = accessToken32.getUserId();
        java.lang.String str35 = accessToken32.getToken();
        java.lang.String str36 = authService25.extractErrorMessageForbidden(accessToken32);
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str38 = scope37.getValue();
        java.lang.String str39 = scope37.toString();
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray41 = new org.osiam.client.oauth.Scope[] { scope37, scope40 };
        java.net.URI uRI42 = authService25.getAuthorizationUri(scopeArray41);
        java.net.URI uRI43 = osiamConnector14.getAuthorizationUri(scopeArray41);
        org.osiam.client.query.QueryBuilder queryBuilder44 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder46 = queryBuilder44.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query51 = queryBuilder48.build();
        org.osiam.client.query.Query query52 = query51.nextPage();
        org.osiam.client.query.Query query53 = query52.previousPage();
        java.lang.String str54 = query52.getSortOrder();
        java.lang.String str55 = query52.getSortOrder();
        org.osiam.client.query.Query query56 = query52.previousPage();
        org.osiam.client.OsiamGroupService.Builder builder58 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService59 = builder58.build();
        org.osiam.client.OsiamGroupService osiamGroupService60 = builder58.build();
        javax.ws.rs.client.WebTarget webTarget61 = osiamGroupService60.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget62 = osiamGroupService60.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder64 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date65 = null;
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder64.setRefreshTokenExpiresAt(date65);
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder64.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken69 = builder68.build();
        boolean boolean70 = accessToken69.isRefreshTokenExpired();
        java.lang.String str71 = accessToken69.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet72 = accessToken69.getScopes();
        java.lang.String str73 = osiamGroupService60.extractErrorMessageForbidden(accessToken69);
        java.util.Date date74 = accessToken69.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult75 = osiamConnector14.searchUsers(query52, accessToken69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(osiamConnector14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(authService25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Bearer " + "'", str35, "Bearer ");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PATCH" + "'", str38, "PATCH");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PATCH" + "'", str39, "PATCH");
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertNotNull(scopeArray41);
        org.junit.Assert.assertNotNull(uRI42);
        org.junit.Assert.assertNotNull(uRI43);
        org.junit.Assert.assertNotNull(queryBuilder46);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(query51);
        org.junit.Assert.assertNotNull(query52);
        org.junit.Assert.assertNotNull(query53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(query56);
        org.junit.Assert.assertNotNull(osiamGroupService59);
        org.junit.Assert.assertNotNull(osiamGroupService60);
        org.junit.Assert.assertNotNull(webTarget61);
        org.junit.Assert.assertNotNull(webTarget62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(accessToken69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(scopeSet72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Insufficient scopes: []" + "'", str73, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test06714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06714");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group4 = osiamGroupService2.mapToResource("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.ConflictException: ");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.ConflictException: ");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
    }

    @Test
    public void test06715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06715");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector9.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.getSortOrder();
        java.lang.String str23 = query20.getSortBy();
        java.lang.String str24 = query20.getFilter();
        java.lang.String str25 = query20.getSortOrder();
        java.lang.String str26 = query20.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder(query20);
        long long28 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder29 = new org.osiam.client.query.QueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder30 = osiamConnector9.createQueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector9.createQueryBuilder();
        org.osiam.client.AuthService.Builder builder34 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder36 = builder34.setClientId("ME");
        org.osiam.client.AuthService.Builder builder38 = builder36.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder40 = builder38.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder42 = builder40.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService43 = builder42.build();
        org.osiam.client.OsiamGroupService.Builder builder45 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService46 = builder45.build();
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder48.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken53 = builder52.build();
        boolean boolean54 = accessToken53.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet55 = accessToken53.getScopes();
        java.lang.String str56 = osiamGroupService46.extractErrorMessageForbidden(accessToken53);
        boolean boolean57 = accessToken53.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken53);
        java.lang.String str59 = authService43.extractErrorMessageForbidden(accessToken53);
        java.lang.String str60 = accessToken53.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user61 = osiamConnector9.getUser("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamRequestException: hi!", accessToken53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "descending" + "'", str22, "descending");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "descending" + "'", str25, "descending");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Authorization" + "'", str26, "Authorization");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(authService43);
        org.junit.Assert.assertNotNull(osiamGroupService46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(accessToken53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(scopeSet55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Insufficient scopes: []" + "'", str56, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Insufficient scopes: []" + "'", str59, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
    }

    @Test
    public void test06716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06716");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget15 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder17.setUserName("ascending");
        org.osiam.client.oauth.AccessToken accessToken24 = builder17.build();
        java.lang.String str25 = osiamGroupService2.extractErrorMessageForbidden(accessToken24);
        javax.ws.rs.client.WebTarget webTarget26 = osiamGroupService2.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder28 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService29 = builder28.build();
        javax.ws.rs.client.WebTarget webTarget30 = osiamGroupService29.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder32 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService33 = builder32.build();
        org.osiam.client.OsiamGroupService osiamGroupService34 = builder32.build();
        org.osiam.client.oauth.AccessToken.Builder builder36 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date37 = null;
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setRefreshTokenExpiresAt(date37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder36.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken41 = builder40.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken41);
        java.lang.String str43 = osiamGroupService34.extractErrorMessageForbidden(accessToken41);
        java.util.Date date44 = accessToken41.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken41);
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean47 = accessToken41.equals((java.lang.Object) scope46);
        java.lang.String str48 = accessToken41.getRefreshToken();
        java.lang.String str49 = accessToken41.getToken();
        java.lang.String str50 = accessToken41.getUserId();
        java.lang.String str51 = osiamGroupService29.extractErrorMessageForbidden(accessToken41);
        org.osiam.client.oauth.AccessToken.Builder builder53 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date54 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.setRefreshTokenExpiresAt(date54);
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder53.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken58 = builder57.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken58);
        boolean boolean60 = accessToken58.isExpired();
        org.osiam.client.AuthService.Builder builder62 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder64 = builder62.setClientId("ME");
        org.osiam.client.AuthService.Builder builder66 = builder64.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder68 = builder66.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder70 = builder68.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder72 = builder68.setClientRedirectUri("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.AuthService.Builder builder74 = builder68.setClientSecret("authorization_code");
        org.osiam.client.AuthService.Builder builder76 = builder74.setClientSecret("Bearer ");
        boolean boolean77 = accessToken58.equals((java.lang.Object) "Bearer ");
        java.lang.String str78 = osiamGroupService29.extractErrorMessageForbidden(accessToken58);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList79 = osiamGroupService2.getAllGroups(accessToken58);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(webTarget15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget26);
        org.junit.Assert.assertNotNull(osiamGroupService29);
        org.junit.Assert.assertNotNull(webTarget30);
        org.junit.Assert.assertNotNull(osiamGroupService33);
        org.junit.Assert.assertNotNull(osiamGroupService34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(accessToken41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Insufficient scopes: []" + "'", str43, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Bearer " + "'", str49, "Bearer ");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Insufficient scopes: []" + "'", str51, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(accessToken58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Insufficient scopes: []" + "'", str78, "Insufficient scopes: []");
    }

    @Test
    public void test06717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06717");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.getEmptyValue();
        java.util.Collection<java.lang.Object> objCollection7 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeDeserializer0.getEmptyValue();
        boolean boolean9 = scopeDeserializer0.isCachable();
        boolean boolean10 = scopeDeserializer0.isCachable();
        java.util.Collection<java.lang.Object> objCollection11 = scopeDeserializer0.getKnownPropertyNames();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer12 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass13 = scopeDeserializer12.handledType();
        java.util.Collection<java.lang.Object> objCollection14 = scopeDeserializer12.getKnownPropertyNames();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer15 = scopeDeserializer0.replaceDelegatee((com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeDeserializer12);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNull(scopeSet6);
        org.junit.Assert.assertNull(objCollection7);
        org.junit.Assert.assertNull(scopeSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(objCollection11);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(objCollection14);
    }

    @Test
    public void test06718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06718");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = accessToken6.getScopes();
        java.lang.String str9 = accessToken6.getUserId();
        java.util.Date date10 = accessToken6.getExpiresAt();
        java.lang.Class<?> wildcardClass11 = date10.getClass();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(scopeSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test06719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06719");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        boolean boolean25 = accessToken24.isRefreshTokenExpired();
        java.lang.String str26 = accessToken24.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        java.lang.String str37 = query36.toString();
        java.lang.String str38 = query36.getSortOrder();
        java.lang.String str39 = query36.getSortBy();
        java.lang.String str40 = query36.getFilter();
        java.lang.String str41 = query36.toString();
        boolean boolean42 = accessToken24.equals((java.lang.Object) query36);
        java.lang.String str43 = query36.toString();
        java.lang.String str44 = query36.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector17.createQueryBuilder(query36);
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder48.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken53 = builder52.build();
        boolean boolean54 = accessToken53.isRefreshTokenExpired();
        java.lang.String str55 = accessToken53.getUserId();
        java.lang.String str56 = accessToken53.getClientId();
        java.lang.String str57 = accessToken53.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user58 = osiamConnector17.getUser("Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]", accessToken53);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str37, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "descending" + "'", str38, "descending");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str41, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(accessToken53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
    }

    @Test
    public void test06720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06720");
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.AbstractOsiamService.Builder<org.osiam.resources.scim.User> userBuilder1 = new org.osiam.client.AbstractOsiamService.Builder<org.osiam.resources.scim.User>("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConnectionInitializationException: PATCH");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06721");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = osiamGroupService2.extractErrorMessageDefault("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME", statusType4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
    }

    @Test
    public void test06722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06722");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.OsiamConnector.Builder builder11 = builder6.setAuthServerEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder13 = builder6.setResourceServerEndpoint("org.osiam.client.exception.NoResultException: ME");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test06723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06723");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        boolean boolean25 = accessToken24.isRefreshTokenExpired();
        java.lang.String str26 = accessToken24.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        java.lang.String str37 = query36.toString();
        java.lang.String str38 = query36.getSortOrder();
        java.lang.String str39 = query36.getSortBy();
        java.lang.String str40 = query36.getFilter();
        java.lang.String str41 = query36.toString();
        boolean boolean42 = accessToken24.equals((java.lang.Object) query36);
        java.lang.String str43 = query36.toString();
        java.lang.String str44 = query36.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector17.createQueryBuilder(query36);
        org.osiam.client.OsiamGroupService.Builder builder48 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService49 = builder48.build();
        org.osiam.client.OsiamGroupService osiamGroupService50 = builder48.build();
        org.osiam.client.OsiamGroupService osiamGroupService51 = builder48.build();
        org.osiam.client.OsiamGroupService osiamGroupService52 = builder48.build();
        org.osiam.client.OsiamGroupService osiamGroupService53 = builder48.build();
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        boolean boolean62 = accessToken60.isClientOnly();
        java.lang.String str63 = accessToken60.getClientId();
        boolean boolean64 = accessToken60.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder66 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope67 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder66.addScope(scope67);
        org.osiam.client.oauth.Scope scope69 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException71 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean72 = scope69.equals((java.lang.Object) invalidAttributeException71);
        java.lang.String str73 = scope69.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder66.addScope(scope69);
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder74.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder76.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder80 = builder78.setUserName("Authorization");
        boolean boolean81 = accessToken60.equals((java.lang.Object) builder78);
        java.lang.String str82 = osiamGroupService53.extractErrorMessageForbidden(accessToken60);
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector17.revokeAllAccessTokens("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.ConflictException: ", accessToken60);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str37, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "descending" + "'", str38, "descending");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str41, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(osiamGroupService49);
        org.junit.Assert.assertNotNull(osiamGroupService50);
        org.junit.Assert.assertNotNull(osiamGroupService51);
        org.junit.Assert.assertNotNull(osiamGroupService52);
        org.junit.Assert.assertNotNull(osiamGroupService53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(scope67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(scope69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "GET" + "'", str73, "GET");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Insufficient scopes: []" + "'", str82, "Insufficient scopes: []");
    }

    @Test
    public void test06724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06724");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector osiamConnector9 = builder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.descending("hi!");
        org.osiam.client.query.Query query19 = queryBuilder18.build();
        java.lang.String str20 = query19.toString();
        java.lang.String str21 = query19.getSortOrder();
        java.lang.String str22 = query19.getSortBy();
        org.osiam.client.query.Query query23 = query19.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder24 = osiamConnector9.createQueryBuilder(query23);
        org.osiam.client.query.QueryBuilder queryBuilder25 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.descending("hi!");
        org.osiam.client.query.Query query34 = queryBuilder33.build();
        java.lang.String str35 = query34.toString();
        java.lang.String str36 = query34.getSortOrder();
        java.lang.String str37 = query34.getSortBy();
        java.lang.String str38 = query34.getFilter();
        java.lang.String str39 = query34.getSortOrder();
        java.lang.String str40 = query34.getAttributes();
        long long41 = query34.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder42 = osiamConnector9.createQueryBuilder(query34);
        org.osiam.client.OsiamConnector.Builder builder43 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder45 = builder43.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder47 = builder45.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector48 = builder47.build();
        org.osiam.client.oauth.AccessToken.Builder builder50 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date51 = null;
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.setRefreshTokenExpiresAt(date51);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder50.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken55 = builder54.build();
        boolean boolean56 = accessToken55.isRefreshTokenExpired();
        java.lang.String str57 = accessToken55.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder58 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder60 = queryBuilder58.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder62 = queryBuilder60.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder60.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder66 = queryBuilder64.descending("hi!");
        org.osiam.client.query.Query query67 = queryBuilder66.build();
        java.lang.String str68 = query67.toString();
        java.lang.String str69 = query67.getSortOrder();
        java.lang.String str70 = query67.getSortBy();
        java.lang.String str71 = query67.getFilter();
        java.lang.String str72 = query67.toString();
        boolean boolean73 = accessToken55.equals((java.lang.Object) query67);
        org.osiam.client.query.QueryBuilder queryBuilder74 = osiamConnector48.createQueryBuilder(query67);
        org.osiam.client.query.QueryBuilder queryBuilder75 = osiamConnector48.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder76 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder78 = queryBuilder76.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder80 = queryBuilder78.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder82 = queryBuilder78.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder84 = queryBuilder82.descending("hi!");
        org.osiam.client.query.Query query85 = queryBuilder84.build();
        java.lang.String str86 = query85.toString();
        java.lang.String str87 = query85.getSortOrder();
        java.lang.String str88 = query85.getSortBy();
        java.lang.String str89 = query85.getFilter();
        java.lang.String str90 = query85.getSortOrder();
        java.lang.String str91 = query85.getAttributes();
        java.lang.String str92 = query85.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder93 = osiamConnector48.createQueryBuilder(query85);
        org.osiam.client.query.QueryBuilder queryBuilder94 = osiamConnector9.createQueryBuilder(query85);
        java.lang.String str95 = query85.getAttributes();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str20, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "descending" + "'", str21, "descending");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(query23);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(query34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str35, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "descending" + "'", str36, "descending");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "descending" + "'", str39, "descending");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Authorization" + "'", str40, "Authorization");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(osiamConnector48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(accessToken55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(queryBuilder60);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertNotNull(query67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str68, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "descending" + "'", str69, "descending");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str72, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(queryBuilder74);
        org.junit.Assert.assertNotNull(queryBuilder75);
        org.junit.Assert.assertNotNull(queryBuilder78);
        org.junit.Assert.assertNotNull(queryBuilder80);
        org.junit.Assert.assertNotNull(queryBuilder82);
        org.junit.Assert.assertNotNull(queryBuilder84);
        org.junit.Assert.assertNotNull(query85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str86, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "descending" + "'", str87, "descending");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!" + "'", str88, "hi!");
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "descending" + "'", str90, "descending");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Authorization" + "'", str91, "Authorization");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Authorization" + "'", str92, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder93);
        org.junit.Assert.assertNotNull(queryBuilder94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Authorization" + "'", str95, "Authorization");
    }

    @Test
    public void test06725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06725");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector osiamConnector9 = builder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.descending("hi!");
        org.osiam.client.query.Query query19 = queryBuilder18.build();
        java.lang.String str20 = query19.toString();
        java.lang.String str21 = query19.getSortOrder();
        java.lang.String str22 = query19.getSortBy();
        org.osiam.client.query.Query query23 = query19.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder24 = osiamConnector9.createQueryBuilder(query23);
        org.osiam.client.query.QueryBuilder queryBuilder25 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.descending("hi!");
        org.osiam.client.query.Query query34 = queryBuilder33.build();
        java.lang.String str35 = query34.toString();
        java.lang.String str36 = query34.getSortOrder();
        java.lang.String str37 = query34.getSortBy();
        java.lang.String str38 = query34.getFilter();
        java.lang.String str39 = query34.getSortOrder();
        java.lang.String str40 = query34.getAttributes();
        long long41 = query34.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder42 = osiamConnector9.createQueryBuilder(query34);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.query.Query query43 = query34.previousPage();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: StartIndex < 1 is not possible.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str20, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "descending" + "'", str21, "descending");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(query23);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(query34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str35, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "descending" + "'", str36, "descending");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "descending" + "'", str39, "descending");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Authorization" + "'", str40, "Authorization");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder42);
    }

    @Test
    public void test06726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06726");
        org.osiam.client.exception.OsiamRequestException osiamRequestException2 = new org.osiam.client.exception.OsiamRequestException((int) (short) 100, "org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        int int3 = osiamRequestException2.getHttpStatusCode();
        java.lang.String str4 = osiamRequestException2.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str4, "org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test06727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06727");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet62 = accessToken60.getScopes();
        boolean boolean63 = scopeSerializer0.isEmpty(serializerProvider53, scopeSet62);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass64 = scopeSerializer0.handledType();
        org.osiam.client.oauth.Scope scope66 = new org.osiam.client.oauth.Scope("");
        org.osiam.client.oauth.AccessToken.Builder builder68 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope69 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder68.addScope(scope69);
        org.osiam.client.oauth.Scope[] scopeArray71 = new org.osiam.client.oauth.Scope[] { scope66, scope69 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet72 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet72, scopeArray71);
        boolean boolean74 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet72);
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer75 = scopeSerializer0.getDelegatee();
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper76 = null;
        com.fasterxml.jackson.databind.JavaType javaType77 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper76, javaType77);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper79 = null;
        com.fasterxml.jackson.databind.JavaType javaType80 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper79, javaType80);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer82 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer83 = scopeSerializer0.unwrappingSerializer(nameTransformer82);
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer84 = scopeSetJsonSerializer83.getDelegatee();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(scopeSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(scopeSetClass64);
        org.junit.Assert.assertNotNull(scope69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(scopeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(wildcardJsonSerializer75);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer83);
        org.junit.Assert.assertNull(wildcardJsonSerializer84);
    }

    @Test
    public void test06728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06728");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.ascending("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(0);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.filter("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
    }

    @Test
    public void test06729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06729");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        java.lang.String str12 = accessToken10.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder13 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.descending("hi!");
        org.osiam.client.query.Query query22 = queryBuilder21.build();
        java.lang.String str23 = query22.toString();
        java.lang.String str24 = query22.getSortOrder();
        java.lang.String str25 = query22.getSortBy();
        java.lang.String str26 = query22.getFilter();
        java.lang.String str27 = query22.toString();
        boolean boolean28 = accessToken10.equals((java.lang.Object) query22);
        java.util.Date date29 = accessToken10.getExpiresAt();
        java.lang.String str30 = accessToken10.getUserName();
        java.lang.String str31 = osiamGroupService2.extractErrorMessageForbidden(accessToken10);
        org.osiam.resources.scim.Group group32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setType("password");
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setUserName("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        java.lang.String str40 = accessToken39.getToken();
        java.lang.String str41 = accessToken39.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group42 = osiamGroupService2.createResource(group32, accessToken39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(query22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "descending" + "'", str24, "descending");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Insufficient scopes: []" + "'", str31, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org.osiam.client.exception.ForbiddenException: hi!" + "'", str40, "org.osiam.client.exception.ForbiddenException: hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "password" + "'", str41, "password");
    }

    @Test
    public void test06730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06730");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector.Builder builder12 = builder2.setEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setResourceServerEndpoint("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.OsiamConnector osiamConnector17 = builder14.build();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.descending("hi!");
        org.osiam.client.query.Query query27 = queryBuilder26.build();
        java.lang.String str28 = query27.toString();
        java.lang.String str29 = query27.toString();
        org.osiam.client.query.Query query30 = query27.nextPage();
        org.osiam.client.query.Query query31 = query27.nextPage();
        org.osiam.client.query.Query query32 = query31.nextPage();
        org.osiam.client.query.Query query33 = query32.nextPage();
        org.osiam.client.oauth.AccessToken.Builder builder35 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date36 = null;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setRefreshTokenExpiresAt(date36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder35.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken40 = builder39.build();
        java.util.Date date41 = accessToken40.getExpiresAt();
        java.lang.String str42 = accessToken40.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult43 = osiamConnector17.searchUsers(query33, accessToken40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(query27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str28, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query30);
        org.junit.Assert.assertNotNull(query31);
        org.junit.Assert.assertNotNull(query32);
        org.junit.Assert.assertNotNull(query33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(accessToken40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test06731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06731");
        org.osiam.client.exception.UnauthorizedException unauthorizedException3 = new org.osiam.client.exception.UnauthorizedException("PATCH");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException4 = new org.osiam.client.exception.ConnectionInitializationException("ME", (java.lang.Throwable) unauthorizedException3);
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException5 = new org.osiam.client.exception.ConnectionInitializationException("ADMIN", (java.lang.Throwable) connectionInitializationException4);
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException10 = new org.osiam.client.exception.InvalidAttributeException("client_credentials");
        org.osiam.client.exception.OsiamClientException osiamClientException11 = new org.osiam.client.exception.OsiamClientException("descending", (java.lang.Throwable) invalidAttributeException10);
        org.osiam.client.exception.OsiamClientException osiamClientException12 = new org.osiam.client.exception.OsiamClientException("hi!", (java.lang.Throwable) osiamClientException11);
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException17 = new org.osiam.client.exception.InvalidAttributeException("");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException18 = new org.osiam.client.exception.ConnectionInitializationException("Bearer ", (java.lang.Throwable) invalidAttributeException17);
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException19 = new org.osiam.client.exception.ConnectionInitializationException("client_credentials", (java.lang.Throwable) connectionInitializationException18);
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException20 = new org.osiam.client.exception.ConnectionInitializationException("org.osiam.client.exception.OsiamClientException: ME", (java.lang.Throwable) connectionInitializationException18);
        osiamClientException11.addSuppressed((java.lang.Throwable) connectionInitializationException20);
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException22 = new org.osiam.client.exception.ConnectionInitializationException("org.osiam.client.exception.ForbiddenException: hi!", (java.lang.Throwable) osiamClientException11);
        connectionInitializationException4.addSuppressed((java.lang.Throwable) osiamClientException11);
        org.osiam.client.exception.OsiamRequestException osiamRequestException26 = new org.osiam.client.exception.OsiamRequestException((int) (short) -1, "org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        int int27 = osiamRequestException26.getHttpStatusCode();
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException29 = new org.osiam.client.exception.InvalidAttributeException("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        java.lang.Throwable[] throwableArray30 = invalidAttributeException29.getSuppressed();
        osiamRequestException26.addSuppressed((java.lang.Throwable) invalidAttributeException29);
        connectionInitializationException4.addSuppressed((java.lang.Throwable) osiamRequestException26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(throwableArray30);
    }

    @Test
    public void test06732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06732");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("Bearer ");
        org.osiam.client.AuthService.Builder builder9 = builder5.setClientId("ascending");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.AuthService.Builder builder12 = builder9.setClientSecret("org.osiam.client.exception.ConflictException: Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test06733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06733");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector13 = builder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder14 = osiamConnector13.createQueryBuilder();
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        org.osiam.client.query.Query query16 = query15.nextPage();
        java.lang.String str17 = query15.getSortOrder();
        java.lang.String str18 = query15.getFilter();
        java.lang.String str19 = query15.getSortBy();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test06734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06734");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.OsiamConnector.Builder builder11 = builder6.setAuthServerEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector osiamConnector12 = builder6.build();
        org.osiam.resources.scim.UpdateUser updateUser14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken23 = builder20.build();
        org.osiam.client.oauth.AccessToken accessToken24 = builder20.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken24);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user26 = osiamConnector12.updateUser("org.osiam.client.exception.ConflictException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", updateUser14, accessToken24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(osiamConnector12);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertNotNull(accessToken24);
    }

    @Test
    public void test06735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06735");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = osiamConnector5.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder7 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder7.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder9.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.descending("hi!");
        org.osiam.client.query.Query query16 = queryBuilder15.build();
        java.lang.String str17 = query16.toString();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder(query16);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.ascending("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.query.Query query21 = queryBuilder18.build();
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector5.createQueryBuilder(query21);
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        boolean boolean31 = accessToken30.isRefreshTokenExpired();
        java.lang.String str32 = accessToken30.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet33 = accessToken30.getScopes();
        org.osiam.client.helper.ScopeSerializer scopeSerializer34 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean35 = scopeSerializer34.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException43 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean44 = scope41.equals((java.lang.Object) invalidAttributeException43);
        java.lang.String str45 = scope41.getValue();
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str48 = scope47.toString();
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str51 = scope50.getValue();
        java.lang.String str52 = scope50.getValue();
        org.osiam.client.oauth.Scope scope53 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException55 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean56 = scope53.equals((java.lang.Object) invalidAttributeException55);
        java.lang.String str57 = scope53.getValue();
        org.osiam.client.oauth.Scope scope58 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope59 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope60 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope61 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException63 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean64 = scope61.equals((java.lang.Object) invalidAttributeException63);
        org.osiam.client.oauth.Scope scope65 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope66 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope67 = org.osiam.client.oauth.Scope.GET;
        boolean boolean69 = scope67.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope70 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray71 = new org.osiam.client.oauth.Scope[] { scope40, scope41, scope46, scope47, scope49, scope50, scope53, scope58, scope59, scope60, scope61, scope65, scope66, scope67, scope70 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet72 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet72, scopeArray71);
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder37.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet72);
        boolean boolean75 = scopeSerializer34.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet72);
        boolean boolean76 = accessToken30.equals((java.lang.Object) scopeSet72);
        boolean boolean77 = accessToken30.isClientOnly();
        java.lang.String str78 = accessToken30.getUserId();
        java.util.Date date79 = accessToken30.getRefreshTokenExpiresAt();
        java.lang.String str80 = accessToken30.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user81 = osiamConnector5.getUser("org.osiam.client.exception.OsiamRequestException: descending", accessToken30);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str17, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(scopeSet33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "GET" + "'", str45, "GET");
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ME" + "'", str48, "ME");
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PATCH" + "'", str51, "PATCH");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PATCH" + "'", str52, "PATCH");
        org.junit.Assert.assertNotNull(scope53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "GET" + "'", str57, "GET");
        org.junit.Assert.assertNotNull(scope58);
        org.junit.Assert.assertNotNull(scope59);
        org.junit.Assert.assertNotNull(scope60);
        org.junit.Assert.assertNotNull(scope61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(scope65);
        org.junit.Assert.assertNotNull(scope66);
        org.junit.Assert.assertNotNull(scope67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(scope70);
        org.junit.Assert.assertNotNull(scopeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
    }

    @Test
    public void test06736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06736");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientId("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = osiamConnector5.createQueryBuilder();
        org.osiam.client.OsiamGroupService.Builder builder9 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService10 = builder9.build();
        org.osiam.client.OsiamGroupService osiamGroupService11 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken18);
        java.lang.String str20 = osiamGroupService11.extractErrorMessageForbidden(accessToken18);
        javax.ws.rs.client.WebTarget webTarget21 = osiamGroupService11.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget22 = osiamGroupService11.targetEndpoint;
        org.osiam.client.AuthService.Builder builder24 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder26 = builder24.setClientId("ME");
        org.osiam.client.AuthService.Builder builder28 = builder26.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService29 = builder28.build();
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken36 = builder35.build();
        boolean boolean37 = accessToken36.isRefreshTokenExpired();
        boolean boolean38 = accessToken36.isClientOnly();
        java.lang.String str39 = accessToken36.getClientId();
        java.lang.String str40 = authService29.extractErrorMessageForbidden(accessToken36);
        java.lang.String str41 = accessToken36.getUserId();
        java.lang.String str42 = accessToken36.getClientId();
        java.lang.String str43 = osiamGroupService11.extractErrorMessageForbidden(accessToken36);
        java.util.Date date44 = accessToken36.getRefreshTokenExpiresAt();
        java.util.Date date45 = accessToken36.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector5.deleteUser("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME", accessToken36);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(osiamGroupService10);
        org.junit.Assert.assertNotNull(osiamGroupService11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget21);
        org.junit.Assert.assertNotNull(webTarget22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(authService29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(accessToken36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Insufficient scopes: []" + "'", str40, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Insufficient scopes: []" + "'", str43, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test06737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06737");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = osiamGroupService3.extractErrorMessageUnauthorized("org.osiam.client.exception.NoResultException: refresh_token", statusType7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
    }

    @Test
    public void test06738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06738");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        boolean boolean18 = accessToken17.isRefreshTokenExpired();
        java.lang.String str19 = accessToken17.getUserId();
        java.lang.String str20 = accessToken17.getToken();
        java.lang.String str21 = authService10.extractErrorMessageForbidden(accessToken17);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str23 = scope22.getValue();
        java.lang.String str24 = scope22.toString();
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray26 = new org.osiam.client.oauth.Scope[] { scope22, scope25 };
        java.net.URI uRI27 = authService10.getAuthorizationUri(scopeArray26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date30 = null;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setRefreshTokenExpiresAt(date30);
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken34 = builder33.build();
        boolean boolean35 = accessToken34.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet36 = accessToken34.getScopes();
        boolean boolean37 = accessToken34.isRefreshTokenExpired();
        boolean boolean38 = accessToken34.isClientOnly();
        java.lang.String str39 = authService10.extractErrorMessageForbidden(accessToken34);
        org.osiam.client.AuthService.Builder builder41 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder43 = builder41.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder45 = builder43.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder47 = builder45.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder49 = builder47.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder51 = builder49.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder53 = builder49.setClientSecret("PATCH");
        org.osiam.client.AuthService.Builder builder55 = builder53.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService56 = builder53.build();
        org.osiam.client.oauth.Scope scope57 = org.osiam.client.oauth.Scope.GET;
        java.lang.String str58 = scope57.getValue();
        java.lang.String str59 = scope57.getValue();
        java.lang.String str60 = scope57.toString();
        java.lang.String str61 = scope57.toString();
        org.osiam.client.oauth.Scope[] scopeArray62 = new org.osiam.client.oauth.Scope[] { scope57 };
        java.net.URI uRI63 = authService56.getAuthorizationUri(scopeArray62);
        java.net.URI uRI64 = authService10.getAuthorizationUri(scopeArray62);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken66 = authService10.retrieveAccessToken("org.osiam.client.exception.UnauthorizedException: ");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Bearer " + "'", str20, "Bearer ");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PATCH" + "'", str23, "PATCH");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PATCH" + "'", str24, "PATCH");
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scopeArray26);
        org.junit.Assert.assertNotNull(uRI27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(accessToken34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(scopeSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(authService56);
        org.junit.Assert.assertNotNull(scope57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "GET" + "'", str58, "GET");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "GET" + "'", str59, "GET");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "GET" + "'", str60, "GET");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "GET" + "'", str61, "GET");
        org.junit.Assert.assertNotNull(scopeArray62);
        org.junit.Assert.assertNotNull(uRI63);
        org.junit.Assert.assertNotNull(uRI64);
    }

    @Test
    public void test06739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06739");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = osiamGroupService3.extractErrorMessageUnauthorized("POST", statusType5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
    }

    @Test
    public void test06740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06740");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = osiamGroupService2.extractErrorMessage("org.osiam.client.exception.ConflictException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", statusType4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
    }

    @Test
    public void test06741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06741");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientId("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setEndpoint("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector osiamConnector19 = builder18.build();
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.addScope(scope23);
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException27 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean28 = scope25.equals((java.lang.Object) invalidAttributeException27);
        java.lang.String str29 = scope25.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder22.addScope(scope25);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setRefreshToken("GET");
        org.osiam.client.OsiamGroupService.Builder builder40 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService41 = builder40.build();
        org.osiam.client.OsiamGroupService osiamGroupService42 = builder40.build();
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken49 = builder48.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken49);
        java.lang.String str51 = osiamGroupService42.extractErrorMessageForbidden(accessToken49);
        java.util.Date date52 = accessToken49.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder36.setRefreshTokenExpiresAt(date52);
        org.osiam.client.oauth.AccessToken accessToken54 = builder36.build();
        boolean boolean55 = accessToken54.isExpired();
        boolean boolean56 = accessToken54.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user57 = osiamConnector19.getUser("org.osiam.client.exception.OsiamClientException: client_credentials", accessToken54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GET" + "'", str29, "GET");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(osiamGroupService41);
        org.junit.Assert.assertNotNull(osiamGroupService42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Insufficient scopes: []" + "'", str51, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(accessToken54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test06742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06742");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.OsiamGroupService.Builder builder8 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken16.getScopes();
        java.lang.String str19 = osiamGroupService9.extractErrorMessageForbidden(accessToken16);
        boolean boolean20 = accessToken16.isClientOnly();
        java.lang.String str21 = authService6.extractErrorMessageForbidden(accessToken16);
        org.osiam.client.AuthService.Builder builder23 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientId("ME");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService28 = builder27.build();
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        boolean boolean36 = accessToken35.isRefreshTokenExpired();
        boolean boolean37 = accessToken35.isClientOnly();
        java.lang.String str38 = accessToken35.getClientId();
        java.lang.String str39 = authService28.extractErrorMessageForbidden(accessToken35);
        java.lang.String str40 = accessToken35.getUserId();
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.lang.String str49 = accessToken47.getUserId();
        boolean boolean50 = accessToken47.isRefreshTokenExpired();
        boolean boolean51 = accessToken35.equals((java.lang.Object) accessToken47);
        java.lang.String str52 = accessToken35.getUserName();
        java.lang.String str53 = authService6.extractErrorMessageForbidden(accessToken35);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken55 = authService6.retrieveAccessToken("Insufficient scopes: [null, PATCH, GET, ME, ADMIN, GET POST PUT PATCH DELETE, PUT]");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(authService28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Insufficient scopes: []" + "'", str53, "Insufficient scopes: []");
    }

    @Test
    public void test06743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06743");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientId("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setClientRedirectUri("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector osiamConnector15 = builder10.build();
        org.osiam.client.AuthService.Builder builder17 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder19 = builder17.setClientId("ME");
        org.osiam.client.AuthService.Builder builder21 = builder19.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService26 = builder25.build();
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        boolean boolean34 = accessToken33.isRefreshTokenExpired();
        java.lang.String str35 = accessToken33.getUserId();
        java.lang.String str36 = accessToken33.getToken();
        java.lang.String str37 = authService26.extractErrorMessageForbidden(accessToken33);
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str39 = scope38.getValue();
        java.lang.String str40 = scope38.toString();
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray42 = new org.osiam.client.oauth.Scope[] { scope38, scope41 };
        java.net.URI uRI43 = authService26.getAuthorizationUri(scopeArray42);
        org.osiam.client.oauth.AccessToken.Builder builder45 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setRefreshTokenExpiresAt(date46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder45.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken52 = builder49.build();
        java.lang.String str53 = accessToken52.getRefreshToken();
        java.lang.String str54 = authService26.extractErrorMessageForbidden(accessToken52);
        org.osiam.client.AuthService.Builder builder56 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder58 = builder56.setClientId("ME");
        org.osiam.client.AuthService.Builder builder60 = builder58.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder62 = builder60.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder64 = builder62.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder66 = builder62.setClientId("");
        org.osiam.client.AuthService.Builder builder68 = builder62.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService69 = builder68.build();
        org.osiam.client.oauth.Scope scope71 = new org.osiam.client.oauth.Scope("");
        java.lang.String str72 = scope71.getValue();
        org.osiam.client.oauth.Scope scope74 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.Scope[] scopeArray75 = new org.osiam.client.oauth.Scope[] { scope71, scope74 };
        java.net.URI uRI76 = authService69.getAuthorizationUri(scopeArray75);
        java.net.URI uRI77 = authService26.getAuthorizationUri(scopeArray75);
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI78 = osiamConnector15.getAuthorizationUri(scopeArray75);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to create redirect URI");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(authService26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Bearer " + "'", str36, "Bearer ");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Insufficient scopes: []" + "'", str37, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PATCH" + "'", str39, "PATCH");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PATCH" + "'", str40, "PATCH");
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertNotNull(scopeArray42);
        org.junit.Assert.assertNotNull(uRI43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(accessToken52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Insufficient scopes: []" + "'", str54, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(authService69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(scopeArray75);
        org.junit.Assert.assertNotNull(uRI76);
        org.junit.Assert.assertNotNull(uRI77);
    }

    @Test
    public void test06744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06744");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = osiamConnector5.createQueryBuilder();
        org.osiam.resources.scim.Group group7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        java.util.Date date15 = accessToken14.getExpiresAt();
        java.lang.String str16 = accessToken14.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken14);
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        boolean boolean25 = accessToken24.isRefreshTokenExpired();
        boolean boolean26 = accessToken24.isClientOnly();
        java.lang.String str27 = accessToken24.getClientId();
        boolean boolean28 = accessToken24.isClientOnly();
        boolean boolean29 = accessToken14.equals((java.lang.Object) accessToken24);
        org.osiam.client.query.QueryBuilder queryBuilder30 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder32 = queryBuilder30.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.descending("hi!");
        org.osiam.client.query.Query query39 = queryBuilder38.build();
        org.osiam.client.query.Query query40 = queryBuilder38.build();
        org.osiam.client.query.QueryBuilder queryBuilder42 = queryBuilder38.ascending("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        boolean boolean43 = accessToken14.equals((java.lang.Object) "org.osiam.client.exception.ConnectionInitializationException: PATCH");
        java.lang.String str44 = accessToken14.getRefreshToken();
        java.util.Date date45 = accessToken14.getRefreshTokenExpiresAt();
        boolean boolean46 = accessToken14.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group47 = osiamConnector5.createGroup(group7, accessToken14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(query39);
        org.junit.Assert.assertNotNull(query40);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test06745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06745");
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.AbstractOsiamService.Builder<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable> jsonFormatVisitableBuilder1 = new org.osiam.client.AbstractOsiamService.Builder<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable>("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06746");
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException2 = new org.osiam.client.exception.InvalidAttributeException("");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException3 = new org.osiam.client.exception.ConnectionInitializationException("Bearer ", (java.lang.Throwable) invalidAttributeException2);
        org.osiam.client.exception.ForbiddenException forbiddenException5 = new org.osiam.client.exception.ForbiddenException("hi!");
        connectionInitializationException3.addSuppressed((java.lang.Throwable) forbiddenException5);
        org.osiam.client.exception.OsiamRequestException osiamRequestException9 = new org.osiam.client.exception.OsiamRequestException(401, "org.osiam.client.exception.OsiamRequestException: hi!");
        connectionInitializationException3.addSuppressed((java.lang.Throwable) osiamRequestException9);
        java.lang.Throwable[] throwableArray11 = osiamRequestException9.getSuppressed();
        java.lang.String str12 = osiamRequestException9.toString();
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamRequestException: hi!" + "'", str12, "org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamRequestException: hi!");
    }

    @Test
    public void test06747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06747");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.resources.scim.Group group6 = null;
        org.osiam.client.AuthService.Builder builder8 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientSecret("");
        org.osiam.client.AuthService.Builder builder16 = builder14.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService authService17 = builder16.build();
        org.osiam.client.AuthService authService18 = builder16.build();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        boolean boolean26 = accessToken25.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet27 = accessToken25.getScopes();
        boolean boolean28 = accessToken25.isRefreshTokenExpired();
        boolean boolean29 = accessToken25.isExpired();
        java.util.Date date30 = accessToken25.getExpiresAt();
        java.lang.String str31 = authService18.extractErrorMessageForbidden(accessToken25);
        java.lang.String str32 = accessToken25.getRefreshToken();
        java.lang.String str33 = accessToken25.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group34 = osiamGroupService4.updateGroup("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamClientException: descending", group6, accessToken25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(authService17);
        org.junit.Assert.assertNotNull(authService18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(scopeSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Insufficient scopes: []" + "'", str31, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test06748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06748");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.resources.scim.Group group5 = null;
        org.osiam.client.oauth.AccessToken accessToken6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group7 = osiamGroupService2.replaceGroup("DELETE", group5, accessToken6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
    }

    @Test
    public void test06749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06749");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setClientId("ME");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder9.setUserId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshToken("DELETE");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group19 = osiamGroupService2.getResource("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken18);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
    }

    @Test
    public void test06750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06750");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientId("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setEndpoint("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector osiamConnector19 = builder18.build();
        org.osiam.client.OsiamConnector.Builder builder20 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder24 = builder22.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector25 = builder24.build();
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        boolean boolean33 = accessToken32.isRefreshTokenExpired();
        java.lang.String str34 = accessToken32.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder35 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder37.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder37.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder43 = queryBuilder41.descending("hi!");
        org.osiam.client.query.Query query44 = queryBuilder43.build();
        java.lang.String str45 = query44.toString();
        java.lang.String str46 = query44.getSortOrder();
        java.lang.String str47 = query44.getSortBy();
        java.lang.String str48 = query44.getFilter();
        java.lang.String str49 = query44.toString();
        boolean boolean50 = accessToken32.equals((java.lang.Object) query44);
        org.osiam.client.query.QueryBuilder queryBuilder51 = osiamConnector25.createQueryBuilder(query44);
        org.osiam.client.query.QueryBuilder queryBuilder52 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder56 = queryBuilder54.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder58 = queryBuilder54.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder60 = queryBuilder58.descending("hi!");
        org.osiam.client.query.Query query61 = queryBuilder60.build();
        java.lang.String str62 = query61.getAttributes();
        java.lang.String str63 = query61.toString();
        java.lang.String str64 = query61.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder65 = osiamConnector25.createQueryBuilder(query61);
        java.lang.String str66 = query61.toString();
        org.osiam.client.query.QueryBuilder queryBuilder67 = osiamConnector19.createQueryBuilder(query61);
        org.osiam.client.AuthService.Builder builder69 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder71 = builder69.setClientId("ME");
        org.osiam.client.AuthService.Builder builder73 = builder71.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService74 = builder73.build();
        org.osiam.client.oauth.AccessToken.Builder builder76 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date77 = null;
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder76.setRefreshTokenExpiresAt(date77);
        org.osiam.client.oauth.AccessToken.Builder builder80 = builder76.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken81 = builder80.build();
        boolean boolean82 = accessToken81.isRefreshTokenExpired();
        boolean boolean83 = accessToken81.isClientOnly();
        java.lang.String str84 = accessToken81.getClientId();
        java.lang.String str85 = authService74.extractErrorMessageForbidden(accessToken81);
        java.lang.String str86 = accessToken81.getUserId();
        org.osiam.client.oauth.AccessToken.Builder builder88 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date89 = null;
        org.osiam.client.oauth.AccessToken.Builder builder90 = builder88.setRefreshTokenExpiresAt(date89);
        org.osiam.client.oauth.AccessToken.Builder builder92 = builder88.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken93 = builder92.build();
        boolean boolean94 = accessToken93.isRefreshTokenExpired();
        java.lang.String str95 = accessToken93.getUserId();
        boolean boolean96 = accessToken93.isRefreshTokenExpired();
        boolean boolean97 = accessToken81.equals((java.lang.Object) accessToken93);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet98 = accessToken93.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser99 = osiamConnector19.getCurrentUserBasic(accessToken93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(osiamConnector25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(query44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str45, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "descending" + "'", str46, "descending");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str49, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(queryBuilder56);
        org.junit.Assert.assertNotNull(queryBuilder58);
        org.junit.Assert.assertNotNull(queryBuilder60);
        org.junit.Assert.assertNotNull(query61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Authorization" + "'", str62, "Authorization");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str63, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "descending" + "'", str64, "descending");
        org.junit.Assert.assertNotNull(queryBuilder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str66, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder67);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(authService74);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(accessToken81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Insufficient scopes: []" + "'", str85, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(accessToken93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(scopeSet98);
    }

    @Test
    public void test06751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06751");
        org.osiam.client.exception.OsiamRequestException osiamRequestException2 = new org.osiam.client.exception.OsiamRequestException((int) ' ', "org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET POST PUT PATCH DELETE], refreshTokenId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=refresh_token, userId=org.osiam.client.exception.ConflictException: PATCH, userName=]");
    }

    @Test
    public void test06752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06752");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.AuthService.Builder builder6 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientId("ME");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService11 = builder10.build();
        org.osiam.client.OsiamGroupService.Builder builder13 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService14 = builder13.build();
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet23 = accessToken21.getScopes();
        java.lang.String str24 = osiamGroupService14.extractErrorMessageForbidden(accessToken21);
        boolean boolean25 = accessToken21.isClientOnly();
        java.lang.String str26 = authService11.extractErrorMessageForbidden(accessToken21);
        java.util.Date date27 = accessToken21.getRefreshTokenExpiresAt();
        boolean boolean28 = accessToken21.isClientOnly();
        java.lang.String str29 = accessToken21.getToken();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList30 = osiamUserService4.getAllUsers(accessToken21);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(authService11);
        org.junit.Assert.assertNotNull(osiamGroupService14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(scopeSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Insufficient scopes: []" + "'", str24, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Insufficient scopes: []" + "'", str26, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Bearer " + "'", str29, "Bearer ");
    }

    @Test
    public void test06753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06753");
        org.osiam.client.exception.ForbiddenException forbiddenException1 = new org.osiam.client.exception.ForbiddenException("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
    }

    @Test
    public void test06754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06754");
        org.osiam.client.OsiamConnector.setConnectTimeout(100);
    }

    @Test
    public void test06755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06755");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder4.setClientId("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientSecret("descending");
        org.osiam.client.OsiamConnector osiamConnector17 = builder12.build();
        org.osiam.client.AuthService.Builder builder19 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder21 = builder19.setClientId("ME");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService28 = builder27.build();
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        boolean boolean36 = accessToken35.isRefreshTokenExpired();
        java.lang.String str37 = accessToken35.getUserId();
        java.lang.String str38 = accessToken35.getToken();
        java.lang.String str39 = authService28.extractErrorMessageForbidden(accessToken35);
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str41 = scope40.getValue();
        java.lang.String str42 = scope40.toString();
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray44 = new org.osiam.client.oauth.Scope[] { scope40, scope43 };
        java.net.URI uRI45 = authService28.getAuthorizationUri(scopeArray44);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken46 = osiamConnector17.retrieveAccessToken(scopeArray44);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(authService28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Bearer " + "'", str38, "Bearer ");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PATCH" + "'", str41, "PATCH");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PATCH" + "'", str42, "PATCH");
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertNotNull(scopeArray44);
        org.junit.Assert.assertNotNull(uRI45);
    }

    @Test
    public void test06756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06756");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer5 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader6 = scopeDeserializer0.getObjectIdReader();
        boolean boolean7 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.core.JsonParser jsonParser8 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet10 = scopeDeserializer0.deserialize(jsonParser8, deserializationContext9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNull(wildcardJsonDeserializer5);
        org.junit.Assert.assertNull(objectIdReader6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test06757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06757");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientId("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test06758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06758");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.getUserName();
        java.lang.String str15 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService2.targetEndpoint;
        org.osiam.client.AuthService.Builder builder19 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder21 = builder19.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientSecret("");
        org.osiam.client.AuthService authService26 = builder25.build();
        org.osiam.client.AuthService.Builder builder28 = builder25.setClientId("hi!");
        org.osiam.client.AuthService authService29 = builder25.build();
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.addScope(scope32);
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException36 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean37 = scope34.equals((java.lang.Object) invalidAttributeException36);
        java.lang.String str38 = scope34.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder31.addScope(scope34);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken accessToken44 = builder43.build();
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder43.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken accessToken47 = builder43.build();
        java.lang.String str48 = authService29.extractErrorMessageForbidden(accessToken47);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList49 = osiamGroupService2.getAllResources(accessToken47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget16);
        org.junit.Assert.assertNotNull(webTarget17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(authService26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(authService29);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "GET" + "'", str38, "GET");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(accessToken44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Insufficient scopes: [GET, GET POST PUT PATCH DELETE]" + "'", str48, "Insufficient scopes: [GET, GET POST PUT PATCH DELETE]");
    }

    @Test
    public void test06759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06759");
        org.osiam.client.exception.OsiamRequestException osiamRequestException2 = new org.osiam.client.exception.OsiamRequestException((int) (short) 100, "org.osiam.client.exception.OsiamClientException: hi!");
    }

    @Test
    public void test06760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06760");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.addScope(scope14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setClientId("GET");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setRefreshToken("");
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setType("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshToken("password");
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserName("org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388");
        org.osiam.client.oauth.Scope scope27 = new org.osiam.client.oauth.Scope("refresh_token");
        java.lang.String str28 = scope27.getValue();
        java.lang.String str29 = scope27.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder25.addScope(scope27);
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "refresh_token" + "'", str28, "refresh_token");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "refresh_token" + "'", str29, "refresh_token");
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test06761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06761");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Insufficient scopes: [null, PATCH, GET, ME, ADMIN, GET POST PUT PATCH DELETE, PUT]");
    }

    @Test
    public void test06762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06762");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("password");
        org.osiam.client.OsiamConnector.Builder builder10 = builder6.setAuthServerEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder12 = builder6.setClientRedirectUri("client_credentials");
        org.osiam.client.OsiamConnector osiamConnector13 = builder12.build();
        org.osiam.client.query.QueryBuilder queryBuilder14 = osiamConnector13.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder23.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder26.attributes("Cannot connect to server");
        org.osiam.client.query.Query query29 = queryBuilder26.build();
        org.osiam.client.query.QueryBuilder queryBuilder30 = osiamConnector13.createQueryBuilder(query29);
        java.lang.String str31 = query29.getAttributes();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(query29);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Cannot connect to server" + "'", str31, "Cannot connect to server");
    }

    @Test
    public void test06763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06763");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]");
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setUserName("");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test06764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06764");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.startIndex((long) '4');
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.startIndex((long) (short) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
    }

    @Test
    public void test06765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06765");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.resources.scim.UpdateGroup updateGroup5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        java.util.Date date14 = accessToken12.getExpiresAt();
        boolean boolean15 = accessToken12.isRefreshTokenExpired();
        java.util.Date date16 = accessToken12.getExpiresAt();
        java.lang.String str17 = accessToken12.getUserName();
        boolean boolean18 = accessToken12.isRefreshTokenExpired();
        java.util.Date date19 = accessToken12.getRefreshTokenExpiresAt();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet20 = accessToken12.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group21 = osiamGroupService3.updateGroup("Query [attributes=org.osiam.client.exception.OsiamRequestException: hi!, filter=null, sortBy=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], sortOrder=descending, startIndex=1, count=10]", updateGroup5, accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scopeSet20);
    }

    @Test
    public void test06766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06766");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector5 = builder0.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.descending("hi!");
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder14.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Cannot connect to server");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.startIndex((long) (byte) 10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.count(0);
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        org.osiam.client.query.Query query25 = query24.previousPage();
        org.osiam.client.query.Query query26 = query25.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder27 = osiamConnector5.createQueryBuilder(query25);
        long long28 = query25.getStartIndex();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertNotNull(query25);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
    }

    @Test
    public void test06767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06767");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.descending("hi!");
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        java.lang.String str16 = query15.getAttributes();
        java.lang.String str17 = query15.toString();
        java.lang.String str18 = query15.getSortBy();
        org.osiam.client.query.Query query19 = query15.nextPage();
        java.lang.String str20 = query19.getAttributes();
        java.lang.String str21 = query19.getFilter();
        org.osiam.client.query.Query query22 = query19.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder23 = osiamConnector5.createQueryBuilder(query19);
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        boolean boolean31 = accessToken30.isRefreshTokenExpired();
        java.lang.String str32 = accessToken30.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder33 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder35.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.descending("hi!");
        org.osiam.client.query.Query query42 = queryBuilder41.build();
        java.lang.String str43 = query42.toString();
        java.lang.String str44 = query42.getSortOrder();
        java.lang.String str45 = query42.getSortBy();
        java.lang.String str46 = query42.getFilter();
        java.lang.String str47 = query42.toString();
        boolean boolean48 = accessToken30.equals((java.lang.Object) query42);
        java.lang.String str49 = accessToken30.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user50 = osiamConnector5.getCurrentUser(accessToken30);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Authorization" + "'", str16, "Authorization");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str17, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Authorization" + "'", str20, "Authorization");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(query22);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str47, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test06768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06768");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.toString();
        java.lang.String str15 = accessToken9.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser16 = osiamUserService2.getCurrentUserBasic(accessToken9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str14, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test06769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06769");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer3 = scopeDeserializer0.getDelegatee();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getEmptyValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet5 = scopeDeserializer0.getNullValue();
        java.util.Collection<java.lang.Object> objCollection6 = scopeDeserializer0.getKnownPropertyNames();
        java.lang.Class<?> wildcardClass7 = scopeDeserializer0.handledType();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeDeserializer0.getNullValue();
        java.util.Collection<java.lang.Object> objCollection9 = scopeDeserializer0.getKnownPropertyNames();
        boolean boolean10 = scopeDeserializer0.isCachable();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardJsonDeserializer3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNull(scopeSet5);
        org.junit.Assert.assertNull(objCollection6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(scopeSet8);
        org.junit.Assert.assertNull(objCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test06770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06770");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Cannot connect to server");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        java.lang.String str13 = accessToken11.getUserId();
        java.util.Date date14 = accessToken11.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user15 = osiamUserService2.replaceUser("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]", user4, accessToken11);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test06771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06771");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget15 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = osiamGroupService3.extractErrorMessage("org.osiam.client.exception.ConnectionInitializationException: AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", statusType17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(webTarget15);
    }

    @Test
    public void test06772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06772");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader3 = scopeDeserializer0.getObjectIdReader();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getNullValue();
        java.util.Collection<java.lang.Object> objCollection5 = scopeDeserializer0.getKnownPropertyNames();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objectIdReader3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNull(objCollection5);
    }

    @Test
    public void test06773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06773");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector.Builder builder12 = builder2.setEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector osiamConnector13 = builder2.build();
        org.osiam.client.OsiamConnector.Builder builder14 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector19 = builder18.build();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        java.lang.String str28 = accessToken26.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder29 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder31.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.descending("hi!");
        org.osiam.client.query.Query query38 = queryBuilder37.build();
        java.lang.String str39 = query38.toString();
        java.lang.String str40 = query38.getSortOrder();
        java.lang.String str41 = query38.getSortBy();
        java.lang.String str42 = query38.getFilter();
        java.lang.String str43 = query38.toString();
        boolean boolean44 = accessToken26.equals((java.lang.Object) query38);
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector19.createQueryBuilder(query38);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.getAttributes();
        java.lang.String str57 = query55.toString();
        java.lang.String str58 = query55.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder59 = osiamConnector19.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder60 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder62 = queryBuilder60.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder62.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder66 = queryBuilder64.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query67 = queryBuilder64.build();
        org.osiam.client.query.QueryBuilder queryBuilder68 = osiamConnector19.createQueryBuilder(query67);
        java.lang.String str69 = query67.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder70 = osiamConnector13.createQueryBuilder(query67);
        org.osiam.client.query.QueryBuilder queryBuilder71 = osiamConnector13.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder73 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken74 = builder73.build();
        java.lang.String str75 = accessToken74.toString();
        java.lang.String str76 = accessToken74.getUserId();
        java.lang.String str77 = accessToken74.getToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken74);
        java.lang.String str79 = accessToken74.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken80 = osiamConnector13.validateAccessToken(accessToken74);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(query38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str39, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "descending" + "'", str40, "descending");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Authorization" + "'", str56, "Authorization");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str57, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "descending" + "'", str58, "descending");
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertNotNull(query67);
        org.junit.Assert.assertNotNull(queryBuilder68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(queryBuilder70);
        org.junit.Assert.assertNotNull(queryBuilder71);
        org.junit.Assert.assertNotNull(accessToken74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str75, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "client_credentials" + "'", str77, "client_credentials");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
    }

    @Test
    public void test06774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06774");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.resources.scim.Group group6 = null;
        org.osiam.client.AuthService.Builder builder8 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientId("ME");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder16 = builder14.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService17 = builder16.build();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        boolean boolean25 = accessToken24.isRefreshTokenExpired();
        java.lang.String str26 = authService17.extractErrorMessageForbidden(accessToken24);
        boolean boolean27 = accessToken24.isRefreshTokenExpired();
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException29 = new org.osiam.client.exception.InvalidAttributeException("POST");
        boolean boolean30 = accessToken24.equals((java.lang.Object) invalidAttributeException29);
        java.lang.String str31 = accessToken24.getType();
        java.lang.String str32 = accessToken24.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group33 = osiamGroupService4.createGroup(group6, accessToken24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(authService17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Insufficient scopes: []" + "'", str26, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test06775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06775");
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException1 = new org.osiam.client.exception.InvalidAttributeException("org.osiam.client.exception.NoResultException: org.osiam.client.exception.ConnectionInitializationException: descending");
    }

    @Test
    public void test06776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06776");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = osiamConnector5.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getRefreshToken();
        boolean boolean17 = accessToken13.isExpired();
        boolean boolean18 = accessToken13.isExpired();
        java.lang.String str19 = accessToken13.getRefreshToken();
        org.osiam.client.query.QueryBuilder queryBuilder20 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder26.descending("hi!");
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder26.descending("PATCH");
        boolean boolean31 = accessToken13.equals((java.lang.Object) queryBuilder30);
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector5.revokeAccessToken(accessToken13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test06777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06777");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.OsiamConnector.Builder builder10 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder22 = builder18.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector23 = builder18.build();
        org.osiam.client.OsiamConnector.Builder builder24 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder26 = builder24.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder28 = builder26.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder30 = builder28.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector31 = builder30.build();
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.toString();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector31.createQueryBuilder(query41);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        org.osiam.client.query.QueryBuilder queryBuilder56 = osiamConnector31.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder57 = osiamConnector23.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder58 = osiamConnector9.createQueryBuilder(query55);
        org.osiam.client.OsiamConnector.Builder builder59 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder61 = builder59.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder63 = builder59.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector64 = builder63.build();
        org.osiam.client.query.QueryBuilder queryBuilder65 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder67 = queryBuilder65.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder69 = queryBuilder67.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder71 = queryBuilder67.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder73 = queryBuilder71.descending("hi!");
        org.osiam.client.query.Query query74 = queryBuilder73.build();
        java.lang.String str75 = query74.getAttributes();
        java.lang.String str76 = query74.toString();
        java.lang.String str77 = query74.getSortBy();
        org.osiam.client.query.Query query78 = query74.nextPage();
        java.lang.String str79 = query78.getAttributes();
        java.lang.String str80 = query78.getFilter();
        org.osiam.client.query.Query query81 = query78.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder82 = osiamConnector64.createQueryBuilder(query78);
        java.lang.String str83 = query78.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder84 = osiamConnector9.createQueryBuilder(query78);
        org.osiam.resources.scim.Group group85 = null;
        org.osiam.client.oauth.AccessToken.Builder builder87 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date88 = null;
        org.osiam.client.oauth.AccessToken.Builder builder89 = builder87.setRefreshTokenExpiresAt(date88);
        org.osiam.client.oauth.AccessToken.Builder builder91 = builder87.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder93 = builder91.setType("");
        org.osiam.client.oauth.AccessToken.Builder builder95 = builder91.setType("authorization_code");
        org.osiam.client.oauth.AccessToken accessToken96 = builder91.build();
        boolean boolean97 = accessToken96.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group98 = osiamConnector9.createGroup(group85, accessToken96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(osiamConnector23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(osiamConnector31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str42, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertNotNull(queryBuilder56);
        org.junit.Assert.assertNotNull(queryBuilder57);
        org.junit.Assert.assertNotNull(queryBuilder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(osiamConnector64);
        org.junit.Assert.assertNotNull(queryBuilder67);
        org.junit.Assert.assertNotNull(queryBuilder69);
        org.junit.Assert.assertNotNull(queryBuilder71);
        org.junit.Assert.assertNotNull(queryBuilder73);
        org.junit.Assert.assertNotNull(query74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Authorization" + "'", str75, "Authorization");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str76, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertNotNull(query78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Authorization" + "'", str79, "Authorization");
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(query81);
        org.junit.Assert.assertNotNull(queryBuilder82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "descending" + "'", str83, "descending");
        org.junit.Assert.assertNotNull(queryBuilder84);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(accessToken96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test06778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06778");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientId("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setAuthServerEndpoint("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setResourceServerEndpoint("ADMIN");
        org.osiam.client.OsiamConnector.Builder builder20 = builder16.setClientSecret("hi!");
        org.osiam.client.OsiamConnector osiamConnector21 = builder16.build();
        org.osiam.resources.scim.Group group22 = null;
        org.osiam.client.AuthService.Builder builder24 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder26 = builder24.setClientId("ME");
        org.osiam.client.AuthService.Builder builder28 = builder26.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder30 = builder28.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder32 = builder30.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService33 = builder32.build();
        org.osiam.client.oauth.AccessToken.Builder builder35 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date36 = null;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setRefreshTokenExpiresAt(date36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder35.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken40 = builder39.build();
        boolean boolean41 = accessToken40.isRefreshTokenExpired();
        java.lang.String str42 = authService33.extractErrorMessageForbidden(accessToken40);
        boolean boolean43 = accessToken40.isRefreshTokenExpired();
        java.lang.String str44 = accessToken40.getType();
        java.lang.String str45 = accessToken40.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group46 = osiamConnector21.createGroup(group22, accessToken40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(authService33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(accessToken40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Insufficient scopes: []" + "'", str42, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test06779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06779");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder11 = builder7.setClientId("");
        org.osiam.client.AuthService.Builder builder13 = builder7.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService14 = builder13.build();
        org.osiam.client.AuthService.Builder builder16 = builder13.setClientId("org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder18 = builder13.setClientSecret("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamClientException: descending");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(authService14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test06780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06780");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass4 = scopeSetJsonSerializer3.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer6 = scopeSetJsonSerializer3.unwrappingSerializer(nameTransformer5);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet7 = null;
        boolean boolean8 = scopeSetJsonSerializer6.isEmpty(scopeSet7);
        boolean boolean9 = scopeSetJsonSerializer6.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.addScope(scope12);
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException16 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean17 = scope14.equals((java.lang.Object) invalidAttributeException16);
        java.lang.String str18 = scope14.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder11.addScope(scope14);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder11.setRefreshToken("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        java.util.Date date29 = accessToken28.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder21.setRefreshTokenExpiresAt(date29);
        org.osiam.client.helper.ScopeSerializer scopeSerializer31 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date34 = null;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException39 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean40 = scope37.equals((java.lang.Object) invalidAttributeException39);
        java.lang.String str41 = scope37.getValue();
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str44 = scope43.toString();
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str47 = scope46.getValue();
        java.lang.String str48 = scope46.getValue();
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException51 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean52 = scope49.equals((java.lang.Object) invalidAttributeException51);
        java.lang.String str53 = scope49.getValue();
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope56 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope57 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException59 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean60 = scope57.equals((java.lang.Object) invalidAttributeException59);
        org.osiam.client.oauth.Scope scope61 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope62 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope63 = org.osiam.client.oauth.Scope.GET;
        boolean boolean65 = scope63.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope66 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray67 = new org.osiam.client.oauth.Scope[] { scope36, scope37, scope42, scope43, scope45, scope46, scope49, scope54, scope55, scope56, scope57, scope61, scope62, scope63, scope66 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet68 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet68, scopeArray67);
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder33.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet68);
        boolean boolean71 = scopeSerializer31.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet68);
        org.osiam.client.oauth.AccessToken.Builder builder73 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date74 = null;
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder73.setRefreshTokenExpiresAt(date74);
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder73.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken78 = builder77.build();
        boolean boolean79 = accessToken78.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet80 = accessToken78.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator81 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider82 = null;
        scopeSerializer31.serialize(scopeSet80, jsonGenerator81, serializerProvider82);
        org.osiam.client.oauth.AccessToken.Builder builder84 = builder30.addScopes(scopeSet80);
        boolean boolean85 = scopeSetJsonSerializer6.isEmpty(scopeSet80);
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer86 = scopeSetJsonSerializer6.getDelegatee();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertNull(scopeSetClass4);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GET" + "'", str18, "GET");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "GET" + "'", str41, "GET");
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ME" + "'", str44, "ME");
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PATCH" + "'", str47, "PATCH");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PATCH" + "'", str48, "PATCH");
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "GET" + "'", str53, "GET");
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertNotNull(scope57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(scope61);
        org.junit.Assert.assertNotNull(scope62);
        org.junit.Assert.assertNotNull(scope63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(scope66);
        org.junit.Assert.assertNotNull(scopeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(accessToken78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(scopeSet80);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(wildcardJsonSerializer86);
    }

    @Test
    public void test06781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06781");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Cannot connect to server");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder4 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.descending("hi!");
        org.osiam.client.query.Query query13 = queryBuilder12.build();
        java.lang.String str14 = query13.toString();
        java.lang.String str15 = query13.getSortOrder();
        java.lang.String str16 = query13.getSortBy();
        java.lang.String str17 = query13.getFilter();
        java.lang.String str18 = query13.getSortOrder();
        java.lang.String str19 = query13.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder20 = new org.osiam.client.query.QueryBuilder(query13);
        long long21 = query13.getStartIndex();
        org.osiam.client.query.Query query22 = query13.nextPage();
        long long23 = query22.getStartIndex();
        org.osiam.client.query.Query query24 = query22.nextPage();
        org.osiam.client.query.Query query25 = query22.previousPage();
        org.osiam.client.AuthService.Builder builder27 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder29 = builder27.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder31 = builder29.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder33 = builder31.setClientSecret("");
        org.osiam.client.AuthService.Builder builder35 = builder31.setClientId("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService36 = builder31.build();
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        boolean boolean44 = accessToken43.isRefreshTokenExpired();
        boolean boolean45 = accessToken43.isClientOnly();
        java.lang.String str46 = accessToken43.getClientId();
        boolean boolean47 = accessToken43.isClientOnly();
        java.lang.String str48 = accessToken43.getToken();
        java.lang.String str49 = accessToken43.getToken();
        boolean boolean50 = accessToken43.isRefreshTokenExpired();
        java.lang.String str51 = authService36.extractErrorMessageForbidden(accessToken43);
        org.osiam.client.OsiamGroupService.Builder builder53 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService54 = builder53.build();
        org.osiam.client.OsiamGroupService osiamGroupService55 = builder53.build();
        org.osiam.client.oauth.AccessToken.Builder builder57 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date58 = null;
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setRefreshTokenExpiresAt(date58);
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder57.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken62 = builder61.build();
        boolean boolean63 = accessToken62.isRefreshTokenExpired();
        java.lang.String str64 = accessToken62.getUserId();
        java.lang.String str65 = accessToken62.getClientId();
        boolean boolean66 = accessToken62.isClientOnly();
        java.lang.String str67 = accessToken62.getClientId();
        java.lang.String str68 = accessToken62.getType();
        boolean boolean69 = accessToken62.isClientOnly();
        java.lang.String str70 = osiamGroupService55.extractErrorMessageForbidden(accessToken62);
        java.util.Date date71 = accessToken62.getExpiresAt();
        java.lang.String str72 = authService36.extractErrorMessageForbidden(accessToken62);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult73 = osiamUserService3.searchUsers(query25, accessToken62);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "descending" + "'", str15, "descending");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "descending" + "'", str18, "descending");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Authorization" + "'", str19, "Authorization");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(query22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 11L + "'", long23 == 11L);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertNotNull(query25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(authService36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Bearer " + "'", str48, "Bearer ");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Bearer " + "'", str49, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Insufficient scopes: []" + "'", str51, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService54);
        org.junit.Assert.assertNotNull(osiamGroupService55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(accessToken62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Insufficient scopes: []" + "'", str70, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Insufficient scopes: []" + "'", str72, "Insufficient scopes: []");
    }

    @Test
    public void test06782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06782");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector5.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder33 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder35.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.descending("hi!");
        org.osiam.client.query.Query query42 = queryBuilder41.build();
        java.lang.String str43 = query42.toString();
        java.lang.String str44 = query42.getSortOrder();
        java.lang.String str45 = query42.getSortBy();
        java.lang.String str46 = query42.getFilter();
        java.lang.String str47 = query42.getSortOrder();
        java.lang.String str48 = query42.getAttributes();
        java.lang.String str49 = query42.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder50 = osiamConnector5.createQueryBuilder(query42);
        org.osiam.client.query.Query query51 = queryBuilder50.build();
        java.lang.String str52 = query51.getAttributes();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "descending" + "'", str47, "descending");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Authorization" + "'", str48, "Authorization");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Authorization" + "'", str49, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(query51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Authorization" + "'", str52, "Authorization");
    }

    @Test
    public void test06783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06783");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("PUT");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder10 = builder6.setClientRedirectUri("org.osiam.client.exception.ConflictException: ");
        org.osiam.client.OsiamConnector.Builder builder12 = builder6.setResourceServerEndpoint("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder14 = builder6.setResourceServerEndpoint("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test06784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06784");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientId("org.osiam.client.exception.ConflictException: org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.OsiamConnector.Builder builder6 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector11 = builder10.build();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        boolean boolean19 = accessToken18.isRefreshTokenExpired();
        java.lang.String str20 = accessToken18.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder21 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder23.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.descending("hi!");
        org.osiam.client.query.Query query30 = queryBuilder29.build();
        java.lang.String str31 = query30.toString();
        java.lang.String str32 = query30.getSortOrder();
        java.lang.String str33 = query30.getSortBy();
        java.lang.String str34 = query30.getFilter();
        java.lang.String str35 = query30.toString();
        boolean boolean36 = accessToken18.equals((java.lang.Object) query30);
        org.osiam.client.query.QueryBuilder queryBuilder37 = osiamConnector11.createQueryBuilder(query30);
        org.osiam.client.query.QueryBuilder queryBuilder38 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder42 = queryBuilder40.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder44 = queryBuilder42.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query45 = queryBuilder42.build();
        org.osiam.client.query.Query query46 = query45.nextPage();
        org.osiam.client.query.Query query47 = query46.previousPage();
        java.lang.String str48 = query46.getSortOrder();
        java.lang.String str49 = query46.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder50 = osiamConnector11.createQueryBuilder(query46);
        org.osiam.client.query.Query query51 = query46.previousPage();
        org.osiam.client.query.QueryBuilder queryBuilder52 = osiamConnector5.createQueryBuilder(query51);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.ascending("");
        org.osiam.client.query.QueryBuilder queryBuilder56 = queryBuilder54.ascending("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(osiamConnector11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(query30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str31, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "descending" + "'", str32, "descending");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str35, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(query45);
        org.junit.Assert.assertNotNull(query46);
        org.junit.Assert.assertNotNull(query47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Authorization" + "'", str49, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(query51);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(queryBuilder56);
    }

    @Test
    public void test06785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06785");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = osiamGroupService3.extractErrorMessage("org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", statusType5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
    }

    @Test
    public void test06786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06786");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget7 = osiamGroupService6.targetEndpoint;
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.count((int) (short) 0);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder12.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder12.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.ascending("password");
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder18.count((int) (short) -1);
        org.osiam.client.query.Query query23 = queryBuilder18.build();
        java.lang.String str24 = query23.toString();
        org.osiam.client.query.Query query25 = query23.nextPage();
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.addScope(scope28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException32 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean33 = scope30.equals((java.lang.Object) invalidAttributeException32);
        java.lang.String str34 = scope30.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder27.addScope(scope30);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder39.addScope(scope42);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder39.setRefreshToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken46 = builder45.build();
        java.lang.String str47 = accessToken46.getClientId();
        java.util.Date date48 = accessToken46.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult49 = osiamGroupService6.searchGroups(query25, accessToken46);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(webTarget7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(query23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]" + "'", str24, "Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
        org.junit.Assert.assertNotNull(query25);
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "GET" + "'", str34, "GET");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(accessToken46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Bearer " + "'", str47, "Bearer ");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test06787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06787");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService4 = builder3.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.util.Date date12 = accessToken11.getExpiresAt();
        java.lang.String str13 = accessToken11.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken11);
        boolean boolean15 = accessToken11.isExpired();
        java.lang.String str16 = authService4.extractErrorMessageForbidden(accessToken11);
        org.osiam.client.AuthService.Builder builder18 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder26 = builder24.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder28 = builder26.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder30 = builder26.setClientSecret("PATCH");
        org.osiam.client.AuthService authService31 = builder30.build();
        org.osiam.client.AuthService authService32 = builder30.build();
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.AccessToken.Builder builder35 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.addScope(scope36);
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException40 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean41 = scope38.equals((java.lang.Object) invalidAttributeException40);
        java.lang.String str42 = scope38.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder35.addScope(scope38);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setUserId("");
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.addScope(scope48);
        org.osiam.client.oauth.Scope scope51 = new org.osiam.client.oauth.Scope("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope53 = new org.osiam.client.oauth.Scope("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope[] scopeArray54 = new org.osiam.client.oauth.Scope[] { scope33, scope48, scope51, scope53 };
        java.net.URI uRI55 = authService32.getAuthorizationUri(scopeArray54);
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI56 = authService4.getAuthorizationUri(scopeArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Can't create the login uri: redirect URI was not set.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(authService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Insufficient scopes: []" + "'", str16, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(authService31);
        org.junit.Assert.assertNotNull(authService32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GET" + "'", str42, "GET");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(scopeArray54);
        org.junit.Assert.assertNotNull(uRI55);
    }

    @Test
    public void test06788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06788");
        org.osiam.client.oauth.Scope scope1 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.NoResultException: org.osiam.client.exception.ConnectionInitializationException: descending");
        org.osiam.client.oauth.AccessToken.Builder builder3 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder3.setRefreshTokenExpiresAt(date4);
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder3.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken8 = builder7.build();
        java.util.Date date9 = accessToken8.getExpiresAt();
        java.lang.String str10 = accessToken8.getRefreshToken();
        java.lang.String str11 = accessToken8.getType();
        java.lang.String str12 = accessToken8.getClientId();
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException14 = new org.osiam.client.exception.InvalidAttributeException("ADMIN");
        boolean boolean15 = accessToken8.equals((java.lang.Object) invalidAttributeException14);
        org.osiam.client.OsiamConnector.Builder builder16 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector23 = builder22.build();
        org.osiam.client.query.QueryBuilder queryBuilder24 = osiamConnector23.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.ascending("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        boolean boolean27 = accessToken8.equals((java.lang.Object) queryBuilder26);
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder26.descending("org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        boolean boolean30 = scope1.equals((java.lang.Object) queryBuilder29);
        org.osiam.client.query.QueryBuilder queryBuilder32 = queryBuilder29.count((int) (byte) 0);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(accessToken8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(osiamConnector23);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder32);
    }

    @Test
    public void test06789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06789");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.descending("hi!");
        org.osiam.client.query.Query query31 = queryBuilder30.build();
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector7.createQueryBuilder(query31);
        org.osiam.client.query.QueryBuilder queryBuilder33 = osiamConnector7.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder36 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date37 = null;
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setRefreshTokenExpiresAt(date37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder36.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder40.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken45 = builder44.build();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector7.revokeAllAccessTokens("org.osiam.client.exception.ForbiddenException: hi!", accessToken45);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(query31);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(accessToken45);
    }

    @Test
    public void test06790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06790");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder5 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        java.util.Date date14 = accessToken13.getExpiresAt();
        java.lang.String str15 = accessToken13.getRefreshToken();
        java.lang.String str16 = accessToken13.getType();
        java.lang.String str17 = osiamGroupService6.extractErrorMessageForbidden(accessToken13);
        java.lang.String str18 = accessToken13.getUserId();
        java.lang.String str19 = accessToken13.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList20 = osiamUserService3.getAllUsers(accessToken13);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Insufficient scopes: []" + "'", str17, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test06791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06791");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setClientId("ADMIN");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setClientId("refresh_token");
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshToken("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setUserId("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        java.lang.String str13 = accessToken12.getType();
        boolean boolean14 = accessToken12.isRefreshTokenExpired();
        java.lang.String str15 = accessToken12.getType();
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test06792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06792");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = osiamConnector5.createQueryBuilder();
        org.osiam.resources.scim.Group group7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        java.util.Date date15 = accessToken14.getExpiresAt();
        java.lang.String str16 = accessToken14.getUserName();
        java.lang.String str17 = accessToken14.getType();
        java.lang.String str18 = accessToken14.toString();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken14);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group20 = osiamConnector5.createGroup(group7, accessToken14);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str18, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test06793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06793");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.usesObjectId();
        boolean boolean2 = scopeSerializer0.usesObjectId();
        org.osiam.client.helper.ScopeSerializer scopeSerializer3 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean4 = scopeSerializer3.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer6 = scopeSerializer3.unwrappingSerializer(nameTransformer5);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass7 = scopeSetJsonSerializer6.handledType();
        boolean boolean8 = scopeSetJsonSerializer6.usesObjectId();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider9 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer10 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean11 = scopeSerializer10.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer12 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer13 = scopeSerializer10.unwrappingSerializer(nameTransformer12);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str27 = scope26.toString();
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str30 = scope29.getValue();
        java.lang.String str31 = scope29.getValue();
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException34 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean35 = scope32.equals((java.lang.Object) invalidAttributeException34);
        java.lang.String str36 = scope32.getValue();
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException42 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean43 = scope40.equals((java.lang.Object) invalidAttributeException42);
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.GET;
        boolean boolean48 = scope46.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray50 = new org.osiam.client.oauth.Scope[] { scope19, scope20, scope25, scope26, scope28, scope29, scope32, scope37, scope38, scope39, scope40, scope44, scope45, scope46, scope49 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet51 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet51, scopeArray50);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder16.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet51);
        boolean boolean54 = scopeSetJsonSerializer13.isEmpty(serializerProvider14, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet51);
        boolean boolean55 = scopeSetJsonSerializer6.isEmpty(serializerProvider9, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet51);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer56 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer57 = scopeSetJsonSerializer6.unwrappingSerializer(nameTransformer56);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider58 = null;
        org.osiam.client.oauth.AccessToken.Builder builder60 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope61 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder60.addScope(scope61);
        org.osiam.client.oauth.Scope scope63 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException65 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean66 = scope63.equals((java.lang.Object) invalidAttributeException65);
        java.lang.String str67 = scope63.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder60.addScope(scope63);
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder68.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder70.setUserName("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.oauth.Scope scope73 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder70.addScope(scope73);
        org.osiam.client.helper.ScopeSerializer scopeSerializer75 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean76 = scopeSerializer75.isUnwrappingSerializer();
        org.osiam.client.helper.ScopeSerializer scopeSerializer77 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder79 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date80 = null;
        org.osiam.client.oauth.AccessToken.Builder builder81 = builder79.setRefreshTokenExpiresAt(date80);
        org.osiam.client.oauth.AccessToken.Builder builder83 = builder79.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken84 = builder83.build();
        boolean boolean85 = accessToken84.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet86 = accessToken84.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator87 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider88 = null;
        scopeSerializer77.serialize(scopeSet86, jsonGenerator87, serializerProvider88);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator90 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider91 = null;
        scopeSerializer75.serialize(scopeSet86, jsonGenerator90, serializerProvider91);
        org.osiam.client.oauth.AccessToken.Builder builder93 = builder70.addScopes(scopeSet86);
        boolean boolean94 = scopeSetJsonSerializer57.isEmpty(serializerProvider58, scopeSet86);
        boolean boolean95 = scopeSerializer0.isEmpty(scopeSet86);
        boolean boolean96 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer97 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer98 = scopeSerializer0.unwrappingSerializer(nameTransformer97);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass99 = scopeSerializer0.handledType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer6);
        org.junit.Assert.assertNull(scopeSetClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ME" + "'", str27, "ME");
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PATCH" + "'", str30, "PATCH");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PATCH" + "'", str31, "PATCH");
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GET" + "'", str36, "GET");
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertNotNull(scopeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer57);
        org.junit.Assert.assertNotNull(scope61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(scope63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "GET" + "'", str67, "GET");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(scope73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(accessToken84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(scopeSet86);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer98);
        org.junit.Assert.assertNull(scopeSetClass99);
    }

    @Test
    public void test06794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06794");
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException1 = new org.osiam.client.exception.InvalidAttributeException("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test06795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06795");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.resources.scim.Group group3 = null;
        org.osiam.client.AuthService.Builder builder5 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientId("ME");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.OsiamGroupService.Builder builder12 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService13 = builder12.build();
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        boolean boolean21 = accessToken20.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet22 = accessToken20.getScopes();
        java.lang.String str23 = osiamGroupService13.extractErrorMessageForbidden(accessToken20);
        boolean boolean24 = accessToken20.isClientOnly();
        java.lang.String str25 = authService10.extractErrorMessageForbidden(accessToken20);
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken34 = builder31.build();
        java.lang.String str35 = accessToken34.toString();
        java.lang.String str36 = authService10.extractErrorMessageForbidden(accessToken34);
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        java.util.Date date44 = accessToken43.getExpiresAt();
        java.lang.String str45 = accessToken43.getRefreshToken();
        java.lang.String str46 = accessToken43.getType();
        java.lang.String str47 = accessToken43.getClientId();
        java.lang.String str48 = accessToken43.getUserName();
        java.lang.String str49 = authService10.extractErrorMessageForbidden(accessToken43);
        org.osiam.client.oauth.AccessToken.Builder builder51 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date52 = null;
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setRefreshTokenExpiresAt(date52);
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder51.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken56 = builder55.build();
        boolean boolean57 = accessToken56.isRefreshTokenExpired();
        java.lang.String str58 = accessToken56.getUserId();
        java.lang.String str59 = authService10.extractErrorMessageForbidden(accessToken56);
        java.util.Date date60 = accessToken56.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group61 = osiamGroupService2.createResource(group3, accessToken56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(osiamGroupService13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(scopeSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Insufficient scopes: []" + "'", str23, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(accessToken34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str35, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Insufficient scopes: []" + "'", str49, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(accessToken56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Insufficient scopes: []" + "'", str59, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test06796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06796");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientSecret("GET");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setEndpoint("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientSecret("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setResourceServerEndpoint("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=GET, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test06797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06797");
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException1 = new org.osiam.client.exception.InvalidAttributeException("Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
    }

    @Test
    public void test06798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06798");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken29 = builder28.build();
        java.lang.String str30 = accessToken29.toString();
        java.lang.String str31 = accessToken29.getType();
        boolean boolean32 = accessToken29.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet33 = accessToken29.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user34 = osiamConnector7.getUser("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.ForbiddenException: hi!", accessToken29);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str30, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(scopeSet33);
    }

    @Test
    public void test06799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06799");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        java.lang.String str8 = accessToken6.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = accessToken6.getScopes();
        org.osiam.client.helper.ScopeSerializer scopeSerializer10 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean11 = scopeSerializer10.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException19 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean20 = scope17.equals((java.lang.Object) invalidAttributeException19);
        java.lang.String str21 = scope17.getValue();
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str24 = scope23.toString();
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str27 = scope26.getValue();
        java.lang.String str28 = scope26.getValue();
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException31 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean32 = scope29.equals((java.lang.Object) invalidAttributeException31);
        java.lang.String str33 = scope29.getValue();
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException39 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean40 = scope37.equals((java.lang.Object) invalidAttributeException39);
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.GET;
        boolean boolean45 = scope43.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray47 = new org.osiam.client.oauth.Scope[] { scope16, scope17, scope22, scope23, scope25, scope26, scope29, scope34, scope35, scope36, scope37, scope41, scope42, scope43, scope46 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet48 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet48, scopeArray47);
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder13.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet48);
        boolean boolean51 = scopeSerializer10.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet48);
        boolean boolean52 = accessToken6.equals((java.lang.Object) scopeSet48);
        boolean boolean53 = accessToken6.isClientOnly();
        org.osiam.client.OsiamConnector.Builder builder54 = new org.osiam.client.OsiamConnector.Builder();
        boolean boolean55 = accessToken6.equals((java.lang.Object) builder54);
        org.osiam.client.OsiamConnector.Builder builder57 = builder54.setClientSecret("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        org.osiam.client.OsiamConnector osiamConnector58 = builder54.build();
        org.osiam.client.oauth.AccessToken.Builder builder60 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date61 = null;
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder60.setRefreshTokenExpiresAt(date61);
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder60.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken65 = builder64.build();
        boolean boolean66 = accessToken65.isRefreshTokenExpired();
        java.lang.String str67 = accessToken65.getUserId();
        java.lang.String str68 = accessToken65.getToken();
        boolean boolean69 = accessToken65.isExpired();
        java.lang.String str70 = accessToken65.getClientId();
        java.lang.String str71 = accessToken65.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet72 = accessToken65.getScopes();
        java.lang.String str73 = accessToken65.getType();
        java.lang.String str74 = accessToken65.getType();
        java.lang.String str75 = accessToken65.getType();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList76 = osiamConnector58.getAllGroups(accessToken65);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(scopeSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GET" + "'", str21, "GET");
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ME" + "'", str24, "ME");
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PATCH" + "'", str27, "PATCH");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PATCH" + "'", str28, "PATCH");
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GET" + "'", str33, "GET");
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertNotNull(scopeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(osiamConnector58);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(accessToken65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Bearer " + "'", str68, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(scopeSet72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
    }

    @Test
    public void test06800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06800");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder12 = builder4.setResourceServerEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setResourceServerEndpoint("org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientRedirectUri("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.OsiamRequestException: hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test06801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06801");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.getAttributes();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.toString();
        java.lang.String str13 = query9.getSortOrder();
        java.lang.String str14 = query9.getSortBy();
        java.lang.String str15 = query9.getFilter();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Authorization" + "'", str10, "Authorization");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str12, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "descending" + "'", str13, "descending");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test06802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06802");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.util.Date date12 = accessToken10.getExpiresAt();
        boolean boolean13 = accessToken10.isClientOnly();
        boolean boolean14 = accessToken10.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user15 = osiamUserService2.createUser(user3, accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test06803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06803");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector9.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        org.osiam.client.query.Query query21 = queryBuilder19.build();
        long long22 = query21.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder23 = osiamConnector9.createQueryBuilder(query21);
        org.osiam.client.AuthService.Builder builder25 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientId("ME");
        org.osiam.client.AuthService.Builder builder29 = builder27.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder31 = builder29.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder33 = builder31.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService34 = builder33.build();
        org.osiam.client.oauth.AccessToken.Builder builder36 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date37 = null;
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setRefreshTokenExpiresAt(date37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder36.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken41 = builder40.build();
        boolean boolean42 = accessToken41.isRefreshTokenExpired();
        java.lang.String str43 = authService34.extractErrorMessageForbidden(accessToken41);
        org.osiam.client.AuthService.Builder builder45 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder47 = builder45.setClientId("ME");
        org.osiam.client.AuthService.Builder builder49 = builder47.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService50 = builder49.build();
        org.osiam.client.oauth.AccessToken.Builder builder52 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setRefreshTokenExpiresAt(date53);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder52.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken57 = builder56.build();
        boolean boolean58 = accessToken57.isRefreshTokenExpired();
        java.lang.String str59 = accessToken57.getUserId();
        java.lang.String str60 = accessToken57.getClientId();
        boolean boolean61 = accessToken57.isClientOnly();
        java.lang.String str62 = authService50.extractErrorMessageForbidden(accessToken57);
        boolean boolean63 = accessToken57.isExpired();
        java.lang.String str64 = authService34.extractErrorMessageForbidden(accessToken57);
        java.lang.String str65 = accessToken57.getToken();
        java.util.Date date66 = accessToken57.getExpiresAt();
        java.lang.String str67 = accessToken57.getType();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector9.revokeAccessToken(accessToken57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(authService34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(accessToken41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Insufficient scopes: []" + "'", str43, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(authService50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(accessToken57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Insufficient scopes: []" + "'", str62, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Insufficient scopes: []" + "'", str64, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Bearer " + "'", str65, "Bearer ");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
    }

    @Test
    public void test06804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06804");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder13 = builder9.setClientSecret("PATCH");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService16 = builder13.build();
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.GET;
        java.lang.String str18 = scope17.getValue();
        java.lang.String str19 = scope17.getValue();
        java.lang.String str20 = scope17.toString();
        java.lang.String str21 = scope17.toString();
        org.osiam.client.oauth.Scope[] scopeArray22 = new org.osiam.client.oauth.Scope[] { scope17 };
        java.net.URI uRI23 = authService16.getAuthorizationUri(scopeArray22);
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken27 = builder26.build();
        java.lang.String str28 = accessToken27.toString();
        java.util.Date date29 = accessToken27.getExpiresAt();
        java.lang.String str30 = accessToken27.getUserId();
        java.lang.String str31 = accessToken27.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            authService16.revokeAllAccessTokens("org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken27);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(authService16);
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GET" + "'", str18, "GET");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GET" + "'", str19, "GET");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GET" + "'", str20, "GET");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GET" + "'", str21, "GET");
        org.junit.Assert.assertNotNull(scopeArray22);
        org.junit.Assert.assertNotNull(uRI23);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str28, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test06805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06805");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamRequestException: hi!");
    }

    @Test
    public void test06806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06806");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.descending("hi!");
        org.osiam.client.query.Query query31 = queryBuilder30.build();
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector7.createQueryBuilder(query31);
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.attributes("ME");
        org.osiam.client.query.Query query35 = queryBuilder32.build();
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder32.filter("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder32.ascending("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.descending("");
        org.osiam.client.query.QueryBuilder queryBuilder43 = queryBuilder41.attributes("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConflictException: PATCH");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(query31);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(query35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(queryBuilder43);
    }

    @Test
    public void test06807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06807");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]");
    }

    @Test
    public void test06808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06808");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = osiamGroupService4.extractErrorMessageUnauthorized("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamClientException: descending", statusType7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
    }

    @Test
    public void test06809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06809");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.OsiamClientException: descending");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService2.targetEndpoint;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group7 = osiamGroupService2.mapToResource("org.osiam.client.exception.OsiamRequestException: descending");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: org.osiam.client.exception.OsiamRequestException: descending");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
    }

    @Test
    public void test06810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06810");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService authService10 = builder7.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        boolean boolean18 = accessToken17.isRefreshTokenExpired();
        java.lang.String str19 = accessToken17.getUserName();
        org.osiam.client.helper.ScopeSerializer scopeSerializer20 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        java.lang.String str30 = scope26.getValue();
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str33 = scope32.toString();
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str36 = scope35.getValue();
        java.lang.String str37 = scope35.getValue();
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException40 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean41 = scope38.equals((java.lang.Object) invalidAttributeException40);
        java.lang.String str42 = scope38.getValue();
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException48 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean49 = scope46.equals((java.lang.Object) invalidAttributeException48);
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope51 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope52 = org.osiam.client.oauth.Scope.GET;
        boolean boolean54 = scope52.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray56 = new org.osiam.client.oauth.Scope[] { scope25, scope26, scope31, scope32, scope34, scope35, scope38, scope43, scope44, scope45, scope46, scope50, scope51, scope52, scope55 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet57 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet57, scopeArray56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder22.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet57);
        boolean boolean60 = scopeSerializer20.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet57);
        org.osiam.client.oauth.AccessToken.Builder builder62 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date63 = null;
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder62.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken67 = builder66.build();
        boolean boolean68 = accessToken67.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet69 = accessToken67.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator70 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider71 = null;
        scopeSerializer20.serialize(scopeSet69, jsonGenerator70, serializerProvider71);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider73 = null;
        org.osiam.client.oauth.AccessToken.Builder builder75 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date76 = null;
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder75.setRefreshTokenExpiresAt(date76);
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder75.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken80 = builder79.build();
        boolean boolean81 = accessToken80.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet82 = accessToken80.getScopes();
        boolean boolean83 = scopeSerializer20.isEmpty(serializerProvider73, scopeSet82);
        boolean boolean84 = accessToken17.equals((java.lang.Object) scopeSerializer20);
        java.lang.String str85 = authService10.extractErrorMessageForbidden(accessToken17);
        org.osiam.client.oauth.Scope[] scopeArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI87 = authService10.getAuthorizationUri(scopeArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GET" + "'", str30, "GET");
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ME" + "'", str33, "ME");
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PATCH" + "'", str36, "PATCH");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PATCH" + "'", str37, "PATCH");
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GET" + "'", str42, "GET");
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertNotNull(scope51);
        org.junit.Assert.assertNotNull(scope52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertNotNull(scopeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(accessToken67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(scopeSet69);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(accessToken80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(scopeSet82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Insufficient scopes: []" + "'", str85, "Insufficient scopes: []");
    }

    @Test
    public void test06811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06811");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget15 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder17.setUserName("ascending");
        org.osiam.client.oauth.AccessToken accessToken24 = builder17.build();
        java.lang.String str25 = osiamGroupService2.extractErrorMessageForbidden(accessToken24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        java.util.Date date33 = accessToken32.getExpiresAt();
        java.lang.String str34 = accessToken32.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken32);
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken42 = builder41.build();
        boolean boolean43 = accessToken42.isRefreshTokenExpired();
        boolean boolean44 = accessToken42.isClientOnly();
        java.lang.String str45 = accessToken42.getClientId();
        boolean boolean46 = accessToken42.isClientOnly();
        boolean boolean47 = accessToken32.equals((java.lang.Object) accessToken42);
        java.lang.String str48 = accessToken42.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList49 = osiamGroupService2.getAllResources(accessToken42);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(webTarget15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test06812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06812");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientId("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector osiamConnector13 = builder12.build();
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        java.util.Date date22 = accessToken21.getExpiresAt();
        java.lang.String str23 = accessToken21.getRefreshToken();
        java.lang.String str24 = accessToken21.getType();
        java.lang.String str25 = accessToken21.getType();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector13.deleteGroup("org.osiam.client.exception.OsiamClientException: descending", accessToken21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The string \"Insufficient scopes\" for the URI component SCHEME contains an invalid character, ' ', at index 12.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test06813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06813");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientRedirectUri("2024-03-22T13:51:20.388");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test06814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06814");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("client_credentials");
        org.osiam.client.OsiamConnector osiamConnector13 = builder10.build();
        org.osiam.resources.scim.Group group14 = null;
        org.osiam.client.AuthService.Builder builder16 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder18 = builder16.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService19 = builder18.build();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken28 = builder25.build();
        java.util.Date date29 = accessToken28.getExpiresAt();
        java.lang.String str30 = accessToken28.toString();
        java.lang.String str31 = authService19.extractErrorMessageForbidden(accessToken28);
        java.lang.String str32 = accessToken28.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group33 = osiamConnector13.createGroup(group14, accessToken28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The string \"AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16\" for the URI component SCHEME contains an invalid character, ' ', at index 11.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(authService19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str30, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Insufficient scopes: []" + "'", str31, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test06815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06815");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setResourceServerEndpoint("GET POST PUT PATCH DELETE");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.descending("hi!");
        org.osiam.client.query.Query query27 = queryBuilder26.build();
        java.lang.String str28 = query27.toString();
        java.lang.String str29 = query27.getSortOrder();
        java.lang.String str30 = query27.getFilter();
        java.lang.String str31 = query27.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector17.createQueryBuilder(query27);
        org.osiam.client.oauth.AccessToken.Builder builder35 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.addScope(scope36);
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException40 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean41 = scope38.equals((java.lang.Object) invalidAttributeException40);
        java.lang.String str42 = scope38.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder35.addScope(scope38);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder35.setRefreshToken("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder47 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date48 = null;
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.setRefreshTokenExpiresAt(date48);
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder47.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken52 = builder51.build();
        java.util.Date date53 = accessToken52.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder45.setRefreshTokenExpiresAt(date53);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder45.setRefreshToken("");
        org.osiam.client.oauth.AccessToken.Builder builder58 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope59 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.addScope(scope59);
        org.osiam.client.oauth.Scope scope61 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException63 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean64 = scope61.equals((java.lang.Object) invalidAttributeException63);
        java.lang.String str65 = scope61.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder58.addScope(scope61);
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder66.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder68.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder70.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder74 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope75 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder74.addScope(scope75);
        org.osiam.client.oauth.Scope scope77 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException79 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean80 = scope77.equals((java.lang.Object) invalidAttributeException79);
        java.lang.String str81 = scope77.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder82 = builder74.addScope(scope77);
        org.osiam.client.oauth.AccessToken.Builder builder84 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date85 = null;
        org.osiam.client.oauth.AccessToken.Builder builder86 = builder84.setRefreshTokenExpiresAt(date85);
        org.osiam.client.oauth.AccessToken.Builder builder88 = builder84.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken89 = builder88.build();
        java.lang.String str90 = accessToken89.toString();
        boolean boolean91 = scope77.equals((java.lang.Object) str90);
        org.osiam.client.oauth.AccessToken.Builder builder92 = builder70.addScope(scope77);
        org.osiam.client.oauth.AccessToken.Builder builder93 = builder56.addScope(scope77);
        org.osiam.client.oauth.AccessToken accessToken94 = builder93.build();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector17.deleteUser("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[PATCH, GET, GET POST PUT PATCH DELETE], refreshTokenId=AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]", accessToken94);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(query27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str28, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "descending" + "'", str29, "descending");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "descending" + "'", str31, "descending");
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GET" + "'", str42, "GET");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(accessToken52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(scope59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(scope61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "GET" + "'", str65, "GET");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(scope75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(scope77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "GET" + "'", str81, "GET");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(accessToken89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str90, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(accessToken94);
    }

    @Test
    public void test06816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06816");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group4 = osiamGroupService2.mapToResource("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.OsiamClientException: ME");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.OsiamClientException: ME");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
    }

    @Test
    public void test06817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06817");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper41 = null;
        com.fasterxml.jackson.databind.JavaType javaType42 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper41, javaType42);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass44 = scopeSerializer0.handledType();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(scopeSetClass44);
    }

    @Test
    public void test06818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06818");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setAuthServerEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setClientSecret("org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientRedirectUri("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=GET, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=Cannot connect to server, userName=Authorization]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test06819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06819");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        java.lang.Class<?> wildcardClass6 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer7 = scopeDeserializer0.getDelegatee();
        java.lang.Class<?> wildcardClass8 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer9 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.core.JsonParser jsonParser10 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet12 = scopeDeserializer0.deserialize(jsonParser10, deserializationContext11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardJsonDeserializer7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(wildcardJsonDeserializer9);
    }

    @Test
    public void test06820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06820");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        java.lang.String str13 = query9.getFilter();
        java.lang.String str14 = query9.toString();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(409);
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder17);
    }

    @Test
    public void test06821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06821");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.OsiamConnector.Builder builder10 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder22 = builder18.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector23 = builder18.build();
        org.osiam.client.OsiamConnector.Builder builder24 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder26 = builder24.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder28 = builder26.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder30 = builder28.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector31 = builder30.build();
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.toString();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector31.createQueryBuilder(query41);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        org.osiam.client.query.QueryBuilder queryBuilder56 = osiamConnector31.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder57 = osiamConnector23.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder58 = osiamConnector9.createQueryBuilder(query55);
        org.osiam.client.oauth.AccessToken.Builder builder60 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date61 = null;
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder60.setRefreshTokenExpiresAt(date61);
        org.osiam.client.oauth.AccessToken.Builder builder64 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date65 = null;
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder64.setRefreshTokenExpiresAt(date65);
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder64.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken69 = builder68.build();
        java.util.Date date70 = accessToken69.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder60.setRefreshTokenExpiresAt(date70);
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder60.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder60.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder77 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date78 = null;
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder77.setRefreshTokenExpiresAt(date78);
        org.osiam.client.oauth.AccessToken.Builder builder81 = builder77.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken82 = builder81.build();
        boolean boolean83 = accessToken82.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet84 = accessToken82.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder85 = builder75.addScopes(scopeSet84);
        org.osiam.client.oauth.AccessToken accessToken86 = builder85.build();
        java.lang.String str87 = accessToken86.getClientId();
        java.lang.String str88 = accessToken86.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken86);
        java.util.Date date90 = accessToken86.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser91 = osiamConnector9.getCurrentUserBasic(accessToken86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(osiamConnector23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(osiamConnector31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str42, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertNotNull(queryBuilder56);
        org.junit.Assert.assertNotNull(queryBuilder57);
        org.junit.Assert.assertNotNull(queryBuilder58);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(accessToken69);
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(accessToken82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(scopeSet84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(accessToken86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test06822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06822");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.UpdateUser updateUser4 = null;
        org.osiam.client.AuthService.Builder builder6 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder16 = builder14.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder18 = builder14.setClientSecret("PATCH");
        org.osiam.client.AuthService authService19 = builder18.build();
        org.osiam.client.AuthService authService20 = builder18.build();
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.addScope(scope24);
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        java.lang.String str30 = scope26.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder23.addScope(scope26);
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setUserId("");
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.addScope(scope36);
        org.osiam.client.oauth.Scope scope39 = new org.osiam.client.oauth.Scope("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope41 = new org.osiam.client.oauth.Scope("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope[] scopeArray42 = new org.osiam.client.oauth.Scope[] { scope21, scope36, scope39, scope41 };
        java.net.URI uRI43 = authService20.getAuthorizationUri(scopeArray42);
        org.osiam.client.oauth.AccessToken.Builder builder45 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setRefreshTokenExpiresAt(date46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder45.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken50 = builder49.build();
        java.util.Date date51 = accessToken50.getExpiresAt();
        java.lang.String str52 = accessToken50.getUserName();
        java.lang.String str53 = accessToken50.toString();
        java.lang.String str54 = accessToken50.toString();
        java.lang.String str55 = authService20.extractErrorMessageForbidden(accessToken50);
        java.util.Date date56 = accessToken50.getRefreshTokenExpiresAt();
        boolean boolean57 = accessToken50.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user58 = osiamUserService2.updateUser("org.osiam.client.exception.UnauthorizedException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", updateUser4, accessToken50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(authService19);
        org.junit.Assert.assertNotNull(authService20);
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GET" + "'", str30, "GET");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(scopeArray42);
        org.junit.Assert.assertNotNull(uRI43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(accessToken50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str53, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str54, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Insufficient scopes: []" + "'", str55, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test06823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06823");
        java.lang.Throwable throwable1 = null;
        org.osiam.client.exception.OsiamClientException osiamClientException2 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.ForbiddenException: DELETE", throwable1);
    }

    @Test
    public void test06824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06824");
        org.osiam.client.oauth.Scope scope0 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.OsiamConnector.Builder builder1 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder3 = builder1.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder5 = builder3.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder7 = builder5.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder9 = builder7.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector10 = builder7.build();
        org.osiam.client.query.QueryBuilder queryBuilder11 = osiamConnector10.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder12 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query19 = queryBuilder16.build();
        org.osiam.client.query.Query query20 = query19.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector10.createQueryBuilder(query19);
        boolean boolean22 = scope0.equals((java.lang.Object) osiamConnector10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = osiamConnector10.createQueryBuilder();
        org.osiam.client.AuthService.Builder builder25 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388");
        org.osiam.client.AuthService authService26 = builder25.build();
        org.osiam.client.AuthService.Builder builder28 = builder25.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        org.osiam.client.AuthService authService29 = builder28.build();
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken38 = builder35.build();
        boolean boolean39 = accessToken38.isRefreshTokenExpired();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken38);
        java.lang.String str41 = authService29.extractErrorMessageForbidden(accessToken38);
        org.osiam.client.oauth.AccessToken.Builder builder43 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date44 = null;
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setRefreshTokenExpiresAt(date44);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder43.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken48 = builder47.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken48);
        java.lang.String str50 = accessToken48.getRefreshToken();
        java.lang.String str51 = accessToken48.toString();
        java.lang.String str52 = accessToken48.getToken();
        java.lang.String str53 = authService29.extractErrorMessageForbidden(accessToken48);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user54 = osiamConnector10.getCurrentUser(accessToken48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scope0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(osiamConnector10);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(authService26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(authService29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: []" + "'", str41, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(accessToken48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str51, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Bearer " + "'", str52, "Bearer ");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Insufficient scopes: []" + "'", str53, "Insufficient scopes: []");
    }

    @Test
    public void test06825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06825");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientSecret("");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.getSortOrder();
        org.osiam.client.query.Query query20 = query17.nextPage();
        long long21 = query20.getStartIndex();
        int int22 = query20.getCount();
        org.osiam.client.AuthService.Builder builder24 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder26 = builder24.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder28 = builder26.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder30 = builder28.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder32 = builder30.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder34 = builder32.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder36 = builder32.setClientSecret("PATCH");
        org.osiam.client.AuthService authService37 = builder36.build();
        org.osiam.client.AuthService authService38 = builder36.build();
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.AccessToken.Builder builder41 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.addScope(scope42);
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException46 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean47 = scope44.equals((java.lang.Object) invalidAttributeException46);
        java.lang.String str48 = scope44.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder41.addScope(scope44);
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setUserId("");
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.addScope(scope54);
        org.osiam.client.oauth.Scope scope57 = new org.osiam.client.oauth.Scope("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope59 = new org.osiam.client.oauth.Scope("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope[] scopeArray60 = new org.osiam.client.oauth.Scope[] { scope39, scope54, scope57, scope59 };
        java.net.URI uRI61 = authService38.getAuthorizationUri(scopeArray60);
        org.osiam.client.oauth.AccessToken.Builder builder63 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date64 = null;
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder63.setRefreshTokenExpiresAt(date64);
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder63.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken68 = builder67.build();
        java.util.Date date69 = accessToken68.getExpiresAt();
        java.lang.String str70 = accessToken68.getUserName();
        java.lang.String str71 = accessToken68.toString();
        java.lang.String str72 = accessToken68.toString();
        java.lang.String str73 = authService38.extractErrorMessageForbidden(accessToken68);
        java.util.Date date74 = accessToken68.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult75 = osiamConnector7.searchGroups(query20, accessToken68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "descending" + "'", str19, "descending");
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 11L + "'", long21 == 11L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(authService37);
        org.junit.Assert.assertNotNull(authService38);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "GET" + "'", str48, "GET");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(scopeArray60);
        org.junit.Assert.assertNotNull(uRI61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(accessToken68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str71, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str72, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Insufficient scopes: []" + "'", str73, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test06826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06826");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        java.lang.Class<?> wildcardClass6 = scopeDeserializer0.handledType();
        java.util.Collection<java.lang.Object> objCollection7 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeDeserializer0.getEmptyValue();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(objCollection7);
        org.junit.Assert.assertNull(scopeSet8);
    }

    @Test
    public void test06827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06827");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.getEmptyValue();
        java.util.Collection<java.lang.Object> objCollection7 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeDeserializer0.getEmptyValue();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer9 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer10 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer11 = scopeDeserializer0.unwrappingDeserializer(nameTransformer10);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        java.util.Date date21 = accessToken20.getExpiresAt();
        java.lang.String str22 = accessToken20.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet23 = accessToken20.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet24 = scopeSetJsonDeserializer11.deserialize(jsonParser12, deserializationContext13, scopeSet23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Can not update object of type java.util.HashSet (by deserializer of type org.osiam.client.helper.ScopeDeserializer)");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNull(scopeSet6);
        org.junit.Assert.assertNull(objCollection7);
        org.junit.Assert.assertNull(scopeSet8);
        org.junit.Assert.assertNull(wildcardJsonDeserializer9);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(scopeSet23);
    }

    @Test
    public void test06828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06828");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector5.createQueryBuilder();
        org.osiam.client.AuthService.Builder builder34 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder36 = builder34.setClientId("ME");
        org.osiam.client.AuthService.Builder builder38 = builder36.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService39 = builder38.build();
        org.osiam.client.oauth.AccessToken.Builder builder41 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date42 = null;
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setRefreshTokenExpiresAt(date42);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder41.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken46 = builder45.build();
        boolean boolean47 = accessToken46.isRefreshTokenExpired();
        boolean boolean48 = accessToken46.isClientOnly();
        java.lang.String str49 = accessToken46.getClientId();
        java.lang.String str50 = authService39.extractErrorMessageForbidden(accessToken46);
        org.osiam.client.oauth.AccessToken.Builder builder52 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setRefreshTokenExpiresAt(date53);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder52.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken57 = builder56.build();
        boolean boolean58 = accessToken57.isRefreshTokenExpired();
        java.lang.String str59 = accessToken57.getUserId();
        java.lang.String str60 = accessToken57.getClientId();
        java.lang.String str61 = accessToken57.getUserId();
        java.lang.String str62 = authService39.extractErrorMessageForbidden(accessToken57);
        java.util.Date date63 = accessToken57.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList64 = osiamConnector5.getAllUsers(accessToken57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(authService39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(accessToken46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Insufficient scopes: []" + "'", str50, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(accessToken57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Insufficient scopes: []" + "'", str62, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test06829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06829");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader6 = scopeDeserializer0.getObjectIdReader();
        boolean boolean7 = scopeDeserializer0.isCachable();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer8 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass9 = scopeDeserializer8.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer10 = scopeDeserializer8.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection11 = scopeDeserializer8.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer12 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer13 = scopeDeserializer8.unwrappingDeserializer(nameTransformer12);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer14 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer15 = scopeSetJsonDeserializer13.unwrappingDeserializer(nameTransformer14);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet16 = scopeSetJsonDeserializer13.getEmptyValue();
        boolean boolean17 = scopeSetJsonDeserializer13.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = scopeSetJsonDeserializer13.getEmptyValue();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer19 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer20 = scopeSetJsonDeserializer13.unwrappingDeserializer(nameTransformer19);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet21 = scopeSetJsonDeserializer20.getEmptyValue();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer22 = scopeDeserializer0.replaceDelegatee(scopeSetJsonDeserializer20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertNull(objectIdReader6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(wildcardJsonDeserializer10);
        org.junit.Assert.assertNull(objCollection11);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer13);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer15);
        org.junit.Assert.assertNull(scopeSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(scopeSet18);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer20);
        org.junit.Assert.assertNull(scopeSet21);
    }

    @Test
    public void test06830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06830");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.toString();
        java.lang.String str23 = query20.toString();
        int int24 = query20.getCount();
        long long25 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder26 = osiamConnector7.createQueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder26.ascending("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
    }

    @Test
    public void test06831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06831");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        org.osiam.client.OsiamGroupService.Builder builder14 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService15 = builder14.build();
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        boolean boolean23 = accessToken22.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet24 = accessToken22.getScopes();
        java.lang.String str25 = osiamGroupService15.extractErrorMessageForbidden(accessToken22);
        boolean boolean26 = accessToken22.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken22);
        java.lang.String str28 = osiamGroupService3.extractErrorMessageForbidden(accessToken22);
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken35);
        java.util.Date date37 = accessToken35.getExpiresAt();
        boolean boolean38 = accessToken35.isRefreshTokenExpired();
        java.util.Date date39 = accessToken35.getExpiresAt();
        java.util.Date date40 = accessToken35.getRefreshTokenExpiresAt();
        java.lang.String str41 = accessToken35.getUserId();
        java.util.Date date42 = accessToken35.getRefreshTokenExpiresAt();
        java.lang.String str43 = osiamGroupService3.extractErrorMessageForbidden(accessToken35);
        org.osiam.client.oauth.AccessToken.Builder builder45 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setRefreshTokenExpiresAt(date46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder45.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken50 = builder49.build();
        java.util.Date date51 = accessToken50.getExpiresAt();
        java.lang.String str52 = accessToken50.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet53 = accessToken50.getScopes();
        java.util.Date date54 = accessToken50.getRefreshTokenExpiresAt();
        java.lang.String str55 = osiamGroupService3.extractErrorMessageForbidden(accessToken50);
        org.osiam.resources.scim.Group group56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder58 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date59 = null;
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setRefreshTokenExpiresAt(date59);
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder58.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken63 = builder62.build();
        java.util.Date date64 = accessToken63.getExpiresAt();
        java.lang.String str65 = accessToken63.getRefreshToken();
        java.lang.String str66 = accessToken63.getType();
        java.lang.String str67 = accessToken63.getClientId();
        java.lang.String str68 = accessToken63.getUserName();
        boolean boolean69 = accessToken63.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group70 = osiamGroupService3.createGroup(group56, accessToken63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(scopeSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Insufficient scopes: []" + "'", str28, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Insufficient scopes: []" + "'", str43, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(accessToken50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(scopeSet53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Insufficient scopes: []" + "'", str55, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(accessToken63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test06832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06832");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget7 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        boolean boolean15 = accessToken14.isRefreshTokenExpired();
        java.lang.String str16 = accessToken14.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder17 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder19.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.descending("hi!");
        org.osiam.client.query.Query query26 = queryBuilder25.build();
        java.lang.String str27 = query26.toString();
        java.lang.String str28 = query26.getSortOrder();
        java.lang.String str29 = query26.getSortBy();
        java.lang.String str30 = query26.getFilter();
        java.lang.String str31 = query26.toString();
        boolean boolean32 = accessToken14.equals((java.lang.Object) query26);
        java.lang.String str33 = osiamGroupService3.extractErrorMessageForbidden(accessToken14);
        javax.ws.rs.core.Response.StatusType statusType35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = osiamGroupService3.extractErrorMessageDefault("org.osiam.client.exception.OsiamClientException: ME", statusType35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(webTarget7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "descending" + "'", str28, "descending");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str31, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Insufficient scopes: []" + "'", str33, "Insufficient scopes: []");
    }

    @Test
    public void test06833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06833");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setResourceServerEndpoint("org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.AuthService.Builder builder7 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder17 = builder15.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder19 = builder15.setClientSecret("PATCH");
        org.osiam.client.AuthService authService20 = builder19.build();
        org.osiam.client.AuthService authService21 = builder19.build();
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.addScope(scope25);
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException29 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean30 = scope27.equals((java.lang.Object) invalidAttributeException29);
        java.lang.String str31 = scope27.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder24.addScope(scope27);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setUserId("");
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.addScope(scope37);
        org.osiam.client.oauth.Scope scope40 = new org.osiam.client.oauth.Scope("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope42 = new org.osiam.client.oauth.Scope("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope[] scopeArray43 = new org.osiam.client.oauth.Scope[] { scope22, scope37, scope40, scope42 };
        java.net.URI uRI44 = authService21.getAuthorizationUri(scopeArray43);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken45 = osiamConnector5.retrieveAccessToken(scopeArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(authService20);
        org.junit.Assert.assertNotNull(authService21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "GET" + "'", str31, "GET");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(scopeArray43);
        org.junit.Assert.assertNotNull(uRI44);
    }

    @Test
    public void test06834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06834");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector13 = builder8.build();
        org.osiam.client.OsiamConnector.Builder builder14 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector21 = builder20.build();
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.descending("hi!");
        org.osiam.client.query.Query query31 = queryBuilder30.build();
        java.lang.String str32 = query31.toString();
        java.lang.String str33 = query31.toString();
        java.lang.String str34 = query31.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder35 = osiamConnector21.createQueryBuilder(query31);
        org.osiam.client.query.QueryBuilder queryBuilder36 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder42 = queryBuilder38.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder44 = queryBuilder42.descending("hi!");
        org.osiam.client.query.Query query45 = queryBuilder44.build();
        org.osiam.client.query.QueryBuilder queryBuilder46 = osiamConnector21.createQueryBuilder(query45);
        org.osiam.client.query.QueryBuilder queryBuilder47 = osiamConnector13.createQueryBuilder(query45);
        java.lang.String str48 = query45.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder49 = new org.osiam.client.query.QueryBuilder(query45);
        java.lang.String str50 = query45.getSortBy();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(query31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str32, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str33, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(query45);
        org.junit.Assert.assertNotNull(queryBuilder46);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "descending" + "'", str48, "descending");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
    }

    @Test
    public void test06835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06835");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder11 = builder7.setClientId("ADMIN");
        org.osiam.client.AuthService.Builder builder13 = builder7.setClientSecret("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388");
        org.osiam.client.AuthService authService14 = builder7.build();
        org.osiam.client.AuthService.Builder builder18 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientId("ME");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder26 = builder24.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService27 = builder26.build();
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date30 = null;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setRefreshTokenExpiresAt(date30);
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken34 = builder33.build();
        boolean boolean35 = accessToken34.isRefreshTokenExpired();
        java.lang.String str36 = accessToken34.getUserId();
        java.lang.String str37 = accessToken34.getToken();
        java.lang.String str38 = authService27.extractErrorMessageForbidden(accessToken34);
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str40 = scope39.getValue();
        java.lang.String str41 = scope39.toString();
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray43 = new org.osiam.client.oauth.Scope[] { scope39, scope42 };
        java.net.URI uRI44 = authService27.getAuthorizationUri(scopeArray43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date47 = null;
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.setRefreshTokenExpiresAt(date47);
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder46.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken51 = builder50.build();
        boolean boolean52 = accessToken51.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet53 = accessToken51.getScopes();
        boolean boolean54 = accessToken51.isRefreshTokenExpired();
        boolean boolean55 = accessToken51.isClientOnly();
        java.lang.String str56 = authService27.extractErrorMessageForbidden(accessToken51);
        org.osiam.client.AuthService.Builder builder58 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder60 = builder58.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder62 = builder60.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder64 = builder62.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder66 = builder64.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder68 = builder66.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder70 = builder66.setClientSecret("PATCH");
        org.osiam.client.AuthService.Builder builder72 = builder70.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService73 = builder70.build();
        org.osiam.client.oauth.Scope scope74 = org.osiam.client.oauth.Scope.GET;
        java.lang.String str75 = scope74.getValue();
        java.lang.String str76 = scope74.getValue();
        java.lang.String str77 = scope74.toString();
        java.lang.String str78 = scope74.toString();
        org.osiam.client.oauth.Scope[] scopeArray79 = new org.osiam.client.oauth.Scope[] { scope74 };
        java.net.URI uRI80 = authService73.getAuthorizationUri(scopeArray79);
        java.net.URI uRI81 = authService27.getAuthorizationUri(scopeArray79);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken82 = authService14.retrieveAccessToken("Query [attributes=ME, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", "org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", scopeArray79);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(authService14);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(authService27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(accessToken34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Bearer " + "'", str37, "Bearer ");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Insufficient scopes: []" + "'", str38, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PATCH" + "'", str40, "PATCH");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PATCH" + "'", str41, "PATCH");
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertNotNull(scopeArray43);
        org.junit.Assert.assertNotNull(uRI44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(accessToken51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(scopeSet53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Insufficient scopes: []" + "'", str56, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(authService73);
        org.junit.Assert.assertNotNull(scope74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "GET" + "'", str75, "GET");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "GET" + "'", str76, "GET");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "GET" + "'", str77, "GET");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "GET" + "'", str78, "GET");
        org.junit.Assert.assertNotNull(scopeArray79);
        org.junit.Assert.assertNotNull(uRI80);
        org.junit.Assert.assertNotNull(uRI81);
    }

    @Test
    public void test06836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06836");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder7 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder7.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet17 = accessToken15.getScopes();
        java.lang.String str18 = osiamGroupService8.extractErrorMessageForbidden(accessToken15);
        boolean boolean19 = accessToken15.isClientOnly();
        boolean boolean20 = accessToken15.isClientOnly();
        java.lang.String str21 = accessToken15.toString();
        java.lang.String str22 = osiamGroupService4.extractErrorMessageForbidden(accessToken15);
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken29 = builder28.build();
        boolean boolean30 = accessToken29.isRefreshTokenExpired();
        boolean boolean31 = accessToken29.isClientOnly();
        java.lang.String str32 = accessToken29.getRefreshToken();
        boolean boolean33 = accessToken29.isExpired();
        boolean boolean34 = accessToken29.isRefreshTokenExpired();
        java.lang.String str35 = accessToken29.getToken();
        java.util.Date date36 = accessToken29.getRefreshTokenExpiresAt();
        boolean boolean37 = accessToken29.isClientOnly();
        java.lang.String str38 = osiamGroupService4.extractErrorMessageForbidden(accessToken29);
        org.osiam.client.query.QueryBuilder queryBuilder39 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder43 = queryBuilder41.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder41.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder45.descending("hi!");
        org.osiam.client.query.Query query48 = queryBuilder47.build();
        java.lang.String str49 = query48.toString();
        java.lang.String str50 = query48.getSortOrder();
        java.lang.String str51 = query48.getSortBy();
        int int52 = query48.getCount();
        org.osiam.client.oauth.AccessToken.Builder builder54 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date55 = null;
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setRefreshTokenExpiresAt(date55);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder54.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken59 = builder58.build();
        java.util.Date date60 = accessToken59.getExpiresAt();
        java.lang.String str61 = accessToken59.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken59);
        org.osiam.client.oauth.AccessToken.Builder builder64 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date65 = null;
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder64.setRefreshTokenExpiresAt(date65);
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder64.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken69 = builder68.build();
        boolean boolean70 = accessToken69.isRefreshTokenExpired();
        boolean boolean71 = accessToken69.isClientOnly();
        java.lang.String str72 = accessToken69.getClientId();
        boolean boolean73 = accessToken69.isClientOnly();
        boolean boolean74 = accessToken59.equals((java.lang.Object) accessToken69);
        java.lang.String str75 = accessToken69.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult76 = osiamGroupService4.searchResources(query48, accessToken69);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(scopeSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str21, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Insufficient scopes: []" + "'", str22, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Bearer " + "'", str35, "Bearer ");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Insufficient scopes: []" + "'", str38, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(query48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str49, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "descending" + "'", str50, "descending");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(accessToken59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(accessToken69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
    }

    @Test
    public void test06837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06837");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("ascending");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken12 = builder9.build();
        java.util.Date date13 = accessToken12.getExpiresAt();
        java.lang.String str14 = accessToken12.toString();
        java.lang.String str15 = accessToken12.toString();
        boolean boolean16 = accessToken12.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user17 = osiamUserService3.getCurrentUser(accessToken12);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str14, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str15, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test06838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06838");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector5 = builder0.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.descending("hi!");
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder14.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Cannot connect to server");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.startIndex((long) (byte) 10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.count(0);
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        org.osiam.client.query.Query query25 = query24.previousPage();
        org.osiam.client.query.Query query26 = query25.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder27 = osiamConnector5.createQueryBuilder(query25);
        org.osiam.resources.scim.User user28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        boolean boolean36 = accessToken35.isRefreshTokenExpired();
        java.lang.String str37 = accessToken35.getUserId();
        java.lang.String str38 = accessToken35.getToken();
        java.util.Date date39 = accessToken35.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken35);
        boolean boolean41 = accessToken35.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user42 = osiamConnector5.createUser(user28, accessToken35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertNotNull(query25);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Bearer " + "'", str38, "Bearer ");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test06839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06839");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService4 = builder3.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken6 = authService4.retrieveAccessToken("Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(authService4);
    }

    @Test
    public void test06840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06840");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope17 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder13.addScope(scope17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setUserName("org.osiam.client.exception.NoResultException: authorization_code");
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setType("");
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setType("authorization_code");
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        java.lang.String str32 = scope31.toString();
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder30.addScope(scope31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder20.addScope(scope31);
        org.osiam.client.helper.ScopeSerializer scopeSerializer35 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken42 = builder41.build();
        boolean boolean43 = accessToken42.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet44 = accessToken42.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator45 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider46 = null;
        scopeSerializer35.serialize(scopeSet44, jsonGenerator45, serializerProvider46);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper48 = null;
        com.fasterxml.jackson.databind.JavaType javaType49 = null;
        scopeSerializer35.acceptJsonFormatVisitor(jsonFormatVisitorWrapper48, javaType49);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet51 = null;
        boolean boolean52 = scopeSerializer35.isEmpty(scopeSet51);
        boolean boolean53 = scopeSerializer35.isUnwrappingSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope56 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.addScope(scope56);
        org.osiam.client.oauth.Scope scope58 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException60 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean61 = scope58.equals((java.lang.Object) invalidAttributeException60);
        java.lang.String str62 = scope58.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder55.addScope(scope58);
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder63.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder65.setUserName("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.oauth.Scope scope68 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder65.addScope(scope68);
        org.osiam.client.helper.ScopeSerializer scopeSerializer70 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean71 = scopeSerializer70.isUnwrappingSerializer();
        org.osiam.client.helper.ScopeSerializer scopeSerializer72 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder74 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date75 = null;
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder74.setRefreshTokenExpiresAt(date75);
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder74.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken79 = builder78.build();
        boolean boolean80 = accessToken79.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet81 = accessToken79.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator82 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider83 = null;
        scopeSerializer72.serialize(scopeSet81, jsonGenerator82, serializerProvider83);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator85 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider86 = null;
        scopeSerializer70.serialize(scopeSet81, jsonGenerator85, serializerProvider86);
        org.osiam.client.oauth.AccessToken.Builder builder88 = builder65.addScopes(scopeSet81);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator89 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider90 = null;
        scopeSerializer35.serialize(scopeSet81, jsonGenerator89, serializerProvider90);
        org.osiam.client.oauth.AccessToken.Builder builder92 = builder20.addScopes(scopeSet81);
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ADMIN" + "'", str32, "ADMIN");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(scopeSet44);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(scope58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "GET" + "'", str62, "GET");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(scope68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(accessToken79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(scopeSet81);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test06841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06841");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder1.setRefreshToken("Bearer ");
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.PATCH;
        boolean boolean14 = scope12.equals((java.lang.Object) 401);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder1.addScope(scope12);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder1.setClientId("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserName("PATCH");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test06842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06842");
        org.osiam.client.oauth.Scope scope0 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.OsiamConnector.Builder builder1 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder3 = builder1.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder5 = builder3.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder7 = builder5.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder9 = builder7.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector10 = builder7.build();
        org.osiam.client.query.QueryBuilder queryBuilder11 = osiamConnector10.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder12 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query19 = queryBuilder16.build();
        org.osiam.client.query.Query query20 = query19.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector10.createQueryBuilder(query19);
        boolean boolean22 = scope0.equals((java.lang.Object) osiamConnector10);
        org.osiam.resources.scim.UpdateGroup updateGroup24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.addScope(scope27);
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException31 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean32 = scope29.equals((java.lang.Object) invalidAttributeException31);
        java.lang.String str33 = scope29.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder26.addScope(scope29);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder40.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken45 = builder44.build();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet46 = accessToken45.getScopes();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken45);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group48 = osiamConnector10.updateGroup("org.osiam.client.exception.ForbiddenException: hi!", updateGroup24, accessToken45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scope0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(osiamConnector10);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GET" + "'", str33, "GET");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(accessToken45);
        org.junit.Assert.assertNotNull(scopeSet46);
    }

    @Test
    public void test06843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06843");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        org.osiam.client.helper.ScopeSerializer scopeSerializer4 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean5 = scopeSerializer4.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer7 = scopeSerializer4.unwrappingSerializer(nameTransformer6);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException16 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean17 = scope14.equals((java.lang.Object) invalidAttributeException16);
        java.lang.String str18 = scope14.getValue();
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str21 = scope20.toString();
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str24 = scope23.getValue();
        java.lang.String str25 = scope23.getValue();
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        java.lang.String str30 = scope26.getValue();
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException36 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean37 = scope34.equals((java.lang.Object) invalidAttributeException36);
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.GET;
        boolean boolean42 = scope40.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray44 = new org.osiam.client.oauth.Scope[] { scope13, scope14, scope19, scope20, scope22, scope23, scope26, scope31, scope32, scope33, scope34, scope38, scope39, scope40, scope43 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet45 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet45, scopeArray44);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder10.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet45);
        boolean boolean48 = scopeSetJsonSerializer7.isEmpty(serializerProvider8, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet45);
        boolean boolean49 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet45);
        boolean boolean50 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer51 = scopeSerializer0.getDelegatee();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GET" + "'", str18, "GET");
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ME" + "'", str21, "ME");
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PATCH" + "'", str24, "PATCH");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PATCH" + "'", str25, "PATCH");
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GET" + "'", str30, "GET");
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertNotNull(scopeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(wildcardJsonSerializer51);
    }

    @Test
    public void test06844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06844");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.resources.scim.Group group7 = null;
        org.osiam.client.OsiamGroupService.Builder builder9 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        java.util.Date date18 = accessToken17.getExpiresAt();
        java.lang.String str19 = accessToken17.getUserName();
        java.lang.String str20 = accessToken17.toString();
        java.lang.String str21 = osiamGroupService10.extractErrorMessageForbidden(accessToken17);
        javax.ws.rs.client.WebTarget webTarget22 = osiamGroupService10.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken29 = builder28.build();
        boolean boolean30 = accessToken29.isRefreshTokenExpired();
        boolean boolean31 = accessToken29.isClientOnly();
        java.lang.String str32 = accessToken29.getClientId();
        java.lang.String str33 = accessToken29.getUserId();
        java.lang.String str34 = accessToken29.getClientId();
        java.lang.String str35 = accessToken29.getRefreshToken();
        java.lang.String str36 = osiamGroupService10.extractErrorMessageForbidden(accessToken29);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group37 = osiamGroupService3.updateResource("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=GET, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=Cannot connect to server, userName=Authorization]", group7, accessToken29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(osiamGroupService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str20, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
    }

    @Test
    public void test06845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06845");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.descending("hi!");
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        java.lang.String str16 = query15.getAttributes();
        java.lang.String str17 = query15.toString();
        java.lang.String str18 = query15.getSortBy();
        org.osiam.client.query.Query query19 = query15.nextPage();
        java.lang.String str20 = query19.getAttributes();
        java.lang.String str21 = query19.getFilter();
        org.osiam.client.query.Query query22 = query19.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder23 = osiamConnector5.createQueryBuilder(query19);
        org.osiam.client.OsiamGroupService.Builder builder26 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService27 = builder26.build();
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date30 = null;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setRefreshTokenExpiresAt(date30);
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken34 = builder33.build();
        java.util.Date date35 = accessToken34.getExpiresAt();
        java.lang.String str36 = accessToken34.getRefreshToken();
        java.lang.String str37 = accessToken34.getType();
        java.lang.String str38 = osiamGroupService27.extractErrorMessageForbidden(accessToken34);
        java.lang.String str39 = accessToken34.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector5.deleteUser("org.osiam.client.exception.ConflictException: PATCH", accessToken34);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Authorization" + "'", str16, "Authorization");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str17, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Authorization" + "'", str20, "Authorization");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(query22);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(osiamGroupService27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(accessToken34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Insufficient scopes: []" + "'", str38, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test06846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06846");
        org.osiam.client.exception.UnauthorizedException unauthorizedException4 = new org.osiam.client.exception.UnauthorizedException("PATCH");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException5 = new org.osiam.client.exception.ConnectionInitializationException("ME", (java.lang.Throwable) unauthorizedException4);
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException6 = new org.osiam.client.exception.ConnectionInitializationException("ADMIN", (java.lang.Throwable) connectionInitializationException5);
        org.osiam.client.exception.OsiamClientException osiamClientException7 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.UnauthorizedException: PATCH", (java.lang.Throwable) connectionInitializationException6);
    }

    @Test
    public void test06847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06847");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder3 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder3.setRefreshTokenExpiresAt(date4);
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope7 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException9 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean10 = scope7.equals((java.lang.Object) invalidAttributeException9);
        java.lang.String str11 = scope7.getValue();
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str14 = scope13.toString();
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str17 = scope16.getValue();
        java.lang.String str18 = scope16.getValue();
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException21 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean22 = scope19.equals((java.lang.Object) invalidAttributeException21);
        java.lang.String str23 = scope19.getValue();
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException29 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean30 = scope27.equals((java.lang.Object) invalidAttributeException29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.GET;
        boolean boolean35 = scope33.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray37 = new org.osiam.client.oauth.Scope[] { scope6, scope7, scope12, scope13, scope15, scope16, scope19, scope24, scope25, scope26, scope27, scope31, scope32, scope33, scope36 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet38 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet38, scopeArray37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder3.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet38);
        boolean boolean41 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet38);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass42 = scopeSerializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer43 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer44 = scopeSerializer0.unwrappingSerializer(nameTransformer43);
        boolean boolean45 = scopeSetJsonSerializer44.usesObjectId();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertNotNull(scope7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GET" + "'", str11, "GET");
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ME" + "'", str14, "ME");
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PATCH" + "'", str18, "PATCH");
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GET" + "'", str23, "GET");
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(scopeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(scopeSetClass42);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test06848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06848");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        java.lang.String str23 = accessToken21.getUserName();
        java.lang.String str24 = accessToken21.toString();
        java.lang.String str25 = osiamGroupService2.extractErrorMessageForbidden(accessToken21);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        java.util.Date date34 = accessToken33.getExpiresAt();
        java.lang.String str35 = accessToken33.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken33);
        java.util.Date date37 = accessToken33.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group38 = osiamGroupService2.getResource("GET POST PUT PATCH DELETE", accessToken33);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str24, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test06849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06849");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet7 = scopeSetJsonDeserializer6.getNullValue();
        boolean boolean8 = scopeSetJsonDeserializer6.isCachable();
        boolean boolean9 = scopeSetJsonDeserializer6.isCachable();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNull(scopeSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test06850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06850");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector osiamConnector9 = builder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.descending("hi!");
        org.osiam.client.query.Query query19 = queryBuilder18.build();
        java.lang.String str20 = query19.toString();
        java.lang.String str21 = query19.getSortOrder();
        java.lang.String str22 = query19.getSortBy();
        org.osiam.client.query.Query query23 = query19.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder24 = osiamConnector9.createQueryBuilder(query23);
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        java.util.Date date33 = accessToken32.getExpiresAt();
        java.lang.String str34 = accessToken32.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken32);
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken42 = builder41.build();
        boolean boolean43 = accessToken42.isRefreshTokenExpired();
        boolean boolean44 = accessToken42.isClientOnly();
        java.lang.String str45 = accessToken42.getClientId();
        boolean boolean46 = accessToken42.isClientOnly();
        boolean boolean47 = accessToken32.equals((java.lang.Object) accessToken42);
        org.osiam.client.query.QueryBuilder queryBuilder48 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder50.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder50.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder56 = queryBuilder54.descending("hi!");
        org.osiam.client.query.Query query57 = queryBuilder56.build();
        org.osiam.client.query.Query query58 = queryBuilder56.build();
        org.osiam.client.query.QueryBuilder queryBuilder60 = queryBuilder56.ascending("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        boolean boolean61 = accessToken32.equals((java.lang.Object) "org.osiam.client.exception.ConnectionInitializationException: PATCH");
        java.lang.String str62 = accessToken32.getRefreshToken();
        java.util.Date date63 = accessToken32.getRefreshTokenExpiresAt();
        boolean boolean64 = accessToken32.isClientOnly();
        boolean boolean65 = accessToken32.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector9.deleteGroup("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME", accessToken32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str20, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "descending" + "'", str21, "descending");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(query23);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(queryBuilder56);
        org.junit.Assert.assertNotNull(query57);
        org.junit.Assert.assertNotNull(query58);
        org.junit.Assert.assertNotNull(queryBuilder60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test06851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06851");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("ascending");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.lang.String str12 = accessToken11.toString();
        java.lang.String str13 = accessToken11.getType();
        boolean boolean14 = accessToken11.isExpired();
        boolean boolean15 = accessToken11.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user16 = osiamUserService3.getUser("", accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str12, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test06852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06852");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService3.targetEndpoint;
        org.osiam.resources.scim.Group group14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        java.util.Date date22 = accessToken21.getExpiresAt();
        java.lang.String str23 = accessToken21.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet24 = accessToken21.getScopes();
        java.util.Date date25 = accessToken21.getExpiresAt();
        java.lang.String str26 = accessToken21.getToken();
        java.lang.String str27 = accessToken21.getToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken21);
        java.lang.String str29 = accessToken21.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group30 = osiamGroupService3.createGroup(group14, accessToken21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(scopeSet24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Bearer " + "'", str26, "Bearer ");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Bearer " + "'", str27, "Bearer ");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test06853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06853");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.getSortOrder();
        java.lang.String str30 = query24.getAttributes();
        boolean boolean31 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.OsiamConnector.Builder builder32 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder34 = builder32.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder36 = builder34.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder38 = builder36.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder40 = builder36.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder42 = builder36.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder44 = builder42.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder46 = builder42.setClientRedirectUri("PUT");
        boolean boolean47 = accessToken12.equals((java.lang.Object) builder46);
        java.lang.String str48 = osiamGroupService5.extractErrorMessageForbidden(accessToken12);
        org.osiam.client.oauth.AccessToken accessToken50 = null;
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService5.deleteGroup("org.osiam.client.exception.ConnectionInitializationException: AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", accessToken50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "descending" + "'", str29, "descending");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Authorization" + "'", str30, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Insufficient scopes: []" + "'", str48, "Insufficient scopes: []");
    }

    @Test
    public void test06854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06854");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder6 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        java.util.Date date15 = accessToken14.getExpiresAt();
        java.lang.String str16 = accessToken14.getRefreshToken();
        boolean boolean17 = accessToken14.isClientOnly();
        java.lang.String str18 = osiamGroupService7.extractErrorMessageForbidden(accessToken14);
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        boolean boolean26 = accessToken25.isRefreshTokenExpired();
        java.lang.String str27 = accessToken25.getUserId();
        java.lang.String str28 = accessToken25.getToken();
        boolean boolean29 = accessToken25.isExpired();
        java.lang.String str30 = accessToken25.getClientId();
        java.lang.String str31 = accessToken25.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet32 = accessToken25.getScopes();
        java.lang.String str33 = osiamGroupService7.extractErrorMessageForbidden(accessToken25);
        // The following exception was thrown during execution in test generation
        try {
            osiamUserService3.deleteUser("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken25);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Bearer " + "'", str28, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(scopeSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Insufficient scopes: []" + "'", str33, "Insufficient scopes: []");
    }

    @Test
    public void test06855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06855");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.util.Date date12 = accessToken11.getExpiresAt();
        java.lang.String str13 = accessToken11.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken11);
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        boolean boolean23 = accessToken21.isClientOnly();
        java.lang.String str24 = accessToken21.getClientId();
        boolean boolean25 = accessToken21.isClientOnly();
        boolean boolean26 = accessToken11.equals((java.lang.Object) accessToken21);
        java.util.Date date27 = accessToken21.getRefreshTokenExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken21);
        java.lang.String str29 = osiamGroupService3.extractErrorMessageForbidden(accessToken21);
        org.osiam.resources.scim.UpdateGroup updateGroup31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date34 = null;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder33.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken38 = builder37.build();
        boolean boolean39 = accessToken38.isRefreshTokenExpired();
        java.lang.String str40 = accessToken38.getUserId();
        java.lang.String str41 = accessToken38.getToken();
        boolean boolean42 = accessToken38.isExpired();
        java.lang.String str43 = accessToken38.getClientId();
        boolean boolean44 = accessToken38.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group45 = osiamGroupService3.updateGroup("org.osiam.client.exception.ConflictException: Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]", updateGroup31, accessToken38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Insufficient scopes: []" + "'", str29, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Bearer " + "'", str41, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test06856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06856");
        org.osiam.client.exception.OsiamClientException osiamClientException1 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        java.lang.Throwable[] throwableArray2 = osiamClientException1.getSuppressed();
        java.lang.String str3 = osiamClientException1.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str3, "org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test06857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06857");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.attributes("Bearer ");
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder2.ascending("org.osiam.client.exception.ConflictException: ");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.startIndex(0L);
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
    }

    @Test
    public void test06858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06858");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector9.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        org.osiam.client.query.Query query21 = queryBuilder19.build();
        long long22 = query21.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder23 = osiamConnector9.createQueryBuilder(query21);
        org.osiam.client.query.QueryBuilder queryBuilder24 = new org.osiam.client.query.QueryBuilder(query21);
        java.lang.String str25 = query21.getSortOrder();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "descending" + "'", str25, "descending");
    }

    @Test
    public void test06859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06859");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.client.OsiamGroupService.Builder builder5 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder5.build();
        javax.ws.rs.client.WebTarget webTarget7 = osiamGroupService6.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder9 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService10 = builder9.build();
        org.osiam.client.OsiamGroupService osiamGroupService11 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken18);
        java.lang.String str20 = osiamGroupService11.extractErrorMessageForbidden(accessToken18);
        java.util.Date date21 = accessToken18.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken18);
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean24 = accessToken18.equals((java.lang.Object) scope23);
        java.lang.String str25 = accessToken18.getRefreshToken();
        java.lang.String str26 = accessToken18.getToken();
        java.lang.String str27 = accessToken18.getUserId();
        java.lang.String str28 = osiamGroupService6.extractErrorMessageForbidden(accessToken18);
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken37 = builder34.build();
        java.util.Date date38 = accessToken37.getExpiresAt();
        java.lang.String str39 = accessToken37.getClientId();
        java.lang.String str40 = accessToken37.getType();
        java.lang.String str41 = osiamGroupService6.extractErrorMessageForbidden(accessToken37);
        java.lang.String str42 = accessToken37.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser43 = osiamConnector3.getCurrentUserBasic(accessToken37);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(webTarget7);
        org.junit.Assert.assertNotNull(osiamGroupService10);
        org.junit.Assert.assertNotNull(osiamGroupService11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Bearer " + "'", str26, "Bearer ");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Insufficient scopes: []" + "'", str28, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: []" + "'", str41, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Bearer " + "'", str42, "Bearer ");
    }

    @Test
    public void test06860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06860");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector17 = builder14.build();
        org.osiam.client.OsiamConnector.Builder builder19 = builder14.setClientRedirectUri("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: descending");
        org.osiam.client.OsiamConnector osiamConnector20 = builder14.build();
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        java.lang.String str29 = accessToken28.toString();
        java.lang.String str30 = accessToken28.getType();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken28);
        boolean boolean32 = accessToken28.isRefreshTokenExpired();
        boolean boolean33 = accessToken28.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user34 = osiamConnector20.getUser("org.osiam.client.exception.ConflictException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken28);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(osiamConnector20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str29, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test06861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06861");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector9.createQueryBuilder();
        org.osiam.resources.scim.User user11 = null;
        org.osiam.client.OsiamGroupService.Builder builder13 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService14 = builder13.build();
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet23 = accessToken21.getScopes();
        java.lang.String str24 = osiamGroupService14.extractErrorMessageForbidden(accessToken21);
        boolean boolean25 = accessToken21.isExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet26 = accessToken21.getScopes();
        boolean boolean27 = accessToken21.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user28 = osiamConnector9.createUser(user11, accessToken21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(osiamGroupService14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(scopeSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Insufficient scopes: []" + "'", str24, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(scopeSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test06862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06862");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder4 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder4.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        java.lang.String str15 = osiamGroupService6.extractErrorMessageForbidden(accessToken13);
        java.util.Date date16 = accessToken13.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean19 = accessToken13.equals((java.lang.Object) scope18);
        java.lang.String str20 = accessToken13.getRefreshToken();
        boolean boolean21 = accessToken13.isRefreshTokenExpired();
        java.util.Date date22 = accessToken13.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList23 = osiamUserService2.getAllUsers(accessToken13);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test06863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06863");
        org.osiam.client.oauth.Scope scope1 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.OsiamClientException: hi!");
    }

    @Test
    public void test06864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06864");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer3 = scopeDeserializer0.getDelegatee();
        boolean boolean4 = scopeDeserializer0.isCachable();
        java.util.Collection<java.lang.Object> objCollection5 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer6 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader7 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer8 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer9 = scopeDeserializer0.unwrappingDeserializer(nameTransformer8);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer10 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer11 = scopeSetJsonDeserializer9.unwrappingDeserializer(nameTransformer10);
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer12 = scopeSetJsonDeserializer9.getDelegatee();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(wildcardJsonDeserializer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(objCollection5);
        org.junit.Assert.assertNull(wildcardJsonDeserializer6);
        org.junit.Assert.assertNull(objectIdReader7);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer9);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer11);
        org.junit.Assert.assertNull(wildcardJsonDeserializer12);
    }

    @Test
    public void test06865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06865");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = osiamGroupService2.extractErrorMessageUnauthorized("org.osiam.client.exception.OsiamRequestException: hi!", statusType4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
    }

    @Test
    public void test06866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06866");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService2.targetEndpoint;
        org.osiam.client.query.QueryBuilder queryBuilder5 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder7 = queryBuilder5.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder7.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder7.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.descending("hi!");
        org.osiam.client.query.Query query14 = queryBuilder13.build();
        org.osiam.client.query.Query query15 = queryBuilder13.build();
        org.osiam.client.query.Query query16 = query15.nextPage();
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        boolean boolean24 = accessToken23.isRefreshTokenExpired();
        boolean boolean25 = accessToken23.isClientOnly();
        java.lang.String str26 = accessToken23.getRefreshToken();
        boolean boolean27 = accessToken23.isExpired();
        boolean boolean28 = accessToken23.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult29 = osiamGroupService2.searchResources(query16, accessToken23);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(queryBuilder7);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(query14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test06867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06867");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("Bearer ");
        org.osiam.client.AuthService.Builder builder9 = builder5.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]");
        org.osiam.client.AuthService authService10 = builder5.build();
        org.osiam.client.OsiamConnector.Builder builder11 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder13 = builder11.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder15 = builder13.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder17 = builder15.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder19 = builder17.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector20 = builder17.build();
        org.osiam.client.OsiamConnector.Builder builder22 = builder17.setAuthServerEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder24 = builder22.setClientId("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector osiamConnector25 = builder22.build();
        org.osiam.client.AuthService.Builder builder27 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder29 = builder27.setClientId("ME");
        org.osiam.client.AuthService.Builder builder31 = builder29.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder33 = builder31.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder35 = builder33.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService36 = builder35.build();
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        boolean boolean44 = accessToken43.isRefreshTokenExpired();
        java.lang.String str45 = accessToken43.getUserId();
        java.lang.String str46 = accessToken43.getToken();
        java.lang.String str47 = authService36.extractErrorMessageForbidden(accessToken43);
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str49 = scope48.getValue();
        java.lang.String str50 = scope48.toString();
        org.osiam.client.oauth.Scope scope51 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray52 = new org.osiam.client.oauth.Scope[] { scope48, scope51 };
        java.net.URI uRI53 = authService36.getAuthorizationUri(scopeArray52);
        java.net.URI uRI54 = osiamConnector25.getAuthorizationUri(scopeArray52);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken55 = authService10.retrieveAccessToken(scopeArray52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(osiamConnector20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(osiamConnector25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(authService36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Bearer " + "'", str46, "Bearer ");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Insufficient scopes: []" + "'", str47, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PATCH" + "'", str49, "PATCH");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PATCH" + "'", str50, "PATCH");
        org.junit.Assert.assertNotNull(scope51);
        org.junit.Assert.assertNotNull(scopeArray52);
        org.junit.Assert.assertNotNull(uRI53);
        org.junit.Assert.assertNotNull(uRI54);
    }

    @Test
    public void test06868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06868");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.NoResultException: authorization_code");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder4 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder4.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        java.lang.String str15 = osiamGroupService6.extractErrorMessageForbidden(accessToken13);
        java.util.Date date16 = accessToken13.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean19 = accessToken13.equals((java.lang.Object) scope18);
        java.lang.String str20 = accessToken13.getRefreshToken();
        java.lang.String str21 = accessToken13.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user22 = osiamUserService2.getCurrentUser(accessToken13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test06869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06869");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector9.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        org.osiam.client.query.Query query21 = queryBuilder19.build();
        long long22 = query21.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder23 = osiamConnector9.createQueryBuilder(query21);
        org.osiam.resources.scim.UpdateUser updateUser25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        java.lang.String str29 = accessToken28.toString();
        java.lang.String str30 = accessToken28.getUserId();
        java.lang.String str31 = accessToken28.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user32 = osiamConnector9.updateUser("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamClientException: descending", updateUser25, accessToken28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str29, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test06870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06870");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date34 = null;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder33.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken38 = builder37.build();
        boolean boolean39 = accessToken38.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet40 = accessToken38.getScopes();
        boolean boolean41 = accessToken38.isRefreshTokenExpired();
        boolean boolean42 = accessToken38.isExpired();
        org.osiam.client.AuthService.Builder builder44 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder46 = builder44.setClientId("ME");
        org.osiam.client.AuthService.Builder builder48 = builder44.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService49 = builder44.build();
        boolean boolean50 = accessToken38.equals((java.lang.Object) builder44);
        java.lang.String str51 = accessToken38.getToken();
        java.lang.String str52 = accessToken38.getType();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector5.revokeAccessToken(accessToken38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(scopeSet40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(authService49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Bearer " + "'", str51, "Bearer ");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
    }

    @Test
    public void test06871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06871");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector5.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder33 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder35.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.descending("hi!");
        org.osiam.client.query.Query query42 = queryBuilder41.build();
        java.lang.String str43 = query42.getAttributes();
        java.lang.String str44 = query42.toString();
        java.lang.String str45 = query42.getSortBy();
        org.osiam.client.query.Query query46 = query42.nextPage();
        int int47 = query42.getCount();
        java.lang.String str48 = query42.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder49 = osiamConnector5.createQueryBuilder(query42);
        org.osiam.client.AuthService.Builder builder51 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder53 = builder51.setClientId("ME");
        org.osiam.client.AuthService.Builder builder55 = builder53.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder57 = builder55.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder59 = builder57.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService60 = builder59.build();
        org.osiam.client.oauth.AccessToken.Builder builder62 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date63 = null;
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder62.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken67 = builder66.build();
        boolean boolean68 = accessToken67.isRefreshTokenExpired();
        java.lang.String str69 = authService60.extractErrorMessageForbidden(accessToken67);
        boolean boolean70 = accessToken67.isRefreshTokenExpired();
        java.lang.String str71 = accessToken67.getType();
        java.lang.String str72 = accessToken67.getType();
        java.lang.String str73 = accessToken67.getUserName();
        java.lang.String str74 = accessToken67.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken75 = osiamConnector5.validateAccessToken(accessToken67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Authorization" + "'", str43, "Authorization");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str44, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(query46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(authService60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(accessToken67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Insufficient scopes: []" + "'", str69, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
    }

    @Test
    public void test06872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06872");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = osiamConnector5.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder7 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder7.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder9.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.descending("hi!");
        org.osiam.client.query.Query query16 = queryBuilder15.build();
        java.lang.String str17 = query16.toString();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder(query16);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.ascending("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.query.Query query21 = queryBuilder18.build();
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector5.createQueryBuilder(query21);
        int int23 = query21.getCount();
        java.lang.String str24 = query21.getSortBy();
        java.lang.String str25 = query21.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str17, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str24, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=], sortOrder=ascending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=], sortOrder=ascending, startIndex=1, count=10]");
    }

    @Test
    public void test06873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06873");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer4 = scopeDeserializer0.getDelegatee();
        boolean boolean5 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer7 = scopeDeserializer0.unwrappingDeserializer(nameTransformer6);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeSetJsonDeserializer7.getNullValue();
        com.fasterxml.jackson.core.JsonParser jsonParser9 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext10 = null;
        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeserializer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = scopeSetJsonDeserializer7.deserializeWithType(jsonParser9, deserializationContext10, typeDeserializer11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNull(wildcardJsonDeserializer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer7);
        org.junit.Assert.assertNull(scopeSet8);
    }

    @Test
    public void test06874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06874");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Cannot connect to server");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientRedirectUri("hi!");
        org.osiam.client.AuthService authService12 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        java.util.Date date20 = accessToken19.getExpiresAt();
        java.lang.String str21 = accessToken19.getRefreshToken();
        boolean boolean22 = accessToken19.isClientOnly();
        java.lang.String str23 = accessToken19.getUserName();
        java.lang.String str24 = authService12.extractErrorMessageForbidden(accessToken19);
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken31 = builder30.build();
        boolean boolean32 = accessToken31.isRefreshTokenExpired();
        boolean boolean33 = accessToken31.isClientOnly();
        java.lang.String str34 = accessToken31.getClientId();
        boolean boolean35 = accessToken31.isClientOnly();
        java.lang.String str36 = accessToken31.getToken();
        java.lang.String str37 = accessToken31.getToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet38 = accessToken31.getScopes();
        boolean boolean39 = accessToken31.isClientOnly();
        java.lang.String str40 = authService12.extractErrorMessageForbidden(accessToken31);
        org.osiam.client.oauth.AccessToken accessToken41 = null;
        org.osiam.client.AuthService.Builder builder43 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder45 = builder43.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder47 = builder45.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder49 = builder47.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder51 = builder49.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder53 = builder51.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder55 = builder51.setClientSecret("PATCH");
        org.osiam.client.AuthService.Builder builder57 = builder55.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService58 = builder55.build();
        org.osiam.client.oauth.Scope scope59 = org.osiam.client.oauth.Scope.GET;
        java.lang.String str60 = scope59.getValue();
        java.lang.String str61 = scope59.getValue();
        java.lang.String str62 = scope59.toString();
        java.lang.String str63 = scope59.toString();
        org.osiam.client.oauth.Scope[] scopeArray64 = new org.osiam.client.oauth.Scope[] { scope59 };
        java.net.URI uRI65 = authService58.getAuthorizationUri(scopeArray64);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken66 = authService12.refreshAccessToken(accessToken41, scopeArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given accessToken code can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(authService12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Insufficient scopes: []" + "'", str24, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(accessToken31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Bearer " + "'", str36, "Bearer ");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Bearer " + "'", str37, "Bearer ");
        org.junit.Assert.assertNotNull(scopeSet38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Insufficient scopes: []" + "'", str40, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(authService58);
        org.junit.Assert.assertNotNull(scope59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "GET" + "'", str60, "GET");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "GET" + "'", str61, "GET");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "GET" + "'", str62, "GET");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "GET" + "'", str63, "GET");
        org.junit.Assert.assertNotNull(scopeArray64);
        org.junit.Assert.assertNotNull(uRI65);
    }

    @Test
    public void test06875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06875");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.resources.scim.Group group4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope7 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.addScope(scope7);
        org.osiam.client.oauth.Scope scope9 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException11 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean12 = scope9.equals((java.lang.Object) invalidAttributeException11);
        java.lang.String str13 = scope9.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder6.addScope(scope9);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder6.setRefreshToken("Bearer ");
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.PATCH;
        boolean boolean19 = scope17.equals((java.lang.Object) 401);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder6.addScope(scope17);
        org.osiam.client.oauth.AccessToken accessToken21 = builder6.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group22 = osiamGroupService2.replaceResource("org.osiam.client.exception.OsiamRequestException: hi!", group4, accessToken21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(scope7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(scope9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GET" + "'", str13, "GET");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
    }

    @Test
    public void test06876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06876");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.toString();
        java.lang.String str12 = query9.toString();
        org.osiam.client.query.QueryBuilder queryBuilder13 = new org.osiam.client.query.QueryBuilder(query9);
        java.lang.String str14 = query9.getFilter();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.query.Query query15 = query9.previousPage();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: StartIndex < 1 is not possible.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str11, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str12, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test06877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06877");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer7 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer8 = scopeDeserializer0.unwrappingDeserializer(nameTransformer7);
        java.lang.Class<?> wildcardClass9 = scopeSetJsonDeserializer8.handledType();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet10 = scopeSetJsonDeserializer8.getNullValue();
        com.fasterxml.jackson.core.JsonParser jsonParser11 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext12 = null;
        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeserializer13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj14 = scopeSetJsonDeserializer8.deserializeWithType(jsonParser11, deserializationContext12, typeDeserializer13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(scopeSet10);
    }

    @Test
    public void test06878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06878");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("");
        org.osiam.client.AuthService.Builder builder9 = builder5.setClientId("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.addScope(scope13);
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException17 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean18 = scope15.equals((java.lang.Object) invalidAttributeException17);
        java.lang.String str19 = scope15.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder12.addScope(scope15);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setUserId("");
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.addScope(scope25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setClientId("GET");
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setRefreshToken("");
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setClientId("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        // The following exception was thrown during execution in test generation
        try {
            authService10.revokeAccessToken(accessToken33);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GET" + "'", str19, "GET");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
    }

    @Test
    public void test06879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06879");
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException1 = new org.osiam.client.exception.InvalidAttributeException("org.osiam.client.exception.OsiamClientException: ADMIN");
    }

    @Test
    public void test06880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06880");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getClientId();
        java.lang.String str17 = authService6.extractErrorMessageForbidden(accessToken13);
        boolean boolean18 = accessToken13.isExpired();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        java.lang.String str20 = accessToken13.getType();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Insufficient scopes: []" + "'", str17, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test06881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06881");
        org.osiam.client.exception.OsiamRequestException osiamRequestException2 = new org.osiam.client.exception.OsiamRequestException((int) (byte) 10, "Insufficient scopes: [Authorization, GET, GET POST PUT PATCH DELETE, PUT]");
    }

    @Test
    public void test06882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06882");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.AuthService.Builder builder9 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientId("ME");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder17 = builder15.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService18 = builder17.build();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.addScope(scope21);
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException25 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean26 = scope23.equals((java.lang.Object) invalidAttributeException25);
        java.lang.String str27 = scope23.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder20.addScope(scope23);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder36 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.addScope(scope37);
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException41 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean42 = scope39.equals((java.lang.Object) invalidAttributeException41);
        java.lang.String str43 = scope39.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder36.addScope(scope39);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder32.addScope(scope39);
        org.osiam.client.oauth.AccessToken.Builder builder47 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.addScope(scope48);
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException52 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean53 = scope50.equals((java.lang.Object) invalidAttributeException52);
        java.lang.String str54 = scope50.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder47.addScope(scope50);
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder63 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope64 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder63.addScope(scope64);
        org.osiam.client.oauth.Scope scope66 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException68 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean69 = scope66.equals((java.lang.Object) invalidAttributeException68);
        java.lang.String str70 = scope66.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder63.addScope(scope66);
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder59.addScope(scope66);
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder32.addScope(scope66);
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder73.setType("");
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder73.setClientId("Insufficient scopes: []");
        org.osiam.client.oauth.Scope scope78 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str79 = scope78.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder80 = builder73.addScope(scope78);
        org.osiam.client.oauth.Scope[] scopeArray81 = new org.osiam.client.oauth.Scope[] { scope78 };
        java.net.URI uRI82 = authService18.getAuthorizationUri(scopeArray81);
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI83 = osiamConnector7.getAuthorizationUri(scopeArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Can't create the login uri: redirect URI was not set.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(authService18);
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "GET" + "'", str27, "GET");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "GET" + "'", str43, "GET");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "GET" + "'", str54, "GET");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(scope64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(scope66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "GET" + "'", str70, "GET");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(scope78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "PUT" + "'", str79, "PUT");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(scopeArray81);
        org.junit.Assert.assertNotNull(uRI82);
    }

    @Test
    public void test06883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06883");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider2 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer3 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope9 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException11 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean12 = scope9.equals((java.lang.Object) invalidAttributeException11);
        java.lang.String str13 = scope9.getValue();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str16 = scope15.toString();
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str19 = scope18.getValue();
        java.lang.String str20 = scope18.getValue();
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException23 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean24 = scope21.equals((java.lang.Object) invalidAttributeException23);
        java.lang.String str25 = scope21.getValue();
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException31 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean32 = scope29.equals((java.lang.Object) invalidAttributeException31);
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.GET;
        boolean boolean37 = scope35.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray39 = new org.osiam.client.oauth.Scope[] { scope8, scope9, scope14, scope15, scope17, scope18, scope21, scope26, scope27, scope28, scope29, scope33, scope34, scope35, scope38 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet40 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet40, scopeArray39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder5.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet40);
        boolean boolean43 = scopeSerializer3.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet40);
        org.osiam.client.oauth.AccessToken.Builder builder45 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setRefreshTokenExpiresAt(date46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder45.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken50 = builder49.build();
        boolean boolean51 = accessToken50.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet52 = accessToken50.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator53 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider54 = null;
        scopeSerializer3.serialize(scopeSet52, jsonGenerator53, serializerProvider54);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder58 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date59 = null;
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setRefreshTokenExpiresAt(date59);
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder58.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken63 = builder62.build();
        boolean boolean64 = accessToken63.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet65 = accessToken63.getScopes();
        boolean boolean66 = scopeSerializer3.isEmpty(serializerProvider56, scopeSet65);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass67 = scopeSerializer3.handledType();
        org.osiam.client.oauth.Scope scope69 = new org.osiam.client.oauth.Scope("");
        org.osiam.client.oauth.AccessToken.Builder builder71 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope72 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder71.addScope(scope72);
        org.osiam.client.oauth.Scope[] scopeArray74 = new org.osiam.client.oauth.Scope[] { scope69, scope72 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet75 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet75, scopeArray74);
        boolean boolean77 = scopeSerializer3.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet75);
        boolean boolean78 = scopeSerializer0.isEmpty(serializerProvider2, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet75);
        boolean boolean79 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper80 = null;
        com.fasterxml.jackson.databind.JavaType javaType81 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper80, javaType81);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass83 = scopeSerializer0.handledType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertNotNull(scope9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GET" + "'", str13, "GET");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ME" + "'", str16, "ME");
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PATCH" + "'", str19, "PATCH");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PATCH" + "'", str20, "PATCH");
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GET" + "'", str25, "GET");
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertNotNull(scopeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(accessToken50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(scopeSet52);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(accessToken63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(scopeSet65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(scopeSetClass67);
        org.junit.Assert.assertNotNull(scope72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(scopeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(scopeSetClass83);
    }

    @Test
    public void test06884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06884");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder12.setClientId("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setAuthServerEndpoint("org.osiam.client.exception.NoResultException: authorization_code");
        org.osiam.client.OsiamConnector.Builder builder22 = builder18.setClientSecret("DELETE");
        org.osiam.client.OsiamConnector.Builder builder24 = builder22.setAuthServerEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test06885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06885");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.OsiamConnector.Builder builder11 = builder6.setAuthServerEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector osiamConnector12 = builder6.build();
        org.osiam.client.OsiamConnector.Builder builder13 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder15 = builder13.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder17 = builder15.setClientId("org.osiam.client.exception.ConflictException: org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.OsiamConnector osiamConnector18 = builder17.build();
        org.osiam.client.query.QueryBuilder queryBuilder19 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder21.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.descending("hi!");
        org.osiam.client.query.Query query28 = queryBuilder27.build();
        java.lang.String str29 = query28.toString();
        java.lang.String str30 = query28.getSortOrder();
        java.lang.String str31 = query28.getAttributes();
        int int32 = query28.getCount();
        org.osiam.client.query.QueryBuilder queryBuilder33 = osiamConnector18.createQueryBuilder(query28);
        org.osiam.client.query.QueryBuilder queryBuilder34 = osiamConnector12.createQueryBuilder(query28);
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.addScope(scope38);
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException42 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean43 = scope40.equals((java.lang.Object) invalidAttributeException42);
        java.lang.String str44 = scope40.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder37.addScope(scope40);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope52 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder49.addScope(scope52);
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder49.setRefreshToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken56 = builder55.build();
        java.lang.String str57 = accessToken56.getClientId();
        java.util.Date date58 = accessToken56.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector12.deleteGroup("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!", accessToken56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(osiamConnector12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(osiamConnector18);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(query28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "descending" + "'", str30, "descending");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Authorization" + "'", str31, "Authorization");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "GET" + "'", str44, "GET");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(scope52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(accessToken56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Bearer " + "'", str57, "Bearer ");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test06886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06886");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.resources.scim.Group group4 = null;
        org.osiam.client.AuthService.Builder builder6 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService9 = builder8.build();
        org.osiam.client.AuthService.Builder builder11 = builder8.setClientRedirectUri("PATCH");
        org.osiam.client.AuthService authService12 = builder11.build();
        org.osiam.client.OsiamGroupService.Builder builder14 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService15 = builder14.build();
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        java.util.Date date23 = accessToken22.getExpiresAt();
        java.lang.String str24 = accessToken22.getRefreshToken();
        boolean boolean25 = accessToken22.isClientOnly();
        java.lang.String str26 = osiamGroupService15.extractErrorMessageForbidden(accessToken22);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        boolean boolean34 = accessToken33.isRefreshTokenExpired();
        java.lang.String str35 = accessToken33.getUserId();
        java.lang.String str36 = accessToken33.getToken();
        boolean boolean37 = accessToken33.isExpired();
        java.lang.String str38 = accessToken33.getClientId();
        java.lang.String str39 = accessToken33.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet40 = accessToken33.getScopes();
        java.lang.String str41 = osiamGroupService15.extractErrorMessageForbidden(accessToken33);
        java.util.Date date42 = accessToken33.getExpiresAt();
        java.lang.String str43 = authService12.extractErrorMessageForbidden(accessToken33);
        org.osiam.client.oauth.AccessToken.Builder builder45 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setRefreshTokenExpiresAt(date46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder45.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken50 = builder49.build();
        boolean boolean51 = accessToken50.isRefreshTokenExpired();
        java.lang.String str52 = accessToken50.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder53 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder55 = queryBuilder53.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder57 = queryBuilder55.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder59 = queryBuilder55.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder61 = queryBuilder59.descending("hi!");
        org.osiam.client.query.Query query62 = queryBuilder61.build();
        java.lang.String str63 = query62.toString();
        java.lang.String str64 = query62.getSortOrder();
        java.lang.String str65 = query62.getSortBy();
        java.lang.String str66 = query62.getFilter();
        java.lang.String str67 = query62.getSortOrder();
        java.lang.String str68 = query62.getAttributes();
        boolean boolean69 = accessToken50.equals((java.lang.Object) query62);
        java.lang.String str70 = accessToken50.getToken();
        java.lang.String str71 = accessToken50.getRefreshToken();
        java.lang.String str72 = authService12.extractErrorMessageForbidden(accessToken50);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group73 = osiamGroupService3.createGroup(group4, accessToken50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(authService9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(authService12);
        org.junit.Assert.assertNotNull(osiamGroupService15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Insufficient scopes: []" + "'", str26, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Bearer " + "'", str36, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(scopeSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: []" + "'", str41, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Insufficient scopes: []" + "'", str43, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(accessToken50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(queryBuilder55);
        org.junit.Assert.assertNotNull(queryBuilder57);
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(query62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str63, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "descending" + "'", str64, "descending");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "descending" + "'", str67, "descending");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Authorization" + "'", str68, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Bearer " + "'", str70, "Bearer ");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Insufficient scopes: []" + "'", str72, "Insufficient scopes: []");
    }

    @Test
    public void test06887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06887");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        java.lang.String str15 = accessToken13.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.descending("hi!");
        org.osiam.client.query.Query query25 = queryBuilder24.build();
        java.lang.String str26 = query25.toString();
        java.lang.String str27 = query25.getSortOrder();
        java.lang.String str28 = query25.getSortBy();
        java.lang.String str29 = query25.getFilter();
        java.lang.String str30 = query25.getSortOrder();
        java.lang.String str31 = query25.getAttributes();
        boolean boolean32 = accessToken13.equals((java.lang.Object) query25);
        org.osiam.client.OsiamConnector.Builder builder33 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder35 = builder33.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder37 = builder35.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder39 = builder37.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder41 = builder37.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder43 = builder37.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder45 = builder43.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder47 = builder43.setClientRedirectUri("PUT");
        boolean boolean48 = accessToken13.equals((java.lang.Object) builder47);
        java.lang.String str49 = accessToken13.getClientId();
        java.lang.String str50 = accessToken13.getToken();
        java.lang.String str51 = osiamGroupService4.extractErrorMessageForbidden(accessToken13);
        org.osiam.client.query.QueryBuilder queryBuilder52 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder56 = queryBuilder54.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder58 = queryBuilder54.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder60 = queryBuilder58.descending("hi!");
        org.osiam.client.query.Query query61 = queryBuilder60.build();
        java.lang.String str62 = query61.toString();
        java.lang.String str63 = query61.toString();
        org.osiam.client.query.Query query64 = query61.nextPage();
        java.lang.String str65 = query61.toString();
        org.osiam.client.query.Query query66 = query61.nextPage();
        int int67 = query61.getCount();
        java.lang.String str68 = query61.getFilter();
        org.osiam.client.query.Query query69 = query61.nextPage();
        org.osiam.client.oauth.AccessToken.Builder builder71 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date72 = null;
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder71.setRefreshTokenExpiresAt(date72);
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder71.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken76 = builder75.build();
        java.lang.String str77 = accessToken76.toString();
        java.lang.String str78 = accessToken76.getType();
        boolean boolean79 = accessToken76.isExpired();
        java.lang.String str80 = accessToken76.getToken();
        java.util.Date date81 = accessToken76.getExpiresAt();
        java.lang.String str82 = accessToken76.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult83 = osiamGroupService4.searchResources(query69, accessToken76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(query25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str26, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "descending" + "'", str27, "descending");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "descending" + "'", str30, "descending");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Authorization" + "'", str31, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Bearer " + "'", str50, "Bearer ");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Insufficient scopes: []" + "'", str51, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(queryBuilder56);
        org.junit.Assert.assertNotNull(queryBuilder58);
        org.junit.Assert.assertNotNull(queryBuilder60);
        org.junit.Assert.assertNotNull(query61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str62, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str63, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str65, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(query69);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(accessToken76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str77, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Bearer " + "'", str80, "Bearer ");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
    }

    @Test
    public void test06888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06888");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer7 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer6);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeSetJsonDeserializer5.getEmptyValue();
        boolean boolean9 = scopeSetJsonDeserializer5.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet10 = scopeSetJsonDeserializer5.getEmptyValue();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer11 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer12 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer11);
        boolean boolean13 = scopeSetJsonDeserializer12.isCachable();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer14 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer15 = scopeSetJsonDeserializer12.unwrappingDeserializer(nameTransformer14);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer16 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer17 = scopeSetJsonDeserializer12.unwrappingDeserializer(nameTransformer16);
        java.lang.Class<?> wildcardClass18 = scopeSetJsonDeserializer12.handledType();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer7);
        org.junit.Assert.assertNull(scopeSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(scopeSet10);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer15);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer17);
        org.junit.Assert.assertNull(wildcardClass18);
    }

    @Test
    public void test06889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06889");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getEmptyValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        boolean boolean6 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer7 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer8 = scopeDeserializer0.unwrappingDeserializer(nameTransformer7);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader9 = scopeSetJsonDeserializer8.getObjectIdReader();
        boolean boolean10 = scopeSetJsonDeserializer8.isCachable();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer11 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer12 = scopeSetJsonDeserializer8.unwrappingDeserializer(nameTransformer11);
        java.lang.Class<?> wildcardClass13 = scopeSetJsonDeserializer8.handledType();
        java.lang.Class<?> wildcardClass14 = scopeSetJsonDeserializer8.handledType();
        com.fasterxml.jackson.core.JsonParser jsonParser15 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext16 = null;
        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeserializer17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = scopeSetJsonDeserializer8.deserializeWithType(jsonParser15, deserializationContext16, typeDeserializer17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer8);
        org.junit.Assert.assertNull(objectIdReader9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer12);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(wildcardClass14);
    }

    @Test
    public void test06890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06890");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.resources.scim.Group group3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.addScope(scope6);
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException10 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean11 = scope8.equals((java.lang.Object) invalidAttributeException10);
        java.lang.String str12 = scope8.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder5.addScope(scope8);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder17.setRefreshToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        java.lang.String str25 = accessToken24.getClientId();
        java.lang.String str26 = accessToken24.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group27 = osiamGroupService2.createResource(group3, accessToken24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GET" + "'", str12, "GET");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Bearer " + "'", str25, "Bearer ");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[PATCH, GET, GET POST PUT PATCH DELETE], refreshTokenId=AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]" + "'", str26, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[PATCH, GET, GET POST PUT PATCH DELETE], refreshTokenId=AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]");
    }

    @Test
    public void test06891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06891");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken11 = builder8.build();
        java.util.Date date12 = accessToken11.getExpiresAt();
        java.lang.String str13 = accessToken11.toString();
        boolean boolean14 = accessToken11.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user15 = osiamUserService2.getCurrentUser(accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str13, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test06892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06892");
        org.osiam.client.exception.ConflictException conflictException1 = new org.osiam.client.exception.ConflictException("Query [attributes=Authorization, filter=null, sortBy=AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=], sortOrder=ascending, startIndex=1, count=10]");
    }

    @Test
    public void test06893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06893");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = osiamGroupService4.extractErrorMessageDefault("org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388", statusType6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
    }

    @Test
    public void test06894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06894");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        boolean boolean6 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer7 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader8 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer9 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer10 = scopeDeserializer0.unwrappingDeserializer(nameTransformer9);
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer11 = scopeSetJsonDeserializer10.getDelegatee();
        com.fasterxml.jackson.core.JsonParser jsonParser12 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext13 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer14 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str27 = scope26.toString();
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str30 = scope29.getValue();
        java.lang.String str31 = scope29.getValue();
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException34 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean35 = scope32.equals((java.lang.Object) invalidAttributeException34);
        java.lang.String str36 = scope32.getValue();
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException42 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean43 = scope40.equals((java.lang.Object) invalidAttributeException42);
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.GET;
        boolean boolean48 = scope46.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray50 = new org.osiam.client.oauth.Scope[] { scope19, scope20, scope25, scope26, scope28, scope29, scope32, scope37, scope38, scope39, scope40, scope44, scope45, scope46, scope49 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet51 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet51, scopeArray50);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder16.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet51);
        boolean boolean54 = scopeSerializer14.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet51);
        org.osiam.client.oauth.AccessToken.Builder builder56 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date57 = null;
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.setRefreshTokenExpiresAt(date57);
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder56.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken61 = builder60.build();
        boolean boolean62 = accessToken61.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet63 = accessToken61.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator64 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider65 = null;
        scopeSerializer14.serialize(scopeSet63, jsonGenerator64, serializerProvider65);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider67 = null;
        org.osiam.client.oauth.AccessToken.Builder builder69 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date70 = null;
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder69.setRefreshTokenExpiresAt(date70);
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder69.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken74 = builder73.build();
        boolean boolean75 = accessToken74.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet76 = accessToken74.getScopes();
        boolean boolean77 = scopeSerializer14.isEmpty(serializerProvider67, scopeSet76);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer78 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer79 = scopeSerializer14.unwrappingSerializer(nameTransformer78);
        boolean boolean80 = scopeSerializer14.usesObjectId();
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper81 = null;
        com.fasterxml.jackson.databind.JavaType javaType82 = null;
        scopeSerializer14.acceptJsonFormatVisitor(jsonFormatVisitorWrapper81, javaType82);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider84 = null;
        org.osiam.client.oauth.AccessToken.Builder builder86 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date87 = null;
        org.osiam.client.oauth.AccessToken.Builder builder88 = builder86.setRefreshTokenExpiresAt(date87);
        org.osiam.client.oauth.AccessToken.Builder builder90 = builder86.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken91 = builder90.build();
        boolean boolean92 = accessToken91.isRefreshTokenExpired();
        boolean boolean93 = accessToken91.isClientOnly();
        java.lang.String str94 = accessToken91.getUserId();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken91);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet96 = accessToken91.getScopes();
        boolean boolean97 = scopeSerializer14.isEmpty(serializerProvider84, scopeSet96);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet98 = scopeSetJsonDeserializer10.deserialize(jsonParser12, deserializationContext13, scopeSet96);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Can not update object of type java.util.HashSet (by deserializer of type org.osiam.client.helper.ScopeDeserializer)");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardJsonDeserializer7);
        org.junit.Assert.assertNull(objectIdReader8);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer10);
        org.junit.Assert.assertNull(wildcardJsonDeserializer11);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ME" + "'", str27, "ME");
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PATCH" + "'", str30, "PATCH");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PATCH" + "'", str31, "PATCH");
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GET" + "'", str36, "GET");
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertNotNull(scopeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(accessToken61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(scopeSet63);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(accessToken74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(scopeSet76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(accessToken91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertNotNull(scopeSet96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test06895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06895");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.toString();
        java.lang.String str12 = query9.getFilter();
        int int13 = query9.getCount();
        org.osiam.client.query.Query query14 = query9.nextPage();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str11, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNotNull(query14);
    }

    @Test
    public void test06896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06896");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.lang.String str10 = accessToken9.toString();
        java.lang.String str11 = accessToken9.getType();
        boolean boolean12 = accessToken9.isExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet13 = accessToken9.getScopes();
        java.lang.String str14 = accessToken9.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user15 = osiamUserService2.getCurrentUser(accessToken9);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str10, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(scopeSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str14, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test06897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06897");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.getSortOrder();
        java.lang.String str23 = query20.getSortBy();
        java.lang.String str24 = query20.getFilter();
        java.lang.String str25 = query20.getSortOrder();
        java.lang.String str26 = query20.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder(query20);
        long long28 = query20.getStartIndex();
        org.osiam.client.query.Query query29 = query20.nextPage();
        java.lang.String str30 = query20.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder31 = new org.osiam.client.query.QueryBuilder(query20);
        java.lang.String str32 = query20.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder33 = osiamConnector7.createQueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder34 = osiamConnector7.createQueryBuilder();
        org.osiam.resources.scim.User user36 = null;
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        boolean boolean44 = accessToken43.isRefreshTokenExpired();
        java.lang.String str45 = accessToken43.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.toString();
        java.lang.String str57 = query55.getSortOrder();
        java.lang.String str58 = query55.getSortBy();
        java.lang.String str59 = query55.getFilter();
        java.lang.String str60 = query55.toString();
        boolean boolean61 = accessToken43.equals((java.lang.Object) query55);
        java.lang.String str62 = accessToken43.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user63 = osiamConnector7.replaceUser("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", user36, accessToken43);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "descending" + "'", str22, "descending");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "descending" + "'", str25, "descending");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Authorization" + "'", str26, "Authorization");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(query29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Authorization" + "'", str32, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str56, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "descending" + "'", str57, "descending");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str60, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test06898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06898");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet15 = accessToken12.getScopes();
        java.lang.String str16 = osiamGroupService3.extractErrorMessageForbidden(accessToken12);
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        java.util.Date date24 = accessToken23.getExpiresAt();
        java.lang.String str25 = accessToken23.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken23);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        boolean boolean34 = accessToken33.isRefreshTokenExpired();
        boolean boolean35 = accessToken33.isClientOnly();
        java.lang.String str36 = accessToken33.getClientId();
        boolean boolean37 = accessToken33.isClientOnly();
        boolean boolean38 = accessToken23.equals((java.lang.Object) accessToken33);
        java.lang.String str39 = accessToken33.getUserId();
        boolean boolean40 = accessToken33.isExpired();
        java.lang.String str41 = osiamGroupService3.extractErrorMessageForbidden(accessToken33);
        org.osiam.resources.scim.Group group43 = null;
        org.osiam.client.OsiamGroupService.Builder builder45 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService46 = builder45.build();
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder48.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken53 = builder52.build();
        java.util.Date date54 = accessToken53.getExpiresAt();
        java.lang.String str55 = accessToken53.getUserName();
        java.lang.String str56 = accessToken53.toString();
        java.lang.String str57 = osiamGroupService46.extractErrorMessageForbidden(accessToken53);
        org.osiam.client.oauth.AccessToken.Builder builder59 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date60 = null;
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.setRefreshTokenExpiresAt(date60);
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder59.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken64 = builder63.build();
        java.lang.String str65 = accessToken64.toString();
        java.lang.String str66 = accessToken64.getType();
        boolean boolean67 = accessToken64.isExpired();
        java.util.Date date68 = accessToken64.getExpiresAt();
        boolean boolean69 = accessToken64.isClientOnly();
        java.lang.String str70 = osiamGroupService46.extractErrorMessageForbidden(accessToken64);
        java.lang.String str71 = accessToken64.getRefreshToken();
        java.lang.String str72 = accessToken64.getToken();
        java.util.Date date73 = accessToken64.getExpiresAt();
        boolean boolean74 = accessToken64.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group75 = osiamGroupService3.replaceGroup("Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]", group43, accessToken64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(scopeSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Insufficient scopes: []" + "'", str16, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: []" + "'", str41, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(accessToken53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str56, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Insufficient scopes: []" + "'", str57, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(accessToken64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str65, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Insufficient scopes: []" + "'", str70, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Bearer " + "'", str72, "Bearer ");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test06899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06899");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        long long13 = query9.getStartIndex();
        java.lang.String str14 = query9.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder(query9);
        java.lang.String str16 = query9.getSortOrder();
        int int17 = query9.getCount();
        java.lang.String str18 = query9.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder19 = new org.osiam.client.query.QueryBuilder(query9);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.query.Query query20 = query9.previousPage();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: StartIndex < 1 is not possible.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "descending" + "'", str16, "descending");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Authorization" + "'", str18, "Authorization");
    }

    @Test
    public void test06900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06900");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder12 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder14.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.descending("hi!");
        org.osiam.client.query.Query query21 = queryBuilder20.build();
        java.lang.String str22 = query21.getAttributes();
        long long23 = query21.getStartIndex();
        org.osiam.client.query.Query query24 = query21.nextPage();
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken33 = builder30.build();
        java.lang.String str34 = accessToken33.toString();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet35 = accessToken33.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult36 = osiamConnector7.searchUsers(query21, accessToken33);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Authorization" + "'", str22, "Authorization");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str34, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertNotNull(scopeSet35);
    }

    @Test
    public void test06901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06901");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder11 = builder7.setClientId("org.osiam.client.exception.OsiamClientException: ADMIN");
        org.osiam.client.AuthService authService12 = builder7.build();
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        boolean boolean21 = accessToken20.isRefreshTokenExpired();
        boolean boolean22 = accessToken20.isClientOnly();
        java.lang.String str23 = accessToken20.getRefreshToken();
        boolean boolean24 = accessToken20.isExpired();
        boolean boolean25 = accessToken20.isExpired();
        java.lang.String str26 = accessToken20.toString();
        java.lang.String str27 = accessToken20.getUserId();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken20);
        boolean boolean29 = accessToken20.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            authService12.revokeAllAccessTokens("org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken20);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(authService12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str26, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test06902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06902");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientId("Bearer ");
        org.osiam.client.OsiamConnector osiamConnector15 = builder14.build();
        org.osiam.client.OsiamConnector.Builder builder17 = builder14.setClientId("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test06903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06903");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        boolean boolean1 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer3 = scopeDeserializer0.unwrappingDeserializer(nameTransformer2);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader4 = scopeSetJsonDeserializer3.getObjectIdReader();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeSetJsonDeserializer3.getObjectIdReader();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeSetJsonDeserializer3.getEmptyValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet7 = scopeSetJsonDeserializer3.getEmptyValue();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer3);
        org.junit.Assert.assertNull(objectIdReader4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertNull(scopeSet6);
        org.junit.Assert.assertNull(scopeSet7);
    }

    @Test
    public void test06904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06904");
        org.osiam.client.exception.NoResultException noResultException2 = new org.osiam.client.exception.NoResultException("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.exception.OsiamClientException osiamClientException3 = new org.osiam.client.exception.OsiamClientException("Query [attributes=org.osiam.client.exception.OsiamRequestException: hi!, filter=null, sortBy=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], sortOrder=descending, startIndex=1, count=10]", (java.lang.Throwable) noResultException2);
    }

    @Test
    public void test06905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06905");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector.Builder builder12 = builder2.setEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector osiamConnector13 = builder2.build();
        org.osiam.client.OsiamConnector.Builder builder14 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector19 = builder18.build();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        java.lang.String str28 = accessToken26.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder29 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder31.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.descending("hi!");
        org.osiam.client.query.Query query38 = queryBuilder37.build();
        java.lang.String str39 = query38.toString();
        java.lang.String str40 = query38.getSortOrder();
        java.lang.String str41 = query38.getSortBy();
        java.lang.String str42 = query38.getFilter();
        java.lang.String str43 = query38.toString();
        boolean boolean44 = accessToken26.equals((java.lang.Object) query38);
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector19.createQueryBuilder(query38);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.getAttributes();
        java.lang.String str57 = query55.toString();
        java.lang.String str58 = query55.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder59 = osiamConnector19.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder60 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder62 = queryBuilder60.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder62.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder66 = queryBuilder64.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query67 = queryBuilder64.build();
        org.osiam.client.query.QueryBuilder queryBuilder68 = osiamConnector19.createQueryBuilder(query67);
        java.lang.String str69 = query67.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder70 = osiamConnector13.createQueryBuilder(query67);
        org.osiam.client.query.QueryBuilder queryBuilder71 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder73 = queryBuilder71.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder75 = queryBuilder73.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder77 = queryBuilder73.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder79 = queryBuilder77.descending("hi!");
        org.osiam.client.query.Query query80 = queryBuilder79.build();
        java.lang.String str81 = query80.getAttributes();
        java.lang.String str82 = query80.toString();
        java.lang.String str83 = query80.getSortOrder();
        java.lang.String str84 = query80.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder85 = osiamConnector13.createQueryBuilder(query80);
        org.osiam.client.oauth.AccessToken accessToken86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user87 = osiamConnector13.getCurrentUser(accessToken86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(query38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str39, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "descending" + "'", str40, "descending");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Authorization" + "'", str56, "Authorization");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str57, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "descending" + "'", str58, "descending");
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertNotNull(query67);
        org.junit.Assert.assertNotNull(queryBuilder68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(queryBuilder70);
        org.junit.Assert.assertNotNull(queryBuilder73);
        org.junit.Assert.assertNotNull(queryBuilder75);
        org.junit.Assert.assertNotNull(queryBuilder77);
        org.junit.Assert.assertNotNull(queryBuilder79);
        org.junit.Assert.assertNotNull(query80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Authorization" + "'", str81, "Authorization");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str82, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "descending" + "'", str83, "descending");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Authorization" + "'", str84, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder85);
    }

    @Test
    public void test06906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06906");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Bearer ");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.resources.scim.User user7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        java.util.Date date15 = accessToken14.getExpiresAt();
        java.lang.String str16 = accessToken14.getRefreshToken();
        java.lang.String str17 = accessToken14.getType();
        java.lang.String str18 = accessToken14.getClientId();
        java.lang.String str19 = accessToken14.getUserName();
        java.lang.String str20 = accessToken14.toString();
        java.lang.String str21 = accessToken14.getClientId();
        java.lang.String str22 = accessToken14.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user23 = osiamUserService5.replaceUser("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=GET, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=Cannot connect to server, userName=Authorization]", user7, accessToken14);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str20, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str22, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test06907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06907");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder13 = new org.osiam.client.query.QueryBuilder(query9);
        java.lang.String str14 = query9.toString();
        java.lang.String str15 = query9.toString();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        org.osiam.client.query.Query query18 = query17.nextPage();
        java.lang.String str19 = query17.getAttributes();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str15, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertNotNull(query18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Authorization" + "'", str19, "Authorization");
    }

    @Test
    public void test06908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06908");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.OsiamConnector osiamConnector8 = builder6.build();
        org.osiam.client.AuthService.Builder builder12 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientId("ME");
        org.osiam.client.AuthService.Builder builder16 = builder14.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder18 = builder16.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientRedirectUri("Cannot connect to server");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientRedirectUri("hi!");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientId("Cannot connect to server");
        org.osiam.client.AuthService.Builder builder26 = builder24.setClientRedirectUri("2024-03-22T13:51:20.388");
        org.osiam.client.AuthService authService27 = builder24.build();
        org.osiam.client.AuthService.Builder builder29 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder31 = builder29.setClientId("ME");
        org.osiam.client.AuthService.Builder builder33 = builder31.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder35 = builder33.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder37 = builder35.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService38 = builder37.build();
        org.osiam.client.oauth.AccessToken.Builder builder40 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date41 = null;
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setRefreshTokenExpiresAt(date41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder40.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken45 = builder44.build();
        boolean boolean46 = accessToken45.isRefreshTokenExpired();
        java.lang.String str47 = accessToken45.getUserId();
        java.lang.String str48 = accessToken45.getToken();
        java.lang.String str49 = authService38.extractErrorMessageForbidden(accessToken45);
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str51 = scope50.getValue();
        java.lang.String str52 = scope50.toString();
        org.osiam.client.oauth.Scope scope53 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray54 = new org.osiam.client.oauth.Scope[] { scope50, scope53 };
        java.net.URI uRI55 = authService38.getAuthorizationUri(scopeArray54);
        org.osiam.client.oauth.AccessToken.Builder builder57 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date58 = null;
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setRefreshTokenExpiresAt(date58);
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder57.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder61.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken64 = builder61.build();
        java.lang.String str65 = accessToken64.getRefreshToken();
        java.lang.String str66 = authService38.extractErrorMessageForbidden(accessToken64);
        org.osiam.client.AuthService.Builder builder68 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder70 = builder68.setClientId("ME");
        org.osiam.client.AuthService.Builder builder72 = builder70.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder74 = builder72.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder76 = builder74.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder78 = builder74.setClientId("");
        org.osiam.client.AuthService.Builder builder80 = builder74.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService81 = builder80.build();
        org.osiam.client.oauth.Scope scope83 = new org.osiam.client.oauth.Scope("");
        java.lang.String str84 = scope83.getValue();
        org.osiam.client.oauth.Scope scope86 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.Scope[] scopeArray87 = new org.osiam.client.oauth.Scope[] { scope83, scope86 };
        java.net.URI uRI88 = authService81.getAuthorizationUri(scopeArray87);
        java.net.URI uRI89 = authService38.getAuthorizationUri(scopeArray87);
        java.net.URI uRI90 = authService27.getAuthorizationUri(scopeArray87);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken91 = osiamConnector8.retrieveAccessToken("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", "org.osiam.client.exception.ForbiddenException: hi!", scopeArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(osiamConnector8);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(authService27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(authService38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(accessToken45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Bearer " + "'", str48, "Bearer ");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Insufficient scopes: []" + "'", str49, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PATCH" + "'", str51, "PATCH");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PATCH" + "'", str52, "PATCH");
        org.junit.Assert.assertNotNull(scope53);
        org.junit.Assert.assertNotNull(scopeArray54);
        org.junit.Assert.assertNotNull(uRI55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(accessToken64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Insufficient scopes: []" + "'", str66, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(authService81);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(scopeArray87);
        org.junit.Assert.assertNotNull(uRI88);
        org.junit.Assert.assertNotNull(uRI89);
        org.junit.Assert.assertNotNull(uRI90);
    }

    @Test
    public void test06909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06909");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.toString();
        java.lang.String str23 = query20.toString();
        int int24 = query20.getCount();
        long long25 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder26 = osiamConnector7.createQueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        org.osiam.client.query.Query query37 = queryBuilder35.build();
        java.lang.String str38 = query37.getSortBy();
        java.lang.String str39 = query37.getFilter();
        int int40 = query37.getCount();
        long long41 = query37.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder42 = osiamConnector7.createQueryBuilder(query37);
        org.osiam.client.query.QueryBuilder queryBuilder43 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder45.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder45.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder49.descending("hi!");
        org.osiam.client.query.Query query52 = queryBuilder51.build();
        java.lang.String str53 = query52.toString();
        java.lang.String str54 = query52.getSortOrder();
        java.lang.String str55 = query52.getSortBy();
        java.lang.String str56 = query52.getFilter();
        java.lang.String str57 = query52.getSortOrder();
        java.lang.String str58 = query52.getAttributes();
        java.lang.String str59 = query52.getAttributes();
        org.osiam.client.query.Query query60 = query52.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder61 = osiamConnector7.createQueryBuilder(query52);
        org.osiam.client.query.QueryBuilder queryBuilder62 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder62.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder66 = queryBuilder64.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder68 = queryBuilder64.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder70 = queryBuilder68.descending("hi!");
        org.osiam.client.query.Query query71 = queryBuilder70.build();
        java.lang.String str72 = query71.toString();
        java.lang.String str73 = query71.getSortOrder();
        java.lang.String str74 = query71.getSortBy();
        long long75 = query71.getStartIndex();
        java.lang.String str76 = query71.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder77 = new org.osiam.client.query.QueryBuilder(query71);
        java.lang.String str78 = query71.getSortOrder();
        int int79 = query71.getCount();
        java.lang.String str80 = query71.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder81 = new org.osiam.client.query.QueryBuilder(query71);
        org.osiam.client.query.QueryBuilder queryBuilder82 = osiamConnector7.createQueryBuilder(query71);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken84 = osiamConnector7.retrieveAccessToken("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertNotNull(query37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(query52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str53, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "descending" + "'", str54, "descending");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "descending" + "'", str57, "descending");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Authorization" + "'", str58, "Authorization");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Authorization" + "'", str59, "Authorization");
        org.junit.Assert.assertNotNull(query60);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertNotNull(queryBuilder68);
        org.junit.Assert.assertNotNull(queryBuilder70);
        org.junit.Assert.assertNotNull(query71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str72, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "descending" + "'", str73, "descending");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "descending" + "'", str78, "descending");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Authorization" + "'", str80, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder82);
    }

    @Test
    public void test06910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06910");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector.Builder builder12 = builder2.setEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector osiamConnector13 = builder2.build();
        org.osiam.client.OsiamConnector.Builder builder14 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector19 = builder18.build();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        java.lang.String str28 = accessToken26.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder29 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder31.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.descending("hi!");
        org.osiam.client.query.Query query38 = queryBuilder37.build();
        java.lang.String str39 = query38.toString();
        java.lang.String str40 = query38.getSortOrder();
        java.lang.String str41 = query38.getSortBy();
        java.lang.String str42 = query38.getFilter();
        java.lang.String str43 = query38.toString();
        boolean boolean44 = accessToken26.equals((java.lang.Object) query38);
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector19.createQueryBuilder(query38);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.getAttributes();
        java.lang.String str57 = query55.toString();
        java.lang.String str58 = query55.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder59 = osiamConnector19.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder60 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder62 = queryBuilder60.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder62.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder66 = queryBuilder64.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query67 = queryBuilder64.build();
        org.osiam.client.query.QueryBuilder queryBuilder68 = osiamConnector19.createQueryBuilder(query67);
        java.lang.String str69 = query67.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder70 = osiamConnector13.createQueryBuilder(query67);
        org.osiam.client.query.QueryBuilder queryBuilder71 = osiamConnector13.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder72 = osiamConnector13.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder73 = osiamConnector13.createQueryBuilder();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken75 = osiamConnector13.retrieveAccessToken("org.osiam.client.exception.OsiamRequestException: descending");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(query38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str39, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "descending" + "'", str40, "descending");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Authorization" + "'", str56, "Authorization");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str57, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "descending" + "'", str58, "descending");
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertNotNull(query67);
        org.junit.Assert.assertNotNull(queryBuilder68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(queryBuilder70);
        org.junit.Assert.assertNotNull(queryBuilder71);
        org.junit.Assert.assertNotNull(queryBuilder72);
        org.junit.Assert.assertNotNull(queryBuilder73);
    }

    @Test
    public void test06911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06911");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken8 = builder7.build();
        java.lang.String str9 = accessToken8.toString();
        java.lang.String str10 = accessToken8.getUserId();
        java.lang.String str11 = accessToken8.getToken();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService3.deleteGroup("", accessToken8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(accessToken8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str9, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "client_credentials" + "'", str11, "client_credentials");
    }

    @Test
    public void test06912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06912");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388");
    }

    @Test
    public void test06913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06913");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer7 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer8 = scopeDeserializer0.unwrappingDeserializer(nameTransformer7);
        java.lang.Class<?> wildcardClass9 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader10 = scopeDeserializer0.getObjectIdReader();
        java.util.Collection<java.lang.Object> objCollection11 = scopeDeserializer0.getKnownPropertyNames();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty13 = scopeDeserializer0.findBackReference("org.osiam.client.exception.UnauthorizedException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'org.osiam.client.exception.UnauthorizedException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(objectIdReader10);
        org.junit.Assert.assertNull(objCollection11);
    }

    @Test
    public void test06914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06914");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setClientId("ME");
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder5.setUserId("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        java.lang.String str13 = accessToken12.getClientId();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
    }

    @Test
    public void test06915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06915");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getUserName();
        java.lang.String str12 = accessToken9.toString();
        java.lang.String str13 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        boolean boolean23 = accessToken21.isClientOnly();
        java.lang.String str24 = accessToken21.getClientId();
        java.lang.String str25 = accessToken21.getUserId();
        java.lang.String str26 = accessToken21.getClientId();
        java.lang.String str27 = accessToken21.getRefreshToken();
        java.lang.String str28 = osiamGroupService2.extractErrorMessageForbidden(accessToken21);
        org.osiam.client.AuthService.Builder builder30 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder32 = builder30.setClientId("ME");
        org.osiam.client.AuthService.Builder builder34 = builder32.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService35 = builder34.build();
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken42 = builder41.build();
        boolean boolean43 = accessToken42.isRefreshTokenExpired();
        boolean boolean44 = accessToken42.isClientOnly();
        java.lang.String str45 = accessToken42.getClientId();
        java.lang.String str46 = authService35.extractErrorMessageForbidden(accessToken42);
        boolean boolean47 = accessToken42.isExpired();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken42);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList49 = osiamGroupService2.getAllGroups(accessToken42);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str12, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Insufficient scopes: []" + "'", str13, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Insufficient scopes: []" + "'", str28, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(authService35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Insufficient scopes: []" + "'", str46, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test06916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06916");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("refresh_token");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.util.Date date11 = accessToken10.getExpiresAt();
        java.lang.String str12 = accessToken10.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.deleteGroup("PUT", accessToken10);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test06917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06917");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer7 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer8 = scopeSetJsonDeserializer6.unwrappingDeserializer(nameTransformer7);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = scopeSetJsonDeserializer8.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader10 = scopeSetJsonDeserializer8.getObjectIdReader();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = scopeSetJsonDeserializer8.getEmptyValue();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty13 = scopeSetJsonDeserializer8.findBackReference("Query [attributes=Authorization, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=10]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'Query [attributes=Authorization, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=10]': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer8);
        org.junit.Assert.assertNull(scopeSet9);
        org.junit.Assert.assertNull(objectIdReader10);
        org.junit.Assert.assertNull(scopeSet11);
    }

    @Test
    public void test06918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06918");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.OsiamGroupService.Builder builder8 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken16.getScopes();
        java.lang.String str19 = osiamGroupService9.extractErrorMessageForbidden(accessToken16);
        boolean boolean20 = accessToken16.isClientOnly();
        java.lang.String str21 = authService6.extractErrorMessageForbidden(accessToken16);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken30 = builder27.build();
        java.lang.String str31 = accessToken30.toString();
        java.lang.String str32 = authService6.extractErrorMessageForbidden(accessToken30);
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        java.util.Date date40 = accessToken39.getExpiresAt();
        java.lang.String str41 = accessToken39.getRefreshToken();
        java.lang.String str42 = accessToken39.getType();
        java.lang.String str43 = accessToken39.getClientId();
        java.lang.String str44 = accessToken39.getUserName();
        java.lang.String str45 = authService6.extractErrorMessageForbidden(accessToken39);
        org.osiam.client.oauth.AccessToken.Builder builder47 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date48 = null;
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.setRefreshTokenExpiresAt(date48);
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder47.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken52 = builder51.build();
        boolean boolean53 = accessToken52.isRefreshTokenExpired();
        java.lang.String str54 = accessToken52.getUserId();
        java.lang.String str55 = authService6.extractErrorMessageForbidden(accessToken52);
        org.osiam.client.oauth.AccessToken.Builder builder57 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date58 = null;
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setRefreshTokenExpiresAt(date58);
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder57.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken62 = builder61.build();
        boolean boolean63 = accessToken62.isRefreshTokenExpired();
        java.lang.String str64 = accessToken62.getUserId();
        java.lang.String str65 = accessToken62.getClientId();
        boolean boolean66 = accessToken62.isClientOnly();
        java.lang.String str67 = accessToken62.getClientId();
        java.lang.String str68 = authService6.extractErrorMessageForbidden(accessToken62);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken70 = authService6.retrieveAccessToken("Insufficient scopes: [GET, GET POST PUT PATCH DELETE]");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str31, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Insufficient scopes: []" + "'", str45, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(accessToken52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Insufficient scopes: []" + "'", str55, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(accessToken62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Insufficient scopes: []" + "'", str68, "Insufficient scopes: []");
    }

    @Test
    public void test06919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06919");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.toString();
        java.lang.String str23 = query20.toString();
        int int24 = query20.getCount();
        long long25 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder26 = osiamConnector7.createQueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        org.osiam.client.query.Query query37 = queryBuilder35.build();
        java.lang.String str38 = query37.getSortBy();
        java.lang.String str39 = query37.getFilter();
        int int40 = query37.getCount();
        long long41 = query37.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder42 = osiamConnector7.createQueryBuilder(query37);
        org.osiam.client.query.QueryBuilder queryBuilder43 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder45.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder45.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder49.descending("hi!");
        org.osiam.client.query.Query query52 = queryBuilder51.build();
        java.lang.String str53 = query52.toString();
        java.lang.String str54 = query52.toString();
        org.osiam.client.query.Query query55 = query52.nextPage();
        java.lang.String str56 = query52.toString();
        org.osiam.client.query.Query query57 = query52.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder58 = osiamConnector7.createQueryBuilder(query57);
        org.osiam.client.oauth.AccessToken.Builder builder61 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date62 = null;
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder61.setRefreshTokenExpiresAt(date62);
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder61.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder65.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken68 = builder65.build();
        java.util.Date date69 = accessToken68.getExpiresAt();
        java.lang.String str70 = accessToken68.toString();
        java.lang.String str71 = accessToken68.toString();
        boolean boolean72 = accessToken68.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector7.deleteUser("Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]", accessToken68);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertNotNull(query37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(query52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str53, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str54, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str56, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query57);
        org.junit.Assert.assertNotNull(queryBuilder58);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(accessToken68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str70, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str71, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test06920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06920");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count((int) (short) 0);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder4.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder4.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.ascending("password");
        org.osiam.client.query.Query query13 = queryBuilder10.build();
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder10.startIndex(0L);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder10.attributes("ascending");
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.startIndex((long) (byte) 10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.attributes("org.osiam.client.exception.InvalidAttributeException: authorization_code");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
    }

    @Test
    public void test06921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06921");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientId("org.osiam.client.exception.ConflictException: org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientId("Bearer ");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("org.osiam.client.exception.NoResultException: org.osiam.client.exception.ConnectionInitializationException: descending");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.OsiamConnector.Builder builder10 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector19 = builder16.build();
        org.osiam.client.OsiamConnector.Builder builder21 = builder16.setAuthServerEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder23 = builder21.setClientId("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector osiamConnector24 = builder21.build();
        org.osiam.client.AuthService.Builder builder26 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder28 = builder26.setClientId("ME");
        org.osiam.client.AuthService.Builder builder30 = builder28.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder32 = builder30.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder34 = builder32.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService35 = builder34.build();
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken42 = builder41.build();
        boolean boolean43 = accessToken42.isRefreshTokenExpired();
        java.lang.String str44 = accessToken42.getUserId();
        java.lang.String str45 = accessToken42.getToken();
        java.lang.String str46 = authService35.extractErrorMessageForbidden(accessToken42);
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str48 = scope47.getValue();
        java.lang.String str49 = scope47.toString();
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray51 = new org.osiam.client.oauth.Scope[] { scope47, scope50 };
        java.net.URI uRI52 = authService35.getAuthorizationUri(scopeArray51);
        java.net.URI uRI53 = osiamConnector24.getAuthorizationUri(scopeArray51);
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI54 = osiamConnector9.getAuthorizationUri(scopeArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Can't create the login uri: redirect URI was not set.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(osiamConnector24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(authService35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Bearer " + "'", str45, "Bearer ");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Insufficient scopes: []" + "'", str46, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PATCH" + "'", str48, "PATCH");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PATCH" + "'", str49, "PATCH");
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertNotNull(scopeArray51);
        org.junit.Assert.assertNotNull(uRI52);
        org.junit.Assert.assertNotNull(uRI53);
    }

    @Test
    public void test06922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06922");
        org.osiam.client.exception.OsiamRequestException osiamRequestException2 = new org.osiam.client.exception.OsiamRequestException(404, "org.osiam.client.exception.ForbiddenException: DELETE");
    }

    @Test
    public void test06923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06923");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder12.setClientRedirectUri("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector23 = builder22.build();
        org.osiam.client.query.QueryBuilder queryBuilder24 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.Query query25 = queryBuilder24.build();
        java.lang.String str26 = query25.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder27 = osiamConnector23.createQueryBuilder(query25);
        org.osiam.client.query.QueryBuilder queryBuilder28 = osiamConnector23.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken36 = builder35.build();
        java.util.Date date37 = accessToken36.getExpiresAt();
        java.lang.String str38 = accessToken36.getUserName();
        java.lang.String str39 = accessToken36.getUserName();
        org.osiam.client.oauth.AccessToken.Builder builder41 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date42 = null;
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setRefreshTokenExpiresAt(date42);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder41.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken46 = builder45.build();
        boolean boolean47 = accessToken46.isRefreshTokenExpired();
        java.lang.String str48 = accessToken46.getClientId();
        boolean boolean49 = accessToken36.equals((java.lang.Object) accessToken46);
        java.lang.String str50 = accessToken46.getUserId();
        boolean boolean51 = accessToken46.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken46);
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector23.deleteUser("org.osiam.client.exception.InvalidAttributeException: refresh_token", accessToken46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(osiamConnector23);
        org.junit.Assert.assertNotNull(query25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(accessToken36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(accessToken46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test06924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06924");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.core.Response.StatusType statusType15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = osiamGroupService2.extractErrorMessage("", statusType15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Insufficient scopes: []" + "'", str13, "Insufficient scopes: []");
    }

    @Test
    public void test06925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06925");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService4 = builder3.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.util.Date date12 = accessToken11.getExpiresAt();
        java.lang.String str13 = accessToken11.getRefreshToken();
        java.lang.String str14 = accessToken11.getType();
        java.lang.String str15 = accessToken11.getClientId();
        java.lang.String str16 = accessToken11.getUserName();
        java.lang.String str17 = accessToken11.toString();
        java.lang.String str18 = accessToken11.getUserName();
        java.lang.String str19 = authService4.extractErrorMessageForbidden(accessToken11);
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        java.util.Date date27 = accessToken26.getExpiresAt();
        java.lang.String str28 = accessToken26.getRefreshToken();
        boolean boolean29 = accessToken26.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken26);
        java.lang.String str31 = authService4.extractErrorMessageForbidden(accessToken26);
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date34 = null;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder33.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken38 = builder37.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken38);
        java.util.Date date40 = accessToken38.getExpiresAt();
        boolean boolean41 = accessToken38.isClientOnly();
        boolean boolean42 = accessToken38.isClientOnly();
        java.lang.String str43 = authService4.extractErrorMessageForbidden(accessToken38);
        org.osiam.client.oauth.AccessToken.Builder builder46 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.addScope(scope47);
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException51 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean52 = scope49.equals((java.lang.Object) invalidAttributeException51);
        java.lang.String str53 = scope49.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder46.addScope(scope49);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder60.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder60.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken65 = builder64.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken65);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken65);
        boolean boolean68 = accessToken65.isExpired();
        java.lang.String str69 = accessToken65.getClientId();
        java.lang.String str70 = accessToken65.getType();
        // The following exception was thrown during execution in test generation
        try {
            authService4.revokeAllAccessTokens("org.osiam.client.exception.UnauthorizedException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(authService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str17, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Insufficient scopes: []" + "'", str31, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Insufficient scopes: []" + "'", str43, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "GET" + "'", str53, "GET");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(accessToken65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Bearer " + "'", str69, "Bearer ");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
    }

    @Test
    public void test06926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06926");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet62 = accessToken60.getScopes();
        boolean boolean63 = scopeSerializer0.isEmpty(serializerProvider53, scopeSet62);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass64 = scopeSerializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer65 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer66 = scopeSerializer0.unwrappingSerializer(nameTransformer65);
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer67 = scopeSerializer0.getDelegatee();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass68 = scopeSerializer0.handledType();
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer69 = scopeSerializer0.getDelegatee();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer70 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer71 = scopeSerializer0.unwrappingSerializer(nameTransformer70);
        boolean boolean72 = scopeSetJsonSerializer71.isUnwrappingSerializer();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(scopeSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(scopeSetClass64);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer66);
        org.junit.Assert.assertNull(wildcardJsonSerializer67);
        org.junit.Assert.assertNull(scopeSetClass68);
        org.junit.Assert.assertNull(wildcardJsonSerializer69);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test06927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06927");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService3.targetEndpoint;
        org.osiam.client.AuthService.Builder builder16 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder18 = builder16.setClientId("ME");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService21 = builder20.build();
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        boolean boolean29 = accessToken28.isRefreshTokenExpired();
        boolean boolean30 = accessToken28.isClientOnly();
        java.lang.String str31 = accessToken28.getClientId();
        java.lang.String str32 = authService21.extractErrorMessageForbidden(accessToken28);
        java.lang.String str33 = accessToken28.getUserId();
        java.lang.String str34 = accessToken28.getClientId();
        java.lang.String str35 = osiamGroupService3.extractErrorMessageForbidden(accessToken28);
        org.osiam.resources.scim.Group group37 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date40 = null;
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setRefreshTokenExpiresAt(date40);
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder39.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken44 = builder43.build();
        boolean boolean45 = accessToken44.isRefreshTokenExpired();
        boolean boolean46 = accessToken44.isClientOnly();
        java.lang.String str47 = accessToken44.getRefreshToken();
        boolean boolean48 = accessToken44.isExpired();
        boolean boolean49 = accessToken44.isExpired();
        boolean boolean50 = accessToken44.isClientOnly();
        java.util.Date date51 = accessToken44.getExpiresAt();
        java.util.Date date52 = accessToken44.getExpiresAt();
        java.util.Date date53 = accessToken44.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group54 = osiamGroupService3.updateResource("Insufficient scopes: [GET, GET POST PUT PATCH DELETE]", group37, accessToken44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(authService21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(accessToken44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test06928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06928");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        java.util.Date date13 = accessToken12.getExpiresAt();
        java.lang.String str14 = accessToken12.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        boolean boolean23 = accessToken22.isRefreshTokenExpired();
        boolean boolean24 = accessToken22.isClientOnly();
        java.lang.String str25 = accessToken22.getClientId();
        boolean boolean26 = accessToken22.isClientOnly();
        boolean boolean27 = accessToken12.equals((java.lang.Object) accessToken22);
        org.osiam.client.query.QueryBuilder queryBuilder28 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder32 = queryBuilder30.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder30.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.descending("hi!");
        org.osiam.client.query.Query query37 = queryBuilder36.build();
        org.osiam.client.query.Query query38 = queryBuilder36.build();
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder36.ascending("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        boolean boolean41 = accessToken12.equals((java.lang.Object) "org.osiam.client.exception.ConnectionInitializationException: PATCH");
        java.lang.String str42 = accessToken12.getRefreshToken();
        java.util.Date date43 = accessToken12.getRefreshTokenExpiresAt();
        boolean boolean44 = accessToken12.isClientOnly();
        boolean boolean45 = accessToken12.isClientOnly();
        java.util.Date date46 = accessToken12.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group47 = osiamGroupService3.getResource("authorization_code", accessToken12);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(query37);
        org.junit.Assert.assertNotNull(query38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test06929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06929");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder7 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder7.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet17 = accessToken15.getScopes();
        java.lang.String str18 = osiamGroupService8.extractErrorMessageForbidden(accessToken15);
        boolean boolean19 = accessToken15.isClientOnly();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet20 = accessToken15.getScopes();
        java.lang.String str21 = accessToken15.getToken();
        java.lang.String str22 = osiamGroupService3.extractErrorMessageForbidden(accessToken15);
        javax.ws.rs.core.Response.StatusType statusType24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = osiamGroupService3.extractErrorMessageUnauthorized("org.osiam.client.exception.ConnectionInitializationException: PATCH", statusType24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(scopeSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(scopeSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Bearer " + "'", str21, "Bearer ");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Insufficient scopes: []" + "'", str22, "Insufficient scopes: []");
    }

    @Test
    public void test06930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06930");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.util.Date date12 = accessToken10.getExpiresAt();
        org.osiam.client.query.QueryBuilder queryBuilder13 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.descending("hi!");
        org.osiam.client.query.Query query22 = queryBuilder21.build();
        java.lang.String str23 = query22.toString();
        java.lang.String str24 = query22.getSortOrder();
        org.osiam.client.query.Query query25 = query22.nextPage();
        boolean boolean26 = accessToken10.equals((java.lang.Object) query22);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setClientId("ME");
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder32.setUserId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshToken("DELETE");
        org.osiam.client.oauth.AccessToken accessToken41 = builder40.build();
        java.lang.String str42 = accessToken41.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult43 = osiamGroupService3.searchGroups(query22, accessToken41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(query22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "descending" + "'", str24, "descending");
        org.junit.Assert.assertNotNull(query25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(accessToken41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "DELETE" + "'", str42, "DELETE");
    }

    @Test
    public void test06931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06931");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder6 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder6.build();
        javax.ws.rs.client.WebTarget webTarget8 = osiamGroupService7.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder10 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService11 = builder10.build();
        org.osiam.client.OsiamGroupService osiamGroupService12 = builder10.build();
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken19);
        java.lang.String str21 = osiamGroupService12.extractErrorMessageForbidden(accessToken19);
        java.util.Date date22 = accessToken19.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken19);
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean25 = accessToken19.equals((java.lang.Object) scope24);
        java.lang.String str26 = accessToken19.getRefreshToken();
        java.lang.String str27 = accessToken19.getToken();
        java.lang.String str28 = accessToken19.getUserId();
        java.lang.String str29 = osiamGroupService7.extractErrorMessageForbidden(accessToken19);
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken38 = builder35.build();
        java.util.Date date39 = accessToken38.getExpiresAt();
        java.lang.String str40 = accessToken38.getClientId();
        java.lang.String str41 = accessToken38.getType();
        java.lang.String str42 = osiamGroupService7.extractErrorMessageForbidden(accessToken38);
        java.lang.String str43 = osiamGroupService3.extractErrorMessageForbidden(accessToken38);
        org.osiam.client.oauth.AccessToken.Builder builder46 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date47 = null;
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.setRefreshTokenExpiresAt(date47);
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder46.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken51 = builder50.build();
        boolean boolean52 = accessToken51.isRefreshTokenExpired();
        java.lang.String str53 = accessToken51.getUserId();
        java.lang.String str54 = accessToken51.getToken();
        boolean boolean55 = accessToken51.isExpired();
        java.lang.String str56 = accessToken51.getClientId();
        java.lang.String str57 = accessToken51.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet58 = accessToken51.getScopes();
        java.lang.String str59 = accessToken51.getType();
        java.lang.String str60 = accessToken51.getType();
        java.lang.String str61 = accessToken51.getType();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService3.deleteGroup("Query [attributes=org.osiam.client.exception.OsiamRequestException: hi!, filter=null, sortBy=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], sortOrder=descending, startIndex=1, count=10]", accessToken51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(webTarget8);
        org.junit.Assert.assertNotNull(osiamGroupService11);
        org.junit.Assert.assertNotNull(osiamGroupService12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Bearer " + "'", str27, "Bearer ");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Insufficient scopes: []" + "'", str29, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Insufficient scopes: []" + "'", str42, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Insufficient scopes: []" + "'", str43, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(accessToken51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Bearer " + "'", str54, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(scopeSet58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }

    @Test
    public void test06932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06932");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.AuthService.Builder builder13 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder17 = builder15.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder19 = builder17.setClientSecret("");
        org.osiam.client.AuthService.Builder builder21 = builder19.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService authService22 = builder19.build();
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken29 = builder28.build();
        boolean boolean30 = accessToken29.isRefreshTokenExpired();
        java.lang.String str31 = accessToken29.getUserName();
        org.osiam.client.helper.ScopeSerializer scopeSerializer32 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException40 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean41 = scope38.equals((java.lang.Object) invalidAttributeException40);
        java.lang.String str42 = scope38.getValue();
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str45 = scope44.toString();
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str48 = scope47.getValue();
        java.lang.String str49 = scope47.getValue();
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException52 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean53 = scope50.equals((java.lang.Object) invalidAttributeException52);
        java.lang.String str54 = scope50.getValue();
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope56 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope57 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope58 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException60 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean61 = scope58.equals((java.lang.Object) invalidAttributeException60);
        org.osiam.client.oauth.Scope scope62 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope63 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope64 = org.osiam.client.oauth.Scope.GET;
        boolean boolean66 = scope64.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope67 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray68 = new org.osiam.client.oauth.Scope[] { scope37, scope38, scope43, scope44, scope46, scope47, scope50, scope55, scope56, scope57, scope58, scope62, scope63, scope64, scope67 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet69 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet69, scopeArray68);
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder34.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet69);
        boolean boolean72 = scopeSerializer32.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet69);
        org.osiam.client.oauth.AccessToken.Builder builder74 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date75 = null;
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder74.setRefreshTokenExpiresAt(date75);
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder74.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken79 = builder78.build();
        boolean boolean80 = accessToken79.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet81 = accessToken79.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator82 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider83 = null;
        scopeSerializer32.serialize(scopeSet81, jsonGenerator82, serializerProvider83);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider85 = null;
        org.osiam.client.oauth.AccessToken.Builder builder87 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date88 = null;
        org.osiam.client.oauth.AccessToken.Builder builder89 = builder87.setRefreshTokenExpiresAt(date88);
        org.osiam.client.oauth.AccessToken.Builder builder91 = builder87.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken92 = builder91.build();
        boolean boolean93 = accessToken92.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet94 = accessToken92.getScopes();
        boolean boolean95 = scopeSerializer32.isEmpty(serializerProvider85, scopeSet94);
        boolean boolean96 = accessToken29.equals((java.lang.Object) scopeSerializer32);
        java.lang.String str97 = authService22.extractErrorMessageForbidden(accessToken29);
        // The following exception was thrown during execution in test generation
        try {
            authService10.revokeAllAccessTokens("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME", accessToken29);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(authService22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GET" + "'", str42, "GET");
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ME" + "'", str45, "ME");
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PATCH" + "'", str48, "PATCH");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PATCH" + "'", str49, "PATCH");
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "GET" + "'", str54, "GET");
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertNotNull(scope57);
        org.junit.Assert.assertNotNull(scope58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(scope62);
        org.junit.Assert.assertNotNull(scope63);
        org.junit.Assert.assertNotNull(scope64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(scope67);
        org.junit.Assert.assertNotNull(scopeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(accessToken79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(scopeSet81);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(accessToken92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(scopeSet94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "Insufficient scopes: []" + "'", str97, "Insufficient scopes: []");
    }

    @Test
    public void test06933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06933");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        java.lang.String str13 = query9.getFilter();
        java.lang.String str14 = query9.toString();
        java.lang.String str15 = query9.toString();
        org.osiam.client.query.Query query16 = query9.nextPage();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str15, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query16);
    }

    @Test
    public void test06934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06934");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count((int) (short) -1);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.attributes("Insufficient scopes: []");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder6.filter("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.startIndex((long) 403);
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
    }

    @Test
    public void test06935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06935");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget15 = osiamGroupService3.targetEndpoint;
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.descending("hi!");
        org.osiam.client.query.Query query25 = queryBuilder24.build();
        java.lang.String str26 = query25.toString();
        java.lang.String str27 = query25.getSortOrder();
        org.osiam.client.query.Query query28 = query25.nextPage();
        long long29 = query28.getStartIndex();
        org.osiam.client.query.Query query30 = query28.previousPage();
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date37 = null;
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setRefreshTokenExpiresAt(date37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder36.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken41 = builder40.build();
        java.util.Date date42 = accessToken41.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder32.setRefreshTokenExpiresAt(date42);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder32.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder32.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder49 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date50 = null;
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder49.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken54 = builder53.build();
        boolean boolean55 = accessToken54.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet56 = accessToken54.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder47.addScopes(scopeSet56);
        org.osiam.client.oauth.AccessToken accessToken58 = builder57.build();
        boolean boolean59 = accessToken58.isRefreshTokenExpired();
        java.lang.String str60 = accessToken58.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult61 = osiamGroupService3.searchResources(query28, accessToken58);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(webTarget15);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(query25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str26, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "descending" + "'", str27, "descending");
        org.junit.Assert.assertNotNull(query28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 11L + "'", long29 == 11L);
        org.junit.Assert.assertNotNull(query30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(accessToken41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(accessToken54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(scopeSet56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(accessToken58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "descending" + "'", str60, "descending");
    }

    @Test
    public void test06936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06936");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.getUserName();
        java.lang.String str15 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        java.lang.String str25 = accessToken24.toString();
        java.lang.String str26 = accessToken24.getRefreshToken();
        java.lang.String str27 = accessToken24.toString();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.deleteResource("Bearer ", accessToken24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str25, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str27, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test06937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06937");
        org.osiam.client.exception.NoResultException noResultException1 = new org.osiam.client.exception.NoResultException("org.osiam.client.exception.OsiamClientException: ME");
        java.lang.String str2 = noResultException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.osiam.client.exception.NoResultException: org.osiam.client.exception.OsiamClientException: ME" + "'", str2, "org.osiam.client.exception.NoResultException: org.osiam.client.exception.OsiamClientException: ME");
    }

    @Test
    public void test06938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06938");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder23 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.descending("hi!");
        org.osiam.client.query.Query query32 = queryBuilder31.build();
        java.lang.String str33 = query32.toString();
        java.lang.String str34 = query32.toString();
        org.osiam.client.query.Query query35 = query32.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder36 = osiamConnector7.createQueryBuilder(query32);
        org.osiam.client.query.QueryBuilder queryBuilder37 = osiamConnector7.createQueryBuilder();
        org.osiam.resources.scim.Group group38 = null;
        org.osiam.client.OsiamGroupService.Builder builder40 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService41 = builder40.build();
        org.osiam.client.OsiamGroupService osiamGroupService42 = builder40.build();
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken49 = builder48.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken49);
        java.lang.String str51 = osiamGroupService42.extractErrorMessageForbidden(accessToken49);
        java.util.Date date52 = accessToken49.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken49);
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean55 = accessToken49.equals((java.lang.Object) scope54);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken49);
        java.lang.String str57 = accessToken49.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group58 = osiamConnector7.createGroup(group38, accessToken49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(query32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str33, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str34, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query35);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(osiamGroupService41);
        org.junit.Assert.assertNotNull(osiamGroupService42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Insufficient scopes: []" + "'", str51, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
    }

    @Test
    public void test06939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06939");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setType("");
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope10 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.addScope(scope10);
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException14 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean15 = scope12.equals((java.lang.Object) invalidAttributeException14);
        java.lang.String str16 = scope12.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder9.addScope(scope12);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setUserId("");
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.addScope(scope22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        java.util.Date date31 = accessToken30.getExpiresAt();
        java.lang.String str32 = accessToken30.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet33 = accessToken30.getScopes();
        java.util.Date date34 = accessToken30.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder23.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder5.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        java.util.Date date44 = accessToken43.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder36.setRefreshTokenExpiresAt(date44);
        org.osiam.client.oauth.AccessToken.Builder builder47 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.addScope(scope48);
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException52 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean53 = scope50.equals((java.lang.Object) invalidAttributeException52);
        java.lang.String str54 = scope50.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder47.addScope(scope50);
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder61.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder61.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken.Builder builder67 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope68 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder67.addScope(scope68);
        org.osiam.client.oauth.Scope scope70 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException72 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean73 = scope70.equals((java.lang.Object) invalidAttributeException72);
        java.lang.String str74 = scope70.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder67.addScope(scope70);
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder67.setRefreshToken("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder79 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date80 = null;
        org.osiam.client.oauth.AccessToken.Builder builder81 = builder79.setRefreshTokenExpiresAt(date80);
        org.osiam.client.oauth.AccessToken.Builder builder83 = builder79.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken84 = builder83.build();
        java.util.Date date85 = accessToken84.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder86 = builder77.setRefreshTokenExpiresAt(date85);
        org.osiam.client.oauth.AccessToken.Builder builder87 = builder65.setExpiresAt(date85);
        org.osiam.client.oauth.AccessToken.Builder builder88 = builder36.setExpiresAt(date85);
        org.osiam.client.oauth.AccessToken.Builder builder90 = builder36.setUserName("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.oauth.AccessToken.Builder builder92 = builder90.setUserName("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(scope10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GET" + "'", str16, "GET");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(scopeSet33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "GET" + "'", str54, "GET");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(scope68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(scope70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "GET" + "'", str74, "GET");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(accessToken84);
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test06940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06940");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.resources.scim.User user6 = null;
        org.osiam.client.AuthService.Builder builder8 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientId("ME");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder16 = builder14.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService17 = builder16.build();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        boolean boolean25 = accessToken24.isRefreshTokenExpired();
        java.lang.String str26 = authService17.extractErrorMessageForbidden(accessToken24);
        boolean boolean27 = accessToken24.isRefreshTokenExpired();
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException29 = new org.osiam.client.exception.InvalidAttributeException("POST");
        boolean boolean30 = accessToken24.equals((java.lang.Object) invalidAttributeException29);
        java.lang.String str31 = accessToken24.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user32 = osiamUserService4.replaceUser("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamRequestException: hi!", user6, accessToken24);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(authService17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Insufficient scopes: []" + "'", str26, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test06941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06941");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("ascending");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder4 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder4.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        java.lang.String str15 = osiamGroupService6.extractErrorMessageForbidden(accessToken13);
        java.util.Date date16 = accessToken13.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean19 = accessToken13.equals((java.lang.Object) scope18);
        java.lang.String str20 = accessToken13.getRefreshToken();
        java.lang.String str21 = accessToken13.getUserName();
        java.util.Date date22 = accessToken13.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user23 = osiamUserService2.getCurrentUser(accessToken13);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test06942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06942");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientId("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.OsiamConnector osiamConnector6 = builder4.build();
        org.osiam.resources.scim.UpdateUser updateUser8 = null;
        org.osiam.client.oauth.AccessToken accessToken9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user10 = osiamConnector6.updateUser("org.osiam.client.exception.OsiamClientException: ME", updateUser8, accessToken9);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(osiamConnector6);
    }

    @Test
    public void test06943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06943");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.getSortOrder();
        java.lang.String str30 = query24.getAttributes();
        boolean boolean31 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.OsiamConnector.Builder builder32 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder34 = builder32.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder36 = builder34.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder38 = builder36.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder40 = builder36.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder42 = builder36.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder44 = builder42.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder46 = builder42.setClientRedirectUri("PUT");
        boolean boolean47 = accessToken12.equals((java.lang.Object) builder46);
        java.lang.String str48 = osiamGroupService5.extractErrorMessageForbidden(accessToken12);
        javax.ws.rs.core.Response.StatusType statusType50 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = osiamGroupService5.extractErrorMessageDefault("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.OsiamRequestException: hi!", statusType50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "descending" + "'", str29, "descending");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Authorization" + "'", str30, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Insufficient scopes: []" + "'", str48, "Insufficient scopes: []");
    }

    @Test
    public void test06944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06944");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector9.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.getSortOrder();
        java.lang.String str23 = query20.getSortBy();
        java.lang.String str24 = query20.getFilter();
        java.lang.String str25 = query20.getSortOrder();
        java.lang.String str26 = query20.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder(query20);
        long long28 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder29 = new org.osiam.client.query.QueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder30 = osiamConnector9.createQueryBuilder(query20);
        org.osiam.resources.scim.UpdateUser updateUser32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        boolean boolean40 = accessToken39.isRefreshTokenExpired();
        boolean boolean41 = accessToken39.isClientOnly();
        java.lang.String str42 = accessToken39.getRefreshToken();
        boolean boolean43 = accessToken39.isExpired();
        boolean boolean44 = accessToken39.isExpired();
        java.lang.String str45 = accessToken39.getClientId();
        boolean boolean46 = accessToken39.isExpired();
        java.util.Date date47 = accessToken39.getRefreshTokenExpiresAt();
        java.lang.String str48 = accessToken39.getToken();
        java.lang.String str49 = accessToken39.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user50 = osiamConnector9.updateUser("org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", updateUser32, accessToken39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "descending" + "'", str22, "descending");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "descending" + "'", str25, "descending");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Authorization" + "'", str26, "Authorization");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Bearer " + "'", str48, "Bearer ");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test06945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06945");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientSecret("");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.resources.scim.UpdateUser updateUser9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken16.getScopes();
        boolean boolean19 = accessToken16.isRefreshTokenExpired();
        boolean boolean20 = accessToken16.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user21 = osiamConnector7.updateUser("org.osiam.client.exception.OsiamRequestException: hi!", updateUser9, accessToken16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test06946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06946");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.getAttributes();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query41);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.toString();
        java.lang.String str57 = query55.toString();
        org.osiam.client.query.Query query58 = query55.nextPage();
        java.lang.String str59 = query55.toString();
        org.osiam.client.query.QueryBuilder queryBuilder60 = osiamConnector5.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder61 = osiamConnector5.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder64 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date65 = null;
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder64.setRefreshTokenExpiresAt(date65);
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder64.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder64.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder72 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date73 = null;
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder72.setRefreshTokenExpiresAt(date73);
        org.osiam.client.oauth.AccessToken.Builder builder76 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date77 = null;
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder76.setRefreshTokenExpiresAt(date77);
        org.osiam.client.oauth.AccessToken.Builder builder80 = builder76.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken81 = builder80.build();
        java.util.Date date82 = accessToken81.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder83 = builder72.setRefreshTokenExpiresAt(date82);
        org.osiam.client.oauth.AccessToken.Builder builder84 = builder70.setRefreshTokenExpiresAt(date82);
        java.util.Date date85 = null;
        org.osiam.client.oauth.AccessToken.Builder builder86 = builder84.setRefreshTokenExpiresAt(date85);
        org.osiam.client.oauth.AccessToken accessToken87 = builder86.build();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector5.revokeAllAccessTokens("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.OsiamRequestException: hi!", accessToken87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Authorization" + "'", str42, "Authorization");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str56, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str57, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str59, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder60);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(accessToken81);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(accessToken87);
    }

    @Test
    public void test06947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06947");
        org.osiam.client.oauth.Scope scope1 = new org.osiam.client.oauth.Scope("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        java.lang.String str2 = scope1.toString();
        boolean boolean4 = scope1.equals((java.lang.Object) "org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str2, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test06948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06948");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException1 = new org.osiam.client.exception.ConnectionInitializationException("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET POST PUT PATCH DELETE], refreshTokenId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=refresh_token, userId=org.osiam.client.exception.ConflictException: PATCH, userName=]");
    }

    @Test
    public void test06949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06949");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.resources.scim.User user5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        java.util.Date date13 = accessToken12.getExpiresAt();
        java.lang.String str14 = accessToken12.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        boolean boolean23 = accessToken22.isRefreshTokenExpired();
        boolean boolean24 = accessToken22.isClientOnly();
        java.lang.String str25 = accessToken22.getClientId();
        boolean boolean26 = accessToken22.isClientOnly();
        boolean boolean27 = accessToken12.equals((java.lang.Object) accessToken22);
        java.lang.String str28 = accessToken22.getUserId();
        java.util.Date date29 = accessToken22.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user30 = osiamUserService3.replaceUser("password", user5, accessToken22);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test06950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06950");
        org.osiam.client.exception.UnauthorizedException unauthorizedException1 = new org.osiam.client.exception.UnauthorizedException("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConflictException: PATCH");
    }

    @Test
    public void test06951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06951");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user4 = null;
        org.osiam.client.OsiamGroupService.Builder builder6 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder6.build();
        javax.ws.rs.client.WebTarget webTarget8 = osiamGroupService7.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        java.lang.String str17 = accessToken15.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.descending("hi!");
        org.osiam.client.query.Query query27 = queryBuilder26.build();
        java.lang.String str28 = query27.toString();
        java.lang.String str29 = query27.getSortOrder();
        java.lang.String str30 = query27.getSortBy();
        java.lang.String str31 = query27.getFilter();
        java.lang.String str32 = query27.toString();
        boolean boolean33 = accessToken15.equals((java.lang.Object) query27);
        java.util.Date date34 = accessToken15.getExpiresAt();
        java.lang.String str35 = accessToken15.getUserName();
        java.lang.String str36 = osiamGroupService7.extractErrorMessageForbidden(accessToken15);
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        boolean boolean44 = accessToken43.isRefreshTokenExpired();
        boolean boolean45 = accessToken43.isClientOnly();
        java.lang.String str46 = accessToken43.getClientId();
        boolean boolean47 = accessToken43.isClientOnly();
        java.lang.String str48 = accessToken43.getToken();
        java.lang.String str49 = accessToken43.getToken();
        boolean boolean50 = accessToken43.isRefreshTokenExpired();
        java.lang.String str51 = osiamGroupService7.extractErrorMessageForbidden(accessToken43);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user52 = osiamUserService2.replaceUser("Insufficient scopes: [null, PATCH, GET, ME, ADMIN, GET POST PUT PATCH DELETE, PUT]", user4, accessToken43);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(webTarget8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(query27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str28, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "descending" + "'", str29, "descending");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str32, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Bearer " + "'", str48, "Bearer ");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Bearer " + "'", str49, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Insufficient scopes: []" + "'", str51, "Insufficient scopes: []");
    }

    @Test
    public void test06952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06952");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector17 = builder14.build();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken26 = builder23.build();
        boolean boolean27 = accessToken26.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector17.revokeAccessToken(accessToken26);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test06953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06953");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.NoResultException: authorization_code");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder5 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder5.build();
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder5.build();
        javax.ws.rs.client.WebTarget webTarget8 = osiamGroupService7.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget9 = osiamGroupService7.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        java.lang.String str18 = accessToken16.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet19 = accessToken16.getScopes();
        java.lang.String str20 = osiamGroupService7.extractErrorMessageForbidden(accessToken16);
        java.lang.String str21 = accessToken16.getUserId();
        java.util.Date date22 = accessToken16.getRefreshTokenExpiresAt();
        java.lang.String str23 = accessToken16.getToken();
        // The following exception was thrown during execution in test generation
        try {
            osiamUserService2.deleteUser("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(webTarget8);
        org.junit.Assert.assertNotNull(webTarget9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(scopeSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Bearer " + "'", str23, "Bearer ");
    }

    @Test
    public void test06954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06954");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet62 = accessToken60.getScopes();
        boolean boolean63 = scopeSerializer0.isEmpty(serializerProvider53, scopeSet62);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass64 = scopeSerializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer65 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer66 = scopeSerializer0.unwrappingSerializer(nameTransformer65);
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer67 = scopeSerializer0.getDelegatee();
        boolean boolean68 = scopeSerializer0.usesObjectId();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(scopeSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(scopeSetClass64);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer66);
        org.junit.Assert.assertNull(wildcardJsonSerializer67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test06955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06955");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("PATCH");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder3 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder5 = queryBuilder3.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder7 = queryBuilder5.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder5.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.descending("hi!");
        org.osiam.client.query.Query query12 = queryBuilder11.build();
        long long13 = query12.getStartIndex();
        java.lang.String str14 = query12.getAttributes();
        long long15 = query12.getStartIndex();
        org.osiam.client.oauth.AccessToken accessToken16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult17 = osiamUserService2.searchUsers(query12, accessToken16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(queryBuilder5);
        org.junit.Assert.assertNotNull(queryBuilder7);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Authorization" + "'", str14, "Authorization");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
    }

    @Test
    public void test06956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06956");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.OsiamClientException: descending");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder4 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet14 = accessToken12.getScopes();
        java.lang.String str15 = osiamGroupService5.extractErrorMessageForbidden(accessToken12);
        boolean boolean16 = accessToken12.isExpired();
        java.lang.String str17 = osiamGroupService2.extractErrorMessageForbidden(accessToken12);
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        boolean boolean25 = accessToken24.isRefreshTokenExpired();
        java.lang.String str26 = accessToken24.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        java.lang.String str37 = query36.toString();
        java.lang.String str38 = query36.getSortOrder();
        java.lang.String str39 = query36.getSortBy();
        java.lang.String str40 = query36.getFilter();
        java.lang.String str41 = query36.getSortOrder();
        java.lang.String str42 = query36.getAttributes();
        boolean boolean43 = accessToken24.equals((java.lang.Object) query36);
        org.osiam.client.OsiamConnector.Builder builder44 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder46 = builder44.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder48 = builder46.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder50 = builder48.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder52 = builder48.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder54 = builder48.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder56 = builder54.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder58 = builder54.setClientRedirectUri("PUT");
        boolean boolean59 = accessToken24.equals((java.lang.Object) builder58);
        java.lang.String str60 = accessToken24.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList61 = osiamGroupService2.getAllResources(accessToken24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(scopeSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Insufficient scopes: []" + "'", str17, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str37, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "descending" + "'", str38, "descending");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "descending" + "'", str41, "descending");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Authorization" + "'", str42, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
    }

    @Test
    public void test06957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06957");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Cannot connect to server");
        org.osiam.client.AuthService.Builder builder11 = builder7.setClientSecret("2024-03-22T13:51:20.388");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService.Builder builder15 = builder11.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder17 = builder11.setClientSecret("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.AuthService.Builder builder19 = builder11.setClientId("org.osiam.client.exception.OsiamClientException: client_credentials");
        org.osiam.client.AuthService.Builder builder21 = builder19.setClientId("org.osiam.client.exception.ConnectionInitializationException: descending");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test06958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06958");
        org.osiam.client.exception.ConflictException conflictException1 = new org.osiam.client.exception.ConflictException("Insufficient scopes: [Authorization, GET, GET POST PUT PATCH DELETE, PUT]");
    }

    @Test
    public void test06959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06959");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388");
        org.osiam.client.AuthService authService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken11 = builder8.build();
        java.lang.String str12 = accessToken11.toString();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet13 = accessToken11.getScopes();
        java.lang.String str14 = accessToken11.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken15 = authService2.validateAccessToken(accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(authService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str12, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertNotNull(scopeSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test06960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06960");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder6 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder6.build();
        javax.ws.rs.client.WebTarget webTarget8 = osiamGroupService7.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder10 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService11 = builder10.build();
        org.osiam.client.OsiamGroupService osiamGroupService12 = builder10.build();
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken19);
        java.lang.String str21 = osiamGroupService12.extractErrorMessageForbidden(accessToken19);
        java.util.Date date22 = accessToken19.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken19);
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean25 = accessToken19.equals((java.lang.Object) scope24);
        java.lang.String str26 = accessToken19.getRefreshToken();
        java.lang.String str27 = accessToken19.getToken();
        java.lang.String str28 = accessToken19.getUserId();
        java.lang.String str29 = osiamGroupService7.extractErrorMessageForbidden(accessToken19);
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken38 = builder35.build();
        java.util.Date date39 = accessToken38.getExpiresAt();
        java.lang.String str40 = accessToken38.getClientId();
        java.lang.String str41 = accessToken38.getType();
        java.lang.String str42 = osiamGroupService7.extractErrorMessageForbidden(accessToken38);
        java.lang.String str43 = osiamGroupService3.extractErrorMessageForbidden(accessToken38);
        org.osiam.resources.scim.UpdateGroup updateGroup45 = null;
        org.osiam.client.OsiamGroupService.Builder builder47 = new org.osiam.client.OsiamGroupService.Builder("Bearer ");
        org.osiam.client.OsiamGroupService osiamGroupService48 = builder47.build();
        javax.ws.rs.client.WebTarget webTarget49 = osiamGroupService48.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder51 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date52 = null;
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setRefreshTokenExpiresAt(date52);
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder51.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken58 = builder55.build();
        java.util.Date date59 = accessToken58.getExpiresAt();
        java.lang.String str60 = accessToken58.toString();
        java.lang.String str61 = accessToken58.toString();
        java.util.Date date62 = accessToken58.getExpiresAt();
        java.lang.String str63 = osiamGroupService48.extractErrorMessageForbidden(accessToken58);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group64 = osiamGroupService3.updateGroup("org.osiam.client.exception.ForbiddenException: hi!", updateGroup45, accessToken58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(webTarget8);
        org.junit.Assert.assertNotNull(osiamGroupService11);
        org.junit.Assert.assertNotNull(osiamGroupService12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Bearer " + "'", str27, "Bearer ");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Insufficient scopes: []" + "'", str29, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Insufficient scopes: []" + "'", str42, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Insufficient scopes: []" + "'", str43, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService48);
        org.junit.Assert.assertNotNull(webTarget49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(accessToken58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str60, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str61, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Insufficient scopes: []" + "'", str63, "Insufficient scopes: []");
    }

    @Test
    public void test06961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06961");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.lang.String str11 = accessToken10.toString();
        java.lang.String str12 = accessToken10.getToken();
        // The following exception was thrown during execution in test generation
        try {
            osiamUserService2.deleteUser("GET", accessToken10);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str11, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Bearer " + "'", str12, "Bearer ");
    }

    @Test
    public void test06962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06962");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setResourceServerEndpoint("org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.OsiamGroupService.Builder builder8 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken16.getScopes();
        java.lang.String str19 = osiamGroupService9.extractErrorMessageForbidden(accessToken16);
        javax.ws.rs.client.WebTarget webTarget20 = osiamGroupService9.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget21 = osiamGroupService9.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        boolean boolean29 = accessToken28.isRefreshTokenExpired();
        java.lang.String str30 = accessToken28.getUserName();
        java.lang.String str31 = accessToken28.toString();
        java.lang.String str32 = osiamGroupService9.extractErrorMessageForbidden(accessToken28);
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken39);
        boolean boolean41 = accessToken39.isExpired();
        java.lang.String str42 = osiamGroupService9.extractErrorMessageForbidden(accessToken39);
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector5.deleteUser("org.osiam.client.exception.OsiamClientException: ME", accessToken39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget20);
        org.junit.Assert.assertNotNull(webTarget21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str31, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Insufficient scopes: []" + "'", str42, "Insufficient scopes: []");
    }

    @Test
    public void test06963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06963");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("");
        org.osiam.client.AuthService authService8 = builder7.build();
        org.osiam.client.AuthService.Builder builder10 = builder7.setClientId("hi!");
        org.osiam.client.AuthService authService11 = builder7.build();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.addScope(scope14);
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException18 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean19 = scope16.equals((java.lang.Object) invalidAttributeException18);
        java.lang.String str20 = scope16.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder13.addScope(scope16);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder25.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken accessToken29 = builder25.build();
        java.lang.String str30 = authService11.extractErrorMessageForbidden(accessToken29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        boolean boolean38 = accessToken37.isRefreshTokenExpired();
        boolean boolean39 = accessToken37.isClientOnly();
        java.lang.String str40 = accessToken37.getRefreshToken();
        boolean boolean41 = accessToken37.isExpired();
        java.lang.String str42 = accessToken37.toString();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken37);
        // The following exception was thrown during execution in test generation
        try {
            authService11.revokeAccessToken(accessToken37);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(authService8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(authService11);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GET" + "'", str20, "GET");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Insufficient scopes: [GET, GET POST PUT PATCH DELETE]" + "'", str30, "Insufficient scopes: [GET, GET POST PUT PATCH DELETE]");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str42, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test06964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06964");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.OsiamConnector.Builder builder9 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder11 = builder9.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder13 = builder11.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector14 = builder13.build();
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        java.lang.String str23 = accessToken21.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder24 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder26.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder26.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder32 = queryBuilder30.descending("hi!");
        org.osiam.client.query.Query query33 = queryBuilder32.build();
        java.lang.String str34 = query33.toString();
        java.lang.String str35 = query33.getSortOrder();
        java.lang.String str36 = query33.getSortBy();
        java.lang.String str37 = query33.getFilter();
        java.lang.String str38 = query33.toString();
        boolean boolean39 = accessToken21.equals((java.lang.Object) query33);
        org.osiam.client.query.QueryBuilder queryBuilder40 = osiamConnector14.createQueryBuilder(query33);
        org.osiam.client.query.QueryBuilder queryBuilder41 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder43 = queryBuilder41.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder43.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder47.descending("hi!");
        org.osiam.client.query.Query query50 = queryBuilder49.build();
        java.lang.String str51 = query50.getAttributes();
        java.lang.String str52 = query50.toString();
        java.lang.String str53 = query50.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder54 = osiamConnector14.createQueryBuilder(query50);
        org.osiam.client.query.QueryBuilder queryBuilder55 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder57 = queryBuilder55.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder59 = queryBuilder57.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder61 = queryBuilder59.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query62 = queryBuilder59.build();
        org.osiam.client.query.QueryBuilder queryBuilder63 = osiamConnector14.createQueryBuilder(query62);
        java.lang.String str64 = query62.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder65 = osiamConnector7.createQueryBuilder(query62);
        org.osiam.client.query.QueryBuilder queryBuilder67 = queryBuilder65.filter("2024-03-22T13:51:20.388");
        org.osiam.client.query.Query query68 = queryBuilder65.build();
        java.lang.String str69 = query68.getSortOrder();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(osiamConnector14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(query33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str34, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "descending" + "'", str35, "descending");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str38, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(query50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Authorization" + "'", str51, "Authorization");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str52, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "descending" + "'", str53, "descending");
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(queryBuilder57);
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(query62);
        org.junit.Assert.assertNotNull(queryBuilder63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(queryBuilder65);
        org.junit.Assert.assertNotNull(queryBuilder67);
        org.junit.Assert.assertNotNull(query68);
        org.junit.Assert.assertNull(str69);
    }

    @Test
    public void test06965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06965");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.resources.scim.User user8 = null;
        org.osiam.client.AuthService.Builder builder10 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientId("ME");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService15 = builder14.build();
        org.osiam.client.OsiamGroupService.Builder builder17 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService18 = builder17.build();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        boolean boolean26 = accessToken25.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet27 = accessToken25.getScopes();
        java.lang.String str28 = osiamGroupService18.extractErrorMessageForbidden(accessToken25);
        boolean boolean29 = accessToken25.isClientOnly();
        java.lang.String str30 = authService15.extractErrorMessageForbidden(accessToken25);
        java.lang.String str31 = accessToken25.getUserId();
        java.lang.String str32 = accessToken25.getToken();
        java.lang.String str33 = accessToken25.getUserId();
        boolean boolean34 = accessToken25.isExpired();
        java.lang.String str35 = accessToken25.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user36 = osiamConnector7.createUser(user8, accessToken25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(authService15);
        org.junit.Assert.assertNotNull(osiamGroupService18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(scopeSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Insufficient scopes: []" + "'", str28, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Insufficient scopes: []" + "'", str30, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Bearer " + "'", str32, "Bearer ");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test06966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06966");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken accessToken7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group8 = osiamGroupService3.getGroup("org.osiam.client.exception.OsiamRequestException: hi!", accessToken7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
    }

    @Test
    public void test06967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06967");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector5.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder33 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder35.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.descending("hi!");
        org.osiam.client.query.Query query42 = queryBuilder41.build();
        java.lang.String str43 = query42.toString();
        java.lang.String str44 = query42.getSortOrder();
        java.lang.String str45 = query42.getSortBy();
        java.lang.String str46 = query42.getFilter();
        java.lang.String str47 = query42.getSortOrder();
        java.lang.String str48 = query42.getAttributes();
        java.lang.String str49 = query42.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder50 = osiamConnector5.createQueryBuilder(query42);
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder50.ascending("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.attributes("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "descending" + "'", str47, "descending");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Authorization" + "'", str48, "Authorization");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Authorization" + "'", str49, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
    }

    @Test
    public void test06968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06968");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Cannot connect to server");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.AuthService.Builder builder4 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder6 = builder4.setClientId("ME");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService13 = builder12.build();
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        boolean boolean21 = accessToken20.isRefreshTokenExpired();
        java.lang.String str22 = authService13.extractErrorMessageForbidden(accessToken20);
        boolean boolean23 = accessToken20.isRefreshTokenExpired();
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException25 = new org.osiam.client.exception.InvalidAttributeException("POST");
        boolean boolean26 = accessToken20.equals((java.lang.Object) invalidAttributeException25);
        java.lang.String str27 = accessToken20.getType();
        java.lang.String str28 = accessToken20.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser29 = osiamUserService2.getCurrentUserBasic(accessToken20);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(authService13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Insufficient scopes: []" + "'", str22, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test06969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06969");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet62 = accessToken60.getScopes();
        boolean boolean63 = scopeSerializer0.isEmpty(serializerProvider53, scopeSet62);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper64 = null;
        com.fasterxml.jackson.databind.JavaType javaType65 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper64, javaType65);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass67 = scopeSerializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer68 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer69 = scopeSerializer0.unwrappingSerializer(nameTransformer68);
        boolean boolean70 = scopeSetJsonSerializer69.isUnwrappingSerializer();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(scopeSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(scopeSetClass67);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test06970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06970");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService3.targetEndpoint;
        org.osiam.resources.scim.Group group7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        boolean boolean15 = accessToken14.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet16 = accessToken14.getScopes();
        boolean boolean17 = accessToken14.isClientOnly();
        java.lang.String str18 = accessToken14.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group19 = osiamGroupService3.createGroup(group7, accessToken14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(scopeSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test06971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06971");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.toString();
        java.lang.String str23 = query20.toString();
        int int24 = query20.getCount();
        long long25 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder26 = osiamConnector7.createQueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        org.osiam.client.query.Query query37 = queryBuilder35.build();
        java.lang.String str38 = query37.getSortBy();
        java.lang.String str39 = query37.getFilter();
        int int40 = query37.getCount();
        long long41 = query37.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder42 = osiamConnector7.createQueryBuilder(query37);
        org.osiam.client.query.QueryBuilder queryBuilder43 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder45.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder45.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder49.descending("hi!");
        org.osiam.client.query.Query query52 = queryBuilder51.build();
        java.lang.String str53 = query52.toString();
        java.lang.String str54 = query52.toString();
        java.lang.String str55 = query52.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder56 = osiamConnector7.createQueryBuilder(query52);
        org.osiam.client.OsiamGroupService.Builder builder58 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService59 = builder58.build();
        org.osiam.client.OsiamGroupService osiamGroupService60 = builder58.build();
        org.osiam.client.oauth.AccessToken.Builder builder62 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date63 = null;
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder62.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken67 = builder66.build();
        boolean boolean68 = accessToken67.isRefreshTokenExpired();
        java.lang.String str69 = accessToken67.getUserId();
        java.lang.String str70 = accessToken67.getClientId();
        boolean boolean71 = accessToken67.isClientOnly();
        java.lang.String str72 = accessToken67.getClientId();
        java.lang.String str73 = accessToken67.getType();
        boolean boolean74 = accessToken67.isClientOnly();
        java.lang.String str75 = osiamGroupService60.extractErrorMessageForbidden(accessToken67);
        java.util.Date date76 = accessToken67.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList77 = osiamConnector7.getAllUsers(accessToken67);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertNotNull(query37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(query52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str53, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str54, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertNotNull(queryBuilder56);
        org.junit.Assert.assertNotNull(osiamGroupService59);
        org.junit.Assert.assertNotNull(osiamGroupService60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(accessToken67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Insufficient scopes: []" + "'", str75, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test06972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06972");
        org.osiam.client.exception.ConflictException conflictException1 = new org.osiam.client.exception.ConflictException("org.osiam.client.exception.OsiamClientException: descending");
        java.lang.String str2 = conflictException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.osiam.client.exception.ConflictException: org.osiam.client.exception.OsiamClientException: descending" + "'", str2, "org.osiam.client.exception.ConflictException: org.osiam.client.exception.OsiamClientException: descending");
    }

    @Test
    public void test06973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06973");
        org.osiam.client.exception.ScimErrorMessage scimErrorMessage0 = new org.osiam.client.exception.ScimErrorMessage();
        java.lang.String str1 = scimErrorMessage0.getDescription();
        java.lang.String str2 = scimErrorMessage0.getDescription();
        java.lang.String str3 = scimErrorMessage0.getErrorCode();
        java.lang.String str4 = scimErrorMessage0.getErrorCode();
        java.lang.String str5 = scimErrorMessage0.getErrorCode();
        java.lang.String str6 = scimErrorMessage0.getErrorCode();
        java.lang.String str7 = scimErrorMessage0.getDescription();
        java.lang.String str8 = scimErrorMessage0.getDescription();
        java.lang.String str9 = scimErrorMessage0.getErrorCode();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test06974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06974");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getRefreshToken();
        boolean boolean17 = accessToken13.isExpired();
        java.lang.String str18 = accessToken13.getRefreshToken();
        java.lang.String str19 = accessToken13.getRefreshToken();
        java.lang.String str20 = osiamGroupService4.extractErrorMessageForbidden(accessToken13);
        org.osiam.resources.scim.UpdateGroup updateGroup22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken29 = builder28.build();
        boolean boolean30 = accessToken29.isRefreshTokenExpired();
        java.lang.String str31 = accessToken29.getUserName();
        org.osiam.client.helper.ScopeSerializer scopeSerializer32 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException40 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean41 = scope38.equals((java.lang.Object) invalidAttributeException40);
        java.lang.String str42 = scope38.getValue();
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str45 = scope44.toString();
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str48 = scope47.getValue();
        java.lang.String str49 = scope47.getValue();
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException52 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean53 = scope50.equals((java.lang.Object) invalidAttributeException52);
        java.lang.String str54 = scope50.getValue();
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope56 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope57 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope58 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException60 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean61 = scope58.equals((java.lang.Object) invalidAttributeException60);
        org.osiam.client.oauth.Scope scope62 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope63 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope64 = org.osiam.client.oauth.Scope.GET;
        boolean boolean66 = scope64.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope67 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray68 = new org.osiam.client.oauth.Scope[] { scope37, scope38, scope43, scope44, scope46, scope47, scope50, scope55, scope56, scope57, scope58, scope62, scope63, scope64, scope67 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet69 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet69, scopeArray68);
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder34.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet69);
        boolean boolean72 = scopeSerializer32.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet69);
        org.osiam.client.oauth.AccessToken.Builder builder74 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date75 = null;
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder74.setRefreshTokenExpiresAt(date75);
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder74.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken79 = builder78.build();
        boolean boolean80 = accessToken79.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet81 = accessToken79.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator82 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider83 = null;
        scopeSerializer32.serialize(scopeSet81, jsonGenerator82, serializerProvider83);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider85 = null;
        org.osiam.client.oauth.AccessToken.Builder builder87 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date88 = null;
        org.osiam.client.oauth.AccessToken.Builder builder89 = builder87.setRefreshTokenExpiresAt(date88);
        org.osiam.client.oauth.AccessToken.Builder builder91 = builder87.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken92 = builder91.build();
        boolean boolean93 = accessToken92.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet94 = accessToken92.getScopes();
        boolean boolean95 = scopeSerializer32.isEmpty(serializerProvider85, scopeSet94);
        boolean boolean96 = accessToken29.equals((java.lang.Object) scopeSerializer32);
        java.lang.String str97 = accessToken29.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group98 = osiamGroupService4.updateGroup("Query [attributes=Authorization, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=10]", updateGroup22, accessToken29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GET" + "'", str42, "GET");
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ME" + "'", str45, "ME");
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PATCH" + "'", str48, "PATCH");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PATCH" + "'", str49, "PATCH");
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "GET" + "'", str54, "GET");
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertNotNull(scope57);
        org.junit.Assert.assertNotNull(scope58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(scope62);
        org.junit.Assert.assertNotNull(scope63);
        org.junit.Assert.assertNotNull(scope64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(scope67);
        org.junit.Assert.assertNotNull(scopeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(accessToken79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(scopeSet81);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(accessToken92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(scopeSet94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
    }

    @Test
    public void test06975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06975");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector.Builder builder12 = builder2.setEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setEndpoint("password");
        org.osiam.client.OsiamConnector osiamConnector15 = builder14.build();
        org.osiam.resources.scim.Group group17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        boolean boolean25 = accessToken24.isRefreshTokenExpired();
        java.lang.String str26 = accessToken24.getUserId();
        java.lang.String str27 = accessToken24.getClientId();
        boolean boolean28 = accessToken24.isClientOnly();
        java.lang.String str29 = accessToken24.getClientId();
        java.lang.String str30 = accessToken24.getRefreshToken();
        boolean boolean31 = accessToken24.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group32 = osiamConnector15.replaceGroup("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamRequestException: hi!", group17, accessToken24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test06976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06976");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector13 = builder8.build();
        org.osiam.client.OsiamConnector.Builder builder14 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector21 = builder20.build();
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.descending("hi!");
        org.osiam.client.query.Query query31 = queryBuilder30.build();
        java.lang.String str32 = query31.toString();
        java.lang.String str33 = query31.toString();
        java.lang.String str34 = query31.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder35 = osiamConnector21.createQueryBuilder(query31);
        org.osiam.client.query.QueryBuilder queryBuilder36 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder42 = queryBuilder38.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder44 = queryBuilder42.descending("hi!");
        org.osiam.client.query.Query query45 = queryBuilder44.build();
        org.osiam.client.query.QueryBuilder queryBuilder46 = osiamConnector21.createQueryBuilder(query45);
        org.osiam.client.query.QueryBuilder queryBuilder47 = osiamConnector13.createQueryBuilder(query45);
        org.osiam.client.query.QueryBuilder queryBuilder48 = osiamConnector13.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder49 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder49.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder53 = queryBuilder51.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder55 = queryBuilder53.count((int) (short) 0);
        org.osiam.client.query.QueryBuilder queryBuilder57 = queryBuilder53.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder59 = queryBuilder53.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder61 = queryBuilder59.ascending("password");
        org.osiam.client.query.QueryBuilder queryBuilder63 = queryBuilder59.count((int) (short) -1);
        org.osiam.client.query.Query query64 = queryBuilder59.build();
        java.lang.String str65 = query64.toString();
        java.lang.String str66 = query64.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder67 = osiamConnector13.createQueryBuilder(query64);
        org.osiam.client.AuthService.Builder builder70 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder72 = builder70.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder74 = builder72.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder76 = builder74.setClientSecret("");
        org.osiam.client.AuthService.Builder builder78 = builder76.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService authService79 = builder78.build();
        org.osiam.client.AuthService authService80 = builder78.build();
        org.osiam.client.oauth.AccessToken.Builder builder82 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date83 = null;
        org.osiam.client.oauth.AccessToken.Builder builder84 = builder82.setRefreshTokenExpiresAt(date83);
        org.osiam.client.oauth.AccessToken.Builder builder86 = builder82.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken87 = builder86.build();
        boolean boolean88 = accessToken87.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet89 = accessToken87.getScopes();
        boolean boolean90 = accessToken87.isRefreshTokenExpired();
        boolean boolean91 = accessToken87.isExpired();
        java.util.Date date92 = accessToken87.getExpiresAt();
        java.lang.String str93 = authService80.extractErrorMessageForbidden(accessToken87);
        java.lang.String str94 = accessToken87.getRefreshToken();
        java.lang.String str95 = accessToken87.getUserName();
        java.lang.String str96 = accessToken87.getUserName();
        boolean boolean97 = accessToken87.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user98 = osiamConnector13.getUser("org.osiam.client.exception.OsiamClientException: hi!", accessToken87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The string \"Insufficient scopes\" for the URI component SCHEME contains an invalid character, ' ', at index 12.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(query31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str32, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str33, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(query45);
        org.junit.Assert.assertNotNull(queryBuilder46);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(queryBuilder53);
        org.junit.Assert.assertNotNull(queryBuilder55);
        org.junit.Assert.assertNotNull(queryBuilder57);
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(queryBuilder63);
        org.junit.Assert.assertNotNull(query64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]" + "'", str65, "Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ascending" + "'", str66, "ascending");
        org.junit.Assert.assertNotNull(queryBuilder67);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(authService79);
        org.junit.Assert.assertNotNull(authService80);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(accessToken87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(scopeSet89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Insufficient scopes: []" + "'", str93, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test06977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06977");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = osiamGroupService3.extractErrorMessageDefault("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]", statusType5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
    }

    @Test
    public void test06978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06978");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.addScope(scope18);
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder17.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder13.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.addScope(scope29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException33 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean34 = scope31.equals((java.lang.Object) invalidAttributeException33);
        java.lang.String str35 = scope31.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder28.addScope(scope31);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.addScope(scope45);
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException49 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean50 = scope47.equals((java.lang.Object) invalidAttributeException49);
        java.lang.String str51 = scope47.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder44.addScope(scope47);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder40.addScope(scope47);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder13.addScope(scope47);
        java.lang.String str55 = scope47.getValue();
        java.lang.String str56 = scope47.getValue();
        org.osiam.client.OsiamConnector.Builder builder57 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder59 = builder57.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder61 = builder59.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder63 = builder61.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder65 = builder61.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder67 = builder65.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder69 = builder65.setClientRedirectUri("");
        boolean boolean70 = scope47.equals((java.lang.Object) builder69);
        java.lang.String str71 = scope47.toString();
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GET" + "'", str35, "GET");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "GET" + "'", str51, "GET");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "GET" + "'", str55, "GET");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "GET" + "'", str56, "GET");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "GET" + "'", str71, "GET");
    }

    @Test
    public void test06979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06979");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        java.lang.String str23 = accessToken21.getUserName();
        java.lang.String str24 = accessToken21.toString();
        java.lang.String str25 = osiamGroupService2.extractErrorMessageForbidden(accessToken21);
        javax.ws.rs.client.WebTarget webTarget26 = osiamGroupService2.targetEndpoint;
        org.osiam.resources.scim.Group group27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date30 = null;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setRefreshTokenExpiresAt(date30);
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken34 = builder33.build();
        java.lang.String str35 = accessToken34.toString();
        java.lang.String str36 = accessToken34.getType();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken34);
        boolean boolean38 = accessToken34.isRefreshTokenExpired();
        java.lang.String str39 = accessToken34.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group40 = osiamGroupService2.createResource(group27, accessToken34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str24, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(accessToken34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str35, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test06980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06980");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService6 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder8 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken16.getScopes();
        java.lang.String str19 = osiamGroupService9.extractErrorMessageForbidden(accessToken16);
        javax.ws.rs.client.WebTarget webTarget20 = osiamGroupService9.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget21 = osiamGroupService9.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        boolean boolean29 = accessToken28.isRefreshTokenExpired();
        java.lang.String str30 = accessToken28.getUserName();
        java.lang.String str31 = accessToken28.toString();
        java.lang.String str32 = osiamGroupService9.extractErrorMessageForbidden(accessToken28);
        javax.ws.rs.client.WebTarget webTarget33 = osiamGroupService9.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget34 = osiamGroupService9.targetEndpoint;
        org.osiam.client.AuthService.Builder builder36 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder38 = builder36.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService39 = builder38.build();
        org.osiam.client.AuthService.Builder builder41 = builder38.setClientRedirectUri("PATCH");
        org.osiam.client.AuthService authService42 = builder41.build();
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken49 = builder48.build();
        java.util.Date date50 = accessToken49.getExpiresAt();
        java.lang.String str51 = accessToken49.getRefreshToken();
        java.lang.String str52 = accessToken49.getType();
        java.lang.String str53 = accessToken49.getClientId();
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException55 = new org.osiam.client.exception.InvalidAttributeException("ADMIN");
        boolean boolean56 = accessToken49.equals((java.lang.Object) invalidAttributeException55);
        java.lang.String str57 = authService42.extractErrorMessageForbidden(accessToken49);
        java.lang.String str58 = osiamGroupService9.extractErrorMessageForbidden(accessToken49);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList59 = osiamUserService6.getAllUsers(accessToken49);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(osiamUserService6);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget20);
        org.junit.Assert.assertNotNull(webTarget21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str31, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget33);
        org.junit.Assert.assertNotNull(webTarget34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(authService39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(authService42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Insufficient scopes: []" + "'", str57, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Insufficient scopes: []" + "'", str58, "Insufficient scopes: []");
    }

    @Test
    public void test06981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06981");
        org.osiam.client.exception.UnauthorizedException unauthorizedException2 = new org.osiam.client.exception.UnauthorizedException("descending");
        org.osiam.client.exception.ForbiddenException forbiddenException4 = new org.osiam.client.exception.ForbiddenException("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        int int5 = forbiddenException4.getHttpStatusCode();
        unauthorizedException2.addSuppressed((java.lang.Throwable) forbiddenException4);
        org.osiam.client.exception.OsiamClientException osiamClientException7 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME", (java.lang.Throwable) unauthorizedException2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 403 + "'", int5 == 403);
    }

    @Test
    public void test06982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06982");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector5.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder33 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder35.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.descending("hi!");
        org.osiam.client.query.Query query42 = queryBuilder41.build();
        java.lang.String str43 = query42.toString();
        java.lang.String str44 = query42.getSortOrder();
        java.lang.String str45 = query42.getSortBy();
        java.lang.String str46 = query42.getFilter();
        java.lang.String str47 = query42.getSortOrder();
        java.lang.String str48 = query42.getAttributes();
        java.lang.String str49 = query42.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder50 = osiamConnector5.createQueryBuilder(query42);
        org.osiam.resources.scim.Group group52 = null;
        org.osiam.client.oauth.AccessToken accessToken53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group54 = osiamConnector5.replaceGroup("org.osiam.client.exception.UnauthorizedException: client_credentials", group52, accessToken53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "descending" + "'", str47, "descending");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Authorization" + "'", str48, "Authorization");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Authorization" + "'", str49, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder50);
    }

    @Test
    public void test06983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06983");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        boolean boolean7 = scopeSetJsonDeserializer6.isCachable();
        boolean boolean8 = scopeSetJsonDeserializer6.isCachable();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer9 = scopeSetJsonDeserializer6.getDelegatee();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer10 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer11 = scopeSetJsonDeserializer6.unwrappingDeserializer(nameTransformer10);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader12 = scopeSetJsonDeserializer11.getObjectIdReader();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer13 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass14 = scopeDeserializer13.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer15 = scopeDeserializer13.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection16 = scopeDeserializer13.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer17 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer18 = scopeDeserializer13.unwrappingDeserializer(nameTransformer17);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer19 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer20 = scopeSetJsonDeserializer18.unwrappingDeserializer(nameTransformer19);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet21 = scopeSetJsonDeserializer18.getEmptyValue();
        boolean boolean22 = scopeSetJsonDeserializer18.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet23 = scopeSetJsonDeserializer18.getEmptyValue();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer24 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer25 = scopeSetJsonDeserializer18.unwrappingDeserializer(nameTransformer24);
        boolean boolean26 = scopeSetJsonDeserializer25.isCachable();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer27 = scopeSetJsonDeserializer11.replaceDelegatee(scopeSetJsonDeserializer25);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardJsonDeserializer9);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer11);
        org.junit.Assert.assertNull(objectIdReader12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(wildcardJsonDeserializer15);
        org.junit.Assert.assertNull(objCollection16);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer18);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer20);
        org.junit.Assert.assertNull(scopeSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(scopeSet23);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test06984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06984");
        org.osiam.client.exception.OsiamRequestException osiamRequestException2 = new org.osiam.client.exception.OsiamRequestException((int) (byte) 0, "org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test06985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06985");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder4.setClientId("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientSecret("descending");
        org.osiam.client.OsiamConnector osiamConnector17 = builder12.build();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.descending("hi!");
        org.osiam.client.query.Query query27 = queryBuilder26.build();
        java.lang.String str28 = query27.getAttributes();
        java.lang.String str29 = query27.toString();
        java.lang.String str30 = query27.getSortOrder();
        org.osiam.client.query.Query query31 = query27.nextPage();
        java.lang.String str32 = query27.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder33 = osiamConnector17.createQueryBuilder(query27);
        org.osiam.client.oauth.AccessToken.Builder builder35 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date36 = null;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setRefreshTokenExpiresAt(date36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder35.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken42 = builder39.build();
        org.osiam.client.oauth.AccessToken accessToken43 = builder39.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken43);
        java.lang.String str45 = accessToken43.getUserName();
        java.lang.String str46 = accessToken43.getType();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector17.revokeAccessToken(accessToken43);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(query27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Authorization" + "'", str28, "Authorization");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "descending" + "'", str30, "descending");
        org.junit.Assert.assertNotNull(query31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test06986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06986");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder12.setResourceServerEndpoint("hi!");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setEndpoint("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector osiamConnector21 = builder20.build();
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector21.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken29 = builder28.build();
        boolean boolean30 = accessToken29.isRefreshTokenExpired();
        boolean boolean31 = accessToken29.isClientOnly();
        java.lang.String str32 = accessToken29.getRefreshToken();
        boolean boolean33 = accessToken29.isExpired();
        boolean boolean34 = accessToken29.isExpired();
        java.lang.String str35 = accessToken29.toString();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken29);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList37 = osiamConnector21.getAllUsers(accessToken29);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str35, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test06987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06987");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = accessToken6.getScopes();
        boolean boolean9 = accessToken6.isClientOnly();
        java.lang.String str10 = accessToken6.getUserId();
        java.lang.String str11 = accessToken6.getToken();
        java.lang.String str12 = accessToken6.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet13 = accessToken6.getScopes();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(scopeSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Bearer " + "'", str11, "Bearer ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(scopeSet13);
    }

    @Test
    public void test06988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06988");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType4 = null;
        org.osiam.client.OsiamGroupService.Builder builder6 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder6.build();
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder6.build();
        javax.ws.rs.client.WebTarget webTarget9 = osiamGroupService8.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget10 = osiamGroupService8.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        boolean boolean18 = accessToken17.isRefreshTokenExpired();
        java.lang.String str19 = accessToken17.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet20 = accessToken17.getScopes();
        java.lang.String str21 = osiamGroupService8.extractErrorMessageForbidden(accessToken17);
        org.osiam.client.helper.ScopeSerializer scopeSerializer22 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean23 = scopeSerializer22.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer24 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer25 = scopeSerializer22.unwrappingSerializer(nameTransformer24);
        org.osiam.client.helper.ScopeSerializer scopeSerializer26 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean27 = scopeSerializer26.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer28 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer29 = scopeSerializer26.unwrappingSerializer(nameTransformer28);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider30 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException38 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean39 = scope36.equals((java.lang.Object) invalidAttributeException38);
        java.lang.String str40 = scope36.getValue();
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str43 = scope42.toString();
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str46 = scope45.getValue();
        java.lang.String str47 = scope45.getValue();
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException50 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean51 = scope48.equals((java.lang.Object) invalidAttributeException50);
        java.lang.String str52 = scope48.getValue();
        org.osiam.client.oauth.Scope scope53 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope56 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException58 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean59 = scope56.equals((java.lang.Object) invalidAttributeException58);
        org.osiam.client.oauth.Scope scope60 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope61 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope62 = org.osiam.client.oauth.Scope.GET;
        boolean boolean64 = scope62.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope65 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray66 = new org.osiam.client.oauth.Scope[] { scope35, scope36, scope41, scope42, scope44, scope45, scope48, scope53, scope54, scope55, scope56, scope60, scope61, scope62, scope65 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet67 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet67, scopeArray66);
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder32.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet67);
        boolean boolean70 = scopeSetJsonSerializer29.isEmpty(serializerProvider30, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet67);
        boolean boolean71 = scopeSerializer22.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet67);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass72 = scopeSerializer22.handledType();
        boolean boolean73 = scopeSerializer22.usesObjectId();
        boolean boolean74 = accessToken17.equals((java.lang.Object) scopeSerializer22);
        java.util.Date date75 = accessToken17.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.checkAndHandleResponse("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME", statusType4, accessToken17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(webTarget9);
        org.junit.Assert.assertNotNull(webTarget10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(scopeSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer29);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "GET" + "'", str40, "GET");
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ME" + "'", str43, "ME");
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PATCH" + "'", str46, "PATCH");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PATCH" + "'", str47, "PATCH");
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "GET" + "'", str52, "GET");
        org.junit.Assert.assertNotNull(scope53);
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(scope60);
        org.junit.Assert.assertNotNull(scope61);
        org.junit.Assert.assertNotNull(scope62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(scope65);
        org.junit.Assert.assertNotNull(scopeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(scopeSetClass72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test06989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06989");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector5 = builder0.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.descending("hi!");
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder14.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Cannot connect to server");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.startIndex((long) (byte) 10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.count(0);
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        org.osiam.client.query.Query query25 = query24.previousPage();
        org.osiam.client.query.Query query26 = query25.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder27 = osiamConnector5.createQueryBuilder(query25);
        org.osiam.resources.scim.Group group28 = null;
        org.osiam.client.OsiamGroupService.Builder builder30 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService31 = builder30.build();
        org.osiam.client.OsiamGroupService osiamGroupService32 = builder30.build();
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken39);
        java.lang.String str41 = osiamGroupService32.extractErrorMessageForbidden(accessToken39);
        javax.ws.rs.client.WebTarget webTarget42 = osiamGroupService32.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget43 = osiamGroupService32.targetEndpoint;
        org.osiam.client.AuthService.Builder builder45 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder47 = builder45.setClientId("ME");
        org.osiam.client.AuthService.Builder builder49 = builder47.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService50 = builder49.build();
        org.osiam.client.oauth.AccessToken.Builder builder52 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setRefreshTokenExpiresAt(date53);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder52.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken57 = builder56.build();
        boolean boolean58 = accessToken57.isRefreshTokenExpired();
        boolean boolean59 = accessToken57.isClientOnly();
        java.lang.String str60 = accessToken57.getClientId();
        java.lang.String str61 = authService50.extractErrorMessageForbidden(accessToken57);
        java.lang.String str62 = accessToken57.getUserId();
        java.lang.String str63 = accessToken57.getClientId();
        java.lang.String str64 = osiamGroupService32.extractErrorMessageForbidden(accessToken57);
        java.util.Date date65 = accessToken57.getRefreshTokenExpiresAt();
        java.lang.String str66 = accessToken57.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group67 = osiamConnector5.createGroup(group28, accessToken57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertNotNull(query25);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(osiamGroupService31);
        org.junit.Assert.assertNotNull(osiamGroupService32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: []" + "'", str41, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget42);
        org.junit.Assert.assertNotNull(webTarget43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(authService50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(accessToken57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Insufficient scopes: []" + "'", str61, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Insufficient scopes: []" + "'", str64, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test06990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06990");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        boolean boolean8 = accessToken6.isClientOnly();
        java.lang.String str9 = accessToken6.getClientId();
        boolean boolean10 = accessToken6.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.addScope(scope13);
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException17 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean18 = scope15.equals((java.lang.Object) invalidAttributeException17);
        java.lang.String str19 = scope15.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder12.addScope(scope15);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setUserName("Authorization");
        boolean boolean27 = accessToken6.equals((java.lang.Object) builder24);
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.addScope(scope30);
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException34 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean35 = scope32.equals((java.lang.Object) invalidAttributeException34);
        java.lang.String str36 = scope32.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder29.addScope(scope32);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder41.addScope(scope44);
        org.osiam.client.oauth.GrantType grantType46 = org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS;
        java.lang.String str47 = grantType46.getUrlParam();
        boolean boolean48 = scope44.equals((java.lang.Object) grantType46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder24.addScope(scope44);
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer50 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass51 = scopeDeserializer50.handledType();
        java.lang.Class<?> wildcardClass52 = scopeDeserializer50.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer53 = scopeDeserializer50.getDelegatee();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader54 = scopeDeserializer50.getObjectIdReader();
        boolean boolean55 = scope44.equals((java.lang.Object) scopeDeserializer50);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer56 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer57 = scopeDeserializer50.unwrappingDeserializer(nameTransformer56);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet58 = scopeDeserializer50.getEmptyValue();
        com.fasterxml.jackson.core.JsonParser jsonParser59 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext60 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer61 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean62 = scopeSerializer61.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass63 = scopeSerializer61.handledType();
        org.osiam.client.oauth.AccessToken.Builder builder65 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date66 = null;
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder65.setRefreshTokenExpiresAt(date66);
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder65.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken70 = builder69.build();
        java.util.Date date71 = accessToken70.getExpiresAt();
        java.lang.String str72 = accessToken70.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet73 = accessToken70.getScopes();
        boolean boolean74 = scopeSerializer61.isEmpty(scopeSet73);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet75 = scopeDeserializer50.deserialize(jsonParser59, deserializationContext60, scopeSet73);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Can not update object of type java.util.HashSet (by deserializer of type org.osiam.client.helper.ScopeDeserializer)");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GET" + "'", str19, "GET");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GET" + "'", str36, "GET");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + grantType46 + "' != '" + org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS + "'", grantType46.equals(org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "client_credentials" + "'", str47, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(wildcardClass51);
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertNull(wildcardJsonDeserializer53);
        org.junit.Assert.assertNull(objectIdReader54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer57);
        org.junit.Assert.assertNull(scopeSet58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(scopeSetClass63);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(accessToken70);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(scopeSet73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test06991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06991");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count((int) (short) 0);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder4.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder4.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.ascending("password");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count((int) (short) -1);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder10.filter("org.osiam.client.exception.UnauthorizedException: ");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
    }

    @Test
    public void test06992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06992");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector9.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query18 = queryBuilder15.build();
        org.osiam.client.query.Query query19 = query18.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder20 = osiamConnector9.createQueryBuilder(query18);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setType("");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setType("authorization_code");
        org.osiam.client.oauth.AccessToken accessToken32 = builder27.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user33 = osiamConnector9.getUser("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConflictException: PATCH", accessToken32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(query18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
    }

    @Test
    public void test06993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06993");
        org.osiam.client.exception.ForbiddenException forbiddenException1 = new org.osiam.client.exception.ForbiddenException("Query [attributes=Authorization, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=10]");
        java.lang.Throwable[] throwableArray2 = forbiddenException1.getSuppressed();
        int int3 = forbiddenException1.getHttpStatusCode();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 403 + "'", int3 == 403);
    }

    @Test
    public void test06994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06994");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken7 = builder6.build();
        java.lang.String str8 = accessToken7.toString();
        java.lang.String str9 = accessToken7.getToken();
        boolean boolean10 = accessToken7.isExpired();
        java.lang.String str11 = accessToken7.getClientId();
        boolean boolean12 = accessToken7.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.checkAndHandleResponse("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388", statusType4, accessToken7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(accessToken7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str8, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "client_credentials" + "'", str9, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test06995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06995");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getRefreshToken();
        boolean boolean17 = accessToken13.isExpired();
        java.lang.String str18 = accessToken13.getRefreshToken();
        java.lang.String str19 = accessToken13.getRefreshToken();
        java.lang.String str20 = osiamGroupService4.extractErrorMessageForbidden(accessToken13);
        org.osiam.resources.scim.UpdateGroup updateGroup22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken29 = builder28.build();
        java.util.Date date30 = accessToken29.getExpiresAt();
        java.lang.String str31 = accessToken29.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken29);
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        boolean boolean40 = accessToken39.isRefreshTokenExpired();
        boolean boolean41 = accessToken39.isClientOnly();
        java.lang.String str42 = accessToken39.getClientId();
        boolean boolean43 = accessToken39.isClientOnly();
        boolean boolean44 = accessToken29.equals((java.lang.Object) accessToken39);
        java.lang.String str45 = accessToken39.getUserId();
        boolean boolean46 = accessToken39.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group47 = osiamGroupService4.updateGroup("", updateGroup22, accessToken39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test06996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06996");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.OsiamClientException: descending");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService2.targetEndpoint;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group7 = osiamGroupService2.mapToResource("");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: ");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
    }

    @Test
    public void test06997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06997");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.util.Date date12 = accessToken11.getExpiresAt();
        java.lang.String str13 = accessToken11.getUserName();
        java.lang.String str14 = accessToken11.getType();
        java.lang.String str15 = accessToken11.toString();
        // The following exception was thrown during execution in test generation
        try {
            osiamUserService3.deleteUser("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.OsiamClientException: ME", accessToken11);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str15, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test06998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06998");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.addScope(scope14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setClientId("GET");
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken24);
        java.util.Date date26 = accessToken24.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder17.setExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder17.setUserName("org.osiam.client.exception.ConnectionInitializationException: descending");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder17.setUserName("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.addScope(scope34);
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException38 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean39 = scope36.equals((java.lang.Object) invalidAttributeException38);
        java.lang.String str40 = scope36.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder33.addScope(scope36);
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder49 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.addScope(scope50);
        org.osiam.client.oauth.Scope scope52 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException54 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean55 = scope52.equals((java.lang.Object) invalidAttributeException54);
        java.lang.String str56 = scope52.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder49.addScope(scope52);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder45.addScope(scope52);
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder45.setRefreshToken("");
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder60.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder64 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date65 = null;
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder64.setRefreshTokenExpiresAt(date65);
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder64.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder64.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder64.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope73 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder72.addScope(scope73);
        org.osiam.client.oauth.AccessToken.Builder builder76 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date77 = null;
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder76.setRefreshTokenExpiresAt(date77);
        org.osiam.client.oauth.AccessToken.Builder builder80 = builder76.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken81 = builder80.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken81);
        java.util.Date date83 = accessToken81.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder84 = builder74.setExpiresAt(date83);
        org.osiam.client.oauth.AccessToken.Builder builder85 = builder62.setExpiresAt(date83);
        org.osiam.client.oauth.AccessToken.Builder builder86 = builder31.setRefreshTokenExpiresAt(date83);
        org.osiam.client.oauth.AccessToken.Builder builder88 = builder31.setUserId("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "GET" + "'", str40, "GET");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(scope52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "GET" + "'", str56, "GET");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(scope73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(accessToken81);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test06999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06999");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.getSortOrder();
        java.lang.String str20 = query17.getSortBy();
        java.lang.String str21 = query17.getFilter();
        java.lang.String str22 = query17.getSortOrder();
        java.lang.String str23 = query17.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder24 = new org.osiam.client.query.QueryBuilder(query17);
        long long25 = query17.getStartIndex();
        org.osiam.client.query.Query query26 = query17.nextPage();
        long long27 = query26.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder28 = osiamConnector7.createQueryBuilder(query26);
        org.osiam.client.query.QueryBuilder queryBuilder29 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder31.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.descending("hi!");
        org.osiam.client.query.Query query38 = queryBuilder37.build();
        java.lang.String str39 = query38.getAttributes();
        java.lang.String str40 = query38.toString();
        java.lang.String str41 = query38.getSortBy();
        org.osiam.client.query.Query query42 = query38.nextPage();
        int int43 = query42.getCount();
        long long44 = query42.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder45 = new org.osiam.client.query.QueryBuilder(query42);
        org.osiam.client.query.QueryBuilder queryBuilder46 = osiamConnector7.createQueryBuilder(query42);
        org.osiam.client.query.QueryBuilder queryBuilder47 = osiamConnector7.createQueryBuilder();
        org.osiam.client.OsiamGroupService.Builder builder50 = new org.osiam.client.OsiamGroupService.Builder("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamGroupService osiamGroupService51 = builder50.build();
        org.osiam.client.AuthService.Builder builder53 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder55 = builder53.setClientId("ME");
        org.osiam.client.AuthService.Builder builder57 = builder55.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder59 = builder57.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder61 = builder59.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService62 = builder61.build();
        org.osiam.client.oauth.AccessToken.Builder builder64 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date65 = null;
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder64.setRefreshTokenExpiresAt(date65);
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder64.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken69 = builder68.build();
        boolean boolean70 = accessToken69.isRefreshTokenExpired();
        java.lang.String str71 = authService62.extractErrorMessageForbidden(accessToken69);
        boolean boolean72 = accessToken69.isRefreshTokenExpired();
        java.lang.String str73 = accessToken69.getType();
        java.util.Date date74 = accessToken69.getExpiresAt();
        boolean boolean75 = accessToken69.isClientOnly();
        java.lang.String str76 = osiamGroupService51.extractErrorMessageForbidden(accessToken69);
        org.osiam.client.oauth.AccessToken.Builder builder78 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date79 = null;
        org.osiam.client.oauth.AccessToken.Builder builder80 = builder78.setRefreshTokenExpiresAt(date79);
        org.osiam.client.oauth.AccessToken.Builder builder82 = builder78.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken83 = builder82.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken83);
        boolean boolean85 = accessToken83.isExpired();
        java.lang.String str86 = accessToken83.getUserId();
        java.lang.String str87 = osiamGroupService51.extractErrorMessageForbidden(accessToken83);
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector7.revokeAllAccessTokens("org.osiam.client.exception.OsiamClientException: PUT", accessToken83);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "descending" + "'", str19, "descending");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "descending" + "'", str22, "descending");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Authorization" + "'", str23, "Authorization");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 11L + "'", long27 == 11L);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(query38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Authorization" + "'", str39, "Authorization");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str40, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 11L + "'", long44 == 11L);
        org.junit.Assert.assertNotNull(queryBuilder46);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(osiamGroupService51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(authService62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(accessToken69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Insufficient scopes: []" + "'", str71, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Insufficient scopes: []" + "'", str76, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(accessToken83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Insufficient scopes: []" + "'", str87, "Insufficient scopes: []");
    }

    @Test
    public void test07000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test07000");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Bearer ");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService6 = builder1.build();
        org.osiam.resources.scim.UpdateUser updateUser8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        boolean boolean17 = accessToken15.isClientOnly();
        java.lang.String str18 = accessToken15.getRefreshToken();
        boolean boolean19 = accessToken15.isExpired();
        boolean boolean20 = accessToken15.isExpired();
        java.lang.String str21 = accessToken15.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user22 = osiamUserService6.updateUser("ME", updateUser8, accessToken15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(osiamUserService6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }
}

