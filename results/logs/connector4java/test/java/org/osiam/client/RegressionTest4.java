package org.osiam.client;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test02001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02001");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        boolean boolean11 = accessToken9.isClientOnly();
        java.lang.String str12 = accessToken9.getRefreshToken();
        java.lang.String str13 = accessToken9.toString();
        java.util.Date date14 = accessToken9.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user15 = osiamUserService2.getCurrentUser(accessToken9);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str13, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02002");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector13 = builder8.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken15 = osiamConnector13.retrieveAccessToken("org.osiam.client.exception.ForbiddenException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
    }

    @Test
    public void test02003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02003");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.core.JsonParser jsonParser5 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getRefreshToken();
        boolean boolean17 = accessToken13.isExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken13.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet19 = scopeDeserializer0.deserialize(jsonParser5, deserializationContext6, scopeSet18);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Can not update object of type java.util.HashSet (by deserializer of type org.osiam.client.helper.ScopeDeserializer)");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scopeSet18);
    }

    @Test
    public void test02004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02004");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer7 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer8 = scopeDeserializer0.unwrappingDeserializer(nameTransformer7);
        java.lang.Class<?> wildcardClass9 = scopeDeserializer0.handledType();
        boolean boolean10 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = scopeDeserializer0.getEmptyValue();
        com.fasterxml.jackson.core.JsonParser jsonParser12 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet14 = scopeDeserializer0.deserialize(jsonParser12, deserializationContext13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(scopeSet11);
    }

    @Test
    public void test02005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02005");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("PUT");
        org.osiam.client.OsiamConnector osiamConnector7 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        java.lang.String str15 = accessToken14.toString();
        java.util.Date date16 = accessToken14.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector7.revokeAccessToken(accessToken14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str15, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02006");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder4.setClientId("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientSecret("descending");
        org.osiam.client.OsiamConnector osiamConnector17 = builder12.build();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        java.util.Date date26 = accessToken25.getExpiresAt();
        java.lang.String str27 = accessToken25.getUserName();
        java.lang.String str28 = accessToken25.toString();
        java.lang.String str29 = accessToken25.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user30 = osiamConnector17.getUser("", accessToken25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str28, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test02007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02007");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("");
        org.osiam.client.AuthService.Builder builder9 = builder5.setClientId("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder5.build();
        org.osiam.client.AuthService.Builder builder14 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder16 = builder14.setClientId("ME");
        org.osiam.client.AuthService.Builder builder18 = builder16.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService23 = builder22.build();
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        boolean boolean31 = accessToken30.isRefreshTokenExpired();
        java.lang.String str32 = accessToken30.getUserId();
        java.lang.String str33 = accessToken30.getToken();
        java.lang.String str34 = authService23.extractErrorMessageForbidden(accessToken30);
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str36 = scope35.getValue();
        java.lang.String str37 = scope35.toString();
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray39 = new org.osiam.client.oauth.Scope[] { scope35, scope38 };
        java.net.URI uRI40 = authService23.getAuthorizationUri(scopeArray39);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken41 = authService10.retrieveAccessToken("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]", "org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]", scopeArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client secret can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(authService23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Bearer " + "'", str33, "Bearer ");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Insufficient scopes: []" + "'", str34, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PATCH" + "'", str36, "PATCH");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PATCH" + "'", str37, "PATCH");
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertNotNull(scopeArray39);
        org.junit.Assert.assertNotNull(uRI40);
    }

    @Test
    public void test02008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02008");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        java.util.Date date13 = accessToken12.getExpiresAt();
        java.lang.String str14 = accessToken12.getUserName();
        java.lang.String str15 = accessToken12.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group16 = osiamGroupService4.getGroup("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken12);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test02009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02009");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("PUT");
        org.osiam.client.OsiamConnector osiamConnector7 = builder4.build();
        org.osiam.client.OsiamGroupService.Builder builder9 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService10 = builder9.build();
        org.osiam.client.OsiamGroupService osiamGroupService11 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken18);
        java.lang.String str20 = osiamGroupService11.extractErrorMessageForbidden(accessToken18);
        java.util.Date date21 = accessToken18.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken18);
        java.lang.String str23 = accessToken18.getRefreshToken();
        org.osiam.client.oauth.Scope scope25 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.oauth.Scope[] scopeArray26 = new org.osiam.client.oauth.Scope[] { scope25 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken27 = osiamConnector7.refreshAccessToken(accessToken18, scopeArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(osiamGroupService10);
        org.junit.Assert.assertNotNull(osiamGroupService11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(scopeArray26);
    }

    @Test
    public void test02010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02010");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getUserName();
        java.lang.String str12 = accessToken9.toString();
        java.lang.String str13 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        java.lang.String str21 = accessToken20.toString();
        java.lang.String str22 = accessToken20.getType();
        boolean boolean23 = accessToken20.isExpired();
        java.util.Date date24 = accessToken20.getExpiresAt();
        boolean boolean25 = accessToken20.isClientOnly();
        java.lang.String str26 = osiamGroupService2.extractErrorMessageForbidden(accessToken20);
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        java.lang.String str37 = query36.toString();
        java.lang.String str38 = query36.getSortOrder();
        java.lang.String str39 = query36.getFilter();
        java.lang.String str40 = query36.getSortOrder();
        org.osiam.client.oauth.AccessToken accessToken41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult42 = osiamGroupService2.searchResources(query36, accessToken41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str12, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Insufficient scopes: []" + "'", str13, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str21, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Insufficient scopes: []" + "'", str26, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str37, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "descending" + "'", str38, "descending");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "descending" + "'", str40, "descending");
    }

    @Test
    public void test02011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02011");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.getSortOrder();
        java.lang.String str30 = query24.getAttributes();
        boolean boolean31 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.OsiamConnector.Builder builder32 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder34 = builder32.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder36 = builder34.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder38 = builder36.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder40 = builder36.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder42 = builder36.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder44 = builder42.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder46 = builder42.setClientRedirectUri("PUT");
        boolean boolean47 = accessToken12.equals((java.lang.Object) builder46);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList48 = osiamUserService5.getAllUsers(accessToken12);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "descending" + "'", str29, "descending");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Authorization" + "'", str30, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test02012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02012");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector9.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.getSortOrder();
        java.lang.String str23 = query20.getSortBy();
        java.lang.String str24 = query20.getFilter();
        java.lang.String str25 = query20.getSortOrder();
        java.lang.String str26 = query20.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder(query20);
        long long28 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder29 = new org.osiam.client.query.QueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder30 = osiamConnector9.createQueryBuilder(query20);
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        java.lang.String str38 = accessToken37.toString();
        java.lang.String str39 = accessToken37.getClientId();
        org.osiam.client.OsiamConnector.Builder builder40 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder42 = builder40.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder44 = builder42.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder46 = builder44.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector47 = builder46.build();
        org.osiam.client.query.QueryBuilder queryBuilder48 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder50.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder50.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder56 = queryBuilder54.descending("hi!");
        org.osiam.client.query.Query query57 = queryBuilder56.build();
        java.lang.String str58 = query57.toString();
        java.lang.String str59 = query57.toString();
        java.lang.String str60 = query57.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder61 = osiamConnector47.createQueryBuilder(query57);
        org.osiam.client.query.QueryBuilder queryBuilder62 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder62.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder66 = queryBuilder64.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder68 = queryBuilder64.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder70 = queryBuilder68.descending("hi!");
        org.osiam.client.query.Query query71 = queryBuilder70.build();
        org.osiam.client.query.QueryBuilder queryBuilder72 = osiamConnector47.createQueryBuilder(query71);
        boolean boolean73 = accessToken37.equals((java.lang.Object) queryBuilder72);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList74 = osiamConnector9.getAllGroups(accessToken37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "descending" + "'", str22, "descending");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "descending" + "'", str25, "descending");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Authorization" + "'", str26, "Authorization");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str38, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(osiamConnector47);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(queryBuilder56);
        org.junit.Assert.assertNotNull(query57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str58, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str59, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertNotNull(queryBuilder68);
        org.junit.Assert.assertNotNull(queryBuilder70);
        org.junit.Assert.assertNotNull(query71);
        org.junit.Assert.assertNotNull(queryBuilder72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test02013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02013");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setAuthServerEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setResourceServerEndpoint("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector15 = builder10.build();
        org.osiam.resources.scim.User user16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder18.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user26 = osiamConnector15.createUser(user16, accessToken25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
    }

    @Test
    public void test02014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02014");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = osiamGroupService2.extractErrorMessageDefault("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]", statusType4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
    }

    @Test
    public void test02015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02015");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("PUT");
        org.osiam.client.OsiamConnector osiamConnector7 = builder4.build();
        org.osiam.resources.scim.Group group8 = null;
        org.osiam.client.OsiamGroupService.Builder builder10 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService11 = builder10.build();
        org.osiam.client.OsiamGroupService osiamGroupService12 = builder10.build();
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService12.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService12.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        java.lang.String str23 = accessToken21.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet24 = accessToken21.getScopes();
        java.lang.String str25 = osiamGroupService12.extractErrorMessageForbidden(accessToken21);
        java.lang.String str26 = accessToken21.getUserId();
        java.lang.String str27 = accessToken21.getClientId();
        java.lang.String str28 = accessToken21.getClientId();
        boolean boolean29 = accessToken21.isRefreshTokenExpired();
        boolean boolean30 = accessToken21.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group31 = osiamConnector7.createGroup(group8, accessToken21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(osiamGroupService11);
        org.junit.Assert.assertNotNull(osiamGroupService12);
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(scopeSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test02016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02016");
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.AbstractOsiamService.Builder<org.osiam.client.oauth.AccessToken.Builder> builderBuilder1 = new org.osiam.client.AbstractOsiamService.Builder<org.osiam.client.oauth.AccessToken.Builder>("org.osiam.client.exception.NoResultException: authorization_code");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02017");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Cannot connect to server");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.lang.String str12 = accessToken11.toString();
        java.lang.String str13 = accessToken11.getType();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken11);
        java.lang.String str15 = accessToken11.getClientId();
        boolean boolean16 = accessToken11.isClientOnly();
        java.lang.Object obj17 = null;
        boolean boolean18 = accessToken11.equals(obj17);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user19 = osiamUserService2.replaceUser("client_credentials", user4, accessToken11);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str12, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test02018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02018");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService2.targetEndpoint;
        org.osiam.client.query.QueryBuilder queryBuilder7 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder7.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder9.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.descending("hi!");
        org.osiam.client.query.Query query16 = queryBuilder15.build();
        java.lang.String str17 = query16.toString();
        java.lang.String str18 = query16.getSortOrder();
        java.lang.String str19 = query16.getSortBy();
        java.lang.String str20 = query16.getFilter();
        java.lang.String str21 = query16.toString();
        java.lang.String str22 = query16.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder23 = new org.osiam.client.query.QueryBuilder(query16);
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        boolean boolean31 = accessToken30.isRefreshTokenExpired();
        boolean boolean32 = accessToken30.isClientOnly();
        java.lang.String str33 = accessToken30.getClientId();
        boolean boolean34 = accessToken30.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult35 = osiamGroupService2.searchGroups(query16, accessToken30);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str17, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "descending" + "'", str18, "descending");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "descending" + "'", str22, "descending");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test02019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02019");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("");
        org.osiam.client.AuthService.Builder builder9 = builder5.setClientId("authorization_code");
        org.osiam.client.AuthService authService10 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        boolean boolean19 = accessToken18.isRefreshTokenExpired();
        boolean boolean20 = accessToken18.isClientOnly();
        java.lang.String str21 = accessToken18.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            authService10.revokeAllAccessTokens("org.osiam.client.exception.ForbiddenException: hi!", accessToken18);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test02020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02020");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector osiamConnector5 = builder2.build();
        org.osiam.resources.scim.Group group6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        java.lang.String str15 = accessToken13.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet16 = accessToken13.getScopes();
        java.util.Date date17 = accessToken13.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group18 = osiamConnector5.createGroup(group6, accessToken13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The string \"AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16\" for the URI component SCHEME contains an invalid character, ' ', at index 11.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(scopeSet16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02021");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService4 = builder3.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.util.Date date12 = accessToken11.getExpiresAt();
        java.lang.String str13 = accessToken11.getRefreshToken();
        java.lang.String str14 = accessToken11.getType();
        java.lang.String str15 = accessToken11.getClientId();
        java.lang.String str16 = accessToken11.getUserName();
        java.lang.String str17 = accessToken11.toString();
        java.lang.String str18 = accessToken11.getUserName();
        java.lang.String str19 = authService4.extractErrorMessageForbidden(accessToken11);
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        java.lang.String str27 = accessToken26.toString();
        java.lang.String str28 = accessToken26.getType();
        boolean boolean29 = accessToken26.isExpired();
        java.util.Date date30 = accessToken26.getExpiresAt();
        java.lang.String str31 = accessToken26.getToken();
        // The following exception was thrown during execution in test generation
        try {
            authService4.revokeAccessToken(accessToken26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(authService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str17, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str27, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Bearer " + "'", str31, "Bearer ");
    }

    @Test
    public void test02022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02022");
        org.osiam.client.exception.UnauthorizedException unauthorizedException1 = new org.osiam.client.exception.UnauthorizedException("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.OsiamClientException: ME");
    }

    @Test
    public void test02023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02023");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException1 = new org.osiam.client.exception.ConnectionInitializationException("org.osiam.client.exception.UnauthorizedException: PATCH");
    }

    @Test
    public void test02024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02024");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getRefreshToken();
        boolean boolean17 = accessToken13.isExpired();
        java.lang.String str18 = accessToken13.getRefreshToken();
        java.lang.String str19 = accessToken13.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector5.deleteUser("GET POST PUT PATCH DELETE", accessToken13);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test02025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02025");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.getEmptyValue();
        java.util.Collection<java.lang.Object> objCollection7 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.core.JsonParser jsonParser8 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        java.util.Date date21 = accessToken20.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder11.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder11.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder11.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        boolean boolean34 = accessToken33.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet35 = accessToken33.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder26.addScopes(scopeSet35);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet37 = scopeDeserializer0.deserialize(jsonParser8, deserializationContext9, scopeSet35);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Can not update object of type java.util.HashSet (by deserializer of type org.osiam.client.helper.ScopeDeserializer)");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNull(scopeSet6);
        org.junit.Assert.assertNull(objCollection7);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(scopeSet35);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test02026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02026");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.toString();
        java.lang.String str23 = query20.toString();
        int int24 = query20.getCount();
        long long25 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder26 = osiamConnector7.createQueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        org.osiam.client.query.Query query37 = queryBuilder35.build();
        java.lang.String str38 = query37.getSortBy();
        java.lang.String str39 = query37.getFilter();
        int int40 = query37.getCount();
        long long41 = query37.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder42 = osiamConnector7.createQueryBuilder(query37);
        org.osiam.resources.scim.UpdateGroup updateGroup44 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date47 = null;
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.setRefreshTokenExpiresAt(date47);
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder46.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken51 = builder50.build();
        boolean boolean52 = accessToken51.isRefreshTokenExpired();
        java.lang.String str53 = accessToken51.getUserId();
        java.lang.String str54 = accessToken51.getClientId();
        java.lang.String str55 = accessToken51.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group56 = osiamConnector7.updateGroup("Insufficient scopes: []", updateGroup44, accessToken51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertNotNull(query37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(accessToken51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test02027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02027");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.OsiamGroupService.Builder builder8 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken16.getScopes();
        java.lang.String str19 = osiamGroupService9.extractErrorMessageForbidden(accessToken16);
        boolean boolean20 = accessToken16.isClientOnly();
        java.lang.String str21 = authService6.extractErrorMessageForbidden(accessToken16);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken30 = builder27.build();
        java.lang.String str31 = accessToken30.toString();
        java.lang.String str32 = authService6.extractErrorMessageForbidden(accessToken30);
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        java.util.Date date40 = accessToken39.getExpiresAt();
        java.lang.String str41 = accessToken39.getRefreshToken();
        java.lang.String str42 = accessToken39.getType();
        java.lang.String str43 = accessToken39.getClientId();
        java.lang.String str44 = accessToken39.getUserName();
        java.lang.String str45 = authService6.extractErrorMessageForbidden(accessToken39);
        org.osiam.client.oauth.AccessToken.Builder builder47 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date48 = null;
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.setRefreshTokenExpiresAt(date48);
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder47.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken52 = builder51.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken52);
        java.util.Date date54 = accessToken52.getExpiresAt();
        java.lang.String str55 = authService6.extractErrorMessageForbidden(accessToken52);
        org.osiam.client.oauth.AccessToken.Builder builder58 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date59 = null;
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setRefreshTokenExpiresAt(date59);
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder58.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken63 = builder62.build();
        java.lang.String str64 = accessToken63.toString();
        java.lang.String str65 = accessToken63.getType();
        boolean boolean66 = accessToken63.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            authService6.revokeAllAccessTokens("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken63);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str31, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Insufficient scopes: []" + "'", str45, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(accessToken52);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Insufficient scopes: []" + "'", str55, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(accessToken63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str64, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test02028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02028");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken accessToken9 = null;
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector7.revokeAllAccessTokens("org.osiam.client.exception.ConflictException: org.osiam.client.exception.UnauthorizedException: PATCH", accessToken9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
    }

    @Test
    public void test02029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02029");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientId("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setEndpoint("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector osiamConnector19 = builder18.build();
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.addScope(scope23);
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException27 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean28 = scope25.equals((java.lang.Object) invalidAttributeException27);
        java.lang.String str29 = scope25.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder22.addScope(scope25);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder36.setUserId("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken41 = builder36.build();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector19.revokeAllAccessTokens("POST", accessToken41);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GET" + "'", str29, "GET");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(accessToken41);
    }

    @Test
    public void test02030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02030");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer7 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer8 = scopeSetJsonDeserializer6.unwrappingDeserializer(nameTransformer7);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = scopeSetJsonDeserializer8.getNullValue();
        com.fasterxml.jackson.core.JsonParser jsonParser10 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext11 = null;
        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeserializer12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj13 = scopeSetJsonDeserializer8.deserializeWithType(jsonParser10, deserializationContext11, typeDeserializer12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer8);
        org.junit.Assert.assertNull(scopeSet9);
    }

    @Test
    public void test02031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02031");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector5.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder33 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder35.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.descending("hi!");
        org.osiam.client.query.Query query42 = queryBuilder41.build();
        java.lang.String str43 = query42.toString();
        java.lang.String str44 = query42.getSortOrder();
        java.lang.String str45 = query42.getSortBy();
        java.lang.String str46 = query42.getFilter();
        java.lang.String str47 = query42.getSortOrder();
        java.lang.String str48 = query42.getAttributes();
        java.lang.String str49 = query42.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder50 = osiamConnector5.createQueryBuilder(query42);
        org.osiam.resources.scim.User user52 = null;
        org.osiam.client.oauth.AccessToken.Builder builder54 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date55 = null;
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setRefreshTokenExpiresAt(date55);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder54.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken59 = builder58.build();
        java.util.Date date60 = accessToken59.getExpiresAt();
        java.lang.String str61 = accessToken59.getUserName();
        java.lang.String str62 = accessToken59.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user63 = osiamConnector5.replaceUser("ascending", user52, accessToken59);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "descending" + "'", str47, "descending");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Authorization" + "'", str48, "Authorization");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Authorization" + "'", str49, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(accessToken59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test02032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02032");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder7 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder7.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet17 = accessToken15.getScopes();
        java.lang.String str18 = osiamGroupService8.extractErrorMessageForbidden(accessToken15);
        boolean boolean19 = accessToken15.isClientOnly();
        boolean boolean20 = accessToken15.isClientOnly();
        java.lang.String str21 = accessToken15.toString();
        java.lang.String str22 = osiamGroupService4.extractErrorMessageForbidden(accessToken15);
        org.osiam.resources.scim.Group group23 = null;
        org.osiam.client.oauth.AccessToken accessToken24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group25 = osiamGroupService4.createResource(group23, accessToken24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(scopeSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str21, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Insufficient scopes: []" + "'", str22, "Insufficient scopes: []");
    }

    @Test
    public void test02033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02033");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.ConflictException: PATCH");
    }

    @Test
    public void test02034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02034");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder4 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.descending("hi!");
        org.osiam.client.query.Query query13 = queryBuilder12.build();
        java.lang.String str14 = query13.getAttributes();
        java.lang.String str15 = query13.getSortOrder();
        java.lang.String str16 = query13.toString();
        java.lang.String str17 = query13.getSortOrder();
        org.osiam.client.OsiamGroupService.Builder builder19 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService20 = builder19.build();
        org.osiam.client.OsiamGroupService osiamGroupService21 = builder19.build();
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken28);
        java.lang.String str30 = osiamGroupService21.extractErrorMessageForbidden(accessToken28);
        java.util.Date date31 = accessToken28.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken28);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult33 = osiamUserService3.searchUsers(query13, accessToken28);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Authorization" + "'", str14, "Authorization");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "descending" + "'", str15, "descending");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str16, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "descending" + "'", str17, "descending");
        org.junit.Assert.assertNotNull(osiamGroupService20);
        org.junit.Assert.assertNotNull(osiamGroupService21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Insufficient scopes: []" + "'", str30, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02035");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        java.util.Date date15 = accessToken14.getExpiresAt();
        java.lang.String str16 = accessToken14.getRefreshToken();
        boolean boolean17 = accessToken14.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken14);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser19 = osiamConnector7.getCurrentUserBasic(accessToken14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test02036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02036");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector7.createQueryBuilder();
        org.osiam.client.oauth.AccessToken accessToken23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user24 = osiamConnector7.getCurrentUser(accessToken23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder22);
    }

    @Test
    public void test02037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02037");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        java.lang.String str13 = accessToken12.toString();
        java.lang.String str14 = accessToken12.getType();
        boolean boolean15 = accessToken12.isExpired();
        java.util.Date date16 = accessToken12.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser17 = osiamUserService5.getCurrentUserBasic(accessToken12);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str13, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02038");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        java.util.Date date29 = accessToken28.getExpiresAt();
        java.lang.String str30 = accessToken28.getRefreshToken();
        java.lang.String str31 = accessToken28.getType();
        java.lang.String str32 = accessToken28.getClientId();
        java.lang.String str33 = accessToken28.toString();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector7.revokeAccessToken(accessToken28);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str33, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test02039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02039");
        org.osiam.client.exception.OsiamClientException osiamClientException1 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.ConnectionInitializationException: PATCH");
    }

    @Test
    public void test02040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02040");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.resources.scim.UpdateUser updateUser5 = null;
        org.osiam.client.AuthService.Builder builder7 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientId("ME");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService12 = builder11.build();
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        boolean boolean20 = accessToken19.isRefreshTokenExpired();
        boolean boolean21 = accessToken19.isClientOnly();
        java.lang.String str22 = accessToken19.getClientId();
        java.lang.String str23 = authService12.extractErrorMessageForbidden(accessToken19);
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        boolean boolean31 = accessToken30.isRefreshTokenExpired();
        boolean boolean32 = accessToken30.isClientOnly();
        java.lang.String str33 = accessToken30.getRefreshToken();
        boolean boolean34 = accessToken30.isExpired();
        boolean boolean35 = accessToken30.isRefreshTokenExpired();
        org.osiam.client.AuthService.Builder builder37 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder39 = builder37.setClientId("ME");
        boolean boolean40 = accessToken30.equals((java.lang.Object) builder37);
        boolean boolean41 = accessToken30.isRefreshTokenExpired();
        java.lang.String str42 = authService12.extractErrorMessageForbidden(accessToken30);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user43 = osiamUserService3.updateUser("", updateUser5, accessToken30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(authService12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Insufficient scopes: []" + "'", str23, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Insufficient scopes: []" + "'", str42, "Insufficient scopes: []");
    }

    @Test
    public void test02041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02041");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.OsiamGroupService.Builder builder7 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder7.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        java.util.Date date16 = accessToken15.getExpiresAt();
        java.lang.String str17 = accessToken15.getRefreshToken();
        boolean boolean18 = accessToken15.isClientOnly();
        java.lang.String str19 = osiamGroupService8.extractErrorMessageForbidden(accessToken15);
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        java.util.Date date27 = accessToken26.getExpiresAt();
        java.lang.String str28 = accessToken26.getUserName();
        java.util.Date date29 = accessToken26.getRefreshTokenExpiresAt();
        java.lang.String str30 = osiamGroupService8.extractErrorMessageForbidden(accessToken26);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList31 = osiamConnector5.getAllUsers(accessToken26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Insufficient scopes: []" + "'", str30, "Insufficient scopes: []");
    }

    @Test
    public void test02042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02042");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        boolean boolean12 = accessToken9.isClientOnly();
        java.lang.String str13 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        java.util.Date date21 = accessToken20.getExpiresAt();
        java.lang.String str22 = accessToken20.getUserName();
        java.util.Date date23 = accessToken20.getRefreshTokenExpiresAt();
        java.lang.String str24 = osiamGroupService2.extractErrorMessageForbidden(accessToken20);
        org.osiam.resources.scim.Group group25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken34 = builder31.build();
        java.util.Date date35 = accessToken34.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group36 = osiamGroupService2.createGroup(group25, accessToken34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Insufficient scopes: []" + "'", str13, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Insufficient scopes: []" + "'", str24, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(accessToken34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02043");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken13 = builder10.build();
        boolean boolean14 = accessToken13.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group15 = osiamGroupService3.getGroup("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]", accessToken13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test02044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02044");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setEndpoint("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.OsiamConnector osiamConnector15 = builder14.build();
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        java.util.Date date23 = accessToken22.getExpiresAt();
        java.lang.String str24 = accessToken22.getRefreshToken();
        boolean boolean25 = accessToken22.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector15.revokeAccessToken(accessToken22);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test02045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02045");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.descending("hi!");
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        java.lang.String str16 = query15.toString();
        java.lang.String str17 = query15.toString();
        java.lang.String str18 = query15.getFilter();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        boolean boolean26 = accessToken25.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet27 = accessToken25.getScopes();
        boolean boolean28 = accessToken25.isClientOnly();
        java.lang.Object obj29 = null;
        boolean boolean30 = accessToken25.equals(obj29);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult31 = osiamUserService5.searchUsers(query15, accessToken25);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str16, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str17, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(scopeSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test02046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02046");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        boolean boolean13 = accessToken11.isClientOnly();
        java.lang.String str14 = accessToken11.getRefreshToken();
        boolean boolean15 = accessToken11.isExpired();
        boolean boolean16 = accessToken11.isRefreshTokenExpired();
        java.lang.String str17 = accessToken11.getToken();
        java.util.Date date18 = accessToken11.getRefreshTokenExpiresAt();
        boolean boolean19 = accessToken11.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser20 = osiamUserService4.getCurrentUserBasic(accessToken11);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Bearer " + "'", str17, "Bearer ");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test02047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02047");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder12.setResourceServerEndpoint("hi!");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setEndpoint("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector osiamConnector21 = builder20.build();
        org.osiam.resources.scim.UpdateGroup updateGroup23 = null;
        org.osiam.client.oauth.AccessToken accessToken24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group25 = osiamConnector21.updateGroup("GET", updateGroup23, accessToken24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
    }

    @Test
    public void test02048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02048");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        boolean boolean3 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer4 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.core.JsonParser jsonParser5 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet7 = scopeDeserializer0.deserialize(jsonParser5, deserializationContext6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardJsonDeserializer4);
    }

    @Test
    public void test02049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02049");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService4 = builder3.build();
        org.osiam.client.AuthService.Builder builder6 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientId("ME");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService15 = builder14.build();
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        boolean boolean23 = accessToken22.isRefreshTokenExpired();
        java.lang.String str24 = accessToken22.getUserId();
        java.lang.String str25 = accessToken22.getToken();
        java.lang.String str26 = authService15.extractErrorMessageForbidden(accessToken22);
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str28 = scope27.getValue();
        java.lang.String str29 = scope27.toString();
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray31 = new org.osiam.client.oauth.Scope[] { scope27, scope30 };
        java.net.URI uRI32 = authService15.getAuthorizationUri(scopeArray31);
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI33 = authService4.getAuthorizationUri(scopeArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Can't create the login uri: redirect URI was not set.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(authService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(authService15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Bearer " + "'", str25, "Bearer ");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Insufficient scopes: []" + "'", str26, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PATCH" + "'", str28, "PATCH");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PATCH" + "'", str29, "PATCH");
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scopeArray31);
        org.junit.Assert.assertNotNull(uRI32);
    }

    @Test
    public void test02050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02050");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder1.build();
        org.osiam.resources.scim.Group group8 = null;
        org.osiam.client.OsiamGroupService.Builder builder10 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService11 = builder10.build();
        org.osiam.client.OsiamGroupService osiamGroupService12 = builder10.build();
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService12.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService12.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        java.lang.String str23 = accessToken21.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet24 = accessToken21.getScopes();
        java.lang.String str25 = osiamGroupService12.extractErrorMessageForbidden(accessToken21);
        java.lang.String str26 = accessToken21.getUserId();
        java.lang.String str27 = accessToken21.getClientId();
        java.lang.String str28 = accessToken21.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group29 = osiamGroupService6.replaceGroup("2024-03-22T13:51:20.388", group8, accessToken21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(osiamGroupService11);
        org.junit.Assert.assertNotNull(osiamGroupService12);
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(scopeSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test02051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02051");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        java.lang.String str15 = accessToken13.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.descending("hi!");
        org.osiam.client.query.Query query25 = queryBuilder24.build();
        java.lang.String str26 = query25.toString();
        java.lang.String str27 = query25.getSortOrder();
        java.lang.String str28 = query25.getSortBy();
        java.lang.String str29 = query25.getFilter();
        java.lang.String str30 = query25.toString();
        boolean boolean31 = accessToken13.equals((java.lang.Object) query25);
        java.lang.String str32 = accessToken13.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector5.deleteGroup("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(query25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str26, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "descending" + "'", str27, "descending");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str30, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test02052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02052");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.OsiamGroupService.Builder builder12 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService13 = builder12.build();
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        boolean boolean21 = accessToken20.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet22 = accessToken20.getScopes();
        java.lang.String str23 = osiamGroupService13.extractErrorMessageForbidden(accessToken20);
        java.lang.String str24 = accessToken20.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user25 = osiamConnector7.getCurrentUser(accessToken20);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(osiamGroupService13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(scopeSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Insufficient scopes: []" + "'", str23, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str24, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test02053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02053");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        boolean boolean18 = accessToken17.isRefreshTokenExpired();
        java.lang.String str19 = authService10.extractErrorMessageForbidden(accessToken17);
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        java.lang.String str23 = accessToken22.toString();
        java.lang.String str24 = accessToken22.getUserId();
        org.osiam.client.AuthService.Builder builder26 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder28 = builder26.setClientId("ME");
        org.osiam.client.AuthService.Builder builder30 = builder28.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder32 = builder30.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder34 = builder32.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService35 = builder34.build();
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken42 = builder41.build();
        boolean boolean43 = accessToken42.isRefreshTokenExpired();
        java.lang.String str44 = accessToken42.getUserId();
        java.lang.String str45 = accessToken42.getToken();
        java.lang.String str46 = authService35.extractErrorMessageForbidden(accessToken42);
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str48 = scope47.getValue();
        java.lang.String str49 = scope47.toString();
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray51 = new org.osiam.client.oauth.Scope[] { scope47, scope50 };
        java.net.URI uRI52 = authService35.getAuthorizationUri(scopeArray51);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken53 = authService10.refreshAccessToken(accessToken22, scopeArray51);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str23, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(authService35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Bearer " + "'", str45, "Bearer ");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Insufficient scopes: []" + "'", str46, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PATCH" + "'", str48, "PATCH");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PATCH" + "'", str49, "PATCH");
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertNotNull(scopeArray51);
        org.junit.Assert.assertNotNull(uRI52);
    }

    @Test
    public void test02054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02054");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet13 = accessToken11.getScopes();
        boolean boolean14 = accessToken11.isClientOnly();
        java.lang.Object obj15 = null;
        boolean boolean16 = accessToken11.equals(obj15);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken11);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser18 = osiamUserService4.getCurrentUserBasic(accessToken11);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(scopeSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test02055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02055");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Cannot connect to server");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.util.Date date11 = accessToken10.getExpiresAt();
        java.lang.String str12 = accessToken10.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str14 = accessToken10.getClientId();
        boolean boolean15 = accessToken10.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user16 = osiamUserService2.createUser(user3, accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test02056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02056");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet5 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.core.JsonParser jsonParser6 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext7 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer8 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean9 = scopeSerializer8.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer10 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer11 = scopeSerializer8.unwrappingSerializer(nameTransformer10);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str25 = scope24.toString();
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str28 = scope27.getValue();
        java.lang.String str29 = scope27.getValue();
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException32 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean33 = scope30.equals((java.lang.Object) invalidAttributeException32);
        java.lang.String str34 = scope30.getValue();
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException40 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean41 = scope38.equals((java.lang.Object) invalidAttributeException40);
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.GET;
        boolean boolean46 = scope44.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray48 = new org.osiam.client.oauth.Scope[] { scope17, scope18, scope23, scope24, scope26, scope27, scope30, scope35, scope36, scope37, scope38, scope42, scope43, scope44, scope47 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet49 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet49, scopeArray48);
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder14.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet49);
        boolean boolean52 = scopeSetJsonSerializer11.isEmpty(serializerProvider12, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet49);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet53 = scopeDeserializer0.deserialize(jsonParser6, deserializationContext7, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet49);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Can not update object of type java.util.LinkedHashSet (by deserializer of type org.osiam.client.helper.ScopeDeserializer)");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(scopeSet5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ME" + "'", str25, "ME");
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PATCH" + "'", str28, "PATCH");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PATCH" + "'", str29, "PATCH");
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "GET" + "'", str34, "GET");
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertNotNull(scopeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test02057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02057");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.getUserName();
        java.lang.String str15 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService2.targetEndpoint;
        org.osiam.client.AuthService.Builder builder20 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientId("ME");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService25 = builder24.build();
        org.osiam.client.OsiamGroupService.Builder builder27 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService28 = builder27.build();
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        boolean boolean36 = accessToken35.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet37 = accessToken35.getScopes();
        java.lang.String str38 = osiamGroupService28.extractErrorMessageForbidden(accessToken35);
        boolean boolean39 = accessToken35.isClientOnly();
        java.lang.String str40 = authService25.extractErrorMessageForbidden(accessToken35);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken49 = builder46.build();
        java.lang.String str50 = accessToken49.toString();
        java.lang.String str51 = authService25.extractErrorMessageForbidden(accessToken49);
        org.osiam.client.oauth.AccessToken.Builder builder53 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date54 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.setRefreshTokenExpiresAt(date54);
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder53.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken58 = builder57.build();
        java.util.Date date59 = accessToken58.getExpiresAt();
        java.lang.String str60 = accessToken58.getRefreshToken();
        java.lang.String str61 = accessToken58.getType();
        java.lang.String str62 = accessToken58.getClientId();
        java.lang.String str63 = accessToken58.getUserName();
        java.lang.String str64 = authService25.extractErrorMessageForbidden(accessToken58);
        org.osiam.client.exception.UnauthorizedException unauthorizedException66 = new org.osiam.client.exception.UnauthorizedException("client_credentials");
        int int67 = unauthorizedException66.getHttpStatusCode();
        int int68 = unauthorizedException66.getHttpStatusCode();
        java.lang.Throwable[] throwableArray69 = unauthorizedException66.getSuppressed();
        boolean boolean70 = accessToken58.equals((java.lang.Object) unauthorizedException66);
        java.lang.String str71 = accessToken58.getType();
        java.util.Date date72 = accessToken58.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.deleteResource("ME", accessToken58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget16);
        org.junit.Assert.assertNotNull(webTarget17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(authService25);
        org.junit.Assert.assertNotNull(osiamGroupService28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(scopeSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Insufficient scopes: []" + "'", str38, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Insufficient scopes: []" + "'", str40, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str50, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Insufficient scopes: []" + "'", str51, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(accessToken58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Insufficient scopes: []" + "'", str64, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 401 + "'", int67 == 401);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 401 + "'", int68 == 401);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02058");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder1.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService6 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder9 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        boolean boolean18 = accessToken17.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet19 = accessToken17.getScopes();
        java.lang.String str20 = osiamGroupService10.extractErrorMessageForbidden(accessToken17);
        javax.ws.rs.client.WebTarget webTarget21 = osiamGroupService10.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget22 = osiamGroupService10.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken29 = builder28.build();
        boolean boolean30 = accessToken29.isRefreshTokenExpired();
        java.lang.String str31 = accessToken29.getUserName();
        java.lang.String str32 = accessToken29.toString();
        java.lang.String str33 = osiamGroupService10.extractErrorMessageForbidden(accessToken29);
        // The following exception was thrown during execution in test generation
        try {
            authService6.revokeAllAccessTokens("ME", accessToken29);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(osiamGroupService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(scopeSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget21);
        org.junit.Assert.assertNotNull(webTarget22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str32, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Insufficient scopes: []" + "'", str33, "Insufficient scopes: []");
    }

    @Test
    public void test02059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02059");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("authorization_code");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.util.Date date11 = accessToken10.getExpiresAt();
        java.lang.String str12 = accessToken10.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        boolean boolean21 = accessToken20.isRefreshTokenExpired();
        boolean boolean22 = accessToken20.isClientOnly();
        java.lang.String str23 = accessToken20.getClientId();
        boolean boolean24 = accessToken20.isClientOnly();
        boolean boolean25 = accessToken10.equals((java.lang.Object) accessToken20);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user26 = osiamUserService2.createUser(user3, accessToken20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test02060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02060");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService4 = builder3.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.util.Date date12 = accessToken11.getExpiresAt();
        java.lang.String str13 = accessToken11.getRefreshToken();
        java.lang.String str14 = accessToken11.getType();
        java.lang.String str15 = accessToken11.getClientId();
        java.lang.String str16 = accessToken11.getUserName();
        java.lang.String str17 = accessToken11.toString();
        java.lang.String str18 = accessToken11.getUserName();
        java.lang.String str19 = authService4.extractErrorMessageForbidden(accessToken11);
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        java.lang.String str28 = accessToken26.getUserId();
        java.lang.String str29 = accessToken26.getClientId();
        boolean boolean30 = accessToken26.isClientOnly();
        java.lang.String str31 = accessToken26.getRefreshToken();
        java.lang.String str32 = authService4.extractErrorMessageForbidden(accessToken26);
        org.osiam.client.AuthService.Builder builder34 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder36 = builder34.setClientId("ME");
        org.osiam.client.AuthService.Builder builder38 = builder36.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder40 = builder38.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder42 = builder40.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService43 = builder42.build();
        org.osiam.client.oauth.AccessToken.Builder builder45 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setRefreshTokenExpiresAt(date46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder45.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken50 = builder49.build();
        boolean boolean51 = accessToken50.isRefreshTokenExpired();
        java.lang.String str52 = accessToken50.getUserId();
        java.lang.String str53 = accessToken50.getToken();
        java.lang.String str54 = authService43.extractErrorMessageForbidden(accessToken50);
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str56 = scope55.getValue();
        java.lang.String str57 = scope55.toString();
        org.osiam.client.oauth.Scope scope58 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray59 = new org.osiam.client.oauth.Scope[] { scope55, scope58 };
        java.net.URI uRI60 = authService43.getAuthorizationUri(scopeArray59);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken61 = authService4.retrieveAccessToken(scopeArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(authService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str17, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(authService43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(accessToken50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Bearer " + "'", str53, "Bearer ");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Insufficient scopes: []" + "'", str54, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PATCH" + "'", str56, "PATCH");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PATCH" + "'", str57, "PATCH");
        org.junit.Assert.assertNotNull(scope58);
        org.junit.Assert.assertNotNull(scopeArray59);
        org.junit.Assert.assertNotNull(uRI60);
    }

    @Test
    public void test02061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02061");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        java.util.Date date15 = accessToken13.getExpiresAt();
        java.lang.String str16 = osiamGroupService6.extractErrorMessageForbidden(accessToken13);
        org.osiam.client.oauth.AccessToken accessToken17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = osiamGroupService6.extractErrorMessageForbidden(accessToken17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Insufficient scopes: []" + "'", str16, "Insufficient scopes: []");
    }

    @Test
    public void test02062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02062");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.UpdateUser updateUser4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken11);
        java.util.Date date13 = accessToken11.getExpiresAt();
        boolean boolean14 = accessToken11.isRefreshTokenExpired();
        java.util.Date date15 = accessToken11.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user16 = osiamUserService2.updateUser("", updateUser4, accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02063");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getClientId();
        boolean boolean17 = accessToken13.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.addScope(scope20);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException24 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean25 = scope22.equals((java.lang.Object) invalidAttributeException24);
        java.lang.String str26 = scope22.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder19.addScope(scope22);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setUserName("Authorization");
        boolean boolean34 = accessToken13.equals((java.lang.Object) builder31);
        java.lang.String str35 = osiamGroupService6.extractErrorMessageForbidden(accessToken13);
        org.osiam.client.query.QueryBuilder queryBuilder36 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder42 = queryBuilder38.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder44 = queryBuilder42.descending("hi!");
        org.osiam.client.query.Query query45 = queryBuilder44.build();
        java.lang.String str46 = query45.toString();
        java.lang.String str47 = query45.getSortOrder();
        org.osiam.client.oauth.AccessToken.Builder builder49 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.addScope(scope50);
        org.osiam.client.oauth.Scope scope52 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException54 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean55 = scope52.equals((java.lang.Object) invalidAttributeException54);
        java.lang.String str56 = scope52.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder49.addScope(scope52);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setClientId("Bearer ");
        org.osiam.client.oauth.Scope scope60 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str61 = scope60.toString();
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder57.addScope(scope60);
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder57.setType("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken65 = builder64.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult66 = osiamGroupService6.searchResources(query45, accessToken65);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GET" + "'", str26, "GET");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(query45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str46, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "descending" + "'", str47, "descending");
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(scope52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "GET" + "'", str56, "GET");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(scope60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ME" + "'", str61, "ME");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(accessToken65);
    }

    @Test
    public void test02064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02064");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.resources.scim.Group group5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.addScope(scope8);
        org.osiam.client.oauth.Scope scope10 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException12 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean13 = scope10.equals((java.lang.Object) invalidAttributeException12);
        java.lang.String str14 = scope10.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder7.addScope(scope10);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setClientId("Bearer ");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str19 = scope18.toString();
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder15.addScope(scope18);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder15.setType("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group24 = osiamGroupService4.createGroup(group5, accessToken23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(scope10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GET" + "'", str14, "GET");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ME" + "'", str19, "ME");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
    }

    @Test
    public void test02065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02065");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope7 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.addScope(scope7);
        org.osiam.client.oauth.Scope scope9 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException11 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean12 = scope9.equals((java.lang.Object) invalidAttributeException11);
        java.lang.String str13 = scope9.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder6.addScope(scope9);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken25 = builder20.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group26 = osiamGroupService2.getResource("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken25);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(scope7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(scope9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GET" + "'", str13, "GET");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
    }

    @Test
    public void test02066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02066");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getClientId();
        boolean boolean17 = accessToken13.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.addScope(scope20);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException24 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean25 = scope22.equals((java.lang.Object) invalidAttributeException24);
        java.lang.String str26 = scope22.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder19.addScope(scope22);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setUserName("Authorization");
        boolean boolean34 = accessToken13.equals((java.lang.Object) builder31);
        java.lang.String str35 = osiamGroupService6.extractErrorMessageForbidden(accessToken13);
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        java.util.Date date44 = accessToken43.getExpiresAt();
        java.util.Date date45 = accessToken43.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group46 = osiamGroupService6.getGroup("org.osiam.client.exception.OsiamRequestException: hi!", accessToken43);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GET" + "'", str26, "GET");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02067");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = osiamGroupService2.extractErrorMessageUnauthorized("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: descending", statusType15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
    }

    @Test
    public void test02068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02068");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService3.targetEndpoint;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group8 = osiamGroupService3.mapToResource("Cannot connect to server");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: Cannot connect to server");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
    }

    @Test
    public void test02069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02069");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setEndpoint("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.OsiamConnector osiamConnector15 = builder14.build();
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        boolean boolean24 = accessToken23.isRefreshTokenExpired();
        java.lang.String str25 = accessToken23.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder26 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder26.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder32 = queryBuilder28.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.descending("hi!");
        org.osiam.client.query.Query query35 = queryBuilder34.build();
        java.lang.String str36 = query35.toString();
        java.lang.String str37 = query35.getSortOrder();
        java.lang.String str38 = query35.getSortBy();
        java.lang.String str39 = query35.getFilter();
        java.lang.String str40 = query35.toString();
        boolean boolean41 = accessToken23.equals((java.lang.Object) query35);
        java.util.Date date42 = accessToken23.getExpiresAt();
        java.lang.String str43 = accessToken23.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group44 = osiamConnector15.getGroup("", accessToken23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(query35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str36, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "descending" + "'", str37, "descending");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str40, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test02070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02070");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder1.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService6 = builder1.build();
        org.osiam.client.AuthService.Builder builder8 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientId("ME");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder16 = builder14.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService17 = builder16.build();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.addScope(scope20);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException24 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean25 = scope22.equals((java.lang.Object) invalidAttributeException24);
        java.lang.String str26 = scope22.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder19.addScope(scope22);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder35 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.addScope(scope36);
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException40 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean41 = scope38.equals((java.lang.Object) invalidAttributeException40);
        java.lang.String str42 = scope38.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder35.addScope(scope38);
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder31.addScope(scope38);
        org.osiam.client.oauth.AccessToken.Builder builder46 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.addScope(scope47);
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException51 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean52 = scope49.equals((java.lang.Object) invalidAttributeException51);
        java.lang.String str53 = scope49.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder46.addScope(scope49);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder62 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope63 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.addScope(scope63);
        org.osiam.client.oauth.Scope scope65 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException67 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean68 = scope65.equals((java.lang.Object) invalidAttributeException67);
        java.lang.String str69 = scope65.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder62.addScope(scope65);
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder58.addScope(scope65);
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder31.addScope(scope65);
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder72.setType("");
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder72.setClientId("Insufficient scopes: []");
        org.osiam.client.oauth.Scope scope77 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str78 = scope77.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder72.addScope(scope77);
        org.osiam.client.oauth.Scope[] scopeArray80 = new org.osiam.client.oauth.Scope[] { scope77 };
        java.net.URI uRI81 = authService17.getAuthorizationUri(scopeArray80);
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI82 = authService6.getAuthorizationUri(scopeArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Can't create the login uri: redirect URI was not set.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(authService17);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GET" + "'", str26, "GET");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GET" + "'", str42, "GET");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "GET" + "'", str53, "GET");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(scope63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(scope65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "GET" + "'", str69, "GET");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(scope77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "PUT" + "'", str78, "PUT");
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(scopeArray80);
        org.junit.Assert.assertNotNull(uRI81);
    }

    @Test
    public void test02071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02071");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setEndpoint("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.OsiamConnector osiamConnector15 = builder14.build();
        org.osiam.resources.scim.User user16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        java.lang.String str24 = accessToken23.toString();
        java.lang.String str25 = accessToken23.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user26 = osiamConnector15.createUser(user16, accessToken23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str24, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test02072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02072");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = osiamGroupService3.extractErrorMessageUnauthorized("org.osiam.client.exception.ConflictException: PATCH", statusType5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
    }

    @Test
    public void test02073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02073");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        java.lang.String str13 = query9.getFilter();
        java.lang.String str14 = query9.getSortOrder();
        java.lang.String str15 = query9.getAttributes();
        java.lang.String str16 = query9.getSortOrder();
        java.lang.String str17 = query9.getSortOrder();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.query.Query query18 = query9.previousPage();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: StartIndex < 1 is not possible.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "descending" + "'", str14, "descending");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Authorization" + "'", str15, "Authorization");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "descending" + "'", str16, "descending");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "descending" + "'", str17, "descending");
    }

    @Test
    public void test02074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02074");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder9.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken12 = authService10.retrieveAccessToken("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given authentication code can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
    }

    @Test
    public void test02075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02075");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet62 = accessToken60.getScopes();
        boolean boolean63 = scopeSerializer0.isEmpty(serializerProvider53, scopeSet62);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass64 = scopeSerializer0.handledType();
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper65 = null;
        com.fasterxml.jackson.databind.JavaType javaType66 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper65, javaType66);
        boolean boolean68 = scopeSerializer0.isUnwrappingSerializer();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass69 = scopeSerializer0.handledType();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(scopeSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(scopeSetClass64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(scopeSetClass69);
    }

    @Test
    public void test02076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02076");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setAuthServerEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setResourceServerEndpoint("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector15 = builder10.build();
        org.osiam.resources.scim.UpdateUser updateUser17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        java.lang.String str25 = accessToken24.toString();
        java.lang.String str26 = accessToken24.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user27 = osiamConnector15.updateUser("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", updateUser17, accessToken24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str25, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test02077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02077");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder1.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setUserId("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test02078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02078");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        boolean boolean12 = accessToken9.isClientOnly();
        java.lang.String str13 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        java.util.Date date21 = accessToken20.getExpiresAt();
        java.lang.String str22 = accessToken20.getUserName();
        java.util.Date date23 = accessToken20.getRefreshTokenExpiresAt();
        java.lang.String str24 = osiamGroupService2.extractErrorMessageForbidden(accessToken20);
        org.osiam.resources.scim.Group group25 = null;
        org.osiam.client.OsiamGroupService.Builder builder27 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService28 = builder27.build();
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        boolean boolean36 = accessToken35.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet37 = accessToken35.getScopes();
        java.lang.String str38 = osiamGroupService28.extractErrorMessageForbidden(accessToken35);
        boolean boolean39 = accessToken35.isClientOnly();
        boolean boolean40 = accessToken35.isClientOnly();
        java.lang.String str41 = accessToken35.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group42 = osiamGroupService2.createResource(group25, accessToken35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Insufficient scopes: []" + "'", str13, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Insufficient scopes: []" + "'", str24, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(scopeSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Insufficient scopes: []" + "'", str38, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str41, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test02079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02079");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder7 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder7.build();
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder7.build();
        javax.ws.rs.client.WebTarget webTarget10 = osiamGroupService9.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget11 = osiamGroupService9.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        boolean boolean19 = accessToken18.isRefreshTokenExpired();
        java.lang.String str20 = accessToken18.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet21 = accessToken18.getScopes();
        java.lang.String str22 = osiamGroupService9.extractErrorMessageForbidden(accessToken18);
        java.lang.String str23 = accessToken18.getUserId();
        java.lang.String str24 = accessToken18.getClientId();
        java.lang.String str25 = accessToken18.getClientId();
        boolean boolean26 = accessToken18.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            osiamUserService4.deleteUser("ascending", accessToken18);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(webTarget10);
        org.junit.Assert.assertNotNull(webTarget11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(scopeSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Insufficient scopes: []" + "'", str22, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test02080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02080");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        java.lang.String str15 = accessToken13.getUserId();
        java.lang.String str16 = accessToken13.getClientId();
        boolean boolean17 = accessToken13.isClientOnly();
        java.lang.String str18 = authService6.extractErrorMessageForbidden(accessToken13);
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        java.lang.String str27 = accessToken26.toString();
        java.lang.String str28 = accessToken26.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            authService6.revokeAllAccessTokens("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]", accessToken26);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str27, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test02081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02081");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder23 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.descending("hi!");
        org.osiam.client.query.Query query32 = queryBuilder31.build();
        java.lang.String str33 = query32.toString();
        java.lang.String str34 = query32.toString();
        org.osiam.client.query.Query query35 = query32.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder36 = osiamConnector7.createQueryBuilder(query32);
        org.osiam.resources.scim.User user38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date41 = null;
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setRefreshTokenExpiresAt(date41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder40.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken45 = builder44.build();
        boolean boolean46 = accessToken45.isRefreshTokenExpired();
        java.lang.String str47 = accessToken45.getUserId();
        java.lang.String str48 = accessToken45.getToken();
        boolean boolean49 = accessToken45.isExpired();
        java.lang.String str50 = accessToken45.getClientId();
        boolean boolean51 = accessToken45.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user52 = osiamConnector7.replaceUser("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]", user38, accessToken45);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(query32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str33, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str34, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query35);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(accessToken45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Bearer " + "'", str48, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test02082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02082");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer7 = scopeSetJsonDeserializer6.getDelegatee();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader8 = scopeSetJsonDeserializer6.getObjectIdReader();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer9 = scopeSetJsonDeserializer6.getDelegatee();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer10 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass11 = scopeDeserializer10.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer12 = scopeDeserializer10.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection13 = scopeDeserializer10.getKnownPropertyNames();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer14 = scopeDeserializer10.getDelegatee();
        boolean boolean15 = scopeDeserializer10.isCachable();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer16 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer17 = scopeDeserializer10.unwrappingDeserializer(nameTransformer16);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer18 = scopeSetJsonDeserializer6.replaceDelegatee(scopeSetJsonDeserializer17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNull(wildcardJsonDeserializer7);
        org.junit.Assert.assertNull(objectIdReader8);
        org.junit.Assert.assertNull(wildcardJsonDeserializer9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(wildcardJsonDeserializer12);
        org.junit.Assert.assertNull(objCollection13);
        org.junit.Assert.assertNull(wildcardJsonDeserializer14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer17);
    }

    @Test
    public void test02083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02083");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.OsiamGroupService.Builder builder12 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService13 = builder12.build();
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        boolean boolean21 = accessToken20.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet22 = accessToken20.getScopes();
        java.lang.String str23 = osiamGroupService13.extractErrorMessageForbidden(accessToken20);
        boolean boolean24 = accessToken20.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken20);
        java.lang.String str26 = authService10.extractErrorMessageForbidden(accessToken20);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken33);
        java.util.Date date35 = accessToken33.getExpiresAt();
        boolean boolean36 = accessToken33.isClientOnly();
        boolean boolean37 = accessToken33.isClientOnly();
        java.lang.String str38 = authService10.extractErrorMessageForbidden(accessToken33);
        org.osiam.client.oauth.AccessToken.Builder builder40 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date41 = null;
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setRefreshTokenExpiresAt(date41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder40.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken45 = builder44.build();
        boolean boolean46 = accessToken45.isRefreshTokenExpired();
        java.lang.String str47 = accessToken45.getUserId();
        java.lang.String str48 = accessToken45.getClientId();
        java.util.Date date49 = accessToken45.getRefreshTokenExpiresAt();
        java.lang.String str50 = authService10.extractErrorMessageForbidden(accessToken45);
        org.osiam.client.oauth.AccessToken.Builder builder52 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setRefreshTokenExpiresAt(date53);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder52.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken57 = builder56.build();
        java.util.Date date58 = accessToken57.getExpiresAt();
        java.lang.String str59 = accessToken57.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet60 = accessToken57.getScopes();
        org.osiam.client.AuthService.Builder builder62 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder64 = builder62.setClientId("ME");
        org.osiam.client.AuthService.Builder builder66 = builder64.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder68 = builder66.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder70 = builder68.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService71 = builder70.build();
        org.osiam.client.oauth.AccessToken.Builder builder73 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date74 = null;
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder73.setRefreshTokenExpiresAt(date74);
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder73.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken78 = builder77.build();
        boolean boolean79 = accessToken78.isRefreshTokenExpired();
        java.lang.String str80 = accessToken78.getUserId();
        java.lang.String str81 = accessToken78.getToken();
        java.lang.String str82 = authService71.extractErrorMessageForbidden(accessToken78);
        org.osiam.client.oauth.Scope scope83 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str84 = scope83.getValue();
        java.lang.String str85 = scope83.toString();
        org.osiam.client.oauth.Scope scope86 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray87 = new org.osiam.client.oauth.Scope[] { scope83, scope86 };
        java.net.URI uRI88 = authService71.getAuthorizationUri(scopeArray87);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken89 = authService10.refreshAccessToken(accessToken57, scopeArray87);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(osiamGroupService13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(scopeSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Insufficient scopes: []" + "'", str23, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Insufficient scopes: []" + "'", str26, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Insufficient scopes: []" + "'", str38, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(accessToken45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Insufficient scopes: []" + "'", str50, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(accessToken57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(scopeSet60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(authService71);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(accessToken78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Bearer " + "'", str81, "Bearer ");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Insufficient scopes: []" + "'", str82, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "PATCH" + "'", str84, "PATCH");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "PATCH" + "'", str85, "PATCH");
        org.junit.Assert.assertNotNull(scope86);
        org.junit.Assert.assertNotNull(scopeArray87);
        org.junit.Assert.assertNotNull(uRI88);
    }

    @Test
    public void test02084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02084");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader4 = scopeDeserializer0.getObjectIdReader();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(objectIdReader4);
    }

    @Test
    public void test02085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02085");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService2.targetEndpoint;
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.descending("hi!");
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder14.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Cannot connect to server");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.startIndex((long) (byte) 10);
        org.osiam.client.query.Query query22 = queryBuilder21.build();
        java.lang.String str23 = query22.toString();
        org.osiam.client.AuthService.Builder builder25 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientId("ME");
        org.osiam.client.AuthService.Builder builder29 = builder27.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService30 = builder29.build();
        org.osiam.client.OsiamGroupService.Builder builder32 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService33 = builder32.build();
        org.osiam.client.oauth.AccessToken.Builder builder35 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date36 = null;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setRefreshTokenExpiresAt(date36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder35.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken40 = builder39.build();
        boolean boolean41 = accessToken40.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet42 = accessToken40.getScopes();
        java.lang.String str43 = osiamGroupService33.extractErrorMessageForbidden(accessToken40);
        boolean boolean44 = accessToken40.isClientOnly();
        java.lang.String str45 = authService30.extractErrorMessageForbidden(accessToken40);
        java.lang.String str46 = accessToken40.getUserId();
        java.lang.String str47 = accessToken40.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult48 = osiamGroupService2.searchGroups(query22, accessToken40);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(query22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]" + "'", str23, "Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(authService30);
        org.junit.Assert.assertNotNull(osiamGroupService33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(accessToken40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(scopeSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Insufficient scopes: []" + "'", str43, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Insufficient scopes: []" + "'", str45, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Bearer " + "'", str47, "Bearer ");
    }

    @Test
    public void test02086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02086");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.resources.scim.UpdateGroup updateGroup23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        boolean boolean31 = accessToken30.isRefreshTokenExpired();
        boolean boolean32 = accessToken30.isClientOnly();
        java.lang.String str33 = accessToken30.getUserId();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken30);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group35 = osiamConnector7.updateGroup("org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", updateGroup23, accessToken30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test02087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02087");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.AuthService.Builder builder5 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientId("ME");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        boolean boolean18 = accessToken17.isRefreshTokenExpired();
        boolean boolean19 = accessToken17.isClientOnly();
        java.lang.String str20 = accessToken17.getClientId();
        java.lang.String str21 = authService10.extractErrorMessageForbidden(accessToken17);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        boolean boolean29 = accessToken28.isRefreshTokenExpired();
        java.lang.String str30 = accessToken28.getUserId();
        java.lang.String str31 = accessToken28.getClientId();
        java.lang.String str32 = accessToken28.getUserId();
        java.lang.String str33 = authService10.extractErrorMessageForbidden(accessToken28);
        java.util.Date date34 = accessToken28.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user35 = osiamUserService2.getUser("Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]", accessToken28);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Insufficient scopes: []" + "'", str33, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02088");
        org.osiam.client.OsiamConnector.setMaxConnectionsPerRoute(409);
    }

    @Test
    public void test02089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02089");
        org.osiam.client.exception.UnauthorizedException unauthorizedException1 = new org.osiam.client.exception.UnauthorizedException("client_credentials");
        int int2 = unauthorizedException1.getHttpStatusCode();
        int int3 = unauthorizedException1.getHttpStatusCode();
        java.lang.Throwable[] throwableArray4 = unauthorizedException1.getSuppressed();
        int int5 = unauthorizedException1.getHttpStatusCode();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 401 + "'", int2 == 401);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 401 + "'", int3 == 401);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 401 + "'", int5 == 401);
    }

    @Test
    public void test02090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02090");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.getUserName();
        java.lang.String str15 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        java.lang.String str24 = accessToken23.toString();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.deleteGroup("", accessToken23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str24, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test02091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02091");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer7 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer6);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeSetJsonDeserializer5.getEmptyValue();
        boolean boolean9 = scopeSetJsonDeserializer5.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet10 = scopeSetJsonDeserializer5.getNullValue();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer7);
        org.junit.Assert.assertNull(scopeSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(scopeSet10);
    }

    @Test
    public void test02092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02092");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group6 = osiamGroupService4.mapToResource("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
    }

    @Test
    public void test02093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02093");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector9.createQueryBuilder();
        org.osiam.resources.scim.UpdateUser updateUser12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        boolean boolean20 = accessToken19.isRefreshTokenExpired();
        java.lang.String str21 = accessToken19.getUserId();
        java.lang.String str22 = accessToken19.getClientId();
        java.util.Date date23 = accessToken19.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user24 = osiamConnector9.updateUser("ADMIN", updateUser12, accessToken19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02094");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.toString();
        java.lang.String str23 = query20.toString();
        int int24 = query20.getCount();
        long long25 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder26 = osiamConnector7.createQueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        java.lang.String str37 = query36.toString();
        java.lang.String str38 = query36.getSortOrder();
        java.lang.String str39 = query36.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder40 = new org.osiam.client.query.QueryBuilder(query36);
        org.osiam.client.query.QueryBuilder queryBuilder41 = osiamConnector7.createQueryBuilder(query36);
        org.osiam.client.oauth.AccessToken.Builder builder43 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date44 = null;
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setRefreshTokenExpiresAt(date44);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder43.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken48 = builder47.build();
        boolean boolean49 = accessToken48.isRefreshTokenExpired();
        boolean boolean50 = accessToken48.isClientOnly();
        java.lang.String str51 = accessToken48.getRefreshToken();
        boolean boolean52 = accessToken48.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList53 = osiamConnector7.getAllGroups(accessToken48);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str37, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "descending" + "'", str38, "descending");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(accessToken48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test02095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02095");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.resources.scim.User user23 = null;
        org.osiam.client.OsiamGroupService.Builder builder25 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService26 = builder25.build();
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        java.util.Date date34 = accessToken33.getExpiresAt();
        java.lang.String str35 = accessToken33.getUserName();
        java.lang.String str36 = accessToken33.toString();
        java.lang.String str37 = osiamGroupService26.extractErrorMessageForbidden(accessToken33);
        boolean boolean38 = accessToken33.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user39 = osiamConnector7.replaceUser("2024-03-22T13:51:20.388", user23, accessToken33);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(osiamGroupService26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str36, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Insufficient scopes: []" + "'", str37, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test02096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02096");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder12.setClientRedirectUri("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector23 = builder22.build();
        org.osiam.client.AuthService.Builder builder25 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientId("ME");
        org.osiam.client.AuthService.Builder builder29 = builder27.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder31 = builder29.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder33 = builder31.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService34 = builder33.build();
        org.osiam.client.oauth.AccessToken.Builder builder36 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date37 = null;
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setRefreshTokenExpiresAt(date37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder36.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken41 = builder40.build();
        boolean boolean42 = accessToken41.isRefreshTokenExpired();
        java.lang.String str43 = accessToken41.getUserId();
        java.lang.String str44 = accessToken41.getToken();
        java.lang.String str45 = authService34.extractErrorMessageForbidden(accessToken41);
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str47 = scope46.getValue();
        java.lang.String str48 = scope46.toString();
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray50 = new org.osiam.client.oauth.Scope[] { scope46, scope49 };
        java.net.URI uRI51 = authService34.getAuthorizationUri(scopeArray50);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken52 = osiamConnector23.retrieveAccessToken(scopeArray50);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(osiamConnector23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(authService34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(accessToken41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Bearer " + "'", str44, "Bearer ");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Insufficient scopes: []" + "'", str45, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PATCH" + "'", str47, "PATCH");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PATCH" + "'", str48, "PATCH");
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertNotNull(scopeArray50);
        org.junit.Assert.assertNotNull(uRI51);
    }

    @Test
    public void test02097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02097");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("password");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.util.Date date11 = accessToken10.getExpiresAt();
        java.lang.String str12 = accessToken10.getRefreshToken();
        java.lang.String str13 = accessToken10.getType();
        java.util.Date date14 = accessToken10.getExpiresAt();
        java.lang.String str15 = accessToken10.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user16 = osiamUserService2.getUser("ME", accessToken10);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test02098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02098");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector13 = builder8.build();
        org.osiam.client.AuthService.Builder builder17 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder19 = builder17.setClientId("ME");
        org.osiam.client.AuthService.Builder builder21 = builder19.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService26 = builder25.build();
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.addScope(scope29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException33 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean34 = scope31.equals((java.lang.Object) invalidAttributeException33);
        java.lang.String str35 = scope31.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder28.addScope(scope31);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.addScope(scope45);
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException49 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean50 = scope47.equals((java.lang.Object) invalidAttributeException49);
        java.lang.String str51 = scope47.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder44.addScope(scope47);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder40.addScope(scope47);
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope56 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.addScope(scope56);
        org.osiam.client.oauth.Scope scope58 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException60 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean61 = scope58.equals((java.lang.Object) invalidAttributeException60);
        java.lang.String str62 = scope58.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder55.addScope(scope58);
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder63.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder65.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder67.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder71 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope72 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder71.addScope(scope72);
        org.osiam.client.oauth.Scope scope74 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException76 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean77 = scope74.equals((java.lang.Object) invalidAttributeException76);
        java.lang.String str78 = scope74.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder71.addScope(scope74);
        org.osiam.client.oauth.AccessToken.Builder builder80 = builder67.addScope(scope74);
        org.osiam.client.oauth.AccessToken.Builder builder81 = builder40.addScope(scope74);
        org.osiam.client.oauth.AccessToken.Builder builder83 = builder81.setType("");
        org.osiam.client.oauth.AccessToken.Builder builder85 = builder81.setClientId("Insufficient scopes: []");
        org.osiam.client.oauth.Scope scope86 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str87 = scope86.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder88 = builder81.addScope(scope86);
        org.osiam.client.oauth.Scope[] scopeArray89 = new org.osiam.client.oauth.Scope[] { scope86 };
        java.net.URI uRI90 = authService26.getAuthorizationUri(scopeArray89);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken91 = osiamConnector13.retrieveAccessToken("refresh_token", "org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: descending", scopeArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(authService26);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GET" + "'", str35, "GET");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "GET" + "'", str51, "GET");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(scope58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "GET" + "'", str62, "GET");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(scope72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(scope74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "GET" + "'", str78, "GET");
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(scope86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "PUT" + "'", str87, "PUT");
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(scopeArray89);
        org.junit.Assert.assertNotNull(uRI90);
    }

    @Test
    public void test02099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02099");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        boolean boolean12 = accessToken9.isClientOnly();
        java.lang.String str13 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.core.Response.StatusType statusType15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = osiamGroupService2.extractErrorMessage("DELETE", statusType15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Insufficient scopes: []" + "'", str13, "Insufficient scopes: []");
    }

    @Test
    public void test02100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02100");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("PUT");
        org.osiam.client.OsiamConnector osiamConnector7 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.getAttributes();
        long long19 = query17.getStartIndex();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        java.util.Date date27 = accessToken26.getExpiresAt();
        java.lang.String str28 = accessToken26.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken26);
        java.lang.String str30 = accessToken26.getClientId();
        boolean boolean31 = accessToken26.isRefreshTokenExpired();
        boolean boolean32 = accessToken26.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult33 = osiamConnector7.searchUsers(query17, accessToken26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Authorization" + "'", str18, "Authorization");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test02101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02101");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector osiamConnector9 = builder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.descending("hi!");
        org.osiam.client.query.Query query19 = queryBuilder18.build();
        java.lang.String str20 = query19.toString();
        java.lang.String str21 = query19.getSortOrder();
        java.lang.String str22 = query19.getSortBy();
        org.osiam.client.query.Query query23 = query19.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder24 = osiamConnector9.createQueryBuilder(query23);
        org.osiam.client.query.QueryBuilder queryBuilder25 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.descending("hi!");
        org.osiam.client.query.Query query34 = queryBuilder33.build();
        java.lang.String str35 = query34.toString();
        java.lang.String str36 = query34.getSortOrder();
        java.lang.String str37 = query34.getSortBy();
        java.lang.String str38 = query34.getFilter();
        java.lang.String str39 = query34.getSortOrder();
        java.lang.String str40 = query34.getAttributes();
        long long41 = query34.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder42 = osiamConnector9.createQueryBuilder(query34);
        org.osiam.client.oauth.Scope[] scopeArray45 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken46 = osiamConnector9.retrieveAccessToken("org.osiam.client.exception.ConflictException: ", "GET POST PUT PATCH DELETE", scopeArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str20, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "descending" + "'", str21, "descending");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(query23);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(query34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str35, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "descending" + "'", str36, "descending");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "descending" + "'", str39, "descending");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Authorization" + "'", str40, "Authorization");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder42);
    }

    @Test
    public void test02102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02102");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.getUserName();
        java.lang.String str15 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.descending("hi!");
        org.osiam.client.query.Query query25 = queryBuilder24.build();
        java.lang.String str26 = query25.toString();
        java.lang.String str27 = query25.toString();
        org.osiam.client.query.Query query28 = query25.nextPage();
        org.osiam.client.query.Query query29 = query25.nextPage();
        java.lang.String str30 = query29.toString();
        org.osiam.client.AuthService.Builder builder32 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder34 = builder32.setClientId("ME");
        org.osiam.client.AuthService.Builder builder36 = builder34.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder38 = builder36.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder40 = builder38.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService41 = builder40.build();
        org.osiam.client.oauth.AccessToken.Builder builder43 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date44 = null;
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setRefreshTokenExpiresAt(date44);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder43.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken48 = builder47.build();
        boolean boolean49 = accessToken48.isRefreshTokenExpired();
        java.lang.String str50 = authService41.extractErrorMessageForbidden(accessToken48);
        boolean boolean51 = accessToken48.isRefreshTokenExpired();
        java.lang.String str52 = accessToken48.getType();
        java.lang.String str53 = accessToken48.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult54 = osiamGroupService2.searchGroups(query29, accessToken48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(query25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str26, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query28);
        org.junit.Assert.assertNotNull(query29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]" + "'", str30, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(authService41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(accessToken48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Insufficient scopes: []" + "'", str50, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Bearer " + "'", str53, "Bearer ");
    }

    @Test
    public void test02103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02103");
        org.osiam.client.exception.NoResultException noResultException2 = new org.osiam.client.exception.NoResultException("ME");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException3 = new org.osiam.client.exception.ConnectionInitializationException("Bearer ", (java.lang.Throwable) noResultException2);
        java.lang.String str4 = connectionInitializationException3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.osiam.client.exception.ConnectionInitializationException: Bearer " + "'", str4, "org.osiam.client.exception.ConnectionInitializationException: Bearer ");
    }

    @Test
    public void test02104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02104");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getUserName();
        java.lang.String str12 = accessToken9.toString();
        java.lang.String str13 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        java.lang.String str21 = accessToken20.toString();
        java.lang.String str22 = accessToken20.getType();
        boolean boolean23 = accessToken20.isExpired();
        java.util.Date date24 = accessToken20.getExpiresAt();
        boolean boolean25 = accessToken20.isClientOnly();
        java.lang.String str26 = osiamGroupService2.extractErrorMessageForbidden(accessToken20);
        org.osiam.resources.scim.Group group28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        java.lang.String str36 = accessToken35.toString();
        java.lang.String str37 = accessToken35.getType();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken35);
        java.lang.String str39 = accessToken35.getClientId();
        boolean boolean40 = accessToken35.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group41 = osiamGroupService2.replaceResource("GET POST PUT PATCH DELETE", group28, accessToken35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str12, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Insufficient scopes: []" + "'", str13, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str21, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Insufficient scopes: []" + "'", str26, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str36, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test02105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02105");
        org.osiam.client.exception.ScimErrorMessage scimErrorMessage0 = new org.osiam.client.exception.ScimErrorMessage();
        java.lang.String str1 = scimErrorMessage0.getErrorCode();
        java.lang.String str2 = scimErrorMessage0.getErrorCode();
        java.lang.String str3 = scimErrorMessage0.getDescription();
        java.lang.String str4 = scimErrorMessage0.getDescription();
        java.lang.String str5 = scimErrorMessage0.getErrorCode();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test02106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02106");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = osiamGroupService2.extractErrorMessageDefault("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", statusType15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
    }

    @Test
    public void test02107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02107");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder1.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService6 = builder1.build();
        org.osiam.client.AuthService authService7 = builder1.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken9 = authService7.retrieveAccessToken("GET POST PUT PATCH DELETE");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client secret can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(authService7);
    }

    @Test
    public void test02108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02108");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setAuthServerEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setAuthServerEndpoint("refresh_token");
        org.osiam.client.OsiamConnector osiamConnector15 = builder10.build();
        org.osiam.client.query.QueryBuilder queryBuilder16 = osiamConnector15.createQueryBuilder();
        org.osiam.resources.scim.UpdateUser updateUser18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        boolean boolean26 = accessToken25.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet27 = accessToken25.getScopes();
        boolean boolean28 = accessToken25.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user29 = osiamConnector15.updateUser("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", updateUser18, accessToken25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(scopeSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test02109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02109");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder3 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder5 = queryBuilder3.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder7 = queryBuilder5.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder5.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.descending("hi!");
        org.osiam.client.query.Query query12 = queryBuilder11.build();
        java.lang.String str13 = query12.toString();
        org.osiam.client.query.QueryBuilder queryBuilder14 = new org.osiam.client.query.QueryBuilder(query12);
        java.lang.String str15 = query12.getFilter();
        org.osiam.client.OsiamGroupService.Builder builder17 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService18 = builder17.build();
        org.osiam.client.OsiamGroupService osiamGroupService19 = builder17.build();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken26);
        java.lang.String str28 = osiamGroupService19.extractErrorMessageForbidden(accessToken26);
        java.util.Date date29 = accessToken26.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken26);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean32 = accessToken26.equals((java.lang.Object) scope31);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken26);
        java.lang.String str34 = accessToken26.getToken();
        java.lang.String str35 = accessToken26.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult36 = osiamUserService2.searchUsers(query12, accessToken26);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(queryBuilder5);
        org.junit.Assert.assertNotNull(queryBuilder7);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str13, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(osiamGroupService18);
        org.junit.Assert.assertNotNull(osiamGroupService19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Insufficient scopes: []" + "'", str28, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Bearer " + "'", str34, "Bearer ");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test02110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02110");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService2.targetEndpoint;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group6 = osiamGroupService2.mapToResource("");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: ");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(webTarget4);
    }

    @Test
    public void test02111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02111");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        boolean boolean4 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer6 = scopeSerializer0.unwrappingSerializer(nameTransformer5);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper7 = null;
        com.fasterxml.jackson.databind.JavaType javaType8 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper7, javaType8);
        boolean boolean10 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper11 = null;
        com.fasterxml.jackson.databind.JavaType javaType12 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper11, javaType12);
        org.osiam.client.helper.ScopeSerializer scopeSerializer14 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean15 = scopeSerializer14.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer16 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer17 = scopeSerializer14.unwrappingSerializer(nameTransformer16);
        org.osiam.client.helper.ScopeSerializer scopeSerializer18 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        boolean boolean26 = accessToken25.isRefreshTokenExpired();
        java.lang.String str27 = accessToken25.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet28 = accessToken25.getScopes();
        boolean boolean29 = scopeSerializer18.isEmpty(scopeSet28);
        boolean boolean30 = scopeSerializer14.isEmpty(scopeSet28);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer31 = scopeSerializer0.replaceDelegatee((com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeSerializer14);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(scopeSet28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test02112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02112");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder4 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.descending("hi!");
        org.osiam.client.query.Query query13 = queryBuilder12.build();
        java.lang.String str14 = query13.toString();
        java.lang.String str15 = query13.toString();
        org.osiam.client.query.Query query16 = query13.nextPage();
        java.lang.String str17 = query13.toString();
        org.osiam.client.query.Query query18 = query13.nextPage();
        int int19 = query13.getCount();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        java.lang.String str27 = accessToken26.toString();
        java.lang.String str28 = accessToken26.getClientId();
        org.osiam.client.OsiamConnector.Builder builder29 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder31 = builder29.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder33 = builder31.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder35 = builder33.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector36 = builder35.build();
        org.osiam.client.query.QueryBuilder queryBuilder37 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder37.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder43 = queryBuilder39.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.descending("hi!");
        org.osiam.client.query.Query query46 = queryBuilder45.build();
        java.lang.String str47 = query46.toString();
        java.lang.String str48 = query46.toString();
        java.lang.String str49 = query46.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder50 = osiamConnector36.createQueryBuilder(query46);
        org.osiam.client.query.QueryBuilder queryBuilder51 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder53 = queryBuilder51.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder55 = queryBuilder53.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder57 = queryBuilder53.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder59 = queryBuilder57.descending("hi!");
        org.osiam.client.query.Query query60 = queryBuilder59.build();
        org.osiam.client.query.QueryBuilder queryBuilder61 = osiamConnector36.createQueryBuilder(query60);
        boolean boolean62 = accessToken26.equals((java.lang.Object) queryBuilder61);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult63 = osiamGroupService3.searchResources(query13, accessToken26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str15, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str17, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str27, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(osiamConnector36);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(query46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str47, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str48, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder53);
        org.junit.Assert.assertNotNull(queryBuilder55);
        org.junit.Assert.assertNotNull(queryBuilder57);
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(query60);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test02113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02113");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder2.build();
        org.osiam.resources.scim.UpdateUser updateUser7 = null;
        org.osiam.client.OsiamGroupService.Builder builder9 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService10 = builder9.build();
        org.osiam.client.OsiamGroupService osiamGroupService11 = builder9.build();
        org.osiam.client.OsiamGroupService osiamGroupService12 = builder9.build();
        org.osiam.client.AuthService.Builder builder14 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder16 = builder14.setClientId("ME");
        org.osiam.client.AuthService.Builder builder18 = builder16.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService23 = builder22.build();
        org.osiam.client.OsiamGroupService.Builder builder25 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService26 = builder25.build();
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        boolean boolean34 = accessToken33.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet35 = accessToken33.getScopes();
        java.lang.String str36 = osiamGroupService26.extractErrorMessageForbidden(accessToken33);
        boolean boolean37 = accessToken33.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken33);
        java.lang.String str39 = authService23.extractErrorMessageForbidden(accessToken33);
        java.lang.String str40 = accessToken33.getType();
        java.lang.String str41 = osiamGroupService12.extractErrorMessageForbidden(accessToken33);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken33);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user43 = osiamConnector5.updateUser("password", updateUser7, accessToken33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(osiamGroupService10);
        org.junit.Assert.assertNotNull(osiamGroupService11);
        org.junit.Assert.assertNotNull(osiamGroupService12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(authService23);
        org.junit.Assert.assertNotNull(osiamGroupService26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(scopeSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: []" + "'", str41, "Insufficient scopes: []");
    }

    @Test
    public void test02114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02114");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer7 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.core.JsonParser jsonParser8 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet10 = scopeDeserializer0.deserialize(jsonParser8, deserializationContext9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNull(wildcardJsonDeserializer7);
    }

    @Test
    public void test02115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02115");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        java.util.Collection<java.lang.Object> objCollection5 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.core.JsonParser jsonParser6 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        java.util.Date date19 = accessToken18.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder9.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder9.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder9.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken31 = builder30.build();
        boolean boolean32 = accessToken31.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet33 = accessToken31.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder24.addScopes(scopeSet33);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet35 = scopeDeserializer0.deserialize(jsonParser6, deserializationContext7, scopeSet33);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Can not update object of type java.util.HashSet (by deserializer of type org.osiam.client.helper.ScopeDeserializer)");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNull(objCollection5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(accessToken31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(scopeSet33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test02116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02116");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Cannot connect to server");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.lang.String str11 = accessToken10.toString();
        java.lang.String str12 = accessToken10.getType();
        boolean boolean13 = accessToken10.isExpired();
        java.lang.String str14 = accessToken10.getToken();
        java.util.Date date15 = accessToken10.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user16 = osiamUserService2.createUser(user3, accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str11, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Bearer " + "'", str14, "Bearer ");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02117");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.resources.scim.UpdateUser updateUser7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope10 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.addScope(scope10);
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException14 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean15 = scope12.equals((java.lang.Object) invalidAttributeException14);
        java.lang.String str16 = scope12.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder9.addScope(scope12);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken28);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user30 = osiamUserService5.updateUser("refresh_token", updateUser7, accessToken28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(scope10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GET" + "'", str16, "GET");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
    }

    @Test
    public void test02118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02118");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder1.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService6 = builder1.build();
        org.osiam.client.AuthService authService7 = builder1.build();
        org.osiam.client.AuthService.Builder builder11 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientId("ME");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder17 = builder15.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder19 = builder17.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService20 = builder19.build();
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.addScope(scope23);
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException27 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean28 = scope25.equals((java.lang.Object) invalidAttributeException27);
        java.lang.String str29 = scope25.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder22.addScope(scope25);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.addScope(scope39);
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException43 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean44 = scope41.equals((java.lang.Object) invalidAttributeException43);
        java.lang.String str45 = scope41.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder38.addScope(scope41);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder34.addScope(scope41);
        org.osiam.client.oauth.AccessToken.Builder builder49 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.addScope(scope50);
        org.osiam.client.oauth.Scope scope52 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException54 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean55 = scope52.equals((java.lang.Object) invalidAttributeException54);
        java.lang.String str56 = scope52.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder49.addScope(scope52);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder61.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder65 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope66 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder65.addScope(scope66);
        org.osiam.client.oauth.Scope scope68 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException70 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean71 = scope68.equals((java.lang.Object) invalidAttributeException70);
        java.lang.String str72 = scope68.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder65.addScope(scope68);
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder61.addScope(scope68);
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder34.addScope(scope68);
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder75.setType("");
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder75.setClientId("Insufficient scopes: []");
        org.osiam.client.oauth.Scope scope80 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str81 = scope80.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder82 = builder75.addScope(scope80);
        org.osiam.client.oauth.Scope[] scopeArray83 = new org.osiam.client.oauth.Scope[] { scope80 };
        java.net.URI uRI84 = authService20.getAuthorizationUri(scopeArray83);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken85 = authService7.retrieveAccessToken("org.osiam.client.exception.ConnectionInitializationException: PATCH", "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]", scopeArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client secret can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(authService7);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(authService20);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GET" + "'", str29, "GET");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "GET" + "'", str45, "GET");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(scope52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "GET" + "'", str56, "GET");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(scope66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(scope68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "GET" + "'", str72, "GET");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(scope80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "PUT" + "'", str81, "PUT");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(scopeArray83);
        org.junit.Assert.assertNotNull(uRI84);
    }

    @Test
    public void test02119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02119");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken11 = builder8.build();
        java.lang.String str12 = accessToken11.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList13 = osiamUserService2.getAllUsers(accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test02120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02120");
        org.osiam.client.exception.OAuthErrorMessage oAuthErrorMessage0 = new org.osiam.client.exception.OAuthErrorMessage();
        java.lang.String str1 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str2 = oAuthErrorMessage0.getDescription();
        java.lang.String str3 = oAuthErrorMessage0.getDescription();
        java.lang.String str4 = oAuthErrorMessage0.getDescription();
        java.lang.String str5 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str6 = oAuthErrorMessage0.getDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test02121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02121");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.OsiamGroupService.Builder builder8 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken16.getScopes();
        java.lang.String str19 = osiamGroupService9.extractErrorMessageForbidden(accessToken16);
        boolean boolean20 = accessToken16.isClientOnly();
        java.lang.String str21 = authService6.extractErrorMessageForbidden(accessToken16);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken30 = builder27.build();
        java.lang.String str31 = accessToken30.toString();
        java.lang.String str32 = authService6.extractErrorMessageForbidden(accessToken30);
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        java.util.Date date40 = accessToken39.getExpiresAt();
        java.lang.String str41 = accessToken39.getRefreshToken();
        java.lang.String str42 = accessToken39.getType();
        java.lang.String str43 = accessToken39.getClientId();
        java.lang.String str44 = accessToken39.getUserName();
        java.lang.String str45 = authService6.extractErrorMessageForbidden(accessToken39);
        org.osiam.client.oauth.AccessToken.Builder builder47 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date48 = null;
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.setRefreshTokenExpiresAt(date48);
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder47.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken52 = builder51.build();
        boolean boolean53 = accessToken52.isRefreshTokenExpired();
        java.lang.String str54 = accessToken52.getUserId();
        java.lang.String str55 = authService6.extractErrorMessageForbidden(accessToken52);
        org.osiam.client.oauth.Scope scope59 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.OsiamRequestException: hi!");
        org.osiam.client.oauth.Scope[] scopeArray60 = new org.osiam.client.oauth.Scope[] { scope59 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken61 = authService6.retrieveAccessToken("client_credentials", "ADMIN", scopeArray60);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str31, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Insufficient scopes: []" + "'", str45, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(accessToken52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Insufficient scopes: []" + "'", str55, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scopeArray60);
    }

    @Test
    public void test02122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02122");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getEmptyValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        java.util.Collection<java.lang.Object> objCollection6 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer7 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader8 = scopeDeserializer0.getObjectIdReader();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer9 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass10 = scopeDeserializer9.handledType();
        java.lang.Class<?> wildcardClass11 = scopeDeserializer9.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer12 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer13 = scopeDeserializer9.unwrappingDeserializer(nameTransformer12);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer14 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer15 = scopeDeserializer9.unwrappingDeserializer(nameTransformer14);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer16 = scopeDeserializer0.replaceDelegatee((com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeDeserializer9);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertNull(objCollection6);
        org.junit.Assert.assertNull(wildcardJsonDeserializer7);
        org.junit.Assert.assertNull(objectIdReader8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer13);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer15);
    }

    @Test
    public void test02123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02123");
        org.osiam.client.exception.UnauthorizedException unauthorizedException3 = new org.osiam.client.exception.UnauthorizedException("PATCH");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException4 = new org.osiam.client.exception.ConnectionInitializationException("PATCH", (java.lang.Throwable) unauthorizedException3);
        org.osiam.client.exception.OsiamClientException osiamClientException5 = new org.osiam.client.exception.OsiamClientException("PUT", (java.lang.Throwable) unauthorizedException3);
        java.lang.Throwable[] throwableArray6 = osiamClientException5.getSuppressed();
        java.lang.String str7 = osiamClientException5.toString();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.osiam.client.exception.OsiamClientException: PUT" + "'", str7, "org.osiam.client.exception.OsiamClientException: PUT");
    }

    @Test
    public void test02124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02124");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.descending("hi!");
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        java.lang.String str16 = query15.toString();
        java.lang.String str17 = query15.toString();
        org.osiam.client.query.Query query18 = query15.nextPage();
        org.osiam.client.query.Query query19 = query15.nextPage();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        java.util.Date date27 = accessToken26.getExpiresAt();
        java.lang.String str28 = accessToken26.getRefreshToken();
        java.lang.String str29 = accessToken26.getType();
        java.lang.String str30 = accessToken26.getClientId();
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException32 = new org.osiam.client.exception.InvalidAttributeException("ADMIN");
        boolean boolean33 = accessToken26.equals((java.lang.Object) invalidAttributeException32);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult34 = osiamUserService5.searchUsers(query19, accessToken26);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str16, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str17, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test02125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02125");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.addScope(scope21);
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException25 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean26 = scope23.equals((java.lang.Object) invalidAttributeException25);
        java.lang.String str27 = scope23.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder20.addScope(scope23);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        boolean boolean40 = accessToken39.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user41 = osiamConnector17.getUser("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "GET" + "'", str27, "GET");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test02126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02126");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        java.util.Date date15 = accessToken13.getExpiresAt();
        java.lang.String str16 = osiamGroupService6.extractErrorMessageForbidden(accessToken13);
        org.osiam.resources.scim.Group group18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        boolean boolean26 = accessToken25.isRefreshTokenExpired();
        boolean boolean27 = accessToken25.isClientOnly();
        java.lang.String str28 = accessToken25.getClientId();
        boolean boolean29 = accessToken25.isClientOnly();
        java.lang.String str30 = accessToken25.getToken();
        java.lang.String str31 = accessToken25.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group32 = osiamGroupService6.replaceGroup("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]", group18, accessToken25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Insufficient scopes: []" + "'", str16, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Bearer " + "'", str30, "Bearer ");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Bearer " + "'", str31, "Bearer ");
    }

    @Test
    public void test02127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02127");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder8.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder8.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.descending("");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.descending("GET POST PUT PATCH DELETE");
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder13.attributes("client_credentials");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder13.attributes("org.osiam.client.exception.OsiamRequestException: hi!");
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.ascending("POST");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
    }

    @Test
    public void test02128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02128");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = osiamGroupService2.extractErrorMessage("GET POST PUT PATCH DELETE", statusType5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
    }

    @Test
    public void test02129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02129");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder12 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder14.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.descending("hi!");
        org.osiam.client.query.Query query21 = queryBuilder20.build();
        java.lang.String str22 = query21.getAttributes();
        java.lang.String str23 = query21.toString();
        java.lang.String str24 = query21.getSortBy();
        org.osiam.client.query.Query query25 = query21.nextPage();
        int int26 = query21.getCount();
        java.lang.String str27 = query21.getFilter();
        java.lang.String str28 = query21.getSortBy();
        java.lang.String str29 = query21.getSortBy();
        org.osiam.client.OsiamGroupService.Builder builder31 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService32 = builder31.build();
        org.osiam.client.OsiamGroupService osiamGroupService33 = builder31.build();
        org.osiam.client.oauth.AccessToken.Builder builder35 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date36 = null;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setRefreshTokenExpiresAt(date36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder35.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken40 = builder39.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken40);
        java.lang.String str42 = osiamGroupService33.extractErrorMessageForbidden(accessToken40);
        java.util.Date date43 = accessToken40.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken40);
        java.lang.String str45 = accessToken40.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult46 = osiamConnector7.searchGroups(query21, accessToken40);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Authorization" + "'", str22, "Authorization");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(query25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(osiamGroupService32);
        org.junit.Assert.assertNotNull(osiamGroupService33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(accessToken40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Insufficient scopes: []" + "'", str42, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test02130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02130");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector7.createQueryBuilder();
        org.osiam.client.AuthService.Builder builder24 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder26 = builder24.setClientId("ME");
        org.osiam.client.AuthService.Builder builder28 = builder26.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService29 = builder28.build();
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken36 = builder35.build();
        boolean boolean37 = accessToken36.isRefreshTokenExpired();
        boolean boolean38 = accessToken36.isClientOnly();
        java.lang.String str39 = accessToken36.getClientId();
        java.lang.String str40 = authService29.extractErrorMessageForbidden(accessToken36);
        java.util.Date date41 = accessToken36.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken42 = osiamConnector7.validateAccessToken(accessToken36);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(authService29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(accessToken36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Insufficient scopes: []" + "'", str40, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02131");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.resources.scim.UpdateGroup updateGroup4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        boolean boolean13 = accessToken11.isClientOnly();
        java.lang.String str14 = accessToken11.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group15 = osiamGroupService2.updateGroup("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", updateGroup4, accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test02132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02132");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService4 = builder3.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet13 = accessToken11.getScopes();
        boolean boolean14 = accessToken11.isRefreshTokenExpired();
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.addScope(scope17);
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException21 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean22 = scope19.equals((java.lang.Object) invalidAttributeException21);
        java.lang.String str23 = scope19.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder16.addScope(scope19);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setType("GET");
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.addScope(scope29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException33 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean34 = scope31.equals((java.lang.Object) invalidAttributeException33);
        java.lang.String str35 = scope31.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder28.addScope(scope31);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.addScope(scope45);
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException49 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean50 = scope47.equals((java.lang.Object) invalidAttributeException49);
        java.lang.String str51 = scope47.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder44.addScope(scope47);
        org.osiam.client.oauth.AccessToken.Builder builder54 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date55 = null;
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setRefreshTokenExpiresAt(date55);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder54.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken59 = builder58.build();
        java.lang.String str60 = accessToken59.toString();
        boolean boolean61 = scope47.equals((java.lang.Object) str60);
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder40.addScope(scope47);
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder24.addScope(scope47);
        org.osiam.client.oauth.AccessToken.Builder builder65 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope66 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder65.addScope(scope66);
        org.osiam.client.oauth.Scope scope68 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException70 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean71 = scope68.equals((java.lang.Object) invalidAttributeException70);
        java.lang.String str72 = scope68.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder65.addScope(scope68);
        org.osiam.client.oauth.AccessToken.Builder builder75 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope76 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder75.addScope(scope76);
        org.osiam.client.oauth.Scope scope78 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException80 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean81 = scope78.equals((java.lang.Object) invalidAttributeException80);
        java.lang.String str82 = scope78.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder83 = builder75.addScope(scope78);
        org.osiam.client.oauth.AccessToken.Builder builder85 = builder83.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder87 = builder85.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder89 = builder87.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope90 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder91 = builder87.addScope(scope90);
        org.osiam.client.oauth.Scope scope93 = new org.osiam.client.oauth.Scope("GET POST PUT PATCH DELETE");
        org.osiam.client.oauth.Scope[] scopeArray94 = new org.osiam.client.oauth.Scope[] { scope47, scope68, scope90, scope93 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken95 = authService4.refreshAccessToken(accessToken11, scopeArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(authService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(scopeSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GET" + "'", str23, "GET");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GET" + "'", str35, "GET");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "GET" + "'", str51, "GET");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(accessToken59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str60, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(scope66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(scope68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "GET" + "'", str72, "GET");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(scope76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(scope78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "GET" + "'", str82, "GET");
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(scope90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(scopeArray94);
    }

    @Test
    public void test02133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02133");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder7 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder7.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet17 = accessToken15.getScopes();
        java.lang.String str18 = osiamGroupService8.extractErrorMessageForbidden(accessToken15);
        boolean boolean19 = accessToken15.isClientOnly();
        boolean boolean20 = accessToken15.isClientOnly();
        java.lang.String str21 = accessToken15.toString();
        java.lang.String str22 = osiamGroupService4.extractErrorMessageForbidden(accessToken15);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group24 = osiamGroupService4.mapToResource("Authorization");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: Authorization");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(scopeSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str21, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Insufficient scopes: []" + "'", str22, "Insufficient scopes: []");
    }

    @Test
    public void test02134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02134");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken13 = builder10.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser15 = osiamUserService4.getCurrentUserBasic(accessToken13);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test02135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02135");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = osiamConnector7.createQueryBuilder();
        org.osiam.client.OsiamGroupService.Builder builder13 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService14 = builder13.build();
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        java.util.Date date22 = accessToken21.getExpiresAt();
        java.lang.String str23 = accessToken21.getRefreshToken();
        java.lang.String str24 = accessToken21.getType();
        java.lang.String str25 = accessToken21.getClientId();
        java.lang.String str26 = accessToken21.getUserName();
        java.lang.String str27 = osiamGroupService14.extractErrorMessageForbidden(accessToken21);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user28 = osiamConnector7.getCurrentUser(accessToken21);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(osiamGroupService14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Insufficient scopes: []" + "'", str27, "Insufficient scopes: []");
    }

    @Test
    public void test02136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02136");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.getNullValue();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer7 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass8 = scopeDeserializer7.handledType();
        boolean boolean9 = scopeDeserializer7.isCachable();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer10 = scopeDeserializer7.getDelegatee();
        boolean boolean11 = scopeDeserializer7.isCachable();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer12 = scopeDeserializer0.replaceDelegatee((com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeDeserializer7);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertNull(scopeSet6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardJsonDeserializer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test02137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02137");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder23 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.descending("hi!");
        org.osiam.client.query.Query query32 = queryBuilder31.build();
        java.lang.String str33 = query32.toString();
        java.lang.String str34 = query32.toString();
        org.osiam.client.query.Query query35 = query32.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder36 = osiamConnector7.createQueryBuilder(query32);
        org.osiam.client.AuthService.Builder builder40 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder42 = builder40.setClientId("ME");
        org.osiam.client.AuthService.Builder builder44 = builder42.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder46 = builder44.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder48 = builder46.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService49 = builder48.build();
        org.osiam.client.oauth.AccessToken.Builder builder51 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date52 = null;
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setRefreshTokenExpiresAt(date52);
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder51.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken56 = builder55.build();
        boolean boolean57 = accessToken56.isRefreshTokenExpired();
        java.lang.String str58 = accessToken56.getUserId();
        java.lang.String str59 = accessToken56.getToken();
        java.lang.String str60 = authService49.extractErrorMessageForbidden(accessToken56);
        org.osiam.client.oauth.Scope scope61 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str62 = scope61.getValue();
        java.lang.String str63 = scope61.toString();
        org.osiam.client.oauth.Scope scope64 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray65 = new org.osiam.client.oauth.Scope[] { scope61, scope64 };
        java.net.URI uRI66 = authService49.getAuthorizationUri(scopeArray65);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken67 = osiamConnector7.retrieveAccessToken("org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388", "org.osiam.client.exception.NoResultException: refresh_token", scopeArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(query32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str33, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str34, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query35);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(authService49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(accessToken56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Bearer " + "'", str59, "Bearer ");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Insufficient scopes: []" + "'", str60, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "PATCH" + "'", str62, "PATCH");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "PATCH" + "'", str63, "PATCH");
        org.junit.Assert.assertNotNull(scope64);
        org.junit.Assert.assertNotNull(scopeArray65);
        org.junit.Assert.assertNotNull(uRI66);
    }

    @Test
    public void test02138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02138");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = osiamGroupService3.extractErrorMessage("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]", statusType7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
    }

    @Test
    public void test02139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02139");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.Query query10 = queryBuilder8.build();
        java.lang.String str11 = query10.getFilter();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.query.Query query12 = query10.previousPage();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: StartIndex < 1 is not possible.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(query10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test02140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02140");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector13 = builder8.build();
        org.osiam.resources.scim.User user15 = null;
        org.osiam.client.OsiamGroupService.Builder builder17 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService18 = builder17.build();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        java.util.Date date26 = accessToken25.getExpiresAt();
        java.lang.String str27 = accessToken25.getRefreshToken();
        boolean boolean28 = accessToken25.isClientOnly();
        java.lang.String str29 = osiamGroupService18.extractErrorMessageForbidden(accessToken25);
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken36 = builder35.build();
        java.util.Date date37 = accessToken36.getExpiresAt();
        java.lang.String str38 = accessToken36.getUserName();
        java.util.Date date39 = accessToken36.getRefreshTokenExpiresAt();
        java.lang.String str40 = osiamGroupService18.extractErrorMessageForbidden(accessToken36);
        java.lang.String str41 = accessToken36.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user42 = osiamConnector13.replaceUser("org.osiam.client.exception.OsiamClientException: descending", user15, accessToken36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The string \"Insufficient scopes\" for the URI component SCHEME contains an invalid character, ' ', at index 12.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(osiamGroupService18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Insufficient scopes: []" + "'", str29, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(accessToken36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Insufficient scopes: []" + "'", str40, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Bearer " + "'", str41, "Bearer ");
    }

    @Test
    public void test02141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02141");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.NoResultException: refresh_token");
    }

    @Test
    public void test02142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02142");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.core.Response.StatusType statusType15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = osiamGroupService2.extractErrorMessageUnauthorized("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", statusType15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Insufficient scopes: []" + "'", str13, "Insufficient scopes: []");
    }

    @Test
    public void test02143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02143");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        java.lang.String str12 = accessToken10.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet13 = accessToken10.getScopes();
        org.osiam.client.helper.ScopeSerializer scopeSerializer14 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean15 = scopeSerializer14.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException23 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean24 = scope21.equals((java.lang.Object) invalidAttributeException23);
        java.lang.String str25 = scope21.getValue();
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str28 = scope27.toString();
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str31 = scope30.getValue();
        java.lang.String str32 = scope30.getValue();
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException35 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean36 = scope33.equals((java.lang.Object) invalidAttributeException35);
        java.lang.String str37 = scope33.getValue();
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException43 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean44 = scope41.equals((java.lang.Object) invalidAttributeException43);
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.GET;
        boolean boolean49 = scope47.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray51 = new org.osiam.client.oauth.Scope[] { scope20, scope21, scope26, scope27, scope29, scope30, scope33, scope38, scope39, scope40, scope41, scope45, scope46, scope47, scope50 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet52 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet52, scopeArray51);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder17.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet52);
        boolean boolean55 = scopeSerializer14.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet52);
        boolean boolean56 = accessToken10.equals((java.lang.Object) scopeSet52);
        boolean boolean57 = accessToken10.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user58 = osiamUserService2.getUser("", accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(scopeSet13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GET" + "'", str25, "GET");
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ME" + "'", str28, "ME");
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PATCH" + "'", str31, "PATCH");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PATCH" + "'", str32, "PATCH");
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "GET" + "'", str37, "GET");
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertNotNull(scopeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test02144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02144");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.getUserName();
        java.lang.String str15 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.addScope(scope18);
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder17.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.addScope(scope34);
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException38 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean39 = scope36.equals((java.lang.Object) invalidAttributeException38);
        java.lang.String str40 = scope36.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder33.addScope(scope36);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder29.addScope(scope36);
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder29.setRefreshToken("");
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder48.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder48.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder48.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope57 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.addScope(scope57);
        org.osiam.client.oauth.AccessToken.Builder builder60 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date61 = null;
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder60.setRefreshTokenExpiresAt(date61);
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder60.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken65 = builder64.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken65);
        java.util.Date date67 = accessToken65.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder58.setExpiresAt(date67);
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder46.setExpiresAt(date67);
        org.osiam.client.oauth.AccessToken accessToken70 = builder69.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList71 = osiamGroupService2.getAllResources(accessToken70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "GET" + "'", str40, "GET");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(scope57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(accessToken65);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(accessToken70);
    }

    @Test
    public void test02145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02145");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        java.util.Date date15 = accessToken13.getExpiresAt();
        java.lang.String str16 = osiamGroupService6.extractErrorMessageForbidden(accessToken13);
        org.osiam.resources.scim.Group group17 = null;
        org.osiam.client.AuthService.Builder builder19 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder21 = builder19.setClientId("ME");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService24 = builder23.build();
        org.osiam.client.OsiamGroupService.Builder builder26 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService27 = builder26.build();
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date30 = null;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setRefreshTokenExpiresAt(date30);
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken34 = builder33.build();
        boolean boolean35 = accessToken34.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet36 = accessToken34.getScopes();
        java.lang.String str37 = osiamGroupService27.extractErrorMessageForbidden(accessToken34);
        boolean boolean38 = accessToken34.isClientOnly();
        java.lang.String str39 = authService24.extractErrorMessageForbidden(accessToken34);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group40 = osiamGroupService6.createResource(group17, accessToken34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Insufficient scopes: []" + "'", str16, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(authService24);
        org.junit.Assert.assertNotNull(osiamGroupService27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(accessToken34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(scopeSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Insufficient scopes: []" + "'", str37, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
    }

    @Test
    public void test02146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02146");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("");
        org.osiam.client.AuthService.Builder builder9 = builder5.setClientId("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder5.build();
        org.osiam.client.AuthService.Builder builder12 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientId("ME");
        org.osiam.client.AuthService.Builder builder16 = builder14.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder18 = builder16.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService21 = builder20.build();
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.addScope(scope24);
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        java.lang.String str30 = scope26.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder23.addScope(scope26);
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder39 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.addScope(scope40);
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException44 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean45 = scope42.equals((java.lang.Object) invalidAttributeException44);
        java.lang.String str46 = scope42.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder39.addScope(scope42);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder35.addScope(scope42);
        org.osiam.client.oauth.AccessToken.Builder builder50 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope51 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.addScope(scope51);
        org.osiam.client.oauth.Scope scope53 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException55 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean56 = scope53.equals((java.lang.Object) invalidAttributeException55);
        java.lang.String str57 = scope53.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder50.addScope(scope53);
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder60.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder66 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope67 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder66.addScope(scope67);
        org.osiam.client.oauth.Scope scope69 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException71 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean72 = scope69.equals((java.lang.Object) invalidAttributeException71);
        java.lang.String str73 = scope69.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder66.addScope(scope69);
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder62.addScope(scope69);
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder35.addScope(scope69);
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder76.setType("");
        org.osiam.client.oauth.AccessToken.Builder builder80 = builder76.setClientId("Insufficient scopes: []");
        org.osiam.client.oauth.Scope scope81 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str82 = scope81.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder83 = builder76.addScope(scope81);
        org.osiam.client.oauth.Scope[] scopeArray84 = new org.osiam.client.oauth.Scope[] { scope81 };
        java.net.URI uRI85 = authService21.getAuthorizationUri(scopeArray84);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken86 = authService10.retrieveAccessToken(scopeArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client secret can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(authService21);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GET" + "'", str30, "GET");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "GET" + "'", str46, "GET");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(scope51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(scope53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "GET" + "'", str57, "GET");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(scope67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(scope69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "GET" + "'", str73, "GET");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(scope81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "PUT" + "'", str82, "PUT");
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(scopeArray84);
        org.junit.Assert.assertNotNull(uRI85);
    }

    @Test
    public void test02147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02147");
        org.osiam.client.exception.UnauthorizedException unauthorizedException1 = new org.osiam.client.exception.UnauthorizedException("org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388");
    }

    @Test
    public void test02148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02148");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getEmptyValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        boolean boolean6 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer7 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer8 = scopeDeserializer0.unwrappingDeserializer(nameTransformer7);
        com.fasterxml.jackson.core.JsonParser jsonParser9 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        boolean boolean18 = accessToken17.isRefreshTokenExpired();
        java.lang.String str19 = accessToken17.getUserId();
        java.lang.String str20 = accessToken17.getClientId();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet21 = accessToken17.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet22 = scopeSetJsonDeserializer8.deserialize(jsonParser9, deserializationContext10, scopeSet21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Can not update object of type java.util.HashSet (by deserializer of type org.osiam.client.helper.ScopeDeserializer)");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer8);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(scopeSet21);
    }

    @Test
    public void test02149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02149");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector7.createQueryBuilder();
        org.osiam.resources.scim.Group group23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        java.util.Date date31 = accessToken30.getExpiresAt();
        java.lang.String str32 = accessToken30.getUserName();
        java.lang.String str33 = accessToken30.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group34 = osiamConnector7.createGroup(group23, accessToken30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test02150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02150");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder1.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope10 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.addScope(scope10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserName("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.helper.ScopeSerializer scopeSerializer14 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean15 = scopeSerializer14.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer16 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer17 = scopeSerializer14.unwrappingSerializer(nameTransformer16);
        boolean boolean18 = scopeSerializer14.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer19 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer20 = scopeSerializer14.unwrappingSerializer(nameTransformer19);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper21 = null;
        com.fasterxml.jackson.databind.JavaType javaType22 = null;
        scopeSerializer14.acceptJsonFormatVisitor(jsonFormatVisitorWrapper21, javaType22);
        boolean boolean24 = scopeSerializer14.usesObjectId();
        boolean boolean25 = scopeSerializer14.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider26 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer27 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean28 = scopeSerializer27.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass29 = scopeSerializer27.handledType();
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken36 = builder35.build();
        java.util.Date date37 = accessToken36.getExpiresAt();
        java.lang.String str38 = accessToken36.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet39 = accessToken36.getScopes();
        boolean boolean40 = scopeSerializer27.isEmpty(scopeSet39);
        boolean boolean41 = scopeSerializer14.isEmpty(serializerProvider26, scopeSet39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder13.addScopes(scopeSet39);
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder13.setType("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setUserName("org.osiam.client.exception.OsiamClientException: PUT");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(scope10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(scopeSetClass29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(accessToken36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(scopeSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test02151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02151");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.addScope(scope18);
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder17.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder13.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.addScope(scope29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException33 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean34 = scope31.equals((java.lang.Object) invalidAttributeException33);
        java.lang.String str35 = scope31.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder28.addScope(scope31);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setUserId("");
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.addScope(scope41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken49 = builder48.build();
        java.util.Date date50 = accessToken49.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder40.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder13.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setRefreshToken("");
        org.osiam.client.oauth.AccessToken.Builder builder56 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date57 = null;
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.setRefreshTokenExpiresAt(date57);
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder56.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken61 = builder60.build();
        java.util.Date date62 = accessToken61.getExpiresAt();
        java.util.Date date63 = accessToken61.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder52.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder52.setUserName("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder52.setClientId("GET");
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder68.setUserName("org.osiam.client.exception.NoResultException: refresh_token");
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder70.setType("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GET" + "'", str35, "GET");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(accessToken61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test02152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02152");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        org.osiam.client.OsiamGroupService.Builder builder14 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService15 = builder14.build();
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        boolean boolean23 = accessToken22.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet24 = accessToken22.getScopes();
        java.lang.String str25 = osiamGroupService15.extractErrorMessageForbidden(accessToken22);
        boolean boolean26 = accessToken22.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken22);
        java.lang.String str28 = osiamGroupService3.extractErrorMessageForbidden(accessToken22);
        javax.ws.rs.core.Response.StatusType statusType30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = osiamGroupService3.extractErrorMessageDefault("org.osiam.client.exception.UnauthorizedException: PATCH", statusType30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(scopeSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Insufficient scopes: []" + "'", str28, "Insufficient scopes: []");
    }

    @Test
    public void test02153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02153");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Cannot connect to server");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.resources.scim.User user5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet14 = accessToken12.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user15 = osiamUserService3.replaceUser("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!", user5, accessToken12);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(scopeSet14);
    }

    @Test
    public void test02154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02154");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.getAttributes();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query41);
        org.osiam.resources.scim.User user46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder48.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken55 = builder52.build();
        java.util.Date date56 = accessToken55.getExpiresAt();
        java.lang.String str57 = accessToken55.toString();
        java.lang.String str58 = accessToken55.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user59 = osiamConnector5.createUser(user46, accessToken55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Authorization" + "'", str42, "Authorization");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(accessToken55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str57, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str58, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test02155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02155");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.resources.scim.Group group7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        java.util.Date date15 = accessToken14.getExpiresAt();
        java.lang.String str16 = accessToken14.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet17 = accessToken14.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group18 = osiamGroupService3.updateResource("Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]", group7, accessToken14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(scopeSet17);
    }

    @Test
    public void test02156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02156");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("");
        org.osiam.client.AuthService.Builder builder5 = builder1.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test02157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02157");
        org.osiam.client.OsiamConnector.setMaxConnectionsPerRoute(10);
    }

    @Test
    public void test02158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02158");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = osiamGroupService3.extractErrorMessageDefault("org.osiam.client.exception.OsiamClientException: PUT", statusType5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
    }

    @Test
    public void test02159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02159");
        org.osiam.client.exception.ScimErrorMessage scimErrorMessage0 = new org.osiam.client.exception.ScimErrorMessage();
        java.lang.String str1 = scimErrorMessage0.getDescription();
        java.lang.String str2 = scimErrorMessage0.getDescription();
        java.lang.String str3 = scimErrorMessage0.getErrorCode();
        java.lang.String str4 = scimErrorMessage0.getErrorCode();
        java.lang.String str5 = scimErrorMessage0.getErrorCode();
        java.lang.String str6 = scimErrorMessage0.getErrorCode();
        java.lang.String str7 = scimErrorMessage0.getErrorCode();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test02160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02160");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        java.lang.String str14 = osiamGroupService4.extractErrorMessageForbidden(accessToken12);
        javax.ws.rs.client.WebTarget webTarget15 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = osiamGroupService4.extractErrorMessageDefault("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", statusType17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget15);
    }

    @Test
    public void test02161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02161");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.toString();
        java.lang.String str23 = query20.toString();
        int int24 = query20.getCount();
        long long25 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder26 = osiamConnector7.createQueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        org.osiam.client.query.Query query37 = queryBuilder35.build();
        java.lang.String str38 = query37.getSortBy();
        java.lang.String str39 = query37.getFilter();
        int int40 = query37.getCount();
        long long41 = query37.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder42 = osiamConnector7.createQueryBuilder(query37);
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.addScope(scope45);
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException49 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean50 = scope47.equals((java.lang.Object) invalidAttributeException49);
        java.lang.String str51 = scope47.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder44.addScope(scope47);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder58.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken63 = builder62.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken63);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user65 = osiamConnector7.getCurrentUser(accessToken63);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertNotNull(query37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "GET" + "'", str51, "GET");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(accessToken63);
    }

    @Test
    public void test02162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02162");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getEmptyValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        java.util.Collection<java.lang.Object> objCollection6 = scopeDeserializer0.getKnownPropertyNames();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty8 = scopeDeserializer0.findBackReference("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertNull(objCollection6);
    }

    @Test
    public void test02163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02163");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.query.QueryBuilder queryBuilder4 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.descending("hi!");
        org.osiam.client.query.Query query13 = queryBuilder12.build();
        java.lang.String str14 = query13.toString();
        java.lang.String str15 = query13.getSortOrder();
        java.lang.String str16 = query13.getFilter();
        java.lang.String str17 = query13.getSortOrder();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken24);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult26 = osiamGroupService2.searchGroups(query13, accessToken24);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "descending" + "'", str15, "descending");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "descending" + "'", str17, "descending");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
    }

    @Test
    public void test02164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02164");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getClientId();
        java.lang.String str17 = authService6.extractErrorMessageForbidden(accessToken13);
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken26 = builder23.build();
        org.osiam.client.oauth.AccessToken accessToken27 = builder23.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken28 = authService6.validateAccessToken(accessToken27);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Insufficient scopes: []" + "'", str17, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertNotNull(accessToken27);
    }

    @Test
    public void test02165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02165");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.UpdateUser updateUser4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user12 = osiamUserService2.updateUser("descending", updateUser4, accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
    }

    @Test
    public void test02166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02166");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setEndpoint("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.OsiamConnector osiamConnector15 = builder14.build();
        org.osiam.client.oauth.AccessToken accessToken16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser17 = osiamConnector15.getCurrentUserBasic(accessToken16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
    }

    @Test
    public void test02167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02167");
        org.osiam.client.OsiamConnector.setMaxConnections(403);
    }

    @Test
    public void test02168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02168");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        boolean boolean23 = accessToken22.isRefreshTokenExpired();
        boolean boolean24 = accessToken22.isClientOnly();
        java.lang.String str25 = accessToken22.getRefreshToken();
        boolean boolean26 = accessToken22.isExpired();
        boolean boolean27 = accessToken22.isExpired();
        java.lang.String str28 = accessToken22.getClientId();
        boolean boolean29 = accessToken22.isExpired();
        java.util.Date date30 = accessToken22.getRefreshTokenExpiresAt();
        java.lang.String str31 = accessToken22.getToken();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService3.deleteResource("org.osiam.client.exception.NoResultException: authorization_code", accessToken22);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Bearer " + "'", str31, "Bearer ");
    }

    @Test
    public void test02169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02169");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.OsiamConnector.Builder builder9 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder11 = builder9.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder13 = builder11.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector14 = builder13.build();
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        java.lang.String str23 = accessToken21.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder24 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder26.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder26.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder32 = queryBuilder30.descending("hi!");
        org.osiam.client.query.Query query33 = queryBuilder32.build();
        java.lang.String str34 = query33.toString();
        java.lang.String str35 = query33.getSortOrder();
        java.lang.String str36 = query33.getSortBy();
        java.lang.String str37 = query33.getFilter();
        java.lang.String str38 = query33.toString();
        boolean boolean39 = accessToken21.equals((java.lang.Object) query33);
        org.osiam.client.query.QueryBuilder queryBuilder40 = osiamConnector14.createQueryBuilder(query33);
        org.osiam.client.query.QueryBuilder queryBuilder41 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder43 = queryBuilder41.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder43.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder47.descending("hi!");
        org.osiam.client.query.Query query50 = queryBuilder49.build();
        java.lang.String str51 = query50.getAttributes();
        java.lang.String str52 = query50.toString();
        java.lang.String str53 = query50.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder54 = osiamConnector14.createQueryBuilder(query50);
        org.osiam.client.query.QueryBuilder queryBuilder55 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder57 = queryBuilder55.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder59 = queryBuilder57.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder61 = queryBuilder59.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query62 = queryBuilder59.build();
        org.osiam.client.query.QueryBuilder queryBuilder63 = osiamConnector14.createQueryBuilder(query62);
        java.lang.String str64 = query62.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder65 = osiamConnector7.createQueryBuilder(query62);
        org.osiam.client.oauth.AccessToken.Builder builder68 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date69 = null;
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder68.setRefreshTokenExpiresAt(date69);
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder68.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken73 = builder72.build();
        java.util.Date date74 = accessToken73.getExpiresAt();
        java.lang.String str75 = accessToken73.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user76 = osiamConnector7.getUser("ascending", accessToken73);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(osiamConnector14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(query33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str34, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "descending" + "'", str35, "descending");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str38, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(query50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Authorization" + "'", str51, "Authorization");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str52, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "descending" + "'", str53, "descending");
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(queryBuilder57);
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(query62);
        org.junit.Assert.assertNotNull(queryBuilder63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(queryBuilder65);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(accessToken73);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
    }

    @Test
    public void test02170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02170");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        boolean boolean13 = accessToken11.isClientOnly();
        java.lang.String str14 = accessToken11.getRefreshToken();
        boolean boolean15 = accessToken11.isExpired();
        boolean boolean16 = accessToken11.isRefreshTokenExpired();
        java.lang.String str17 = accessToken11.getToken();
        java.util.Date date18 = accessToken11.getRefreshTokenExpiresAt();
        boolean boolean19 = accessToken11.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group20 = osiamGroupService2.getGroup("PUT", accessToken11);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Bearer " + "'", str17, "Bearer ");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test02171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02171");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Cannot connect to server");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.lang.String str11 = accessToken10.toString();
        java.lang.String str12 = accessToken10.getClientId();
        org.osiam.client.OsiamConnector.Builder builder13 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder15 = builder13.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder17 = builder15.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder19 = builder17.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector20 = builder19.build();
        org.osiam.client.query.QueryBuilder queryBuilder21 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder23.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.descending("hi!");
        org.osiam.client.query.Query query30 = queryBuilder29.build();
        java.lang.String str31 = query30.toString();
        java.lang.String str32 = query30.toString();
        java.lang.String str33 = query30.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder34 = osiamConnector20.createQueryBuilder(query30);
        org.osiam.client.query.QueryBuilder queryBuilder35 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder37.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder37.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder43 = queryBuilder41.descending("hi!");
        org.osiam.client.query.Query query44 = queryBuilder43.build();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector20.createQueryBuilder(query44);
        boolean boolean46 = accessToken10.equals((java.lang.Object) queryBuilder45);
        org.osiam.client.query.QueryBuilder queryBuilder47 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder47.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder49.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder53 = queryBuilder49.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder55 = queryBuilder53.descending("hi!");
        org.osiam.client.query.Query query56 = queryBuilder55.build();
        org.osiam.client.query.QueryBuilder queryBuilder58 = queryBuilder55.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder60 = queryBuilder58.attributes("Cannot connect to server");
        org.osiam.client.query.Query query61 = queryBuilder58.build();
        boolean boolean62 = accessToken10.equals((java.lang.Object) queryBuilder58);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList63 = osiamUserService3.getAllUsers(accessToken10);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str11, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(osiamConnector20);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(query30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str31, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str32, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(query44);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(queryBuilder53);
        org.junit.Assert.assertNotNull(queryBuilder55);
        org.junit.Assert.assertNotNull(query56);
        org.junit.Assert.assertNotNull(queryBuilder58);
        org.junit.Assert.assertNotNull(queryBuilder60);
        org.junit.Assert.assertNotNull(query61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test02172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02172");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.OsiamGroupService.Builder builder8 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken16.getScopes();
        java.lang.String str19 = osiamGroupService9.extractErrorMessageForbidden(accessToken16);
        boolean boolean20 = accessToken16.isClientOnly();
        java.lang.String str21 = authService6.extractErrorMessageForbidden(accessToken16);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.addScope(scope24);
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        java.lang.String str30 = scope26.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder23.addScope(scope26);
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setClientId("Bearer ");
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str35 = scope34.toString();
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder31.addScope(scope34);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder31.setType("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken40 = authService6.validateAccessToken(accessToken39);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GET" + "'", str30, "GET");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ME" + "'", str35, "ME");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
    }

    @Test
    public void test02173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02173");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count((int) (short) 0);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder4.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder4.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.ascending("password");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count((int) (short) -1);
        org.osiam.client.query.Query query15 = queryBuilder10.build();
        java.lang.String str16 = query15.toString();
        java.lang.String str17 = query15.getSortOrder();
        java.lang.String str18 = query15.getFilter();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.query.Query query19 = query15.previousPage();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: StartIndex < 1 is not possible.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]" + "'", str16, "Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ascending" + "'", str17, "ascending");
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test02174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02174");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.getSortOrder();
        java.lang.String str20 = query17.getSortBy();
        java.lang.String str21 = query17.getFilter();
        java.lang.String str22 = query17.getSortOrder();
        java.lang.String str23 = query17.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder24 = new org.osiam.client.query.QueryBuilder(query17);
        long long25 = query17.getStartIndex();
        org.osiam.client.query.Query query26 = query17.nextPage();
        long long27 = query26.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder28 = osiamConnector7.createQueryBuilder(query26);
        org.osiam.client.OsiamGroupService.Builder builder30 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService31 = builder30.build();
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date34 = null;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder33.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken38 = builder37.build();
        boolean boolean39 = accessToken38.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet40 = accessToken38.getScopes();
        java.lang.String str41 = osiamGroupService31.extractErrorMessageForbidden(accessToken38);
        boolean boolean42 = accessToken38.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken38);
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector7.revokeAccessToken(accessToken38);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "descending" + "'", str19, "descending");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "descending" + "'", str22, "descending");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Authorization" + "'", str23, "Authorization");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 11L + "'", long27 == 11L);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(osiamGroupService31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(scopeSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: []" + "'", str41, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test02175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02175");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.getAttributes();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query41);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.toString();
        java.lang.String str57 = query55.toString();
        org.osiam.client.query.Query query58 = query55.nextPage();
        java.lang.String str59 = query55.toString();
        org.osiam.client.query.QueryBuilder queryBuilder60 = osiamConnector5.createQueryBuilder(query55);
        org.osiam.resources.scim.UpdateGroup updateGroup62 = null;
        org.osiam.client.oauth.AccessToken.Builder builder64 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date65 = null;
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder64.setRefreshTokenExpiresAt(date65);
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder64.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken69 = builder68.build();
        java.util.Date date70 = accessToken69.getExpiresAt();
        java.lang.String str71 = accessToken69.getRefreshToken();
        java.lang.String str72 = accessToken69.getType();
        java.lang.String str73 = accessToken69.getClientId();
        java.lang.String str74 = accessToken69.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group75 = osiamConnector5.updateGroup("Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]", updateGroup62, accessToken69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Authorization" + "'", str42, "Authorization");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str56, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str57, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str59, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder60);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(accessToken69);
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
    }

    @Test
    public void test02176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02176");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getUserName();
        java.lang.String str12 = accessToken9.toString();
        java.lang.String str13 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.resources.scim.Group group15 = null;
        org.osiam.client.OsiamGroupService.Builder builder17 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService18 = builder17.build();
        org.osiam.client.OsiamGroupService osiamGroupService19 = builder17.build();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken26);
        java.lang.String str28 = osiamGroupService19.extractErrorMessageForbidden(accessToken26);
        java.util.Date date29 = accessToken26.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group30 = osiamGroupService2.updateGroup("Cannot connect to server", group15, accessToken26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str12, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Insufficient scopes: []" + "'", str13, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService18);
        org.junit.Assert.assertNotNull(osiamGroupService19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Insufficient scopes: []" + "'", str28, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02177");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientId("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.AuthService.Builder builder7 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientId("ME");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService16 = builder15.build();
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        boolean boolean24 = accessToken23.isRefreshTokenExpired();
        java.lang.String str25 = authService16.extractErrorMessageForbidden(accessToken23);
        org.osiam.client.AuthService.Builder builder27 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder29 = builder27.setClientId("ME");
        org.osiam.client.AuthService.Builder builder31 = builder29.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService32 = builder31.build();
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        boolean boolean40 = accessToken39.isRefreshTokenExpired();
        java.lang.String str41 = accessToken39.getUserId();
        java.lang.String str42 = accessToken39.getClientId();
        boolean boolean43 = accessToken39.isClientOnly();
        java.lang.String str44 = authService32.extractErrorMessageForbidden(accessToken39);
        boolean boolean45 = accessToken39.isExpired();
        java.lang.String str46 = authService16.extractErrorMessageForbidden(accessToken39);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken47 = osiamConnector5.validateAccessToken(accessToken39);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(authService16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(authService32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Insufficient scopes: []" + "'", str44, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Insufficient scopes: []" + "'", str46, "Insufficient scopes: []");
    }

    @Test
    public void test02178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02178");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.resources.scim.UpdateUser updateUser6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getRefreshToken();
        boolean boolean17 = accessToken13.isExpired();
        boolean boolean18 = accessToken13.isExpired();
        java.lang.String str19 = accessToken13.getClientId();
        boolean boolean20 = accessToken13.isExpired();
        java.util.Date date21 = accessToken13.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user22 = osiamUserService4.updateUser("org.osiam.client.exception.ConflictException: org.osiam.client.exception.UnauthorizedException: PATCH", updateUser6, accessToken13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02179");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector.Builder builder12 = builder2.setEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setResourceServerEndpoint("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.OsiamConnector osiamConnector17 = builder14.build();
        org.osiam.resources.scim.UpdateGroup updateGroup19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        java.lang.Object obj27 = null;
        boolean boolean28 = accessToken26.equals(obj27);
        java.util.Date date29 = accessToken26.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group30 = osiamConnector17.updateGroup("org.osiam.client.exception.OsiamClientException: client_credentials", updateGroup19, accessToken26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02180");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.Query query10 = queryBuilder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.ascending("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder8.filter("");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(query10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
    }

    @Test
    public void test02181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02181");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientId("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.addScope(scope8);
        org.osiam.client.oauth.Scope scope10 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException12 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean13 = scope10.equals((java.lang.Object) invalidAttributeException12);
        java.lang.String str14 = scope10.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder7.addScope(scope10);
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        java.lang.String str23 = accessToken22.toString();
        boolean boolean24 = scope10.equals((java.lang.Object) str23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.addScope(scope27);
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException31 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean32 = scope29.equals((java.lang.Object) invalidAttributeException31);
        java.lang.String str33 = scope29.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder26.addScope(scope29);
        org.osiam.client.oauth.Scope scope36 = new org.osiam.client.oauth.Scope("client_credentials");
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str48 = scope47.toString();
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder42.addScope(scope47);
        org.osiam.client.oauth.Scope[] scopeArray50 = new org.osiam.client.oauth.Scope[] { scope10, scope29, scope36, scope47 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken51 = osiamConnector5.retrieveAccessToken(scopeArray50);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(scope10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GET" + "'", str14, "GET");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str23, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GET" + "'", str33, "GET");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PUT" + "'", str48, "PUT");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(scopeArray50);
    }

    @Test
    public void test02182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02182");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.resources.scim.User user11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        boolean boolean19 = accessToken18.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet20 = accessToken18.getScopes();
        boolean boolean21 = accessToken18.isClientOnly();
        java.lang.String str22 = accessToken18.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user23 = osiamConnector7.replaceUser("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!", user11, accessToken18);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(scopeSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test02183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02183");
        org.osiam.client.exception.ConflictException conflictException1 = new org.osiam.client.exception.ConflictException("hi!");
        int int2 = conflictException1.getHttpStatusCode();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 409 + "'", int2 == 409);
    }

    @Test
    public void test02184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02184");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.getUserName();
        java.lang.String str15 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService2.targetEndpoint;
        org.osiam.resources.scim.Group group19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        java.lang.String str27 = accessToken26.toString();
        java.lang.String str28 = accessToken26.getType();
        boolean boolean29 = accessToken26.isExpired();
        java.util.Date date30 = accessToken26.getExpiresAt();
        boolean boolean31 = accessToken26.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group32 = osiamGroupService2.replaceGroup("org.osiam.client.exception.ConnectionInitializationException: Bearer ", group19, accessToken26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget16);
        org.junit.Assert.assertNotNull(webTarget17);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str27, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test02185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02185");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector9.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.getSortOrder();
        java.lang.String str23 = query20.getSortBy();
        java.lang.String str24 = query20.getFilter();
        java.lang.String str25 = query20.getSortOrder();
        java.lang.String str26 = query20.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder(query20);
        long long28 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder29 = new org.osiam.client.query.QueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder30 = osiamConnector9.createQueryBuilder(query20);
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder32.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder32.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.addScope(scope41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setUserName("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.helper.ScopeSerializer scopeSerializer45 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean46 = scopeSerializer45.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer47 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer48 = scopeSerializer45.unwrappingSerializer(nameTransformer47);
        boolean boolean49 = scopeSerializer45.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer50 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer51 = scopeSerializer45.unwrappingSerializer(nameTransformer50);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper52 = null;
        com.fasterxml.jackson.databind.JavaType javaType53 = null;
        scopeSerializer45.acceptJsonFormatVisitor(jsonFormatVisitorWrapper52, javaType53);
        boolean boolean55 = scopeSerializer45.usesObjectId();
        boolean boolean56 = scopeSerializer45.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider57 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer58 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean59 = scopeSerializer58.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass60 = scopeSerializer58.handledType();
        org.osiam.client.oauth.AccessToken.Builder builder62 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date63 = null;
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder62.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken67 = builder66.build();
        java.util.Date date68 = accessToken67.getExpiresAt();
        java.lang.String str69 = accessToken67.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet70 = accessToken67.getScopes();
        boolean boolean71 = scopeSerializer58.isEmpty(scopeSet70);
        boolean boolean72 = scopeSerializer45.isEmpty(serializerProvider57, scopeSet70);
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder44.addScopes(scopeSet70);
        org.osiam.client.oauth.AccessToken accessToken74 = builder73.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList75 = osiamConnector9.getAllGroups(accessToken74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "descending" + "'", str22, "descending");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "descending" + "'", str25, "descending");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Authorization" + "'", str26, "Authorization");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(scopeSetClass60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(accessToken67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(scopeSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(accessToken74);
    }

    @Test
    public void test02186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02186");
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.OsiamConnector.setMaxConnectionsPerRoute((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Max per route value may not be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02187");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientId("Bearer ");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setAuthServerEndpoint("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test02188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02188");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        java.lang.String str16 = accessToken15.toString();
        java.lang.String str17 = accessToken15.getType();
        boolean boolean18 = accessToken15.isExpired();
        java.lang.String str19 = accessToken15.getToken();
        java.util.Date date20 = accessToken15.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group21 = osiamConnector7.getGroup("GET POST PUT PATCH DELETE", accessToken15);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str16, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Bearer " + "'", str19, "Bearer ");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02189");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("authorization_code");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamConnector.Builder builder3 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder5 = builder3.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder7 = builder5.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder9 = builder7.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector10 = builder9.build();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.toString();
        java.lang.String str23 = query20.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder24 = osiamConnector10.createQueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder25 = osiamConnector10.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder26 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder26.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder32 = queryBuilder28.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.descending("hi!");
        org.osiam.client.query.Query query35 = queryBuilder34.build();
        java.lang.String str36 = query35.toString();
        java.lang.String str37 = query35.toString();
        org.osiam.client.query.Query query38 = query35.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder39 = osiamConnector10.createQueryBuilder(query35);
        int int40 = query35.getCount();
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken47);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult49 = osiamUserService2.searchUsers(query35, accessToken47);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(osiamConnector10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(query35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str36, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str37, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query38);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
    }

    @Test
    public void test02190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02190");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader6 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.core.JsonParser jsonParser7 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = scopeDeserializer0.deserialize(jsonParser7, deserializationContext8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertNull(objectIdReader6);
    }

    @Test
    public void test02191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02191");
        org.osiam.client.exception.UnauthorizedException unauthorizedException1 = new org.osiam.client.exception.UnauthorizedException("ascending");
    }

    @Test
    public void test02192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02192");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService4 = builder3.build();
        org.osiam.client.OsiamGroupService.Builder builder7 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder7.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        java.util.Date date16 = accessToken15.getExpiresAt();
        java.lang.String str17 = accessToken15.getUserName();
        java.lang.String str18 = accessToken15.toString();
        java.lang.String str19 = osiamGroupService8.extractErrorMessageForbidden(accessToken15);
        boolean boolean20 = accessToken15.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            authService4.revokeAllAccessTokens("password", accessToken15);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(authService4);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str18, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test02193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02193");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.addScope(scope16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder13.setRefreshToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder22.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder22.setType("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.addScope(scope33);
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException37 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean38 = scope35.equals((java.lang.Object) invalidAttributeException37);
        java.lang.String str39 = scope35.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder32.addScope(scope35);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.setRefreshToken("GET");
        org.osiam.client.OsiamGroupService.Builder builder50 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService51 = builder50.build();
        org.osiam.client.OsiamGroupService osiamGroupService52 = builder50.build();
        org.osiam.client.oauth.AccessToken.Builder builder54 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date55 = null;
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setRefreshTokenExpiresAt(date55);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder54.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken59 = builder58.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken59);
        java.lang.String str61 = osiamGroupService52.extractErrorMessageForbidden(accessToken59);
        java.util.Date date62 = accessToken59.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder46.setRefreshTokenExpiresAt(date62);
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder22.setRefreshTokenExpiresAt(date62);
        org.osiam.client.oauth.AccessToken.Builder builder66 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date67 = null;
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder66.setRefreshTokenExpiresAt(date67);
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder66.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder66.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder74 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date75 = null;
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder74.setRefreshTokenExpiresAt(date75);
        org.osiam.client.oauth.AccessToken.Builder builder78 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date79 = null;
        org.osiam.client.oauth.AccessToken.Builder builder80 = builder78.setRefreshTokenExpiresAt(date79);
        org.osiam.client.oauth.AccessToken.Builder builder82 = builder78.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken83 = builder82.build();
        java.util.Date date84 = accessToken83.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder85 = builder74.setRefreshTokenExpiresAt(date84);
        org.osiam.client.oauth.AccessToken.Builder builder86 = builder72.setRefreshTokenExpiresAt(date84);
        org.osiam.client.oauth.AccessToken.Builder builder87 = builder64.setRefreshTokenExpiresAt(date84);
        org.osiam.client.oauth.AccessToken.Builder builder88 = builder19.setExpiresAt(date84);
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GET" + "'", str39, "GET");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(osiamGroupService51);
        org.junit.Assert.assertNotNull(osiamGroupService52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(accessToken59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Insufficient scopes: []" + "'", str61, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(accessToken83);
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test02194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02194");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeSetJsonDeserializer5.getEmptyValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet7 = scopeSetJsonDeserializer5.getEmptyValue();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty9 = scopeSetJsonDeserializer5.findBackReference("org.osiam.client.exception.ForbiddenException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'org.osiam.client.exception.ForbiddenException: hi!': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNull(scopeSet6);
        org.junit.Assert.assertNull(scopeSet7);
    }

    @Test
    public void test02195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02195");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("");
        org.osiam.client.AuthService.Builder builder5 = builder1.setClientId("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test02196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02196");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = osiamGroupService2.extractErrorMessageDefault("", statusType4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
    }

    @Test
    public void test02197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02197");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = osiamGroupService4.extractErrorMessage("org.osiam.client.exception.ConnectionInitializationException: descending", statusType6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
    }

    @Test
    public void test02198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02198");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector7.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        boolean boolean31 = accessToken30.isRefreshTokenExpired();
        java.lang.String str32 = accessToken30.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder33 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder35.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.descending("hi!");
        org.osiam.client.query.Query query42 = queryBuilder41.build();
        java.lang.String str43 = query42.toString();
        java.lang.String str44 = query42.getSortOrder();
        java.lang.String str45 = query42.getSortBy();
        java.lang.String str46 = query42.getFilter();
        java.lang.String str47 = query42.getSortOrder();
        java.lang.String str48 = query42.getAttributes();
        boolean boolean49 = accessToken30.equals((java.lang.Object) query42);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet50 = accessToken30.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector7.revokeAllAccessTokens("org.osiam.client.exception.NoResultException: authorization_code", accessToken30);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "descending" + "'", str47, "descending");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Authorization" + "'", str48, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(scopeSet50);
    }

    @Test
    public void test02199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02199");
        org.osiam.client.exception.ConflictException conflictException1 = new org.osiam.client.exception.ConflictException("PATCH");
        int int2 = conflictException1.getHttpStatusCode();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 409 + "'", int2 == 409);
    }

    @Test
    public void test02200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02200");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamConnector.Builder builder3 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder5 = builder3.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder7 = builder5.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder9 = builder7.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector10 = builder9.build();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.toString();
        java.lang.String str23 = query20.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder24 = osiamConnector10.createQueryBuilder(query20);
        java.lang.String str25 = query20.getAttributes();
        java.lang.String str26 = query20.toString();
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        boolean boolean34 = accessToken33.isRefreshTokenExpired();
        boolean boolean35 = accessToken33.isClientOnly();
        java.lang.String str36 = accessToken33.getRefreshToken();
        java.lang.String str37 = accessToken33.toString();
        java.util.Date date38 = accessToken33.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult39 = osiamGroupService2.searchGroups(query20, accessToken33);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(osiamConnector10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Authorization" + "'", str25, "Authorization");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str26, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str37, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02201");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector7.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken32 = builder29.build();
        java.lang.String str33 = accessToken32.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group34 = osiamConnector7.getGroup("org.osiam.client.exception.UnauthorizedException: GET", accessToken32);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str33, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
    }

    @Test
    public void test02202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02202");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientId("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector21 = builder18.build();
        org.osiam.resources.scim.UpdateUser updateUser23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.addScope(scope26);
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException30 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean31 = scope28.equals((java.lang.Object) invalidAttributeException30);
        java.lang.String str32 = scope28.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder25.addScope(scope28);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken accessToken38 = builder37.build();
        boolean boolean39 = accessToken38.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user40 = osiamConnector21.updateUser("PATCH", updateUser23, accessToken38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "GET" + "'", str32, "GET");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test02203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02203");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientId("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = osiamConnector5.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        java.util.Date date15 = accessToken13.getExpiresAt();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.descending("hi!");
        org.osiam.client.query.Query query25 = queryBuilder24.build();
        java.lang.String str26 = query25.toString();
        java.lang.String str27 = query25.getSortOrder();
        org.osiam.client.query.Query query28 = query25.nextPage();
        boolean boolean29 = accessToken13.equals((java.lang.Object) query25);
        java.lang.String str30 = accessToken13.getType();
        java.lang.String str31 = accessToken13.getType();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList32 = osiamConnector5.getAllUsers(accessToken13);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(query25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str26, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "descending" + "'", str27, "descending");
        org.junit.Assert.assertNotNull(query28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test02204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02204");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder12.setResourceServerEndpoint("hi!");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setEndpoint("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector osiamConnector21 = builder20.build();
        org.osiam.resources.scim.UpdateGroup updateGroup23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        boolean boolean31 = accessToken30.isRefreshTokenExpired();
        java.lang.String str32 = accessToken30.getUserName();
        java.lang.String str33 = accessToken30.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group34 = osiamConnector21.updateGroup("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME", updateGroup23, accessToken30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str33, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test02205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02205");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setAuthServerEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setAuthServerEndpoint("refresh_token");
        org.osiam.client.OsiamConnector osiamConnector15 = builder10.build();
        org.osiam.client.oauth.Scope[] scopeArray16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken17 = osiamConnector15.retrieveAccessToken(scopeArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
    }

    @Test
    public void test02206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02206");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.getUserName();
        java.lang.String str15 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.resources.scim.UpdateGroup updateGroup17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        java.util.Date date25 = accessToken24.getExpiresAt();
        java.lang.String str26 = accessToken24.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet27 = accessToken24.getScopes();
        java.lang.String str28 = accessToken24.getUserName();
        java.lang.String str29 = accessToken24.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group30 = osiamGroupService2.updateGroup("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", updateGroup17, accessToken24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(scopeSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test02207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02207");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer1 = scopeDeserializer0.getDelegatee();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet2 = scopeDeserializer0.getEmptyValue();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty4 = scopeDeserializer0.findBackReference("org.osiam.client.exception.OsiamClientException: PUT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'org.osiam.client.exception.OsiamClientException: PUT': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardJsonDeserializer1);
        org.junit.Assert.assertNull(scopeSet2);
    }

    @Test
    public void test02208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02208");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.usesObjectId();
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope3 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.addScope(scope6);
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException10 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean11 = scope8.equals((java.lang.Object) invalidAttributeException10);
        java.lang.String str12 = scope8.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder5.addScope(scope8);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setUserId("");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.addScope(scope18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.addScope(scope22);
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str25 = scope24.getValue();
        org.osiam.client.oauth.Scope[] scopeArray26 = new org.osiam.client.oauth.Scope[] { scope2, scope3, scope18, scope22, scope24 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet27 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet27, scopeArray26);
        boolean boolean29 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet27);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider30 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer31 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date34 = null;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException39 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean40 = scope37.equals((java.lang.Object) invalidAttributeException39);
        java.lang.String str41 = scope37.getValue();
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str44 = scope43.toString();
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str47 = scope46.getValue();
        java.lang.String str48 = scope46.getValue();
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException51 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean52 = scope49.equals((java.lang.Object) invalidAttributeException51);
        java.lang.String str53 = scope49.getValue();
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope56 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope57 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException59 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean60 = scope57.equals((java.lang.Object) invalidAttributeException59);
        org.osiam.client.oauth.Scope scope61 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope62 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope63 = org.osiam.client.oauth.Scope.GET;
        boolean boolean65 = scope63.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope66 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray67 = new org.osiam.client.oauth.Scope[] { scope36, scope37, scope42, scope43, scope45, scope46, scope49, scope54, scope55, scope56, scope57, scope61, scope62, scope63, scope66 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet68 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet68, scopeArray67);
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder33.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet68);
        boolean boolean71 = scopeSerializer31.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet68);
        org.osiam.client.oauth.AccessToken.Builder builder73 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date74 = null;
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder73.setRefreshTokenExpiresAt(date74);
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder73.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken78 = builder77.build();
        boolean boolean79 = accessToken78.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet80 = accessToken78.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator81 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider82 = null;
        scopeSerializer31.serialize(scopeSet80, jsonGenerator81, serializerProvider82);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider84 = null;
        org.osiam.client.oauth.AccessToken.Builder builder86 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date87 = null;
        org.osiam.client.oauth.AccessToken.Builder builder88 = builder86.setRefreshTokenExpiresAt(date87);
        org.osiam.client.oauth.AccessToken.Builder builder90 = builder86.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken91 = builder90.build();
        boolean boolean92 = accessToken91.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet93 = accessToken91.getScopes();
        boolean boolean94 = scopeSerializer31.isEmpty(serializerProvider84, scopeSet93);
        boolean boolean95 = scopeSerializer0.isEmpty(serializerProvider30, scopeSet93);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper96 = null;
        com.fasterxml.jackson.databind.JavaType javaType97 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper96, javaType97);
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer99 = scopeSerializer0.getDelegatee();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(scope3);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GET" + "'", str12, "GET");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PATCH" + "'", str25, "PATCH");
        org.junit.Assert.assertNotNull(scopeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "GET" + "'", str41, "GET");
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ME" + "'", str44, "ME");
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PATCH" + "'", str47, "PATCH");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PATCH" + "'", str48, "PATCH");
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "GET" + "'", str53, "GET");
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertNotNull(scope57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(scope61);
        org.junit.Assert.assertNotNull(scope62);
        org.junit.Assert.assertNotNull(scope63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(scope66);
        org.junit.Assert.assertNotNull(scopeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(accessToken78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(scopeSet80);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(accessToken91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(scopeSet93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(wildcardJsonSerializer99);
    }

    @Test
    public void test02209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02209");
        org.osiam.client.exception.ConflictException conflictException1 = new org.osiam.client.exception.ConflictException("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        java.lang.Throwable[] throwableArray2 = conflictException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test02210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02210");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder7 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder7.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet17 = accessToken15.getScopes();
        java.lang.String str18 = osiamGroupService8.extractErrorMessageForbidden(accessToken15);
        boolean boolean19 = accessToken15.isClientOnly();
        boolean boolean20 = accessToken15.isClientOnly();
        java.lang.String str21 = accessToken15.toString();
        java.lang.String str22 = osiamGroupService4.extractErrorMessageForbidden(accessToken15);
        javax.ws.rs.client.WebTarget webTarget23 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = osiamGroupService4.extractErrorMessageDefault("org.osiam.client.exception.OsiamRequestException: hi!", statusType25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(scopeSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str21, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Insufficient scopes: []" + "'", str22, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget23);
    }

    @Test
    public void test02211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02211");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Bearer ");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder3 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder5 = queryBuilder3.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder7 = queryBuilder5.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder5.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.descending("hi!");
        org.osiam.client.query.Query query12 = queryBuilder11.build();
        java.lang.String str13 = query12.toString();
        java.lang.String str14 = query12.getSortOrder();
        java.lang.String str15 = query12.getSortBy();
        java.lang.String str16 = query12.getFilter();
        java.lang.String str17 = query12.getSortOrder();
        java.lang.String str18 = query12.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder19 = new org.osiam.client.query.QueryBuilder(query12);
        long long20 = query12.getStartIndex();
        org.osiam.client.query.Query query21 = query12.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder(query21);
        org.osiam.client.query.Query query23 = query21.nextPage();
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date30 = null;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setRefreshTokenExpiresAt(date30);
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken34 = builder33.build();
        java.util.Date date35 = accessToken34.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder25.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder25.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder25.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder40.addScopes(scopeSet49);
        org.osiam.client.oauth.AccessToken accessToken51 = builder50.build();
        java.lang.String str52 = accessToken51.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult53 = osiamUserService2.searchUsers(query23, accessToken51);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(queryBuilder5);
        org.junit.Assert.assertNotNull(queryBuilder7);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str13, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "descending" + "'", str14, "descending");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "descending" + "'", str17, "descending");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Authorization" + "'", str18, "Authorization");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertNotNull(query23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(accessToken34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(accessToken51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
    }

    @Test
    public void test02212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02212");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector9.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        boolean boolean19 = accessToken18.isRefreshTokenExpired();
        java.lang.String str20 = accessToken18.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet21 = accessToken18.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group22 = osiamConnector9.getGroup("refresh_token", accessToken18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(scopeSet21);
    }

    @Test
    public void test02213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02213");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Bearer ");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        boolean boolean12 = accessToken10.isClientOnly();
        java.lang.String str13 = accessToken10.getRefreshToken();
        boolean boolean14 = accessToken10.isExpired();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user16 = osiamUserService2.createUser(user3, accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test02214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02214");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setEndpoint("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.OsiamConnector osiamConnector15 = builder14.build();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.descending("hi!");
        org.osiam.client.query.Query query25 = queryBuilder24.build();
        java.lang.String str26 = query25.toString();
        java.lang.String str27 = query25.toString();
        java.lang.String str28 = query25.toString();
        int int29 = query25.getCount();
        long long30 = query25.getStartIndex();
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        boolean boolean38 = accessToken37.isRefreshTokenExpired();
        java.lang.String str39 = accessToken37.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet40 = accessToken37.getScopes();
        org.osiam.client.helper.ScopeSerializer scopeSerializer41 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean42 = scopeSerializer41.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException50 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean51 = scope48.equals((java.lang.Object) invalidAttributeException50);
        java.lang.String str52 = scope48.getValue();
        org.osiam.client.oauth.Scope scope53 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str55 = scope54.toString();
        org.osiam.client.oauth.Scope scope56 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope57 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str58 = scope57.getValue();
        java.lang.String str59 = scope57.getValue();
        org.osiam.client.oauth.Scope scope60 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException62 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean63 = scope60.equals((java.lang.Object) invalidAttributeException62);
        java.lang.String str64 = scope60.getValue();
        org.osiam.client.oauth.Scope scope65 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope66 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope67 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope68 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException70 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean71 = scope68.equals((java.lang.Object) invalidAttributeException70);
        org.osiam.client.oauth.Scope scope72 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope73 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope74 = org.osiam.client.oauth.Scope.GET;
        boolean boolean76 = scope74.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope77 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray78 = new org.osiam.client.oauth.Scope[] { scope47, scope48, scope53, scope54, scope56, scope57, scope60, scope65, scope66, scope67, scope68, scope72, scope73, scope74, scope77 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet79 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet79, scopeArray78);
        org.osiam.client.oauth.AccessToken.Builder builder81 = builder44.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet79);
        boolean boolean82 = scopeSerializer41.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet79);
        boolean boolean83 = accessToken37.equals((java.lang.Object) scopeSet79);
        boolean boolean84 = accessToken37.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult85 = osiamConnector15.searchUsers(query25, accessToken37);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(query25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str26, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str28, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(scopeSet40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "GET" + "'", str52, "GET");
        org.junit.Assert.assertNotNull(scope53);
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ME" + "'", str55, "ME");
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertNotNull(scope57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "PATCH" + "'", str58, "PATCH");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "PATCH" + "'", str59, "PATCH");
        org.junit.Assert.assertNotNull(scope60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "GET" + "'", str64, "GET");
        org.junit.Assert.assertNotNull(scope65);
        org.junit.Assert.assertNotNull(scope66);
        org.junit.Assert.assertNotNull(scope67);
        org.junit.Assert.assertNotNull(scope68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(scope72);
        org.junit.Assert.assertNotNull(scope73);
        org.junit.Assert.assertNotNull(scope74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(scope77);
        org.junit.Assert.assertNotNull(scopeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test02215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02215");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        java.lang.Class<?> wildcardClass4 = builder1.getClass();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test02216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02216");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = osiamConnector7.createQueryBuilder();
        org.osiam.client.OsiamConnector.Builder builder12 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        boolean boolean25 = accessToken24.isRefreshTokenExpired();
        java.lang.String str26 = accessToken24.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        java.lang.String str37 = query36.toString();
        java.lang.String str38 = query36.getSortOrder();
        java.lang.String str39 = query36.getSortBy();
        java.lang.String str40 = query36.getFilter();
        java.lang.String str41 = query36.toString();
        boolean boolean42 = accessToken24.equals((java.lang.Object) query36);
        org.osiam.client.query.QueryBuilder queryBuilder43 = osiamConnector17.createQueryBuilder(query36);
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.ascending("descending");
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder43.filter("org.osiam.client.exception.ConflictException: ");
        org.osiam.client.query.Query query48 = queryBuilder47.build();
        org.osiam.client.oauth.AccessToken.Builder builder50 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope51 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.addScope(scope51);
        org.osiam.client.oauth.Scope scope53 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException55 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean56 = scope53.equals((java.lang.Object) invalidAttributeException55);
        java.lang.String str57 = scope53.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder50.addScope(scope53);
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder60.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder64.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder64.setUserId("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken69 = builder64.build();
        java.lang.String str70 = accessToken69.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult71 = osiamConnector7.searchGroups(query48, accessToken69);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str37, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "descending" + "'", str38, "descending");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str41, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(query48);
        org.junit.Assert.assertNotNull(scope51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(scope53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "GET" + "'", str57, "GET");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(accessToken69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Bearer " + "'", str70, "Bearer ");
    }

    @Test
    public void test02217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02217");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        java.lang.String str13 = accessToken11.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList14 = osiamGroupService4.getAllGroups(accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test02218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02218");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        java.util.Date date15 = accessToken13.getExpiresAt();
        java.lang.String str16 = osiamGroupService6.extractErrorMessageForbidden(accessToken13);
        org.osiam.client.oauth.AccessToken accessToken17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList18 = osiamGroupService6.getAllGroups(accessToken17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Insufficient scopes: []" + "'", str16, "Insufficient scopes: []");
    }

    @Test
    public void test02219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02219");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder3 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder5 = queryBuilder3.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder7 = queryBuilder5.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder5.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.descending("hi!");
        org.osiam.client.query.Query query12 = queryBuilder11.build();
        java.lang.String str13 = query12.toString();
        java.lang.String str14 = query12.toString();
        org.osiam.client.query.Query query15 = query12.nextPage();
        org.osiam.client.query.Query query16 = query12.nextPage();
        int int17 = query16.getCount();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        java.util.Date date25 = accessToken24.getExpiresAt();
        java.lang.String str26 = accessToken24.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken24);
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date30 = null;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setRefreshTokenExpiresAt(date30);
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken34 = builder33.build();
        boolean boolean35 = accessToken34.isRefreshTokenExpired();
        boolean boolean36 = accessToken34.isClientOnly();
        java.lang.String str37 = accessToken34.getClientId();
        boolean boolean38 = accessToken34.isClientOnly();
        boolean boolean39 = accessToken24.equals((java.lang.Object) accessToken34);
        org.osiam.client.query.QueryBuilder queryBuilder40 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder42 = queryBuilder40.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder44 = queryBuilder42.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder46 = queryBuilder42.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.descending("hi!");
        org.osiam.client.query.Query query49 = queryBuilder48.build();
        org.osiam.client.query.Query query50 = queryBuilder48.build();
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.ascending("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        boolean boolean53 = accessToken24.equals((java.lang.Object) "org.osiam.client.exception.ConnectionInitializationException: PATCH");
        java.lang.String str54 = accessToken24.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult55 = osiamUserService2.searchUsers(query16, accessToken24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(queryBuilder5);
        org.junit.Assert.assertNotNull(queryBuilder7);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str13, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(accessToken34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(queryBuilder46);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(query49);
        org.junit.Assert.assertNotNull(query50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Bearer " + "'", str54, "Bearer ");
    }

    @Test
    public void test02220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02220");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        java.lang.String str14 = osiamGroupService4.extractErrorMessageForbidden(accessToken12);
        javax.ws.rs.client.WebTarget webTarget15 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService4.targetEndpoint;
        org.osiam.resources.scim.Group group18 = null;
        org.osiam.client.AuthService.Builder builder20 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientId("ME");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder26 = builder24.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder28 = builder26.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService29 = builder28.build();
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken36 = builder35.build();
        boolean boolean37 = accessToken36.isRefreshTokenExpired();
        java.lang.String str38 = authService29.extractErrorMessageForbidden(accessToken36);
        boolean boolean39 = accessToken36.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group40 = osiamGroupService4.updateResource("Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]", group18, accessToken36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget15);
        org.junit.Assert.assertNotNull(webTarget16);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(authService29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(accessToken36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Insufficient scopes: []" + "'", str38, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test02221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02221");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder9.addScope(scope12);
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.addScope(scope17);
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException21 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean22 = scope19.equals((java.lang.Object) invalidAttributeException21);
        java.lang.String str23 = scope19.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder16.addScope(scope19);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder16.setRefreshToken("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        java.util.Date date34 = accessToken33.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder26.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder14.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder14.setUserId("2024-03-22T13:51:20.388");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setType("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamGroupService.Builder builder42 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService43 = builder42.build();
        org.osiam.client.OsiamGroupService osiamGroupService44 = builder42.build();
        javax.ws.rs.client.WebTarget webTarget45 = osiamGroupService44.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget46 = osiamGroupService44.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder48.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken53 = builder52.build();
        boolean boolean54 = accessToken53.isRefreshTokenExpired();
        java.lang.String str55 = accessToken53.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet56 = accessToken53.getScopes();
        java.lang.String str57 = osiamGroupService44.extractErrorMessageForbidden(accessToken53);
        java.lang.String str58 = accessToken53.getUserId();
        java.util.Date date59 = accessToken53.getRefreshTokenExpiresAt();
        java.util.Date date60 = accessToken53.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder40.setRefreshTokenExpiresAt(date60);
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder40.setUserId("org.osiam.client.exception.ConflictException: org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder63.setClientId("ME");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GET" + "'", str23, "GET");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(osiamGroupService43);
        org.junit.Assert.assertNotNull(osiamGroupService44);
        org.junit.Assert.assertNotNull(webTarget45);
        org.junit.Assert.assertNotNull(webTarget46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(accessToken53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(scopeSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Insufficient scopes: []" + "'", str57, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test02222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02222");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.AuthService.Builder builder4 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder6 = builder4.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        java.util.Date date15 = accessToken14.getExpiresAt();
        java.lang.String str16 = accessToken14.getRefreshToken();
        java.lang.String str17 = accessToken14.getType();
        java.lang.String str18 = accessToken14.getClientId();
        java.lang.String str19 = accessToken14.getUserName();
        java.lang.String str20 = accessToken14.toString();
        java.lang.String str21 = accessToken14.getUserName();
        java.lang.String str22 = authService7.extractErrorMessageForbidden(accessToken14);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList23 = osiamGroupService2.getAllGroups(accessToken14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(authService7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str20, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Insufficient scopes: []" + "'", str22, "Insufficient scopes: []");
    }

    @Test
    public void test02223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02223");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        boolean boolean13 = accessToken11.isClientOnly();
        java.lang.String str14 = accessToken11.getClientId();
        boolean boolean15 = accessToken11.isClientOnly();
        java.lang.String str16 = accessToken11.getToken();
        java.lang.String str17 = osiamGroupService4.extractErrorMessageForbidden(accessToken11);
        org.osiam.resources.scim.Group group19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken26);
        java.util.Date date28 = accessToken26.getExpiresAt();
        org.osiam.client.query.QueryBuilder queryBuilder29 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder31.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.descending("hi!");
        org.osiam.client.query.Query query38 = queryBuilder37.build();
        java.lang.String str39 = query38.toString();
        java.lang.String str40 = query38.getSortOrder();
        org.osiam.client.query.Query query41 = query38.nextPage();
        boolean boolean42 = accessToken26.equals((java.lang.Object) query38);
        java.lang.String str43 = accessToken26.getType();
        java.lang.String str44 = accessToken26.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group45 = osiamGroupService4.replaceGroup("org.osiam.client.exception.UnauthorizedException: GET", group19, accessToken26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Bearer " + "'", str16, "Bearer ");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Insufficient scopes: []" + "'", str17, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(query38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str39, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "descending" + "'", str40, "descending");
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test02224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02224");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder23 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.descending("hi!");
        org.osiam.client.query.Query query32 = queryBuilder31.build();
        java.lang.String str33 = query32.toString();
        java.lang.String str34 = query32.toString();
        org.osiam.client.query.Query query35 = query32.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder36 = osiamConnector7.createQueryBuilder(query32);
        org.osiam.client.query.QueryBuilder queryBuilder37 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder37.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder43 = queryBuilder39.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.descending("hi!");
        org.osiam.client.query.Query query46 = queryBuilder45.build();
        java.lang.String str47 = query46.toString();
        java.lang.String str48 = query46.getSortOrder();
        java.lang.String str49 = query46.getSortBy();
        java.lang.String str50 = query46.getFilter();
        java.lang.String str51 = query46.getSortOrder();
        java.lang.String str52 = query46.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder53 = new org.osiam.client.query.QueryBuilder(query46);
        long long54 = query46.getStartIndex();
        org.osiam.client.query.Query query55 = query46.nextPage();
        org.osiam.client.oauth.AccessToken.Builder builder57 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date58 = null;
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setRefreshTokenExpiresAt(date58);
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder57.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken62 = builder61.build();
        boolean boolean63 = accessToken62.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet64 = accessToken62.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult65 = osiamConnector7.searchUsers(query46, accessToken62);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(query32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str33, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str34, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query35);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(query46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str47, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "descending" + "'", str48, "descending");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "descending" + "'", str51, "descending");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Authorization" + "'", str52, "Authorization");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(accessToken62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(scopeSet64);
    }

    @Test
    public void test02225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02225");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getNullValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet5 = scopeDeserializer0.getNullValue();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer6 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass7 = scopeDeserializer6.handledType();
        boolean boolean8 = scopeDeserializer6.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = scopeDeserializer6.getNullValue();
        java.lang.Class<?> wildcardClass10 = scopeDeserializer6.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer11 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer12 = scopeDeserializer6.unwrappingDeserializer(nameTransformer11);
        java.util.Collection<java.lang.Object> objCollection13 = scopeSetJsonDeserializer12.getKnownPropertyNames();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer14 = scopeDeserializer0.replaceDelegatee(scopeSetJsonDeserializer12);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNull(scopeSet5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(scopeSet9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer12);
        org.junit.Assert.assertNull(objCollection13);
    }

    @Test
    public void test02226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02226");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder13 = builder9.setClientSecret("PATCH");
        org.osiam.client.AuthService authService14 = builder13.build();
        org.osiam.client.AuthService authService15 = builder13.build();
        org.osiam.client.AuthService.Builder builder19 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder21 = builder19.setClientId("ME");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService28 = builder27.build();
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        boolean boolean36 = accessToken35.isRefreshTokenExpired();
        java.lang.String str37 = accessToken35.getUserId();
        java.lang.String str38 = accessToken35.getToken();
        java.lang.String str39 = authService28.extractErrorMessageForbidden(accessToken35);
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str41 = scope40.getValue();
        java.lang.String str42 = scope40.toString();
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray44 = new org.osiam.client.oauth.Scope[] { scope40, scope43 };
        java.net.URI uRI45 = authService28.getAuthorizationUri(scopeArray44);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken46 = authService15.retrieveAccessToken("org.osiam.client.exception.NoResultException: authorization_code", "org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", scopeArray44);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(authService14);
        org.junit.Assert.assertNotNull(authService15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(authService28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Bearer " + "'", str38, "Bearer ");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PATCH" + "'", str41, "PATCH");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PATCH" + "'", str42, "PATCH");
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertNotNull(scopeArray44);
        org.junit.Assert.assertNotNull(uRI45);
    }

    @Test
    public void test02227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02227");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        java.lang.String str12 = accessToken10.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder13 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.descending("hi!");
        org.osiam.client.query.Query query22 = queryBuilder21.build();
        java.lang.String str23 = query22.toString();
        java.lang.String str24 = query22.getSortOrder();
        java.lang.String str25 = query22.getSortBy();
        java.lang.String str26 = query22.getFilter();
        java.lang.String str27 = query22.toString();
        boolean boolean28 = accessToken10.equals((java.lang.Object) query22);
        java.lang.String str29 = accessToken10.toString();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.deleteGroup("ascending", accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(query22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "descending" + "'", str24, "descending");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str29, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test02228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02228");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector17 = builder14.build();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        boolean boolean26 = accessToken25.isRefreshTokenExpired();
        java.lang.String str27 = accessToken25.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet28 = accessToken25.getScopes();
        org.osiam.client.helper.ScopeSerializer scopeSerializer29 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean30 = scopeSerializer29.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException38 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean39 = scope36.equals((java.lang.Object) invalidAttributeException38);
        java.lang.String str40 = scope36.getValue();
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str43 = scope42.toString();
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str46 = scope45.getValue();
        java.lang.String str47 = scope45.getValue();
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException50 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean51 = scope48.equals((java.lang.Object) invalidAttributeException50);
        java.lang.String str52 = scope48.getValue();
        org.osiam.client.oauth.Scope scope53 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope56 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException58 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean59 = scope56.equals((java.lang.Object) invalidAttributeException58);
        org.osiam.client.oauth.Scope scope60 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope61 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope62 = org.osiam.client.oauth.Scope.GET;
        boolean boolean64 = scope62.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope65 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray66 = new org.osiam.client.oauth.Scope[] { scope35, scope36, scope41, scope42, scope44, scope45, scope48, scope53, scope54, scope55, scope56, scope60, scope61, scope62, scope65 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet67 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet67, scopeArray66);
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder32.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet67);
        boolean boolean70 = scopeSerializer29.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet67);
        boolean boolean71 = accessToken25.equals((java.lang.Object) scopeSet67);
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector17.deleteUser("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME", accessToken25);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(scopeSet28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "GET" + "'", str40, "GET");
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ME" + "'", str43, "ME");
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PATCH" + "'", str46, "PATCH");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PATCH" + "'", str47, "PATCH");
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "GET" + "'", str52, "GET");
        org.junit.Assert.assertNotNull(scope53);
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(scope60);
        org.junit.Assert.assertNotNull(scope61);
        org.junit.Assert.assertNotNull(scope62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(scope65);
        org.junit.Assert.assertNotNull(scopeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test02229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02229");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.client.AuthService.Builder builder7 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientSecret("");
        org.osiam.client.AuthService.Builder builder15 = builder11.setClientId("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService16 = builder11.build();
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        boolean boolean24 = accessToken23.isRefreshTokenExpired();
        boolean boolean25 = accessToken23.isClientOnly();
        java.lang.String str26 = accessToken23.getClientId();
        boolean boolean27 = accessToken23.isClientOnly();
        java.lang.String str28 = accessToken23.getToken();
        java.lang.String str29 = accessToken23.getToken();
        boolean boolean30 = accessToken23.isRefreshTokenExpired();
        java.lang.String str31 = authService16.extractErrorMessageForbidden(accessToken23);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser32 = osiamUserService5.getCurrentUserBasic(accessToken23);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(authService16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Bearer " + "'", str28, "Bearer ");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Bearer " + "'", str29, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Insufficient scopes: []" + "'", str31, "Insufficient scopes: []");
    }

    @Test
    public void test02230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02230");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Cannot connect to server");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        boolean boolean12 = accessToken10.isClientOnly();
        java.lang.String str13 = accessToken10.getRefreshToken();
        boolean boolean14 = accessToken10.isExpired();
        boolean boolean15 = accessToken10.isExpired();
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken24 = builder21.build();
        boolean boolean25 = accessToken10.equals((java.lang.Object) builder21);
        java.lang.String str26 = accessToken10.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser27 = osiamUserService3.getCurrentUserBasic(accessToken10);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Bearer " + "'", str26, "Bearer ");
    }

    @Test
    public void test02231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02231");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientId("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector21 = builder18.build();
        org.osiam.resources.scim.Group group22 = null;
        org.osiam.client.AuthService.Builder builder24 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder26 = builder24.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder28 = builder26.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder30 = builder28.setClientSecret("");
        org.osiam.client.AuthService.Builder builder32 = builder28.setClientId("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService33 = builder28.build();
        org.osiam.client.oauth.AccessToken.Builder builder35 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date36 = null;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setRefreshTokenExpiresAt(date36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder35.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken40 = builder39.build();
        boolean boolean41 = accessToken40.isRefreshTokenExpired();
        boolean boolean42 = accessToken40.isClientOnly();
        java.lang.String str43 = accessToken40.getClientId();
        boolean boolean44 = accessToken40.isClientOnly();
        java.lang.String str45 = accessToken40.getToken();
        java.lang.String str46 = accessToken40.getToken();
        boolean boolean47 = accessToken40.isRefreshTokenExpired();
        java.lang.String str48 = authService33.extractErrorMessageForbidden(accessToken40);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group49 = osiamConnector21.createGroup(group22, accessToken40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(authService33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(accessToken40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Bearer " + "'", str45, "Bearer ");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Bearer " + "'", str46, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Insufficient scopes: []" + "'", str48, "Insufficient scopes: []");
    }

    @Test
    public void test02232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02232");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getEmptyValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.core.JsonParser jsonParser6 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext7 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer8 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean9 = scopeSerializer8.usesObjectId();
        boolean boolean10 = scopeSerializer8.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer11 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer12 = scopeSerializer8.unwrappingSerializer(nameTransformer11);
        org.osiam.client.helper.ScopeSerializer scopeSerializer13 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException21 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean22 = scope19.equals((java.lang.Object) invalidAttributeException21);
        java.lang.String str23 = scope19.getValue();
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str26 = scope25.toString();
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str29 = scope28.getValue();
        java.lang.String str30 = scope28.getValue();
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException33 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean34 = scope31.equals((java.lang.Object) invalidAttributeException33);
        java.lang.String str35 = scope31.getValue();
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException41 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean42 = scope39.equals((java.lang.Object) invalidAttributeException41);
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.GET;
        boolean boolean47 = scope45.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray49 = new org.osiam.client.oauth.Scope[] { scope18, scope19, scope24, scope25, scope27, scope28, scope31, scope36, scope37, scope38, scope39, scope43, scope44, scope45, scope48 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet50 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet50, scopeArray49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder15.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet50);
        boolean boolean53 = scopeSerializer13.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet50);
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet62 = accessToken60.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator63 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider64 = null;
        scopeSerializer13.serialize(scopeSet62, jsonGenerator63, serializerProvider64);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider66 = null;
        org.osiam.client.oauth.AccessToken.Builder builder68 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date69 = null;
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder68.setRefreshTokenExpiresAt(date69);
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder68.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken73 = builder72.build();
        boolean boolean74 = accessToken73.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet75 = accessToken73.getScopes();
        boolean boolean76 = scopeSerializer13.isEmpty(serializerProvider66, scopeSet75);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator77 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider78 = null;
        scopeSerializer8.serialize(scopeSet75, jsonGenerator77, serializerProvider78);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet80 = scopeDeserializer0.deserialize(jsonParser6, deserializationContext7, scopeSet75);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Can not update object of type java.util.HashSet (by deserializer of type org.osiam.client.helper.ScopeDeserializer)");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GET" + "'", str23, "GET");
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ME" + "'", str26, "ME");
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PATCH" + "'", str29, "PATCH");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PATCH" + "'", str30, "PATCH");
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GET" + "'", str35, "GET");
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertNotNull(scopeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(scopeSet62);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(accessToken73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(scopeSet75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test02233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02233");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService3.targetEndpoint;
        org.osiam.resources.scim.Group group8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        java.util.Date date16 = accessToken15.getExpiresAt();
        java.lang.String str17 = accessToken15.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken15.getScopes();
        java.lang.String str19 = accessToken15.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group20 = osiamGroupService3.updateGroup("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!", group8, accessToken15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test02234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02234");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.toString();
        java.lang.String str23 = query20.toString();
        int int24 = query20.getCount();
        long long25 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder26 = osiamConnector7.createQueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        java.lang.String str37 = query36.toString();
        java.lang.String str38 = query36.getSortOrder();
        java.lang.String str39 = query36.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder40 = new org.osiam.client.query.QueryBuilder(query36);
        org.osiam.client.query.QueryBuilder queryBuilder41 = osiamConnector7.createQueryBuilder(query36);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.query.Query query42 = query36.previousPage();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: StartIndex < 1 is not possible.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str37, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "descending" + "'", str38, "descending");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNotNull(queryBuilder41);
    }

    @Test
    public void test02235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02235");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        boolean boolean13 = accessToken11.isClientOnly();
        java.lang.String str14 = accessToken11.getRefreshToken();
        boolean boolean15 = accessToken11.isExpired();
        java.lang.String str16 = accessToken11.getRefreshToken();
        java.lang.String str17 = accessToken11.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService3.deleteGroup("org.osiam.client.exception.ConnectionInitializationException: PATCH", accessToken11);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test02236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02236");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder1.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService6 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getUserId();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        // The following exception was thrown during execution in test generation
        try {
            authService6.revokeAccessToken(accessToken13);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test02237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02237");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        boolean boolean12 = accessToken10.isClientOnly();
        java.lang.String str13 = accessToken10.getRefreshToken();
        boolean boolean14 = accessToken10.isExpired();
        boolean boolean15 = accessToken10.isRefreshTokenExpired();
        org.osiam.client.AuthService.Builder builder17 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder19 = builder17.setClientId("ME");
        boolean boolean20 = accessToken10.equals((java.lang.Object) builder17);
        boolean boolean21 = accessToken10.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user22 = osiamUserService2.getUser("ME", accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test02238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02238");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientId("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = osiamConnector5.createQueryBuilder();
        org.osiam.resources.scim.UpdateGroup updateGroup8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        java.util.Date date16 = accessToken15.getExpiresAt();
        java.lang.String str17 = accessToken15.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken15.getScopes();
        java.util.Date date19 = accessToken15.getExpiresAt();
        java.lang.String str20 = accessToken15.getToken();
        java.lang.String str21 = accessToken15.getToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken15);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group23 = osiamConnector5.updateGroup("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]", updateGroup8, accessToken15);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Bearer " + "'", str20, "Bearer ");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Bearer " + "'", str21, "Bearer ");
    }

    @Test
    public void test02239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02239");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        org.osiam.client.OsiamGroupService.Builder builder14 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService15 = builder14.build();
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        boolean boolean23 = accessToken22.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet24 = accessToken22.getScopes();
        java.lang.String str25 = osiamGroupService15.extractErrorMessageForbidden(accessToken22);
        boolean boolean26 = accessToken22.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken22);
        java.lang.String str28 = osiamGroupService3.extractErrorMessageForbidden(accessToken22);
        javax.ws.rs.core.Response.StatusType statusType30 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        boolean boolean38 = accessToken37.isRefreshTokenExpired();
        boolean boolean39 = accessToken37.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService3.checkAndHandleResponse("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", statusType30, accessToken37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(scopeSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Insufficient scopes: []" + "'", str28, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test02240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02240");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder7 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder7.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet17 = accessToken15.getScopes();
        java.lang.String str18 = osiamGroupService8.extractErrorMessageForbidden(accessToken15);
        boolean boolean19 = accessToken15.isClientOnly();
        boolean boolean20 = accessToken15.isClientOnly();
        java.lang.String str21 = accessToken15.toString();
        java.lang.String str22 = osiamGroupService4.extractErrorMessageForbidden(accessToken15);
        javax.ws.rs.client.WebTarget webTarget23 = osiamGroupService4.targetEndpoint;
        org.osiam.resources.scim.UpdateGroup updateGroup25 = null;
        org.osiam.client.AuthService.Builder builder27 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder29 = builder27.setClientId("ME");
        org.osiam.client.AuthService.Builder builder31 = builder29.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder33 = builder31.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder35 = builder33.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService36 = builder35.build();
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        boolean boolean44 = accessToken43.isRefreshTokenExpired();
        java.lang.String str45 = authService36.extractErrorMessageForbidden(accessToken43);
        boolean boolean46 = accessToken43.isRefreshTokenExpired();
        java.lang.String str47 = accessToken43.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group48 = osiamGroupService4.updateGroup("Bearer ", updateGroup25, accessToken43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(scopeSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str21, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Insufficient scopes: []" + "'", str22, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget23);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(authService36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Insufficient scopes: []" + "'", str45, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test02241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02241");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector5.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder33 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder35.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.descending("hi!");
        org.osiam.client.query.Query query42 = queryBuilder41.build();
        java.lang.String str43 = query42.getAttributes();
        java.lang.String str44 = query42.toString();
        java.lang.String str45 = query42.getSortBy();
        org.osiam.client.query.Query query46 = query42.nextPage();
        int int47 = query42.getCount();
        java.lang.String str48 = query42.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder49 = osiamConnector5.createQueryBuilder(query42);
        org.osiam.client.oauth.AccessToken.Builder builder52 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setRefreshTokenExpiresAt(date53);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder52.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken57 = builder56.build();
        boolean boolean58 = accessToken57.isRefreshTokenExpired();
        java.lang.String str59 = accessToken57.getUserId();
        java.lang.String str60 = accessToken57.getToken();
        java.util.Date date61 = accessToken57.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector5.revokeAllAccessTokens("org.osiam.client.exception.ConflictException: ", accessToken57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Authorization" + "'", str43, "Authorization");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str44, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(query46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(accessToken57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Bearer " + "'", str60, "Bearer ");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02242");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService4.targetEndpoint;
        org.osiam.client.AuthService.Builder builder8 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientId("ME");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService13 = builder12.build();
        org.osiam.client.OsiamGroupService.Builder builder15 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService16 = builder15.build();
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        boolean boolean24 = accessToken23.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet25 = accessToken23.getScopes();
        java.lang.String str26 = osiamGroupService16.extractErrorMessageForbidden(accessToken23);
        boolean boolean27 = accessToken23.isClientOnly();
        java.lang.String str28 = authService13.extractErrorMessageForbidden(accessToken23);
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken37 = builder34.build();
        java.lang.String str38 = accessToken37.toString();
        java.lang.String str39 = authService13.extractErrorMessageForbidden(accessToken37);
        org.osiam.client.oauth.AccessToken.Builder builder41 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date42 = null;
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setRefreshTokenExpiresAt(date42);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder41.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken46 = builder45.build();
        java.util.Date date47 = accessToken46.getExpiresAt();
        java.lang.String str48 = accessToken46.getRefreshToken();
        java.lang.String str49 = accessToken46.getType();
        java.lang.String str50 = accessToken46.getClientId();
        java.lang.String str51 = accessToken46.getUserName();
        java.lang.String str52 = authService13.extractErrorMessageForbidden(accessToken46);
        org.osiam.client.oauth.AccessToken.Builder builder54 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date55 = null;
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setRefreshTokenExpiresAt(date55);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder54.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken59 = builder58.build();
        boolean boolean60 = accessToken59.isRefreshTokenExpired();
        java.lang.String str61 = accessToken59.getUserId();
        java.lang.String str62 = authService13.extractErrorMessageForbidden(accessToken59);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList63 = osiamGroupService4.getAllResources(accessToken59);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(authService13);
        org.junit.Assert.assertNotNull(osiamGroupService16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(scopeSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Insufficient scopes: []" + "'", str26, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Insufficient scopes: []" + "'", str28, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str38, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(accessToken46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Insufficient scopes: []" + "'", str52, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(accessToken59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Insufficient scopes: []" + "'", str62, "Insufficient scopes: []");
    }

    @Test
    public void test02243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02243");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        boolean boolean17 = accessToken15.isClientOnly();
        java.lang.String str18 = accessToken15.getClientId();
        java.lang.String str19 = accessToken15.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group20 = osiamConnector7.getGroup("2024-03-22T13:51:20.388", accessToken15);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test02244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02244");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService4 = builder3.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.util.Date date12 = accessToken11.getExpiresAt();
        java.lang.String str13 = accessToken11.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken11);
        java.lang.String str15 = accessToken11.getClientId();
        boolean boolean16 = accessToken11.isRefreshTokenExpired();
        java.lang.String str17 = authService4.extractErrorMessageForbidden(accessToken11);
        org.osiam.client.AuthService.Builder builder21 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientId("ME");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder29 = builder27.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService30 = builder29.build();
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.addScope(scope33);
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException37 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean38 = scope35.equals((java.lang.Object) invalidAttributeException37);
        java.lang.String str39 = scope35.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder32.addScope(scope35);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.addScope(scope49);
        org.osiam.client.oauth.Scope scope51 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException53 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean54 = scope51.equals((java.lang.Object) invalidAttributeException53);
        java.lang.String str55 = scope51.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder48.addScope(scope51);
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder44.addScope(scope51);
        org.osiam.client.oauth.AccessToken.Builder builder59 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope60 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.addScope(scope60);
        org.osiam.client.oauth.Scope scope62 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException64 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean65 = scope62.equals((java.lang.Object) invalidAttributeException64);
        java.lang.String str66 = scope62.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder59.addScope(scope62);
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder67.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder69.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder71.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder75 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope76 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder75.addScope(scope76);
        org.osiam.client.oauth.Scope scope78 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException80 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean81 = scope78.equals((java.lang.Object) invalidAttributeException80);
        java.lang.String str82 = scope78.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder83 = builder75.addScope(scope78);
        org.osiam.client.oauth.AccessToken.Builder builder84 = builder71.addScope(scope78);
        org.osiam.client.oauth.AccessToken.Builder builder85 = builder44.addScope(scope78);
        org.osiam.client.oauth.AccessToken.Builder builder87 = builder85.setType("");
        org.osiam.client.oauth.AccessToken.Builder builder89 = builder85.setClientId("Insufficient scopes: []");
        org.osiam.client.oauth.Scope scope90 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str91 = scope90.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder92 = builder85.addScope(scope90);
        org.osiam.client.oauth.Scope[] scopeArray93 = new org.osiam.client.oauth.Scope[] { scope90 };
        java.net.URI uRI94 = authService30.getAuthorizationUri(scopeArray93);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken95 = authService4.retrieveAccessToken("Cannot connect to server", "org.osiam.client.exception.UnauthorizedException: PATCH", scopeArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(authService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Insufficient scopes: []" + "'", str17, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(authService30);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GET" + "'", str39, "GET");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(scope51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "GET" + "'", str55, "GET");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(scope60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(scope62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "GET" + "'", str66, "GET");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(scope76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(scope78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "GET" + "'", str82, "GET");
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(scope90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "PUT" + "'", str91, "PUT");
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(scopeArray93);
        org.junit.Assert.assertNotNull(uRI94);
    }

    @Test
    public void test02245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02245");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.AuthService.Builder builder24 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder26 = builder24.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService27 = builder26.build();
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date30 = null;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setRefreshTokenExpiresAt(date30);
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken34 = builder33.build();
        java.util.Date date35 = accessToken34.getExpiresAt();
        java.lang.String str36 = accessToken34.getRefreshToken();
        java.lang.String str37 = accessToken34.getType();
        java.lang.String str38 = accessToken34.getClientId();
        java.lang.String str39 = accessToken34.getUserName();
        java.lang.String str40 = accessToken34.toString();
        java.lang.String str41 = accessToken34.getUserName();
        java.lang.String str42 = authService27.extractErrorMessageForbidden(accessToken34);
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken49 = builder48.build();
        java.util.Date date50 = accessToken49.getExpiresAt();
        java.lang.String str51 = accessToken49.getRefreshToken();
        boolean boolean52 = accessToken49.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken49);
        java.lang.String str54 = authService27.extractErrorMessageForbidden(accessToken49);
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector7.deleteUser("", accessToken49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(authService27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(accessToken34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str40, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Insufficient scopes: []" + "'", str42, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Insufficient scopes: []" + "'", str54, "Insufficient scopes: []");
    }

    @Test
    public void test02246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02246");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer7 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer8 = scopeDeserializer0.unwrappingDeserializer(nameTransformer7);
        com.fasterxml.jackson.core.JsonParser jsonParser9 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext10 = null;
        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeserializer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = scopeDeserializer0.deserializeWithType(jsonParser9, deserializationContext10, typeDeserializer11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer8);
    }

    @Test
    public void test02247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02247");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setResourceServerEndpoint("GET POST PUT PATCH DELETE");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.client.AuthService.Builder builder20 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientId("ME");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService25 = builder24.build();
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        boolean boolean33 = accessToken32.isRefreshTokenExpired();
        boolean boolean34 = accessToken32.isClientOnly();
        java.lang.String str35 = accessToken32.getClientId();
        java.lang.String str36 = authService25.extractErrorMessageForbidden(accessToken32);
        java.util.Date date37 = accessToken32.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group38 = osiamConnector17.getGroup("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]", accessToken32);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(authService25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02248");
        org.osiam.client.exception.OsiamRequestException osiamRequestException2 = new org.osiam.client.exception.OsiamRequestException((int) (short) 1, "org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test02249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02249");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.getSortOrder();
        java.lang.String str30 = query24.getAttributes();
        boolean boolean31 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.OsiamConnector.Builder builder32 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder34 = builder32.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder36 = builder34.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder38 = builder36.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder40 = builder36.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder42 = builder36.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder44 = builder42.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder46 = builder42.setClientRedirectUri("PUT");
        boolean boolean47 = accessToken12.equals((java.lang.Object) builder46);
        java.lang.String str48 = osiamGroupService5.extractErrorMessageForbidden(accessToken12);
        org.osiam.resources.scim.Group group49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder51 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date52 = null;
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setRefreshTokenExpiresAt(date52);
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder51.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken58 = builder55.build();
        java.util.Date date59 = accessToken58.getExpiresAt();
        java.lang.String str60 = accessToken58.toString();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken58);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group62 = osiamGroupService5.createGroup(group49, accessToken58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "descending" + "'", str29, "descending");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Authorization" + "'", str30, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Insufficient scopes: []" + "'", str48, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(accessToken58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str60, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
    }

    @Test
    public void test02250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02250");
        org.osiam.client.oauth.Scope scope0 = org.osiam.client.oauth.Scope.POST;
        org.osiam.client.OsiamGroupService.Builder builder2 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder2.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder2.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken11);
        java.lang.String str13 = osiamGroupService4.extractErrorMessageForbidden(accessToken11);
        java.util.Date date14 = accessToken11.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken11);
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean17 = accessToken11.equals((java.lang.Object) scope16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        boolean boolean25 = accessToken24.isRefreshTokenExpired();
        boolean boolean26 = accessToken24.isClientOnly();
        java.lang.String str27 = accessToken24.getClientId();
        boolean boolean28 = accessToken24.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.addScope(scope31);
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException35 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean36 = scope33.equals((java.lang.Object) invalidAttributeException35);
        java.lang.String str37 = scope33.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder30.addScope(scope33);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setUserName("Authorization");
        boolean boolean45 = accessToken24.equals((java.lang.Object) builder42);
        org.osiam.client.oauth.AccessToken.Builder builder47 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.addScope(scope48);
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException52 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean53 = scope50.equals((java.lang.Object) invalidAttributeException52);
        java.lang.String str54 = scope50.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder47.addScope(scope50);
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope62 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder59.addScope(scope62);
        org.osiam.client.oauth.GrantType grantType64 = org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS;
        java.lang.String str65 = grantType64.getUrlParam();
        boolean boolean66 = scope62.equals((java.lang.Object) grantType64);
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder42.addScope(scope62);
        boolean boolean68 = scope16.equals((java.lang.Object) builder67);
        boolean boolean69 = scope0.equals((java.lang.Object) builder67);
        org.osiam.client.query.QueryBuilder queryBuilder70 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder72 = queryBuilder70.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder74 = queryBuilder72.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder76 = queryBuilder72.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder78 = queryBuilder76.descending("hi!");
        org.osiam.client.query.Query query79 = queryBuilder78.build();
        java.lang.String str80 = query79.toString();
        java.lang.String str81 = query79.toString();
        java.lang.String str82 = query79.getFilter();
        boolean boolean83 = scope0.equals((java.lang.Object) str82);
        org.junit.Assert.assertNotNull(scope0);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Insufficient scopes: []" + "'", str13, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "GET" + "'", str37, "GET");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "GET" + "'", str54, "GET");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(scope62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + grantType64 + "' != '" + org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS + "'", grantType64.equals(org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "client_credentials" + "'", str65, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(queryBuilder72);
        org.junit.Assert.assertNotNull(queryBuilder74);
        org.junit.Assert.assertNotNull(queryBuilder76);
        org.junit.Assert.assertNotNull(queryBuilder78);
        org.junit.Assert.assertNotNull(query79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str80, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str81, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test02251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02251");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder8 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder8.build();
        org.osiam.client.OsiamGroupService osiamGroupService10 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken17);
        java.lang.String str19 = osiamGroupService10.extractErrorMessageForbidden(accessToken17);
        java.util.Date date20 = accessToken17.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken17);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean23 = accessToken17.equals((java.lang.Object) scope22);
        java.util.Date date24 = accessToken17.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user25 = osiamUserService5.getUser("org.osiam.client.exception.OsiamRequestException: hi!", accessToken17);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(osiamGroupService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02252");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getRefreshToken();
        boolean boolean17 = accessToken13.isExpired();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user19 = osiamUserService5.getUser("Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]", accessToken13);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test02253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02253");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.query.QueryBuilder queryBuilder4 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query11 = queryBuilder8.build();
        org.osiam.client.query.Query query12 = query11.nextPage();
        org.osiam.client.query.Query query13 = query12.previousPage();
        java.lang.String str14 = query12.getFilter();
        int int15 = query12.getCount();
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        java.util.Date date23 = accessToken22.getExpiresAt();
        java.lang.String str24 = accessToken22.getRefreshToken();
        java.lang.String str25 = accessToken22.getType();
        java.lang.String str26 = accessToken22.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult27 = osiamGroupService2.searchGroups(query12, accessToken22);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(query11);
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test02254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02254");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken accessToken5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList6 = osiamGroupService3.getAllGroups(accessToken5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
    }

    @Test
    public void test02255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02255");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.getAttributes();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query41);
        org.osiam.resources.scim.Group group47 = null;
        org.osiam.client.oauth.AccessToken.Builder builder49 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date50 = null;
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder49.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken54 = builder53.build();
        boolean boolean55 = accessToken54.isRefreshTokenExpired();
        java.lang.String str56 = accessToken54.getUserId();
        java.lang.String str57 = accessToken54.getClientId();
        boolean boolean58 = accessToken54.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group59 = osiamConnector5.replaceGroup("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!", group47, accessToken54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Authorization" + "'", str42, "Authorization");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(accessToken54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test02256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02256");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setResourceServerEndpoint("GET POST PUT PATCH DELETE");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.descending("hi!");
        org.osiam.client.query.Query query27 = queryBuilder26.build();
        java.lang.String str28 = query27.toString();
        java.lang.String str29 = query27.getSortOrder();
        java.lang.String str30 = query27.getFilter();
        java.lang.String str31 = query27.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector17.createQueryBuilder(query27);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken34 = osiamConnector17.retrieveAccessToken("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.OsiamClientException: ME");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(query27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str28, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "descending" + "'", str29, "descending");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "descending" + "'", str31, "descending");
        org.junit.Assert.assertNotNull(queryBuilder32);
    }

    @Test
    public void test02257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02257");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.AuthService.Builder builder6 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientId("ME");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService15 = builder14.build();
        org.osiam.client.OsiamGroupService.Builder builder17 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService18 = builder17.build();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        boolean boolean26 = accessToken25.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet27 = accessToken25.getScopes();
        java.lang.String str28 = osiamGroupService18.extractErrorMessageForbidden(accessToken25);
        boolean boolean29 = accessToken25.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken25);
        java.lang.String str31 = authService15.extractErrorMessageForbidden(accessToken25);
        java.lang.String str32 = accessToken25.getType();
        java.lang.String str33 = osiamGroupService4.extractErrorMessageForbidden(accessToken25);
        org.osiam.client.oauth.AccessToken accessToken34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList35 = osiamGroupService4.getAllResources(accessToken34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(authService15);
        org.junit.Assert.assertNotNull(osiamGroupService18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(scopeSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Insufficient scopes: []" + "'", str28, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Insufficient scopes: []" + "'", str31, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Insufficient scopes: []" + "'", str33, "Insufficient scopes: []");
    }

    @Test
    public void test02258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02258");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        java.util.Date date16 = accessToken15.getExpiresAt();
        java.lang.String str17 = accessToken15.getRefreshToken();
        java.lang.String str18 = accessToken15.getType();
        java.lang.String str19 = accessToken15.getClientId();
        java.lang.String str20 = accessToken15.getUserName();
        java.lang.String str21 = accessToken15.toString();
        java.lang.String str22 = accessToken15.getUserName();
        java.lang.String str23 = accessToken15.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken24 = osiamConnector7.validateAccessToken(accessToken15);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str21, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Bearer " + "'", str23, "Bearer ");
    }

    @Test
    public void test02259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02259");
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.AbstractOsiamService.Builder<org.osiam.client.oauth.Scope[]> scopeArrayBuilder1 = new org.osiam.client.AbstractOsiamService.Builder<org.osiam.client.oauth.Scope[]>("GET POST PUT PATCH DELETE");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02260");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        boolean boolean23 = accessToken22.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet24 = accessToken22.getScopes();
        boolean boolean25 = accessToken22.isClientOnly();
        java.lang.String str26 = accessToken22.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService3.deleteGroup("2024-03-22T13:51:20.388", accessToken22);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(scopeSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test02261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02261");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService2.targetEndpoint;
        org.osiam.resources.scim.Group group8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        java.lang.String str16 = accessToken15.toString();
        java.lang.String str17 = accessToken15.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group18 = osiamGroupService2.updateGroup("org.osiam.client.exception.ConflictException: ", group8, accessToken15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str16, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test02262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02262");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.oauth.AccessToken accessToken5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser6 = osiamUserService4.getCurrentUserBasic(accessToken5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
    }

    @Test
    public void test02263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02263");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException1 = new org.osiam.client.exception.ConnectionInitializationException("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        java.lang.Throwable[] throwableArray2 = connectionInitializationException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test02264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02264");
        org.osiam.client.exception.OsiamClientException osiamClientException1 = new org.osiam.client.exception.OsiamClientException("PUT");
        org.osiam.client.exception.OsiamRequestException osiamRequestException5 = new org.osiam.client.exception.OsiamRequestException((int) (short) 1, "Cannot connect to server");
        org.osiam.client.exception.OsiamClientException osiamClientException6 = new org.osiam.client.exception.OsiamClientException("GET POST PUT PATCH DELETE", (java.lang.Throwable) osiamRequestException5);
        int int7 = osiamRequestException5.getHttpStatusCode();
        osiamClientException1.addSuppressed((java.lang.Throwable) osiamRequestException5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test02265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02265");
        org.osiam.client.exception.NoResultException noResultException1 = new org.osiam.client.exception.NoResultException("org.osiam.client.exception.OsiamClientException: descending");
        int int2 = noResultException1.getHttpStatusCode();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 404 + "'", int2 == 404);
    }

    @Test
    public void test02266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02266");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray13 = new org.osiam.client.oauth.Scope[] { scope12 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken14 = osiamConnector9.retrieveAccessToken("org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388", "org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!", scopeArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertNotNull(scopeArray13);
    }

    @Test
    public void test02267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02267");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.AuthService authService11 = builder9.build();
        org.osiam.client.AuthService.Builder builder15 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder17 = builder15.setClientId("ME");
        org.osiam.client.AuthService.Builder builder19 = builder17.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder21 = builder19.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService24 = builder23.build();
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.addScope(scope27);
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException31 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean32 = scope29.equals((java.lang.Object) invalidAttributeException31);
        java.lang.String str33 = scope29.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder26.addScope(scope29);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.addScope(scope43);
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException47 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean48 = scope45.equals((java.lang.Object) invalidAttributeException47);
        java.lang.String str49 = scope45.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder42.addScope(scope45);
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder38.addScope(scope45);
        org.osiam.client.oauth.AccessToken.Builder builder53 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.addScope(scope54);
        org.osiam.client.oauth.Scope scope56 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException58 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean59 = scope56.equals((java.lang.Object) invalidAttributeException58);
        java.lang.String str60 = scope56.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder53.addScope(scope56);
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder61.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder63.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder65.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder69 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope70 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder69.addScope(scope70);
        org.osiam.client.oauth.Scope scope72 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException74 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean75 = scope72.equals((java.lang.Object) invalidAttributeException74);
        java.lang.String str76 = scope72.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder69.addScope(scope72);
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder65.addScope(scope72);
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder38.addScope(scope72);
        org.osiam.client.oauth.AccessToken.Builder builder81 = builder79.setType("");
        org.osiam.client.oauth.AccessToken.Builder builder83 = builder79.setClientId("Insufficient scopes: []");
        org.osiam.client.oauth.Scope scope84 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str85 = scope84.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder86 = builder79.addScope(scope84);
        org.osiam.client.oauth.Scope[] scopeArray87 = new org.osiam.client.oauth.Scope[] { scope84 };
        java.net.URI uRI88 = authService24.getAuthorizationUri(scopeArray87);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken89 = authService11.retrieveAccessToken("ascending", "Bearer ", scopeArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(authService11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(authService24);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GET" + "'", str33, "GET");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "GET" + "'", str49, "GET");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "GET" + "'", str60, "GET");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(scope70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(scope72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "GET" + "'", str76, "GET");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(scope84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "PUT" + "'", str85, "PUT");
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(scopeArray87);
        org.junit.Assert.assertNotNull(uRI88);
    }

    @Test
    public void test02268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02268");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        org.osiam.resources.scim.UpdateGroup updateGroup6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder8.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder8.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.addScope(scope17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setUserName("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.helper.ScopeSerializer scopeSerializer21 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean22 = scopeSerializer21.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer23 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer24 = scopeSerializer21.unwrappingSerializer(nameTransformer23);
        boolean boolean25 = scopeSerializer21.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer26 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer27 = scopeSerializer21.unwrappingSerializer(nameTransformer26);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper28 = null;
        com.fasterxml.jackson.databind.JavaType javaType29 = null;
        scopeSerializer21.acceptJsonFormatVisitor(jsonFormatVisitorWrapper28, javaType29);
        boolean boolean31 = scopeSerializer21.usesObjectId();
        boolean boolean32 = scopeSerializer21.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider33 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer34 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean35 = scopeSerializer34.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass36 = scopeSerializer34.handledType();
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        java.util.Date date44 = accessToken43.getExpiresAt();
        java.lang.String str45 = accessToken43.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet46 = accessToken43.getScopes();
        boolean boolean47 = scopeSerializer34.isEmpty(scopeSet46);
        boolean boolean48 = scopeSerializer21.isEmpty(serializerProvider33, scopeSet46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder20.addScopes(scopeSet46);
        org.osiam.client.oauth.AccessToken accessToken50 = builder49.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group51 = osiamGroupService3.updateGroup("", updateGroup6, accessToken50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(scopeSetClass36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(scopeSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(accessToken50);
    }

    @Test
    public void test02269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02269");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.resources.scim.UpdateUser updateUser5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        java.lang.String str13 = accessToken12.toString();
        java.lang.String str14 = accessToken12.getType();
        boolean boolean15 = accessToken12.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user16 = osiamConnector3.updateUser("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.OsiamClientException: ME", updateUser5, accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str13, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test02270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02270");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector9.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        org.osiam.client.query.Query query21 = queryBuilder19.build();
        long long22 = query21.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder23 = osiamConnector9.createQueryBuilder(query21);
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken31 = builder30.build();
        java.util.Date date32 = accessToken31.getExpiresAt();
        java.lang.String str33 = accessToken31.getRefreshToken();
        java.lang.String str34 = accessToken31.getType();
        java.lang.String str35 = accessToken31.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector9.deleteGroup("org.osiam.client.exception.NoResultException: refresh_token", accessToken31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(accessToken31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test02271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02271");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService4 = builder3.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.util.Date date12 = accessToken11.getExpiresAt();
        java.lang.String str13 = accessToken11.getRefreshToken();
        java.lang.String str14 = accessToken11.getType();
        java.lang.String str15 = accessToken11.getClientId();
        java.lang.String str16 = accessToken11.getUserName();
        java.lang.String str17 = accessToken11.toString();
        java.lang.String str18 = accessToken11.getUserName();
        java.lang.String str19 = authService4.extractErrorMessageForbidden(accessToken11);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken21 = authService4.retrieveAccessToken("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(authService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str17, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
    }

    @Test
    public void test02272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02272");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget7 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        boolean boolean15 = accessToken14.isRefreshTokenExpired();
        java.lang.String str16 = accessToken14.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder17 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder19.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.descending("hi!");
        org.osiam.client.query.Query query26 = queryBuilder25.build();
        java.lang.String str27 = query26.toString();
        java.lang.String str28 = query26.getSortOrder();
        java.lang.String str29 = query26.getSortBy();
        java.lang.String str30 = query26.getFilter();
        java.lang.String str31 = query26.toString();
        boolean boolean32 = accessToken14.equals((java.lang.Object) query26);
        java.lang.String str33 = osiamGroupService3.extractErrorMessageForbidden(accessToken14);
        org.osiam.resources.scim.UpdateGroup updateGroup35 = null;
        org.osiam.client.AuthService.Builder builder37 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder39 = builder37.setClientId("ME");
        org.osiam.client.AuthService.Builder builder41 = builder39.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService42 = builder41.build();
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken49 = builder48.build();
        boolean boolean50 = accessToken49.isRefreshTokenExpired();
        boolean boolean51 = accessToken49.isClientOnly();
        java.lang.String str52 = accessToken49.getClientId();
        java.lang.String str53 = authService42.extractErrorMessageForbidden(accessToken49);
        java.util.Date date54 = accessToken49.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group55 = osiamGroupService3.updateGroup("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]", updateGroup35, accessToken49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(webTarget7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "descending" + "'", str28, "descending");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str31, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Insufficient scopes: []" + "'", str33, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(authService42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Insufficient scopes: []" + "'", str53, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02273");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder11 = builder7.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService12 = builder11.build();
        org.osiam.client.AuthService.Builder builder14 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder16 = builder14.setClientId("ME");
        org.osiam.client.AuthService.Builder builder18 = builder16.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService23 = builder22.build();
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        boolean boolean31 = accessToken30.isRefreshTokenExpired();
        java.lang.String str32 = accessToken30.getUserId();
        java.lang.String str33 = accessToken30.getToken();
        java.lang.String str34 = authService23.extractErrorMessageForbidden(accessToken30);
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str36 = scope35.getValue();
        java.lang.String str37 = scope35.toString();
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray39 = new org.osiam.client.oauth.Scope[] { scope35, scope38 };
        java.net.URI uRI40 = authService23.getAuthorizationUri(scopeArray39);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken41 = authService12.retrieveAccessToken(scopeArray39);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(authService12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(authService23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Bearer " + "'", str33, "Bearer ");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Insufficient scopes: []" + "'", str34, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PATCH" + "'", str36, "PATCH");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PATCH" + "'", str37, "PATCH");
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertNotNull(scopeArray39);
        org.junit.Assert.assertNotNull(uRI40);
    }

    @Test
    public void test02274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02274");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = osiamGroupService3.extractErrorMessage("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: descending", statusType5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
    }

    @Test
    public void test02275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02275");
        org.osiam.client.oauth.Scope scope1 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.ConnectionInitializationException: Bearer ");
    }

    @Test
    public void test02276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02276");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.getSortOrder();
        java.lang.String str20 = query17.getSortBy();
        java.lang.String str21 = query17.getFilter();
        java.lang.String str22 = query17.getSortOrder();
        java.lang.String str23 = query17.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder24 = new org.osiam.client.query.QueryBuilder(query17);
        long long25 = query17.getStartIndex();
        org.osiam.client.query.Query query26 = query17.nextPage();
        long long27 = query26.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder28 = osiamConnector7.createQueryBuilder(query26);
        org.osiam.resources.scim.UpdateUser updateUser30 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken37);
        java.lang.String str39 = accessToken37.getRefreshToken();
        java.lang.String str40 = accessToken37.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user41 = osiamConnector7.updateUser("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", updateUser30, accessToken37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "descending" + "'", str19, "descending");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "descending" + "'", str22, "descending");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Authorization" + "'", str23, "Authorization");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 11L + "'", long27 == 11L);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str40, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test02277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02277");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder12.setResourceServerEndpoint("hi!");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setEndpoint("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector osiamConnector21 = builder20.build();
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector21.createQueryBuilder();
        org.osiam.client.AuthService.Builder builder26 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder28 = builder26.setClientId("ME");
        org.osiam.client.AuthService.Builder builder30 = builder28.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder32 = builder30.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder34 = builder32.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService35 = builder34.build();
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken42 = builder41.build();
        boolean boolean43 = accessToken42.isRefreshTokenExpired();
        java.lang.String str44 = accessToken42.getUserId();
        java.lang.String str45 = accessToken42.getToken();
        java.lang.String str46 = authService35.extractErrorMessageForbidden(accessToken42);
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str48 = scope47.getValue();
        java.lang.String str49 = scope47.toString();
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray51 = new org.osiam.client.oauth.Scope[] { scope47, scope50 };
        java.net.URI uRI52 = authService35.getAuthorizationUri(scopeArray51);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken53 = osiamConnector21.retrieveAccessToken("descending", "refresh_token", scopeArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(authService35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Bearer " + "'", str45, "Bearer ");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Insufficient scopes: []" + "'", str46, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PATCH" + "'", str48, "PATCH");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PATCH" + "'", str49, "PATCH");
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertNotNull(scopeArray51);
        org.junit.Assert.assertNotNull(uRI52);
    }

    @Test
    public void test02278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02278");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector.Builder builder12 = builder2.setEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector osiamConnector13 = builder2.build();
        org.osiam.resources.scim.User user14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        java.util.Date date22 = accessToken21.getExpiresAt();
        java.lang.String str23 = accessToken21.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken21);
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken31 = builder30.build();
        boolean boolean32 = accessToken31.isRefreshTokenExpired();
        boolean boolean33 = accessToken31.isClientOnly();
        java.lang.String str34 = accessToken31.getClientId();
        boolean boolean35 = accessToken31.isClientOnly();
        boolean boolean36 = accessToken21.equals((java.lang.Object) accessToken31);
        java.lang.String str37 = accessToken31.getUserId();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet38 = accessToken31.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user39 = osiamConnector13.createUser(user14, accessToken31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(accessToken31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(scopeSet38);
    }

    @Test
    public void test02279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02279");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.descending("hi!");
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        java.lang.String str16 = query15.toString();
        java.lang.String str17 = query15.getSortOrder();
        java.lang.String str18 = query15.getSortBy();
        java.lang.String str19 = query15.getFilter();
        java.lang.String str20 = query15.getSortOrder();
        java.lang.String str21 = query15.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder(query15);
        long long23 = query15.getStartIndex();
        org.osiam.client.query.Query query24 = query15.nextPage();
        long long25 = query24.getStartIndex();
        org.osiam.client.query.Query query26 = query24.nextPage();
        org.osiam.client.query.Query query27 = query24.previousPage();
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.addScope(scope30);
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException34 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean35 = scope32.equals((java.lang.Object) invalidAttributeException34);
        java.lang.String str36 = scope32.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder29.addScope(scope32);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder43.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken48 = builder43.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult49 = osiamGroupService5.searchResources(query24, accessToken48);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str16, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "descending" + "'", str17, "descending");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "descending" + "'", str20, "descending");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Authorization" + "'", str21, "Authorization");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 11L + "'", long25 == 11L);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertNotNull(query27);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GET" + "'", str36, "GET");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(accessToken48);
    }

    @Test
    public void test02280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02280");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("password");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user15 = osiamUserService2.createUser(user3, accessToken14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
    }

    @Test
    public void test02281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02281");
        org.osiam.client.exception.OsiamRequestException osiamRequestException3 = new org.osiam.client.exception.OsiamRequestException(401, "PUT");
        org.osiam.client.exception.OsiamClientException osiamClientException4 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.UnauthorizedException: PATCH", (java.lang.Throwable) osiamRequestException3);
    }

    @Test
    public void test02282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02282");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setAuthServerEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setResourceServerEndpoint("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector15 = builder10.build();
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        boolean boolean24 = accessToken23.isRefreshTokenExpired();
        java.lang.String str25 = accessToken23.getUserName();
        java.lang.String str26 = accessToken23.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group27 = osiamConnector15.getGroup("descending", accessToken23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str26, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test02283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02283");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.core.JsonParser jsonParser3 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext4 = null;
        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeserializer5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj6 = scopeDeserializer0.deserializeWithType(jsonParser3, deserializationContext4, typeDeserializer5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
    }

    @Test
    public void test02284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02284");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector osiamConnector9 = builder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.descending("hi!");
        org.osiam.client.query.Query query19 = queryBuilder18.build();
        java.lang.String str20 = query19.toString();
        java.lang.String str21 = query19.getSortOrder();
        java.lang.String str22 = query19.getSortBy();
        org.osiam.client.query.Query query23 = query19.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder24 = osiamConnector9.createQueryBuilder(query23);
        org.osiam.resources.scim.User user26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        boolean boolean34 = accessToken33.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet35 = accessToken33.getScopes();
        boolean boolean36 = accessToken33.isRefreshTokenExpired();
        boolean boolean37 = accessToken33.isExpired();
        org.osiam.client.AuthService.Builder builder39 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder41 = builder39.setClientId("ME");
        org.osiam.client.AuthService.Builder builder43 = builder39.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService44 = builder39.build();
        boolean boolean45 = accessToken33.equals((java.lang.Object) builder39);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user46 = osiamConnector9.replaceUser("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", user26, accessToken33);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str20, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "descending" + "'", str21, "descending");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(query23);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(scopeSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(authService44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test02285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02285");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getEmptyValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        java.util.Collection<java.lang.Object> objCollection6 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer7 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer8 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer9 = scopeDeserializer0.unwrappingDeserializer(nameTransformer8);
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer10 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass11 = scopeDeserializer10.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer12 = scopeDeserializer10.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection13 = scopeDeserializer10.getKnownPropertyNames();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer14 = scopeDeserializer10.getDelegatee();
        boolean boolean15 = scopeDeserializer10.isCachable();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer16 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer17 = scopeDeserializer10.unwrappingDeserializer(nameTransformer16);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = scopeDeserializer10.getEmptyValue();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer19 = scopeSetJsonDeserializer9.replaceDelegatee((com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeDeserializer10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertNull(objCollection6);
        org.junit.Assert.assertNull(wildcardJsonDeserializer7);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(wildcardJsonDeserializer12);
        org.junit.Assert.assertNull(objCollection13);
        org.junit.Assert.assertNull(wildcardJsonDeserializer14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer17);
        org.junit.Assert.assertNull(scopeSet18);
    }

    @Test
    public void test02286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02286");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        java.util.Date date13 = accessToken12.getExpiresAt();
        java.util.Date date14 = accessToken12.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList15 = osiamConnector5.getAllUsers(accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02287");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector osiamConnector5 = builder2.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        boolean boolean15 = accessToken12.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user16 = osiamConnector5.getCurrentUser(accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The string \"AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16\" for the URI component SCHEME contains an invalid character, ' ', at index 11.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test02288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02288");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector9.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query18 = queryBuilder15.build();
        org.osiam.client.query.Query query19 = query18.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder20 = osiamConnector9.createQueryBuilder(query18);
        org.osiam.resources.scim.UpdateUser updateUser22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken29 = builder28.build();
        java.lang.String str30 = accessToken29.toString();
        java.lang.String str31 = accessToken29.getType();
        boolean boolean32 = accessToken29.isExpired();
        java.lang.String str33 = accessToken29.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user34 = osiamConnector9.updateUser("org.osiam.client.exception.OsiamClientException: client_credentials", updateUser22, accessToken29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(query18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str30, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Bearer " + "'", str33, "Bearer ");
    }

    @Test
    public void test02289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02289");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService3.targetEndpoint;
        org.osiam.resources.scim.Group group15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        java.lang.String str23 = accessToken22.toString();
        java.lang.String str24 = accessToken22.getClientId();
        org.osiam.client.OsiamConnector.Builder builder25 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder27 = builder25.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder29 = builder27.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder31 = builder29.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector32 = builder31.build();
        org.osiam.client.query.QueryBuilder queryBuilder33 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder35.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.descending("hi!");
        org.osiam.client.query.Query query42 = queryBuilder41.build();
        java.lang.String str43 = query42.toString();
        java.lang.String str44 = query42.toString();
        java.lang.String str45 = query42.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder46 = osiamConnector32.createQueryBuilder(query42);
        org.osiam.client.query.QueryBuilder queryBuilder47 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder47.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder49.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder53 = queryBuilder49.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder55 = queryBuilder53.descending("hi!");
        org.osiam.client.query.Query query56 = queryBuilder55.build();
        org.osiam.client.query.QueryBuilder queryBuilder57 = osiamConnector32.createQueryBuilder(query56);
        boolean boolean58 = accessToken22.equals((java.lang.Object) queryBuilder57);
        org.osiam.client.query.QueryBuilder queryBuilder59 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder61 = queryBuilder59.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder63 = queryBuilder61.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder65 = queryBuilder61.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder67 = queryBuilder65.descending("hi!");
        org.osiam.client.query.Query query68 = queryBuilder67.build();
        org.osiam.client.query.QueryBuilder queryBuilder70 = queryBuilder67.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder72 = queryBuilder70.attributes("Cannot connect to server");
        org.osiam.client.query.Query query73 = queryBuilder70.build();
        boolean boolean74 = accessToken22.equals((java.lang.Object) queryBuilder70);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group75 = osiamGroupService3.createResource(group15, accessToken22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str23, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(osiamConnector32);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str44, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(queryBuilder46);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(queryBuilder53);
        org.junit.Assert.assertNotNull(queryBuilder55);
        org.junit.Assert.assertNotNull(query56);
        org.junit.Assert.assertNotNull(queryBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(queryBuilder63);
        org.junit.Assert.assertNotNull(queryBuilder65);
        org.junit.Assert.assertNotNull(queryBuilder67);
        org.junit.Assert.assertNotNull(query68);
        org.junit.Assert.assertNotNull(queryBuilder70);
        org.junit.Assert.assertNotNull(queryBuilder72);
        org.junit.Assert.assertNotNull(query73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test02290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02290");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.addScope(scope5);
        org.osiam.client.oauth.Scope scope7 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException9 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean10 = scope7.equals((java.lang.Object) invalidAttributeException9);
        java.lang.String str11 = scope7.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder4.addScope(scope7);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser18 = osiamUserService2.getCurrentUserBasic(accessToken17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(scope7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GET" + "'", str11, "GET");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
    }

    @Test
    public void test02291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02291");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        org.osiam.resources.scim.Group group5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        java.util.Date date13 = accessToken12.getExpiresAt();
        java.lang.String str14 = accessToken12.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        java.lang.String str16 = accessToken12.getClientId();
        boolean boolean17 = accessToken12.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group18 = osiamGroupService3.createGroup(group5, accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test02292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02292");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getUserName();
        java.lang.String str12 = accessToken9.toString();
        java.lang.String str13 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.core.Response.StatusType statusType15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = osiamGroupService2.extractErrorMessageDefault("org.osiam.client.exception.UnauthorizedException: PATCH", statusType15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str12, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Insufficient scopes: []" + "'", str13, "Insufficient scopes: []");
    }

    @Test
    public void test02293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02293");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        boolean boolean18 = accessToken17.isRefreshTokenExpired();
        java.lang.String str19 = authService10.extractErrorMessageForbidden(accessToken17);
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.addScope(scope23);
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException27 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean28 = scope25.equals((java.lang.Object) invalidAttributeException27);
        java.lang.String str29 = scope25.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder22.addScope(scope25);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setUserId("");
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str36 = scope35.toString();
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder34.addScope(scope35);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setType("Insufficient scopes: []");
        org.osiam.client.oauth.Scope scope41 = new org.osiam.client.oauth.Scope("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder39.addScope(scope41);
        java.lang.String str43 = scope41.getValue();
        org.osiam.client.oauth.Scope scope45 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.GET;
        java.lang.String str47 = scope46.toString();
        org.osiam.client.oauth.Scope[] scopeArray48 = new org.osiam.client.oauth.Scope[] { scope20, scope41, scope45, scope46 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken49 = authService10.retrieveAccessToken(scopeArray48);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GET" + "'", str29, "GET");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PUT" + "'", str36, "PUT");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Authorization" + "'", str43, "Authorization");
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "GET" + "'", str47, "GET");
        org.junit.Assert.assertNotNull(scopeArray48);
    }

    @Test
    public void test02294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02294");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group7 = osiamGroupService3.mapToResource("org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
    }

    @Test
    public void test02295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02295");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.resources.scim.User user7 = null;
        org.osiam.client.AuthService.Builder builder9 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientId("ME");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder17 = builder15.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService18 = builder17.build();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        boolean boolean26 = accessToken25.isRefreshTokenExpired();
        java.lang.String str27 = authService18.extractErrorMessageForbidden(accessToken25);
        boolean boolean28 = accessToken25.isRefreshTokenExpired();
        java.lang.String str29 = accessToken25.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user30 = osiamUserService5.replaceUser("org.osiam.client.exception.ConflictException: PATCH", user7, accessToken25);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(authService18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Insufficient scopes: []" + "'", str27, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test02296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02296");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.core.JsonParser jsonParser4 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext5 = null;
        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeserializer6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj7 = scopeDeserializer0.deserializeWithType(jsonParser4, deserializationContext5, typeDeserializer6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(scopeSet3);
    }

    @Test
    public void test02297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02297");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService authService10 = builder7.build();
        org.osiam.client.AuthService.Builder builder12 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientId("ME");
        org.osiam.client.AuthService.Builder builder16 = builder14.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder18 = builder16.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService21 = builder20.build();
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        boolean boolean29 = accessToken28.isRefreshTokenExpired();
        java.lang.String str30 = authService21.extractErrorMessageForbidden(accessToken28);
        boolean boolean31 = accessToken28.isRefreshTokenExpired();
        java.lang.String str32 = accessToken28.getType();
        java.lang.String str33 = accessToken28.getToken();
        org.osiam.client.oauth.AccessToken.Builder builder35 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date36 = null;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setRefreshTokenExpiresAt(date36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder35.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder39.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str45 = scope44.toString();
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder39.addScope(scope44);
        boolean boolean47 = accessToken28.equals((java.lang.Object) builder39);
        java.lang.String str48 = authService10.extractErrorMessageForbidden(accessToken28);
        org.osiam.client.OsiamGroupService.Builder builder50 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService51 = builder50.build();
        org.osiam.client.OsiamGroupService osiamGroupService52 = builder50.build();
        org.osiam.client.oauth.AccessToken.Builder builder54 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date55 = null;
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setRefreshTokenExpiresAt(date55);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder54.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken59 = builder58.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken59);
        java.lang.String str61 = osiamGroupService52.extractErrorMessageForbidden(accessToken59);
        java.util.Date date62 = accessToken59.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken59);
        java.lang.String str64 = accessToken59.getRefreshToken();
        org.osiam.client.exception.NoResultException noResultException66 = new org.osiam.client.exception.NoResultException("Insufficient scopes: []");
        boolean boolean67 = accessToken59.equals((java.lang.Object) "Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder68 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder70 = builder68.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder72 = builder70.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder74 = builder72.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector75 = builder74.build();
        org.osiam.client.query.QueryBuilder queryBuilder76 = osiamConnector75.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder78 = queryBuilder76.attributes("org.osiam.client.exception.UnauthorizedException: PATCH");
        boolean boolean79 = accessToken59.equals((java.lang.Object) queryBuilder78);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken80 = authService10.validateAccessToken(accessToken59);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(authService21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Insufficient scopes: []" + "'", str30, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Bearer " + "'", str33, "Bearer ");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PUT" + "'", str45, "PUT");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Insufficient scopes: []" + "'", str48, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService51);
        org.junit.Assert.assertNotNull(osiamGroupService52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(accessToken59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Insufficient scopes: []" + "'", str61, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(osiamConnector75);
        org.junit.Assert.assertNotNull(queryBuilder76);
        org.junit.Assert.assertNotNull(queryBuilder78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test02298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02298");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        boolean boolean18 = accessToken17.isRefreshTokenExpired();
        java.lang.String str19 = authService10.extractErrorMessageForbidden(accessToken17);
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        java.lang.String str27 = accessToken26.toString();
        java.lang.String str28 = accessToken26.getType();
        boolean boolean29 = accessToken26.isExpired();
        java.util.Date date30 = accessToken26.getExpiresAt();
        boolean boolean31 = accessToken26.isRefreshTokenExpired();
        java.lang.String str32 = authService10.extractErrorMessageForbidden(accessToken26);
        org.osiam.client.AuthService.Builder builder34 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder36 = builder34.setClientId("ME");
        org.osiam.client.AuthService.Builder builder38 = builder36.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder40 = builder38.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder42 = builder40.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService43 = builder42.build();
        org.osiam.client.oauth.AccessToken.Builder builder45 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setRefreshTokenExpiresAt(date46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder45.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken50 = builder49.build();
        boolean boolean51 = accessToken50.isRefreshTokenExpired();
        java.lang.String str52 = accessToken50.getUserId();
        java.lang.String str53 = accessToken50.getToken();
        java.lang.String str54 = authService43.extractErrorMessageForbidden(accessToken50);
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str56 = scope55.getValue();
        java.lang.String str57 = scope55.toString();
        org.osiam.client.oauth.Scope scope58 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray59 = new org.osiam.client.oauth.Scope[] { scope55, scope58 };
        java.net.URI uRI60 = authService43.getAuthorizationUri(scopeArray59);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken61 = authService10.retrieveAccessToken(scopeArray59);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str27, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(authService43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(accessToken50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Bearer " + "'", str53, "Bearer ");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Insufficient scopes: []" + "'", str54, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PATCH" + "'", str56, "PATCH");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PATCH" + "'", str57, "PATCH");
        org.junit.Assert.assertNotNull(scope58);
        org.junit.Assert.assertNotNull(scopeArray59);
        org.junit.Assert.assertNotNull(uRI60);
    }

    @Test
    public void test02299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02299");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getRefreshToken();
        boolean boolean17 = accessToken13.isExpired();
        java.lang.String str18 = accessToken13.getRefreshToken();
        java.lang.String str19 = accessToken13.getRefreshToken();
        java.lang.String str20 = osiamGroupService4.extractErrorMessageForbidden(accessToken13);
        org.osiam.resources.scim.Group group22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken29 = builder28.build();
        boolean boolean30 = accessToken29.isRefreshTokenExpired();
        java.lang.String str31 = accessToken29.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group32 = osiamGroupService4.updateResource("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", group22, accessToken29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test02300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02300");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector13 = builder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder14 = osiamConnector13.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        boolean boolean23 = accessToken22.isRefreshTokenExpired();
        boolean boolean24 = accessToken22.isClientOnly();
        java.lang.String str25 = accessToken22.getRefreshToken();
        boolean boolean26 = accessToken22.isExpired();
        boolean boolean27 = accessToken22.isExpired();
        boolean boolean28 = accessToken22.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user29 = osiamConnector13.getUser("org.osiam.client.exception.ConflictException: PATCH", accessToken22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The string \"Insufficient scopes\" for the URI component SCHEME contains an invalid character, ' ', at index 12.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test02301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02301");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector9.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.getSortOrder();
        java.lang.String str23 = query20.getSortBy();
        java.lang.String str24 = query20.getFilter();
        java.lang.String str25 = query20.getSortOrder();
        java.lang.String str26 = query20.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder(query20);
        long long28 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder29 = new org.osiam.client.query.QueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder30 = osiamConnector9.createQueryBuilder(query20);
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken39 = builder36.build();
        boolean boolean40 = accessToken39.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken41 = osiamConnector9.validateAccessToken(accessToken39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "descending" + "'", str22, "descending");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "descending" + "'", str25, "descending");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Authorization" + "'", str26, "Authorization");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test02302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02302");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService2.targetEndpoint;
        org.osiam.resources.scim.Group group8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.addScope(scope11);
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException15 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean16 = scope13.equals((java.lang.Object) invalidAttributeException15);
        java.lang.String str17 = scope13.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder10.addScope(scope13);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setClientId("Bearer ");
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str22 = scope21.toString();
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder18.addScope(scope21);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder18.setType("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group27 = osiamGroupService2.replaceGroup("org.osiam.client.exception.UnauthorizedException: GET", group8, accessToken26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GET" + "'", str17, "GET");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ME" + "'", str22, "ME");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
    }

    @Test
    public void test02303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02303");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType4 = null;
        org.osiam.client.oauth.AccessToken accessToken5 = null;
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.checkAndHandleResponse("org.osiam.client.exception.ConnectionInitializationException: descending", statusType4, accessToken5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
    }

    @Test
    public void test02304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02304");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        java.util.Date date23 = accessToken22.getExpiresAt();
        java.lang.String str24 = accessToken22.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet25 = accessToken22.getScopes();
        java.lang.String str26 = accessToken22.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group27 = osiamGroupService3.getGroup("org.osiam.client.exception.ConnectionInitializationException: PATCH", accessToken22);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(scopeSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Bearer " + "'", str26, "Bearer ");
    }

    @Test
    public void test02305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02305");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.getAttributes();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query41);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.getAttributes();
        java.lang.String str57 = query55.toString();
        java.lang.String str58 = query55.getSortBy();
        org.osiam.client.query.Query query59 = query55.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder60 = osiamConnector5.createQueryBuilder(query55);
        org.osiam.resources.scim.UpdateUser updateUser62 = null;
        org.osiam.client.oauth.AccessToken.Builder builder64 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope65 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder64.addScope(scope65);
        org.osiam.client.oauth.Scope scope67 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException69 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean70 = scope67.equals((java.lang.Object) invalidAttributeException69);
        java.lang.String str71 = scope67.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder64.addScope(scope67);
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder72.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder74.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder76.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder80 = builder78.setRefreshToken("GET");
        org.osiam.client.OsiamGroupService.Builder builder82 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService83 = builder82.build();
        org.osiam.client.OsiamGroupService osiamGroupService84 = builder82.build();
        org.osiam.client.oauth.AccessToken.Builder builder86 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date87 = null;
        org.osiam.client.oauth.AccessToken.Builder builder88 = builder86.setRefreshTokenExpiresAt(date87);
        org.osiam.client.oauth.AccessToken.Builder builder90 = builder86.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken91 = builder90.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken91);
        java.lang.String str93 = osiamGroupService84.extractErrorMessageForbidden(accessToken91);
        java.util.Date date94 = accessToken91.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder95 = builder78.setRefreshTokenExpiresAt(date94);
        org.osiam.client.oauth.AccessToken accessToken96 = builder78.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user97 = osiamConnector5.updateUser("Bearer ", updateUser62, accessToken96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Authorization" + "'", str42, "Authorization");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Authorization" + "'", str56, "Authorization");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str57, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(query59);
        org.junit.Assert.assertNotNull(queryBuilder60);
        org.junit.Assert.assertNotNull(scope65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(scope67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "GET" + "'", str71, "GET");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(osiamGroupService83);
        org.junit.Assert.assertNotNull(osiamGroupService84);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(accessToken91);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Insufficient scopes: []" + "'", str93, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(accessToken96);
    }

    @Test
    public void test02306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02306");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.getUserName();
        java.lang.String str15 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService2.targetEndpoint;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group19 = osiamGroupService2.mapToResource("PATCH");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: PATCH");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget16);
        org.junit.Assert.assertNotNull(webTarget17);
    }

    @Test
    public void test02307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02307");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.getEmptyValue();
        com.fasterxml.jackson.core.JsonParser jsonParser7 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext8 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer9 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean10 = scopeSerializer9.isUnwrappingSerializer();
        org.osiam.client.helper.ScopeSerializer scopeSerializer11 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        boolean boolean19 = accessToken18.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet20 = accessToken18.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator21 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider22 = null;
        scopeSerializer11.serialize(scopeSet20, jsonGenerator21, serializerProvider22);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator24 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider25 = null;
        scopeSerializer9.serialize(scopeSet20, jsonGenerator24, serializerProvider25);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet27 = scopeDeserializer0.deserialize(jsonParser7, deserializationContext8, scopeSet20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Can not update object of type java.util.HashSet (by deserializer of type org.osiam.client.helper.ScopeDeserializer)");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNull(scopeSet6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(scopeSet20);
    }

    @Test
    public void test02308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02308");
        org.osiam.client.OsiamConnector.setMaxConnections(1);
    }

    @Test
    public void test02309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02309");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.getUserName();
        java.lang.String str15 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService2.targetEndpoint;
        org.osiam.resources.scim.Group group19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        java.lang.String str27 = accessToken26.toString();
        java.lang.String str28 = accessToken26.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group29 = osiamGroupService2.updateResource("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]", group19, accessToken26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget16);
        org.junit.Assert.assertNotNull(webTarget17);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str27, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test02310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02310");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        boolean boolean4 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer6 = scopeSerializer0.unwrappingSerializer(nameTransformer5);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer7 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer8 = scopeSerializer0.unwrappingSerializer(nameTransformer7);
        boolean boolean9 = scopeSerializer0.isUnwrappingSerializer();
        boolean boolean10 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper11 = null;
        com.fasterxml.jackson.databind.JavaType javaType12 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper11, javaType12);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer6);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test02311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02311");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.OsiamClientException: client_credentials");
    }

    @Test
    public void test02312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02312");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date34 = null;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder33.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken38 = builder37.build();
        java.lang.String str39 = accessToken38.toString();
        java.lang.String str40 = accessToken38.getType();
        boolean boolean41 = accessToken38.isExpired();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken38);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList43 = osiamConnector5.getAllUsers(accessToken38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str39, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test02313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02313");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader4 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer5 = scopeDeserializer0.getDelegatee();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.getNullValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet7 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.core.JsonParser jsonParser8 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext9 = null;
        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeserializer10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = scopeDeserializer0.deserializeWithType(jsonParser8, deserializationContext9, typeDeserializer10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(objectIdReader4);
        org.junit.Assert.assertNull(wildcardJsonDeserializer5);
        org.junit.Assert.assertNull(scopeSet6);
        org.junit.Assert.assertNull(scopeSet7);
    }

    @Test
    public void test02314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02314");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.getUserName();
        java.lang.String str15 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        boolean boolean26 = accessToken25.isRefreshTokenExpired();
        boolean boolean27 = accessToken25.isClientOnly();
        java.lang.String str28 = accessToken25.getClientId();
        java.lang.String str29 = accessToken25.getClientId();
        java.util.Date date30 = accessToken25.getRefreshTokenExpiresAt();
        java.util.Date date31 = accessToken25.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.deleteGroup("hi!", accessToken25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget16);
        org.junit.Assert.assertNotNull(webTarget17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02315");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.getSortOrder();
        java.lang.String str23 = query20.getSortBy();
        java.lang.String str24 = query20.getFilter();
        java.lang.String str25 = query20.getSortOrder();
        java.lang.String str26 = query20.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder(query20);
        long long28 = query20.getStartIndex();
        org.osiam.client.query.Query query29 = query20.nextPage();
        java.lang.String str30 = query20.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder31 = new org.osiam.client.query.QueryBuilder(query20);
        java.lang.String str32 = query20.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder33 = osiamConnector7.createQueryBuilder(query20);
        org.osiam.resources.scim.UpdateGroup updateGroup35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken44 = builder41.build();
        java.util.Date date45 = accessToken44.getExpiresAt();
        java.util.Date date46 = accessToken44.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group47 = osiamConnector7.updateGroup("hi!", updateGroup35, accessToken44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "descending" + "'", str22, "descending");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "descending" + "'", str25, "descending");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Authorization" + "'", str26, "Authorization");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(query29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Authorization" + "'", str32, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(accessToken44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02316");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.AuthService.Builder builder4 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder6 = builder4.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientSecret("");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService authService13 = builder10.build();
        org.osiam.client.AuthService.Builder builder15 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder17 = builder15.setClientId("ME");
        org.osiam.client.AuthService.Builder builder19 = builder17.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder21 = builder19.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService24 = builder23.build();
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken31 = builder30.build();
        boolean boolean32 = accessToken31.isRefreshTokenExpired();
        java.lang.String str33 = authService24.extractErrorMessageForbidden(accessToken31);
        boolean boolean34 = accessToken31.isRefreshTokenExpired();
        java.lang.String str35 = accessToken31.getType();
        java.lang.String str36 = accessToken31.getToken();
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str48 = scope47.toString();
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder42.addScope(scope47);
        boolean boolean50 = accessToken31.equals((java.lang.Object) builder42);
        java.lang.String str51 = authService13.extractErrorMessageForbidden(accessToken31);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser52 = osiamUserService2.getCurrentUserBasic(accessToken31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(authService13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(authService24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(accessToken31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Insufficient scopes: []" + "'", str33, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Bearer " + "'", str36, "Bearer ");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PUT" + "'", str48, "PUT");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Insufficient scopes: []" + "'", str51, "Insufficient scopes: []");
    }

    @Test
    public void test02317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02317");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.getAttributes();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query41);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder50.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query53 = queryBuilder50.build();
        org.osiam.client.query.QueryBuilder queryBuilder54 = osiamConnector5.createQueryBuilder(query53);
        org.osiam.client.oauth.AccessToken.Builder builder57 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date58 = null;
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setRefreshTokenExpiresAt(date58);
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder57.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken62 = builder61.build();
        boolean boolean63 = accessToken62.isRefreshTokenExpired();
        java.lang.String str64 = accessToken62.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder65 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder67 = queryBuilder65.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder69 = queryBuilder67.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder71 = queryBuilder67.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder73 = queryBuilder71.descending("hi!");
        org.osiam.client.query.Query query74 = queryBuilder73.build();
        java.lang.String str75 = query74.toString();
        java.lang.String str76 = query74.getSortOrder();
        java.lang.String str77 = query74.getSortBy();
        java.lang.String str78 = query74.getFilter();
        java.lang.String str79 = query74.toString();
        boolean boolean80 = accessToken62.equals((java.lang.Object) query74);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group81 = osiamConnector5.getGroup("", accessToken62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Authorization" + "'", str42, "Authorization");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(query53);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(accessToken62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(queryBuilder67);
        org.junit.Assert.assertNotNull(queryBuilder69);
        org.junit.Assert.assertNotNull(queryBuilder71);
        org.junit.Assert.assertNotNull(queryBuilder73);
        org.junit.Assert.assertNotNull(query74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str75, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "descending" + "'", str76, "descending");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str79, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test02318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02318");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty5 = scopeDeserializer0.findBackReference("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
    }

    @Test
    public void test02319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02319");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.UpdateUser updateUser4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        boolean boolean13 = accessToken11.isClientOnly();
        java.lang.String str14 = accessToken11.getRefreshToken();
        java.lang.String str15 = accessToken11.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user16 = osiamUserService2.updateUser("2024-03-22T13:51:20.388", updateUser4, accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str15, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test02320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02320");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.resources.scim.Group group23 = null;
        org.osiam.client.oauth.AccessToken accessToken24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group25 = osiamConnector7.replaceGroup("org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388", group23, accessToken24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
    }

    @Test
    public void test02321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02321");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getClientId();
        boolean boolean17 = accessToken13.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.addScope(scope20);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException24 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean25 = scope22.equals((java.lang.Object) invalidAttributeException24);
        java.lang.String str26 = scope22.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder19.addScope(scope22);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setUserName("Authorization");
        boolean boolean34 = accessToken13.equals((java.lang.Object) builder31);
        java.lang.String str35 = osiamGroupService6.extractErrorMessageForbidden(accessToken13);
        org.osiam.client.OsiamGroupService.Builder builder37 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService38 = builder37.build();
        org.osiam.client.OsiamGroupService osiamGroupService39 = builder37.build();
        org.osiam.client.oauth.AccessToken.Builder builder41 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date42 = null;
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setRefreshTokenExpiresAt(date42);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder41.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken46 = builder45.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken46);
        java.lang.String str48 = osiamGroupService39.extractErrorMessageForbidden(accessToken46);
        java.util.Date date49 = accessToken46.getExpiresAt();
        java.lang.String str50 = accessToken46.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList51 = osiamGroupService6.getAllGroups(accessToken46);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GET" + "'", str26, "GET");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService38);
        org.junit.Assert.assertNotNull(osiamGroupService39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(accessToken46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Insufficient scopes: []" + "'", str48, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str50, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test02322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02322");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService3.targetEndpoint;
        org.osiam.resources.scim.Group group14 = null;
        org.osiam.client.AuthService.Builder builder16 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder18 = builder16.setClientId("ME");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService21 = builder20.build();
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        boolean boolean29 = accessToken28.isRefreshTokenExpired();
        boolean boolean30 = accessToken28.isClientOnly();
        java.lang.String str31 = accessToken28.getClientId();
        java.lang.String str32 = authService21.extractErrorMessageForbidden(accessToken28);
        java.lang.String str33 = accessToken28.getUserId();
        org.osiam.client.oauth.AccessToken.Builder builder35 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date36 = null;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setRefreshTokenExpiresAt(date36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder35.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken40 = builder39.build();
        boolean boolean41 = accessToken40.isRefreshTokenExpired();
        java.lang.String str42 = accessToken40.getUserId();
        boolean boolean43 = accessToken40.isRefreshTokenExpired();
        boolean boolean44 = accessToken28.equals((java.lang.Object) accessToken40);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group45 = osiamGroupService3.createGroup(group14, accessToken40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(authService21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(accessToken40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test02323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02323");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector5.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder33 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder35.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.descending("hi!");
        org.osiam.client.query.Query query42 = queryBuilder41.build();
        java.lang.String str43 = query42.getAttributes();
        java.lang.String str44 = query42.toString();
        java.lang.String str45 = query42.getSortBy();
        org.osiam.client.query.Query query46 = query42.nextPage();
        int int47 = query42.getCount();
        java.lang.String str48 = query42.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder49 = osiamConnector5.createQueryBuilder(query42);
        org.osiam.client.oauth.AccessToken.Builder builder52 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setRefreshTokenExpiresAt(date53);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder52.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken57 = builder56.build();
        java.util.Date date58 = accessToken57.getExpiresAt();
        java.lang.String str59 = accessToken57.getRefreshToken();
        java.lang.String str60 = accessToken57.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user61 = osiamConnector5.getUser("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Authorization" + "'", str43, "Authorization");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str44, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(query46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(accessToken57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
    }

    @Test
    public void test02324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02324");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        java.util.Date date13 = accessToken10.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean16 = accessToken10.equals((java.lang.Object) scope15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        boolean boolean24 = accessToken23.isRefreshTokenExpired();
        boolean boolean25 = accessToken23.isClientOnly();
        java.lang.String str26 = accessToken23.getClientId();
        boolean boolean27 = accessToken23.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.addScope(scope30);
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException34 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean35 = scope32.equals((java.lang.Object) invalidAttributeException34);
        java.lang.String str36 = scope32.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder29.addScope(scope32);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setUserName("Authorization");
        boolean boolean44 = accessToken23.equals((java.lang.Object) builder41);
        org.osiam.client.oauth.AccessToken.Builder builder46 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.addScope(scope47);
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException51 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean52 = scope49.equals((java.lang.Object) invalidAttributeException51);
        java.lang.String str53 = scope49.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder46.addScope(scope49);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope61 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder58.addScope(scope61);
        org.osiam.client.oauth.GrantType grantType63 = org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS;
        java.lang.String str64 = grantType63.getUrlParam();
        boolean boolean65 = scope61.equals((java.lang.Object) grantType63);
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder41.addScope(scope61);
        boolean boolean67 = scope15.equals((java.lang.Object) builder66);
        java.lang.String str68 = scope15.getValue();
        java.lang.String str69 = scope15.getValue();
        java.lang.String str70 = scope15.toString();
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GET" + "'", str36, "GET");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "GET" + "'", str53, "GET");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(scope61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + grantType63 + "' != '" + org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS + "'", grantType63.equals(org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "client_credentials" + "'", str64, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ADMIN" + "'", str68, "ADMIN");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ADMIN" + "'", str69, "ADMIN");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ADMIN" + "'", str70, "ADMIN");
    }

    @Test
    public void test02325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02325");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Bearer ");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder5 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        java.util.Date date14 = accessToken13.getExpiresAt();
        java.lang.String str15 = accessToken13.getRefreshToken();
        java.lang.String str16 = accessToken13.getType();
        java.lang.String str17 = accessToken13.getClientId();
        java.lang.String str18 = accessToken13.getUserName();
        java.lang.String str19 = osiamGroupService6.extractErrorMessageForbidden(accessToken13);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList20 = osiamGroupService2.getAllResources(accessToken13);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
    }

    @Test
    public void test02326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02326");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder23 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.descending("hi!");
        org.osiam.client.query.Query query32 = queryBuilder31.build();
        java.lang.String str33 = query32.toString();
        java.lang.String str34 = query32.toString();
        org.osiam.client.query.Query query35 = query32.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder36 = osiamConnector7.createQueryBuilder(query32);
        org.osiam.client.AuthService.Builder builder40 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder42 = builder40.setClientId("ME");
        org.osiam.client.AuthService.Builder builder44 = builder42.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder46 = builder44.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder48 = builder46.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService49 = builder48.build();
        org.osiam.client.oauth.AccessToken.Builder builder51 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date52 = null;
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setRefreshTokenExpiresAt(date52);
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder51.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken56 = builder55.build();
        boolean boolean57 = accessToken56.isRefreshTokenExpired();
        java.lang.String str58 = accessToken56.getUserId();
        java.lang.String str59 = accessToken56.getToken();
        java.lang.String str60 = authService49.extractErrorMessageForbidden(accessToken56);
        org.osiam.client.oauth.Scope scope61 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str62 = scope61.getValue();
        java.lang.String str63 = scope61.toString();
        org.osiam.client.oauth.Scope scope64 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray65 = new org.osiam.client.oauth.Scope[] { scope61, scope64 };
        java.net.URI uRI66 = authService49.getAuthorizationUri(scopeArray65);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken67 = osiamConnector7.retrieveAccessToken("org.osiam.client.exception.ConflictException: ", "org.osiam.client.exception.ConnectionInitializationException: Bearer ", scopeArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(query32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str33, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str34, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query35);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(authService49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(accessToken56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Bearer " + "'", str59, "Bearer ");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Insufficient scopes: []" + "'", str60, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "PATCH" + "'", str62, "PATCH");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "PATCH" + "'", str63, "PATCH");
        org.junit.Assert.assertNotNull(scope64);
        org.junit.Assert.assertNotNull(scopeArray65);
        org.junit.Assert.assertNotNull(uRI66);
    }

    @Test
    public void test02327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02327");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService2.targetEndpoint;
        org.osiam.resources.scim.Group group5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.addScope(scope8);
        org.osiam.client.oauth.Scope scope10 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException12 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean13 = scope10.equals((java.lang.Object) invalidAttributeException12);
        java.lang.String str14 = scope10.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder7.addScope(scope10);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.addScope(scope24);
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        java.lang.String str30 = scope26.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder23.addScope(scope26);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder19.addScope(scope26);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder19.setRefreshToken("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group36 = osiamGroupService2.createGroup(group5, accessToken35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(scope10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GET" + "'", str14, "GET");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GET" + "'", str30, "GET");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
    }

    @Test
    public void test02328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02328");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query39 = queryBuilder36.build();
        org.osiam.client.query.Query query40 = query39.nextPage();
        org.osiam.client.query.Query query41 = query40.previousPage();
        java.lang.String str42 = query40.getSortOrder();
        java.lang.String str43 = query40.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder44 = osiamConnector5.createQueryBuilder(query40);
        org.osiam.client.OsiamGroupService.Builder builder47 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService48 = builder47.build();
        org.osiam.client.oauth.AccessToken.Builder builder50 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date51 = null;
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.setRefreshTokenExpiresAt(date51);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder50.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken55 = builder54.build();
        java.util.Date date56 = accessToken55.getExpiresAt();
        java.lang.String str57 = accessToken55.getUserName();
        java.lang.String str58 = accessToken55.toString();
        java.lang.String str59 = osiamGroupService48.extractErrorMessageForbidden(accessToken55);
        java.util.Date date60 = accessToken55.getRefreshTokenExpiresAt();
        java.util.Date date61 = accessToken55.getRefreshTokenExpiresAt();
        boolean boolean62 = accessToken55.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group63 = osiamConnector5.getGroup("org.osiam.client.exception.ConflictException: PATCH", accessToken55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(query39);
        org.junit.Assert.assertNotNull(query40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Authorization" + "'", str43, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(osiamGroupService48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(accessToken55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str58, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Insufficient scopes: []" + "'", str59, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test02329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02329");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        java.lang.String str14 = osiamGroupService4.extractErrorMessageForbidden(accessToken12);
        javax.ws.rs.client.WebTarget webTarget15 = osiamGroupService4.targetEndpoint;
        org.osiam.resources.scim.Group group16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken25 = builder22.build();
        java.util.Date date26 = accessToken25.getExpiresAt();
        java.lang.String str27 = accessToken25.toString();
        java.lang.String str28 = accessToken25.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group29 = osiamGroupService4.createResource(group16, accessToken25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str27, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str28, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test02330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02330");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder12.setClientRedirectUri("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector23 = builder22.build();
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken31 = builder30.build();
        java.util.Date date32 = accessToken31.getExpiresAt();
        java.util.Date date33 = accessToken31.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user34 = osiamConnector23.getUser("", accessToken31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(osiamConnector23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(accessToken31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02331");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.OsiamGroupService.Builder builder12 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService13 = builder12.build();
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        boolean boolean21 = accessToken20.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet22 = accessToken20.getScopes();
        java.lang.String str23 = osiamGroupService13.extractErrorMessageForbidden(accessToken20);
        boolean boolean24 = accessToken20.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken20);
        java.lang.String str26 = authService10.extractErrorMessageForbidden(accessToken20);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken33);
        java.util.Date date35 = accessToken33.getExpiresAt();
        boolean boolean36 = accessToken33.isClientOnly();
        boolean boolean37 = accessToken33.isClientOnly();
        java.lang.String str38 = authService10.extractErrorMessageForbidden(accessToken33);
        org.osiam.client.OsiamGroupService.Builder builder40 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService41 = builder40.build();
        org.osiam.client.oauth.AccessToken.Builder builder43 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date44 = null;
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setRefreshTokenExpiresAt(date44);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder43.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken48 = builder47.build();
        java.util.Date date49 = accessToken48.getExpiresAt();
        java.lang.String str50 = accessToken48.getRefreshToken();
        java.lang.String str51 = accessToken48.getType();
        java.lang.String str52 = accessToken48.getClientId();
        java.lang.String str53 = accessToken48.getUserName();
        java.lang.String str54 = osiamGroupService41.extractErrorMessageForbidden(accessToken48);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken55 = authService10.validateAccessToken(accessToken48);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(osiamGroupService13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(scopeSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Insufficient scopes: []" + "'", str23, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Insufficient scopes: []" + "'", str26, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Insufficient scopes: []" + "'", str38, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(accessToken48);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Insufficient scopes: []" + "'", str54, "Insufficient scopes: []");
    }

    @Test
    public void test02332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02332");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        org.osiam.client.helper.ScopeSerializer scopeSerializer4 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        java.lang.String str13 = accessToken11.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet14 = accessToken11.getScopes();
        boolean boolean15 = scopeSerializer4.isEmpty(scopeSet14);
        boolean boolean16 = scopeSerializer0.isEmpty(scopeSet14);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper17 = null;
        com.fasterxml.jackson.databind.JavaType javaType18 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper17, javaType18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        java.lang.String str28 = accessToken26.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet29 = accessToken26.getScopes();
        org.osiam.client.helper.ScopeSerializer scopeSerializer30 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean31 = scopeSerializer30.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date34 = null;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException39 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean40 = scope37.equals((java.lang.Object) invalidAttributeException39);
        java.lang.String str41 = scope37.getValue();
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str44 = scope43.toString();
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str47 = scope46.getValue();
        java.lang.String str48 = scope46.getValue();
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException51 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean52 = scope49.equals((java.lang.Object) invalidAttributeException51);
        java.lang.String str53 = scope49.getValue();
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope56 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope57 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException59 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean60 = scope57.equals((java.lang.Object) invalidAttributeException59);
        org.osiam.client.oauth.Scope scope61 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope62 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope63 = org.osiam.client.oauth.Scope.GET;
        boolean boolean65 = scope63.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope66 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray67 = new org.osiam.client.oauth.Scope[] { scope36, scope37, scope42, scope43, scope45, scope46, scope49, scope54, scope55, scope56, scope57, scope61, scope62, scope63, scope66 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet68 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet68, scopeArray67);
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder33.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet68);
        boolean boolean71 = scopeSerializer30.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet68);
        boolean boolean72 = accessToken26.equals((java.lang.Object) scopeSet68);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider74 = null;
        // The following exception was thrown during execution in test generation
        try {
            scopeSerializer0.serialize((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet68, jsonGenerator73, serializerProvider74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(scopeSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(scopeSet29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "GET" + "'", str41, "GET");
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ME" + "'", str44, "ME");
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PATCH" + "'", str47, "PATCH");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PATCH" + "'", str48, "PATCH");
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "GET" + "'", str53, "GET");
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertNotNull(scope57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(scope61);
        org.junit.Assert.assertNotNull(scope62);
        org.junit.Assert.assertNotNull(scope63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(scope66);
        org.junit.Assert.assertNotNull(scopeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test02333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02333");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("password");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getUserName();
        java.lang.String str12 = accessToken9.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser13 = osiamUserService2.getCurrentUserBasic(accessToken9);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test02334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02334");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException1 = new org.osiam.client.exception.ConnectionInitializationException("client_credentials");
    }

    @Test
    public void test02335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02335");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setResourceServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setAuthServerEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test02336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02336");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
    }

    @Test
    public void test02337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02337");
        org.osiam.client.exception.NoResultException noResultException1 = new org.osiam.client.exception.NoResultException("org.osiam.client.exception.OsiamClientException: client_credentials");
    }

    @Test
    public void test02338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02338");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService4 = builder3.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.util.Date date12 = accessToken11.getExpiresAt();
        java.lang.String str13 = accessToken11.getRefreshToken();
        java.lang.String str14 = accessToken11.getType();
        java.lang.String str15 = accessToken11.getClientId();
        java.lang.String str16 = accessToken11.getUserName();
        java.lang.String str17 = accessToken11.toString();
        java.lang.String str18 = accessToken11.getUserName();
        java.lang.String str19 = authService4.extractErrorMessageForbidden(accessToken11);
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        java.util.Date date27 = accessToken26.getExpiresAt();
        java.lang.String str28 = accessToken26.getRefreshToken();
        boolean boolean29 = accessToken26.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken26);
        java.lang.String str31 = authService4.extractErrorMessageForbidden(accessToken26);
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date34 = null;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder33.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken38 = builder37.build();
        java.util.Date date39 = accessToken38.getExpiresAt();
        java.lang.String str40 = accessToken38.getUserName();
        java.lang.String str41 = accessToken38.toString();
        // The following exception was thrown during execution in test generation
        try {
            authService4.revokeAccessToken(accessToken38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(authService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str17, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Insufficient scopes: []" + "'", str31, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str41, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test02339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02339");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.toString();
        java.lang.String str23 = query20.toString();
        int int24 = query20.getCount();
        long long25 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder26 = osiamConnector7.createQueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        org.osiam.client.query.Query query37 = queryBuilder35.build();
        java.lang.String str38 = query37.getSortBy();
        java.lang.String str39 = query37.getFilter();
        int int40 = query37.getCount();
        long long41 = query37.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder42 = osiamConnector7.createQueryBuilder(query37);
        org.osiam.client.oauth.AccessToken.Builder builder45 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setRefreshTokenExpiresAt(date46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder45.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken50 = builder49.build();
        boolean boolean51 = accessToken50.isRefreshTokenExpired();
        boolean boolean52 = accessToken50.isClientOnly();
        java.lang.String str53 = accessToken50.getRefreshToken();
        boolean boolean54 = accessToken50.isExpired();
        boolean boolean55 = accessToken50.isExpired();
        boolean boolean56 = accessToken50.isClientOnly();
        java.util.Date date57 = accessToken50.getExpiresAt();
        java.lang.String str58 = accessToken50.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user59 = osiamConnector7.getUser("", accessToken50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertNotNull(query37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(accessToken50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test02340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02340");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector osiamConnector9 = builder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.descending("hi!");
        org.osiam.client.query.Query query19 = queryBuilder18.build();
        java.lang.String str20 = query19.toString();
        java.lang.String str21 = query19.getSortOrder();
        java.lang.String str22 = query19.getSortBy();
        org.osiam.client.query.Query query23 = query19.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder24 = osiamConnector9.createQueryBuilder(query23);
        org.osiam.client.query.QueryBuilder queryBuilder25 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.descending("hi!");
        org.osiam.client.query.Query query34 = queryBuilder33.build();
        java.lang.String str35 = query34.toString();
        java.lang.String str36 = query34.getSortOrder();
        java.lang.String str37 = query34.getSortBy();
        java.lang.String str38 = query34.getFilter();
        java.lang.String str39 = query34.getSortOrder();
        java.lang.String str40 = query34.getAttributes();
        long long41 = query34.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder42 = osiamConnector9.createQueryBuilder(query34);
        org.osiam.resources.scim.UpdateGroup updateGroup44 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date47 = null;
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.setRefreshTokenExpiresAt(date47);
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder46.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken51 = builder50.build();
        java.util.Date date52 = accessToken51.getExpiresAt();
        java.lang.String str53 = accessToken51.getRefreshToken();
        java.lang.String str54 = accessToken51.getType();
        java.lang.String str55 = accessToken51.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group56 = osiamConnector9.updateGroup("Authorization", updateGroup44, accessToken51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str20, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "descending" + "'", str21, "descending");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(query23);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(query34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str35, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "descending" + "'", str36, "descending");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "descending" + "'", str39, "descending");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Authorization" + "'", str40, "Authorization");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(accessToken51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test02341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02341");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder23 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.descending("hi!");
        org.osiam.client.query.Query query32 = queryBuilder31.build();
        org.osiam.client.query.Query query33 = queryBuilder31.build();
        long long34 = query33.getStartIndex();
        org.osiam.client.oauth.AccessToken.Builder builder36 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date37 = null;
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setRefreshTokenExpiresAt(date37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder36.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken41 = builder40.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken41);
        java.util.Date date43 = accessToken41.getExpiresAt();
        boolean boolean44 = accessToken41.isRefreshTokenExpired();
        java.util.Date date45 = accessToken41.getExpiresAt();
        java.lang.String str46 = accessToken41.getUserName();
        boolean boolean47 = accessToken41.isRefreshTokenExpired();
        java.util.Date date48 = accessToken41.getRefreshTokenExpiresAt();
        java.lang.String str49 = accessToken41.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult50 = osiamConnector7.searchUsers(query33, accessToken41);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(query32);
        org.junit.Assert.assertNotNull(query33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(accessToken41);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Bearer " + "'", str49, "Bearer ");
    }

    @Test
    public void test02342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02342");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.getUserName();
        java.lang.String str15 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService2.targetEndpoint;
        org.osiam.resources.scim.Group group18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        java.util.Date date26 = accessToken25.getExpiresAt();
        java.lang.String str27 = accessToken25.getUserName();
        java.lang.String str28 = accessToken25.getUserName();
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        boolean boolean36 = accessToken35.isRefreshTokenExpired();
        java.lang.String str37 = accessToken35.getClientId();
        boolean boolean38 = accessToken25.equals((java.lang.Object) accessToken35);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group39 = osiamGroupService2.createGroup(group18, accessToken35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget16);
        org.junit.Assert.assertNotNull(webTarget17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test02343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02343");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getRefreshToken();
        boolean boolean17 = accessToken13.isExpired();
        java.lang.String str18 = accessToken13.getRefreshToken();
        java.lang.String str19 = accessToken13.getRefreshToken();
        java.lang.String str20 = osiamGroupService4.extractErrorMessageForbidden(accessToken13);
        javax.ws.rs.core.Response.StatusType statusType22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken29 = builder28.build();
        java.util.Date date30 = accessToken29.getExpiresAt();
        java.lang.String str31 = accessToken29.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken29);
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        boolean boolean40 = accessToken39.isRefreshTokenExpired();
        boolean boolean41 = accessToken39.isClientOnly();
        java.lang.String str42 = accessToken39.getClientId();
        boolean boolean43 = accessToken39.isClientOnly();
        boolean boolean44 = accessToken29.equals((java.lang.Object) accessToken39);
        org.osiam.client.query.QueryBuilder queryBuilder45 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder45.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder47.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder47.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder53 = queryBuilder51.descending("hi!");
        org.osiam.client.query.Query query54 = queryBuilder53.build();
        org.osiam.client.query.Query query55 = queryBuilder53.build();
        org.osiam.client.query.QueryBuilder queryBuilder57 = queryBuilder53.ascending("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        boolean boolean58 = accessToken29.equals((java.lang.Object) "org.osiam.client.exception.ConnectionInitializationException: PATCH");
        java.lang.String str59 = accessToken29.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService4.checkAndHandleResponse("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", statusType22, accessToken29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(queryBuilder53);
        org.junit.Assert.assertNotNull(query54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertNotNull(queryBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
    }

    @Test
    public void test02344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02344");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.ascending("hi!");
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder4.ascending("POST");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
    }

    @Test
    public void test02345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02345");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector.Builder builder12 = builder2.setEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector osiamConnector13 = builder2.build();
        org.osiam.client.OsiamConnector.Builder builder14 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector19 = builder18.build();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        java.lang.String str28 = accessToken26.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder29 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder31.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.descending("hi!");
        org.osiam.client.query.Query query38 = queryBuilder37.build();
        java.lang.String str39 = query38.toString();
        java.lang.String str40 = query38.getSortOrder();
        java.lang.String str41 = query38.getSortBy();
        java.lang.String str42 = query38.getFilter();
        java.lang.String str43 = query38.toString();
        boolean boolean44 = accessToken26.equals((java.lang.Object) query38);
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector19.createQueryBuilder(query38);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.getAttributes();
        java.lang.String str57 = query55.toString();
        java.lang.String str58 = query55.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder59 = osiamConnector19.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder60 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder62 = queryBuilder60.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder62.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder66 = queryBuilder64.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query67 = queryBuilder64.build();
        org.osiam.client.query.QueryBuilder queryBuilder68 = osiamConnector19.createQueryBuilder(query67);
        java.lang.String str69 = query67.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder70 = osiamConnector13.createQueryBuilder(query67);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken72 = osiamConnector13.retrieveAccessToken("org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(query38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str39, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "descending" + "'", str40, "descending");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Authorization" + "'", str56, "Authorization");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str57, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "descending" + "'", str58, "descending");
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertNotNull(query67);
        org.junit.Assert.assertNotNull(queryBuilder68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(queryBuilder70);
    }

    @Test
    public void test02346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02346");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        java.lang.String str14 = osiamGroupService3.extractErrorMessageForbidden(accessToken13);
        org.osiam.resources.scim.Group group16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder18.setUserName("ascending");
        org.osiam.client.oauth.AccessToken accessToken25 = builder18.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group26 = osiamGroupService3.updateResource("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!", group16, accessToken25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
    }

    @Test
    public void test02347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02347");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.resources.scim.User user9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        boolean boolean18 = accessToken16.isClientOnly();
        java.lang.String str19 = accessToken16.getClientId();
        boolean boolean20 = accessToken16.isClientOnly();
        java.lang.String str21 = accessToken16.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user22 = osiamConnector7.replaceUser("descending", user9, accessToken16);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Bearer " + "'", str21, "Bearer ");
    }

    @Test
    public void test02348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02348");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.attributes("Bearer ");
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("Bearer ");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
    }

    @Test
    public void test02349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02349");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.OsiamGroupService.Builder builder8 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken16.getScopes();
        java.lang.String str19 = osiamGroupService9.extractErrorMessageForbidden(accessToken16);
        boolean boolean20 = accessToken16.isClientOnly();
        java.lang.String str21 = authService6.extractErrorMessageForbidden(accessToken16);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken30 = builder27.build();
        java.lang.String str31 = accessToken30.toString();
        java.lang.String str32 = authService6.extractErrorMessageForbidden(accessToken30);
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        java.util.Date date40 = accessToken39.getExpiresAt();
        java.lang.String str41 = accessToken39.getRefreshToken();
        java.lang.String str42 = accessToken39.getType();
        java.lang.String str43 = accessToken39.getClientId();
        java.lang.String str44 = accessToken39.getUserName();
        java.lang.String str45 = authService6.extractErrorMessageForbidden(accessToken39);
        org.osiam.client.oauth.AccessToken.Builder builder47 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date48 = null;
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.setRefreshTokenExpiresAt(date48);
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder47.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken52 = builder51.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken52);
        java.util.Date date54 = accessToken52.getExpiresAt();
        java.lang.String str55 = authService6.extractErrorMessageForbidden(accessToken52);
        org.osiam.client.oauth.AccessToken.Builder builder58 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date59 = null;
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setRefreshTokenExpiresAt(date59);
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder58.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder62.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken67 = builder66.build();
        // The following exception was thrown during execution in test generation
        try {
            authService6.revokeAllAccessTokens("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", accessToken67);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str31, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Insufficient scopes: []" + "'", str45, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(accessToken52);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Insufficient scopes: []" + "'", str55, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(accessToken67);
    }

    @Test
    public void test02350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02350");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.getUserName();
        java.lang.String str15 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        java.util.Date date25 = accessToken24.getExpiresAt();
        java.lang.String str26 = accessToken24.getRefreshToken();
        java.lang.String str27 = accessToken24.getType();
        java.lang.String str28 = accessToken24.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group29 = osiamGroupService2.getResource("2024-03-22T13:51:20.388", accessToken24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test02351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02351");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder7 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder7.build();
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder7.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken16);
        java.lang.String str18 = osiamGroupService9.extractErrorMessageForbidden(accessToken16);
        java.util.Date date19 = accessToken16.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken16);
        java.lang.String str21 = accessToken16.getRefreshToken();
        org.osiam.client.exception.NoResultException noResultException23 = new org.osiam.client.exception.NoResultException("Insufficient scopes: []");
        boolean boolean24 = accessToken16.equals((java.lang.Object) "Insufficient scopes: []");
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user25 = osiamUserService4.getUser("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken16);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test02352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02352");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.resources.scim.User user6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        java.util.Date date15 = accessToken13.getExpiresAt();
        boolean boolean16 = accessToken13.isRefreshTokenExpired();
        java.util.Date date17 = accessToken13.getExpiresAt();
        java.lang.String str18 = accessToken13.getUserName();
        boolean boolean19 = accessToken13.isRefreshTokenExpired();
        java.util.Date date20 = accessToken13.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user21 = osiamUserService5.createUser(user6, accessToken13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02353");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService4 = builder3.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.util.Date date12 = accessToken11.getExpiresAt();
        java.lang.String str13 = accessToken11.getRefreshToken();
        java.lang.String str14 = accessToken11.getType();
        java.lang.String str15 = accessToken11.getClientId();
        java.lang.String str16 = accessToken11.getUserName();
        java.lang.String str17 = accessToken11.toString();
        java.lang.String str18 = accessToken11.getUserName();
        java.lang.String str19 = authService4.extractErrorMessageForbidden(accessToken11);
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        java.lang.String str28 = accessToken26.getUserId();
        java.lang.String str29 = accessToken26.getClientId();
        boolean boolean30 = accessToken26.isClientOnly();
        java.lang.String str31 = accessToken26.getRefreshToken();
        java.lang.String str32 = authService4.extractErrorMessageForbidden(accessToken26);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken34 = authService4.retrieveAccessToken("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(authService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str17, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
    }

    @Test
    public void test02354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02354");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamGroupService.Builder builder7 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder7.build();
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder7.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken16);
        java.lang.String str18 = osiamGroupService9.extractErrorMessageForbidden(accessToken16);
        java.util.Date date19 = accessToken16.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken16);
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean22 = accessToken16.equals((java.lang.Object) scope21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken29 = builder28.build();
        boolean boolean30 = accessToken29.isRefreshTokenExpired();
        boolean boolean31 = accessToken29.isClientOnly();
        java.lang.String str32 = accessToken29.getClientId();
        boolean boolean33 = accessToken29.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder35 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.addScope(scope36);
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException40 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean41 = scope38.equals((java.lang.Object) invalidAttributeException40);
        java.lang.String str42 = scope38.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder35.addScope(scope38);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.setUserName("Authorization");
        boolean boolean50 = accessToken29.equals((java.lang.Object) builder47);
        org.osiam.client.oauth.AccessToken.Builder builder52 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope53 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.addScope(scope53);
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException57 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean58 = scope55.equals((java.lang.Object) invalidAttributeException57);
        java.lang.String str59 = scope55.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder52.addScope(scope55);
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder60.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder64.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope67 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder64.addScope(scope67);
        org.osiam.client.oauth.GrantType grantType69 = org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS;
        java.lang.String str70 = grantType69.getUrlParam();
        boolean boolean71 = scope67.equals((java.lang.Object) grantType69);
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder47.addScope(scope67);
        boolean boolean73 = scope21.equals((java.lang.Object) builder72);
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder5.addScope(scope21);
        org.osiam.client.oauth.Scope scope76 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder74.addScope(scope76);
        java.lang.String str78 = scope76.getValue();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GET" + "'", str42, "GET");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(scope53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "GET" + "'", str59, "GET");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(scope67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + grantType69 + "' != '" + org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS + "'", grantType69.equals(org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS));
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "client_credentials" + "'", str70, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str78, "org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test02355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02355");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder7 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder7.build();
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder7.build();
        javax.ws.rs.client.WebTarget webTarget10 = osiamGroupService9.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget11 = osiamGroupService9.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        boolean boolean19 = accessToken18.isRefreshTokenExpired();
        java.lang.String str20 = accessToken18.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet21 = accessToken18.getScopes();
        java.lang.String str22 = osiamGroupService9.extractErrorMessageForbidden(accessToken18);
        java.lang.String str23 = accessToken18.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService4.deleteGroup("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]", accessToken18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(webTarget10);
        org.junit.Assert.assertNotNull(webTarget11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(scopeSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Insufficient scopes: []" + "'", str22, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test02356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02356");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.getAttributes();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query41);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.toString();
        java.lang.String str57 = query55.toString();
        org.osiam.client.query.Query query58 = query55.nextPage();
        java.lang.String str59 = query55.toString();
        org.osiam.client.query.QueryBuilder queryBuilder60 = osiamConnector5.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder61 = osiamConnector5.createQueryBuilder();
        org.osiam.client.oauth.AccessToken accessToken63 = null;
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector5.deleteUser("", accessToken63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Authorization" + "'", str42, "Authorization");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str56, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str57, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str59, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder60);
        org.junit.Assert.assertNotNull(queryBuilder61);
    }

    @Test
    public void test02357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02357");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("");
        org.osiam.client.AuthService.Builder builder9 = builder5.setClientId("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        java.lang.Object obj18 = null;
        boolean boolean19 = accessToken17.equals(obj18);
        // The following exception was thrown during execution in test generation
        try {
            authService10.revokeAccessToken(accessToken17);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test02358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02358");
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.AbstractOsiamService.Builder<org.osiam.resources.scim.User> userBuilder1 = new org.osiam.client.AbstractOsiamService.Builder<org.osiam.resources.scim.User>("2024-03-22T13:51:20.388");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02359");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query18 = queryBuilder15.build();
        org.osiam.client.query.Query query19 = query18.nextPage();
        org.osiam.client.query.Query query20 = query19.previousPage();
        java.lang.String str21 = query19.getSortOrder();
        java.lang.String str22 = query19.getAttributes();
        java.lang.String str23 = query19.getSortBy();
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.addScope(scope26);
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException30 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean31 = scope28.equals((java.lang.Object) invalidAttributeException30);
        java.lang.String str32 = scope28.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder25.addScope(scope28);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder41 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.addScope(scope42);
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException46 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean47 = scope44.equals((java.lang.Object) invalidAttributeException46);
        java.lang.String str48 = scope44.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder41.addScope(scope44);
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder37.addScope(scope44);
        org.osiam.client.oauth.AccessToken.Builder builder52 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope53 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.addScope(scope53);
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException57 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean58 = scope55.equals((java.lang.Object) invalidAttributeException57);
        java.lang.String str59 = scope55.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder52.addScope(scope55);
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder60.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setUserId("");
        org.osiam.client.oauth.Scope scope65 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder64.addScope(scope65);
        org.osiam.client.oauth.AccessToken.Builder builder68 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date69 = null;
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder68.setRefreshTokenExpiresAt(date69);
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder68.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken73 = builder72.build();
        java.util.Date date74 = accessToken73.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder64.setRefreshTokenExpiresAt(date74);
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder37.setRefreshTokenExpiresAt(date74);
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder76.setRefreshToken("");
        org.osiam.client.oauth.AccessToken accessToken79 = builder76.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult80 = osiamConnector7.searchGroups(query19, accessToken79);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(query18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Authorization" + "'", str22, "Authorization");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "GET" + "'", str32, "GET");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "GET" + "'", str48, "GET");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(scope53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "GET" + "'", str59, "GET");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(scope65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(accessToken73);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(accessToken79);
    }

    @Test
    public void test02360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02360");
        org.osiam.client.OsiamConnector.setReadTimeout((int) (short) 10);
    }

    @Test
    public void test02361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02361");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Bearer ");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.addScope(scope8);
        org.osiam.client.oauth.Scope scope10 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException12 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean13 = scope10.equals((java.lang.Object) invalidAttributeException12);
        java.lang.String str14 = scope10.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder7.addScope(scope10);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.checkAndHandleResponse("org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388", statusType5, accessToken26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(scope10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GET" + "'", str14, "GET");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test02362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02362");
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException1 = new org.osiam.client.exception.InvalidAttributeException("org.osiam.client.exception.UnauthorizedException: GET");
    }

    @Test
    public void test02363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02363");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder5 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder7 = queryBuilder5.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder7.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query12 = queryBuilder9.build();
        org.osiam.client.query.Query query13 = query12.nextPage();
        org.osiam.client.query.Query query14 = query13.previousPage();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder(query14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        java.util.Date date23 = accessToken22.getExpiresAt();
        java.lang.String str24 = accessToken22.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken22);
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        boolean boolean33 = accessToken32.isRefreshTokenExpired();
        boolean boolean34 = accessToken32.isClientOnly();
        java.lang.String str35 = accessToken32.getClientId();
        boolean boolean36 = accessToken32.isClientOnly();
        boolean boolean37 = accessToken22.equals((java.lang.Object) accessToken32);
        org.osiam.client.query.QueryBuilder queryBuilder38 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder42 = queryBuilder40.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder44 = queryBuilder40.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder46 = queryBuilder44.descending("hi!");
        org.osiam.client.query.Query query47 = queryBuilder46.build();
        org.osiam.client.query.Query query48 = queryBuilder46.build();
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder46.ascending("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        boolean boolean51 = accessToken22.equals((java.lang.Object) "org.osiam.client.exception.ConnectionInitializationException: PATCH");
        java.lang.String str52 = accessToken22.getToken();
        java.lang.String str53 = accessToken22.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult54 = osiamGroupService4.searchResources(query14, accessToken22);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(queryBuilder7);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertNotNull(query14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(queryBuilder46);
        org.junit.Assert.assertNotNull(query47);
        org.junit.Assert.assertNotNull(query48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Bearer " + "'", str52, "Bearer ");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test02364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02364");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Cannot connect to server");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.resources.scim.User user4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.lang.String str12 = accessToken11.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user13 = osiamUserService3.createUser(user4, accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str12, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test02365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02365");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.OsiamGroupService.Builder builder8 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken16.getScopes();
        java.lang.String str19 = osiamGroupService9.extractErrorMessageForbidden(accessToken16);
        boolean boolean20 = accessToken16.isClientOnly();
        java.lang.String str21 = authService6.extractErrorMessageForbidden(accessToken16);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken30 = builder27.build();
        java.lang.String str31 = accessToken30.toString();
        java.lang.String str32 = authService6.extractErrorMessageForbidden(accessToken30);
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        java.util.Date date40 = accessToken39.getExpiresAt();
        java.lang.String str41 = accessToken39.getRefreshToken();
        java.lang.String str42 = accessToken39.getType();
        java.lang.String str43 = accessToken39.getClientId();
        java.lang.String str44 = accessToken39.getUserName();
        java.lang.String str45 = authService6.extractErrorMessageForbidden(accessToken39);
        org.osiam.client.OsiamGroupService.Builder builder47 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService48 = builder47.build();
        org.osiam.client.oauth.AccessToken.Builder builder50 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date51 = null;
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.setRefreshTokenExpiresAt(date51);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder50.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken55 = builder54.build();
        boolean boolean56 = accessToken55.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet57 = accessToken55.getScopes();
        java.lang.String str58 = osiamGroupService48.extractErrorMessageForbidden(accessToken55);
        java.lang.String str59 = authService6.extractErrorMessageForbidden(accessToken55);
        org.osiam.client.oauth.Scope scope61 = new org.osiam.client.oauth.Scope("GET POST PUT PATCH DELETE");
        org.osiam.client.oauth.Scope[] scopeArray62 = new org.osiam.client.oauth.Scope[] { scope61 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken63 = authService6.retrieveAccessToken(scopeArray62);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str31, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Insufficient scopes: []" + "'", str45, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(accessToken55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(scopeSet57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Insufficient scopes: []" + "'", str58, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Insufficient scopes: []" + "'", str59, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scopeArray62);
    }

    @Test
    public void test02366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02366");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.resources.scim.UpdateGroup updateGroup6 = null;
        org.osiam.client.oauth.AccessToken accessToken7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group8 = osiamGroupService4.updateGroup("", updateGroup6, accessToken7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
    }

    @Test
    public void test02367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02367");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector osiamConnector9 = builder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.descending("hi!");
        org.osiam.client.query.Query query19 = queryBuilder18.build();
        java.lang.String str20 = query19.toString();
        java.lang.String str21 = query19.getSortOrder();
        java.lang.String str22 = query19.getSortBy();
        org.osiam.client.query.Query query23 = query19.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder24 = osiamConnector9.createQueryBuilder(query23);
        org.osiam.client.query.QueryBuilder queryBuilder25 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.descending("hi!");
        org.osiam.client.query.Query query34 = queryBuilder33.build();
        java.lang.String str35 = query34.toString();
        java.lang.String str36 = query34.getSortOrder();
        java.lang.String str37 = query34.getSortBy();
        java.lang.String str38 = query34.getFilter();
        java.lang.String str39 = query34.getSortOrder();
        java.lang.String str40 = query34.getAttributes();
        long long41 = query34.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder42 = osiamConnector9.createQueryBuilder(query34);
        org.osiam.client.AuthService.Builder builder44 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder46 = builder44.setClientId("ME");
        org.osiam.client.AuthService.Builder builder48 = builder46.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService49 = builder48.build();
        org.osiam.client.oauth.AccessToken.Builder builder51 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date52 = null;
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setRefreshTokenExpiresAt(date52);
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder51.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken56 = builder55.build();
        boolean boolean57 = accessToken56.isRefreshTokenExpired();
        boolean boolean58 = accessToken56.isClientOnly();
        java.lang.String str59 = accessToken56.getClientId();
        java.lang.String str60 = authService49.extractErrorMessageForbidden(accessToken56);
        org.osiam.client.oauth.AccessToken.Builder builder62 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date63 = null;
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder62.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken67 = builder66.build();
        boolean boolean68 = accessToken67.isRefreshTokenExpired();
        java.lang.String str69 = accessToken67.getUserId();
        java.lang.String str70 = accessToken67.getClientId();
        java.lang.String str71 = accessToken67.getUserId();
        java.lang.String str72 = authService49.extractErrorMessageForbidden(accessToken67);
        java.util.Date date73 = accessToken67.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken74 = osiamConnector9.validateAccessToken(accessToken67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str20, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "descending" + "'", str21, "descending");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(query23);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(query34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str35, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "descending" + "'", str36, "descending");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "descending" + "'", str39, "descending");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Authorization" + "'", str40, "Authorization");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(authService49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(accessToken56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Insufficient scopes: []" + "'", str60, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(accessToken67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Insufficient scopes: []" + "'", str72, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02368");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService2.targetEndpoint;
        org.osiam.client.query.QueryBuilder queryBuilder7 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder7.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder9.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.descending("hi!");
        org.osiam.client.query.Query query16 = queryBuilder15.build();
        java.lang.String str17 = query16.toString();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder(query16);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.ascending("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.query.Query query21 = queryBuilder18.build();
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken30 = builder27.build();
        java.util.Date date31 = accessToken30.getExpiresAt();
        java.lang.String str32 = accessToken30.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult33 = osiamGroupService2.searchResources(query21, accessToken30);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str17, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str32, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
    }

    @Test
    public void test02369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02369");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer3 = scopeDeserializer0.getDelegatee();
        boolean boolean4 = scopeDeserializer0.isCachable();
        java.util.Collection<java.lang.Object> objCollection5 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.core.JsonParser jsonParser6 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext7 = null;
        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeserializer8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj9 = scopeDeserializer0.deserializeWithType(jsonParser6, deserializationContext7, typeDeserializer8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardJsonDeserializer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(objCollection5);
    }

    @Test
    public void test02370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02370");
        org.osiam.client.exception.NoResultException noResultException1 = new org.osiam.client.exception.NoResultException("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
    }

    @Test
    public void test02371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02371");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("password");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.UpdateUser updateUser4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        boolean boolean13 = accessToken11.isClientOnly();
        java.lang.String str14 = accessToken11.getRefreshToken();
        boolean boolean15 = accessToken11.isExpired();
        java.lang.String str16 = accessToken11.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user17 = osiamUserService2.updateUser("Insufficient scopes: []", updateUser4, accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str16, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test02372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02372");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.resources.scim.User user19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.addScope(scope22);
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException26 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean27 = scope24.equals((java.lang.Object) invalidAttributeException26);
        java.lang.String str28 = scope24.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder21.addScope(scope24);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder35.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken40 = builder39.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user41 = osiamConnector17.replaceUser("org.osiam.client.exception.ConflictException: ", user19, accessToken40);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GET" + "'", str28, "GET");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(accessToken40);
    }

    @Test
    public void test02373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02373");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query39 = queryBuilder36.build();
        org.osiam.client.query.Query query40 = query39.nextPage();
        org.osiam.client.query.Query query41 = query40.previousPage();
        java.lang.String str42 = query40.getSortOrder();
        java.lang.String str43 = query40.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder44 = osiamConnector5.createQueryBuilder(query40);
        org.osiam.client.oauth.AccessToken.Builder builder46 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date47 = null;
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.setRefreshTokenExpiresAt(date47);
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder46.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken51 = builder50.build();
        java.lang.String str52 = accessToken51.toString();
        java.lang.String str53 = accessToken51.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector5.revokeAccessToken(accessToken51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(query39);
        org.junit.Assert.assertNotNull(query40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Authorization" + "'", str43, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(accessToken51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str52, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test02374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02374");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        java.util.Date date21 = accessToken20.getExpiresAt();
        java.lang.String str22 = accessToken20.getRefreshToken();
        boolean boolean23 = accessToken20.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group24 = osiamGroupService2.getResource("org.osiam.client.exception.OsiamClientException: PUT", accessToken20);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test02375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02375");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count((int) (short) 0);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.startIndex((long) 1);
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
    }

    @Test
    public void test02376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02376");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.getAttributes();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query41);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.toString();
        java.lang.String str57 = query55.toString();
        org.osiam.client.query.Query query58 = query55.nextPage();
        java.lang.String str59 = query55.toString();
        org.osiam.client.query.QueryBuilder queryBuilder60 = osiamConnector5.createQueryBuilder(query55);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken62 = osiamConnector5.retrieveAccessToken("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Authorization" + "'", str42, "Authorization");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str56, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str57, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str59, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder60);
    }

    @Test
    public void test02377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02377");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder1.setUserName("ascending");
        org.osiam.client.oauth.AccessToken accessToken8 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder1.setUserId("org.osiam.client.exception.ForbiddenException: hi!");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(accessToken8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test02378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02378");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        boolean boolean12 = accessToken9.isClientOnly();
        java.lang.String str13 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        java.util.Date date21 = accessToken20.getExpiresAt();
        java.lang.String str22 = accessToken20.getUserName();
        java.util.Date date23 = accessToken20.getRefreshTokenExpiresAt();
        java.lang.String str24 = osiamGroupService2.extractErrorMessageForbidden(accessToken20);
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        java.util.Date date33 = accessToken32.getExpiresAt();
        java.lang.String str34 = accessToken32.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken32);
        java.lang.String str36 = accessToken32.getClientId();
        boolean boolean37 = accessToken32.isRefreshTokenExpired();
        boolean boolean38 = accessToken32.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group39 = osiamGroupService2.getGroup("org.osiam.client.exception.ConflictException: PATCH", accessToken32);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Insufficient scopes: []" + "'", str13, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Insufficient scopes: []" + "'", str24, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test02379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02379");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("");
        org.osiam.client.AuthService authService8 = builder7.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        boolean boolean17 = accessToken15.isClientOnly();
        java.lang.String str18 = accessToken15.getRefreshToken();
        boolean boolean19 = accessToken15.isExpired();
        boolean boolean20 = accessToken15.isExpired();
        java.lang.String str21 = accessToken15.getClientId();
        boolean boolean22 = accessToken15.isExpired();
        java.util.Date date23 = accessToken15.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken24 = authService8.validateAccessToken(accessToken15);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(authService8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02380");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder13 = builder9.setClientSecret("PATCH");
        org.osiam.client.AuthService authService14 = builder13.build();
        org.osiam.client.AuthService authService15 = builder13.build();
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        boolean boolean23 = accessToken22.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet24 = accessToken22.getScopes();
        boolean boolean25 = accessToken22.isClientOnly();
        java.lang.String str26 = accessToken22.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet27 = accessToken22.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken28 = authService15.validateAccessToken(accessToken22);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(authService14);
        org.junit.Assert.assertNotNull(authService15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(scopeSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(scopeSet27);
    }

    @Test
    public void test02381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02381");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getClientId();
        java.lang.String str17 = authService6.extractErrorMessageForbidden(accessToken13);
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        boolean boolean25 = accessToken24.isRefreshTokenExpired();
        java.lang.String str26 = accessToken24.getUserId();
        java.lang.String str27 = accessToken24.getClientId();
        java.lang.String str28 = accessToken24.getUserId();
        java.lang.String str29 = authService6.extractErrorMessageForbidden(accessToken24);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken31 = authService6.retrieveAccessToken("POST");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Insufficient scopes: []" + "'", str17, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Insufficient scopes: []" + "'", str29, "Insufficient scopes: []");
    }

    @Test
    public void test02382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02382");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        java.lang.String str23 = accessToken21.getUserName();
        java.lang.String str24 = accessToken21.toString();
        java.lang.String str25 = osiamGroupService2.extractErrorMessageForbidden(accessToken21);
        javax.ws.rs.client.WebTarget webTarget26 = osiamGroupService2.targetEndpoint;
        org.osiam.resources.scim.Group group27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date30 = null;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setRefreshTokenExpiresAt(date30);
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken34 = builder33.build();
        boolean boolean35 = accessToken34.isRefreshTokenExpired();
        java.lang.String str36 = accessToken34.getUserId();
        java.lang.String str37 = accessToken34.getToken();
        boolean boolean38 = accessToken34.isExpired();
        java.lang.String str39 = accessToken34.getClientId();
        java.lang.String str40 = accessToken34.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet41 = accessToken34.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group42 = osiamGroupService2.createGroup(group27, accessToken34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str24, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(accessToken34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Bearer " + "'", str37, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(scopeSet41);
    }

    @Test
    public void test02383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02383");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.resources.scim.Group group4 = null;
        org.osiam.client.AuthService.Builder builder6 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientSecret("");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService authService15 = builder14.build();
        org.osiam.client.AuthService authService16 = builder14.build();
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        boolean boolean24 = accessToken23.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet25 = accessToken23.getScopes();
        boolean boolean26 = accessToken23.isRefreshTokenExpired();
        boolean boolean27 = accessToken23.isExpired();
        java.util.Date date28 = accessToken23.getExpiresAt();
        java.lang.String str29 = authService16.extractErrorMessageForbidden(accessToken23);
        java.lang.String str30 = accessToken23.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group31 = osiamGroupService2.replaceGroup("hi!", group4, accessToken23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(authService15);
        org.junit.Assert.assertNotNull(authService16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(scopeSet25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Insufficient scopes: []" + "'", str29, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test02384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02384");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.usesObjectId();
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope3 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.addScope(scope6);
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException10 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean11 = scope8.equals((java.lang.Object) invalidAttributeException10);
        java.lang.String str12 = scope8.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder5.addScope(scope8);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setUserId("");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.addScope(scope18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.addScope(scope22);
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str25 = scope24.getValue();
        org.osiam.client.oauth.Scope[] scopeArray26 = new org.osiam.client.oauth.Scope[] { scope2, scope3, scope18, scope22, scope24 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet27 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet27, scopeArray26);
        boolean boolean29 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet27);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer30 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer31 = scopeSerializer0.unwrappingSerializer(nameTransformer30);
        boolean boolean32 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper33 = null;
        com.fasterxml.jackson.databind.JavaType javaType34 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper33, javaType34);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(scope3);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GET" + "'", str12, "GET");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PATCH" + "'", str25, "PATCH");
        org.junit.Assert.assertNotNull(scopeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test02385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02385");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService4 = builder3.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.util.Date date12 = accessToken11.getExpiresAt();
        java.lang.String str13 = accessToken11.getRefreshToken();
        java.lang.String str14 = accessToken11.getType();
        java.lang.String str15 = accessToken11.getClientId();
        java.lang.String str16 = accessToken11.getUserName();
        java.lang.String str17 = accessToken11.toString();
        java.lang.String str18 = accessToken11.getUserName();
        java.lang.String str19 = authService4.extractErrorMessageForbidden(accessToken11);
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        java.lang.String str28 = accessToken26.getUserId();
        java.lang.String str29 = accessToken26.getClientId();
        boolean boolean30 = accessToken26.isClientOnly();
        java.lang.String str31 = accessToken26.getRefreshToken();
        java.lang.String str32 = authService4.extractErrorMessageForbidden(accessToken26);
        org.osiam.client.oauth.AccessToken.Builder builder35 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date36 = null;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setRefreshTokenExpiresAt(date36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder35.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken40 = builder39.build();
        java.util.Date date41 = accessToken40.getExpiresAt();
        java.util.Date date42 = accessToken40.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            authService4.revokeAllAccessTokens("PATCH", accessToken40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(authService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str17, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(accessToken40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02386");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader4 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer5 = scopeDeserializer0.getDelegatee();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.core.JsonParser jsonParser7 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext8 = null;
        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeserializer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj10 = scopeDeserializer0.deserializeWithType(jsonParser7, deserializationContext8, typeDeserializer9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(objectIdReader4);
        org.junit.Assert.assertNull(wildcardJsonDeserializer5);
        org.junit.Assert.assertNull(scopeSet6);
    }

    @Test
    public void test02387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02387");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = osiamGroupService2.extractErrorMessageUnauthorized("DELETE", statusType4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
    }

    @Test
    public void test02388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02388");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getClientId();
        java.lang.String str17 = accessToken13.getClientId();
        java.util.Date date18 = accessToken13.getRefreshTokenExpiresAt();
        java.util.Date date19 = accessToken13.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group20 = osiamGroupService3.getResource("descending", accessToken13);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02389");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder6.filter("Cannot connect to server");
        java.lang.Class<?> wildcardClass11 = queryBuilder10.getClass();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test02390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02390");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder0.filter("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder0.count((int) (short) 10);
        org.osiam.client.query.Query query7 = queryBuilder6.build();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(query7);
    }

    @Test
    public void test02391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02391");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.resources.scim.Group group4 = null;
        org.osiam.client.AuthService.Builder builder6 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        java.util.Date date17 = accessToken16.getExpiresAt();
        java.lang.String str18 = accessToken16.getRefreshToken();
        java.lang.String str19 = accessToken16.getType();
        java.lang.String str20 = accessToken16.getClientId();
        java.lang.String str21 = accessToken16.getUserName();
        java.lang.String str22 = accessToken16.toString();
        java.lang.String str23 = accessToken16.getUserName();
        java.lang.String str24 = authService9.extractErrorMessageForbidden(accessToken16);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group25 = osiamGroupService3.createGroup(group4, accessToken16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(authService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str22, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Insufficient scopes: []" + "'", str24, "Insufficient scopes: []");
    }

    @Test
    public void test02392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02392");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        boolean boolean29 = accessToken28.isRefreshTokenExpired();
        java.lang.String str30 = accessToken28.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet31 = accessToken28.getScopes();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken28);
        java.lang.String str33 = accessToken28.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user34 = osiamConnector7.getCurrentUser(accessToken28);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(scopeSet31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test02393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02393");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.resources.scim.Group group5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        java.lang.String str15 = accessToken12.getToken();
        java.lang.String str16 = accessToken12.getClientId();
        boolean boolean17 = accessToken12.isExpired();
        boolean boolean18 = accessToken12.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group19 = osiamGroupService4.createResource(group5, accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Bearer " + "'", str15, "Bearer ");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test02394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02394");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.AuthService.Builder builder8 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientId("ME");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder16 = builder14.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService17 = builder16.build();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.addScope(scope20);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException24 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean25 = scope22.equals((java.lang.Object) invalidAttributeException24);
        java.lang.String str26 = scope22.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder19.addScope(scope22);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder35 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.addScope(scope36);
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException40 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean41 = scope38.equals((java.lang.Object) invalidAttributeException40);
        java.lang.String str42 = scope38.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder35.addScope(scope38);
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder31.addScope(scope38);
        org.osiam.client.oauth.AccessToken.Builder builder46 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.addScope(scope47);
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException51 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean52 = scope49.equals((java.lang.Object) invalidAttributeException51);
        java.lang.String str53 = scope49.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder46.addScope(scope49);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder62 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope63 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.addScope(scope63);
        org.osiam.client.oauth.Scope scope65 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException67 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean68 = scope65.equals((java.lang.Object) invalidAttributeException67);
        java.lang.String str69 = scope65.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder62.addScope(scope65);
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder58.addScope(scope65);
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder31.addScope(scope65);
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder72.setType("");
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder72.setClientId("Insufficient scopes: []");
        org.osiam.client.oauth.Scope scope77 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str78 = scope77.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder72.addScope(scope77);
        org.osiam.client.oauth.Scope[] scopeArray80 = new org.osiam.client.oauth.Scope[] { scope77 };
        java.net.URI uRI81 = authService17.getAuthorizationUri(scopeArray80);
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI82 = authService6.getAuthorizationUri(scopeArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Can't create the login uri: redirect URI was not set.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(authService17);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GET" + "'", str26, "GET");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GET" + "'", str42, "GET");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "GET" + "'", str53, "GET");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(scope63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(scope65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "GET" + "'", str69, "GET");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(scope77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "PUT" + "'", str78, "PUT");
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(scopeArray80);
        org.junit.Assert.assertNotNull(uRI81);
    }

    @Test
    public void test02395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02395");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        boolean boolean25 = accessToken24.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet26 = accessToken24.getScopes();
        boolean boolean27 = accessToken24.isClientOnly();
        java.lang.String str28 = accessToken24.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList29 = osiamConnector17.getAllGroups(accessToken24);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(scopeSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test02396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02396");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.getSortOrder();
        java.lang.String str30 = query24.getAttributes();
        boolean boolean31 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.OsiamConnector.Builder builder32 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder34 = builder32.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder36 = builder34.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder38 = builder36.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder40 = builder36.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder42 = builder36.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder44 = builder42.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder46 = builder42.setClientRedirectUri("PUT");
        boolean boolean47 = accessToken12.equals((java.lang.Object) builder46);
        java.lang.String str48 = osiamGroupService5.extractErrorMessageForbidden(accessToken12);
        org.osiam.client.OsiamConnector.Builder builder49 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder51 = builder49.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder53 = builder51.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder55 = builder53.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector56 = builder55.build();
        org.osiam.client.query.QueryBuilder queryBuilder57 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder59 = queryBuilder57.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder61 = queryBuilder59.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder63 = queryBuilder59.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder65 = queryBuilder63.descending("hi!");
        org.osiam.client.query.Query query66 = queryBuilder65.build();
        java.lang.String str67 = query66.toString();
        java.lang.String str68 = query66.toString();
        java.lang.String str69 = query66.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder70 = osiamConnector56.createQueryBuilder(query66);
        java.lang.String str71 = query66.getAttributes();
        java.lang.String str72 = query66.getFilter();
        org.osiam.client.oauth.AccessToken.Builder builder74 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date75 = null;
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder74.setRefreshTokenExpiresAt(date75);
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder74.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken79 = builder78.build();
        java.util.Date date80 = accessToken79.getExpiresAt();
        java.lang.String str81 = accessToken79.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken79);
        java.lang.String str83 = accessToken79.getClientId();
        boolean boolean84 = accessToken79.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult85 = osiamGroupService5.searchResources(query66, accessToken79);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "descending" + "'", str29, "descending");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Authorization" + "'", str30, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Insufficient scopes: []" + "'", str48, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(osiamConnector56);
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(queryBuilder63);
        org.junit.Assert.assertNotNull(queryBuilder65);
        org.junit.Assert.assertNotNull(query66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str67, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str68, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(queryBuilder70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Authorization" + "'", str71, "Authorization");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(accessToken79);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test02397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02397");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientId("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setEndpoint("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector osiamConnector19 = builder18.build();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        java.lang.String str27 = accessToken26.toString();
        java.lang.String str28 = accessToken26.getClientId();
        org.osiam.client.OsiamConnector.Builder builder29 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder31 = builder29.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder33 = builder31.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder35 = builder33.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector36 = builder35.build();
        org.osiam.client.query.QueryBuilder queryBuilder37 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder37.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder43 = queryBuilder39.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.descending("hi!");
        org.osiam.client.query.Query query46 = queryBuilder45.build();
        java.lang.String str47 = query46.toString();
        java.lang.String str48 = query46.toString();
        java.lang.String str49 = query46.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder50 = osiamConnector36.createQueryBuilder(query46);
        org.osiam.client.query.QueryBuilder queryBuilder51 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder53 = queryBuilder51.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder55 = queryBuilder53.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder57 = queryBuilder53.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder59 = queryBuilder57.descending("hi!");
        org.osiam.client.query.Query query60 = queryBuilder59.build();
        org.osiam.client.query.QueryBuilder queryBuilder61 = osiamConnector36.createQueryBuilder(query60);
        boolean boolean62 = accessToken26.equals((java.lang.Object) queryBuilder61);
        java.util.Date date63 = accessToken26.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList64 = osiamConnector19.getAllUsers(accessToken26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str27, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(osiamConnector36);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(query46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str47, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str48, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder53);
        org.junit.Assert.assertNotNull(queryBuilder55);
        org.junit.Assert.assertNotNull(queryBuilder57);
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(query60);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02398");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector9.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        org.osiam.client.query.Query query21 = queryBuilder19.build();
        long long22 = query21.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder23 = osiamConnector9.createQueryBuilder(query21);
        org.osiam.resources.scim.Group group25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.addScope(scope28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException32 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean33 = scope30.equals((java.lang.Object) invalidAttributeException32);
        java.lang.String str34 = scope30.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder27.addScope(scope30);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder41.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken46 = builder45.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken46);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken46);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group49 = osiamConnector9.replaceGroup("", group25, accessToken46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "GET" + "'", str34, "GET");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(accessToken46);
    }

    @Test
    public void test02399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02399");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        java.lang.Class<?> wildcardClass6 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer7 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer8 = scopeDeserializer0.unwrappingDeserializer(nameTransformer7);
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer9 = new org.osiam.client.helper.ScopeDeserializer();
        java.util.Collection<java.lang.Object> objCollection10 = scopeDeserializer9.getKnownPropertyNames();
        java.util.Collection<java.lang.Object> objCollection11 = scopeDeserializer9.getKnownPropertyNames();
        java.util.Collection<java.lang.Object> objCollection12 = scopeDeserializer9.getKnownPropertyNames();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer13 = scopeDeserializer0.replaceDelegatee((com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeDeserializer9);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer8);
        org.junit.Assert.assertNull(objCollection10);
        org.junit.Assert.assertNull(objCollection11);
        org.junit.Assert.assertNull(objCollection12);
    }

    @Test
    public void test02400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02400");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setResourceServerEndpoint("GET POST PUT PATCH DELETE");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.descending("hi!");
        org.osiam.client.query.Query query27 = queryBuilder26.build();
        java.lang.String str28 = query27.toString();
        java.lang.String str29 = query27.getSortOrder();
        java.lang.String str30 = query27.getFilter();
        java.lang.String str31 = query27.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector17.createQueryBuilder(query27);
        org.osiam.client.oauth.AccessToken accessToken34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user35 = osiamConnector17.getUser("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", accessToken34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(query27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str28, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "descending" + "'", str29, "descending");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "descending" + "'", str31, "descending");
        org.junit.Assert.assertNotNull(queryBuilder32);
    }

    @Test
    public void test02401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02401");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService3.targetEndpoint;
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        int int28 = query24.getCount();
        int int29 = query24.getCount();
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken36 = builder35.build();
        java.util.Date date37 = accessToken36.getExpiresAt();
        java.lang.String str38 = accessToken36.getUserName();
        java.lang.String str39 = accessToken36.getUserName();
        org.osiam.client.oauth.AccessToken.Builder builder41 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date42 = null;
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setRefreshTokenExpiresAt(date42);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder41.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken46 = builder45.build();
        boolean boolean47 = accessToken46.isRefreshTokenExpired();
        java.lang.String str48 = accessToken46.getClientId();
        boolean boolean49 = accessToken36.equals((java.lang.Object) accessToken46);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult50 = osiamGroupService3.searchResources(query24, accessToken36);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(accessToken36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(accessToken46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test02402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02402");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        boolean boolean53 = scopeSerializer0.usesObjectId();
        boolean boolean54 = scopeSerializer0.usesObjectId();
        org.osiam.client.helper.ScopeSerializer scopeSerializer55 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean56 = scopeSerializer55.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder58 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date59 = null;
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setRefreshTokenExpiresAt(date59);
        org.osiam.client.oauth.Scope scope61 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope62 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException64 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean65 = scope62.equals((java.lang.Object) invalidAttributeException64);
        java.lang.String str66 = scope62.getValue();
        org.osiam.client.oauth.Scope scope67 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope68 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str69 = scope68.toString();
        org.osiam.client.oauth.Scope scope70 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope71 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str72 = scope71.getValue();
        java.lang.String str73 = scope71.getValue();
        org.osiam.client.oauth.Scope scope74 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException76 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean77 = scope74.equals((java.lang.Object) invalidAttributeException76);
        java.lang.String str78 = scope74.getValue();
        org.osiam.client.oauth.Scope scope79 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope80 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope81 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope82 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException84 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean85 = scope82.equals((java.lang.Object) invalidAttributeException84);
        org.osiam.client.oauth.Scope scope86 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope87 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope88 = org.osiam.client.oauth.Scope.GET;
        boolean boolean90 = scope88.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope91 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray92 = new org.osiam.client.oauth.Scope[] { scope61, scope62, scope67, scope68, scope70, scope71, scope74, scope79, scope80, scope81, scope82, scope86, scope87, scope88, scope91 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet93 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet93, scopeArray92);
        org.osiam.client.oauth.AccessToken.Builder builder95 = builder58.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet93);
        boolean boolean96 = scopeSerializer55.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet93);
        boolean boolean97 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet93);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(scope61);
        org.junit.Assert.assertNotNull(scope62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "GET" + "'", str66, "GET");
        org.junit.Assert.assertNotNull(scope67);
        org.junit.Assert.assertNotNull(scope68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ME" + "'", str69, "ME");
        org.junit.Assert.assertNotNull(scope70);
        org.junit.Assert.assertNotNull(scope71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "PATCH" + "'", str72, "PATCH");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "PATCH" + "'", str73, "PATCH");
        org.junit.Assert.assertNotNull(scope74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "GET" + "'", str78, "GET");
        org.junit.Assert.assertNotNull(scope79);
        org.junit.Assert.assertNotNull(scope80);
        org.junit.Assert.assertNotNull(scope81);
        org.junit.Assert.assertNotNull(scope82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(scope86);
        org.junit.Assert.assertNotNull(scope87);
        org.junit.Assert.assertNotNull(scope88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(scope91);
        org.junit.Assert.assertNotNull(scopeArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test02403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02403");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector.Builder builder12 = builder2.setEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector osiamConnector13 = builder2.build();
        org.osiam.client.OsiamConnector.Builder builder14 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector19 = builder18.build();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        java.lang.String str28 = accessToken26.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder29 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder31.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.descending("hi!");
        org.osiam.client.query.Query query38 = queryBuilder37.build();
        java.lang.String str39 = query38.toString();
        java.lang.String str40 = query38.getSortOrder();
        java.lang.String str41 = query38.getSortBy();
        java.lang.String str42 = query38.getFilter();
        java.lang.String str43 = query38.toString();
        boolean boolean44 = accessToken26.equals((java.lang.Object) query38);
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector19.createQueryBuilder(query38);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.getAttributes();
        java.lang.String str57 = query55.toString();
        java.lang.String str58 = query55.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder59 = osiamConnector19.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder60 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder62 = queryBuilder60.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder62.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder66 = queryBuilder64.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query67 = queryBuilder64.build();
        org.osiam.client.query.QueryBuilder queryBuilder68 = osiamConnector19.createQueryBuilder(query67);
        java.lang.String str69 = query67.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder70 = osiamConnector13.createQueryBuilder(query67);
        org.osiam.client.query.QueryBuilder queryBuilder71 = osiamConnector13.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder74 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date75 = null;
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder74.setRefreshTokenExpiresAt(date75);
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder74.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken79 = builder78.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken79);
        java.util.Date date81 = accessToken79.getExpiresAt();
        boolean boolean82 = accessToken79.isRefreshTokenExpired();
        java.util.Date date83 = accessToken79.getExpiresAt();
        java.lang.String str84 = accessToken79.getUserName();
        boolean boolean85 = accessToken79.isRefreshTokenExpired();
        java.util.Date date86 = accessToken79.getRefreshTokenExpiresAt();
        java.lang.String str87 = accessToken79.getToken();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector13.deleteGroup("authorization_code", accessToken79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(query38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str39, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "descending" + "'", str40, "descending");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Authorization" + "'", str56, "Authorization");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str57, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "descending" + "'", str58, "descending");
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertNotNull(query67);
        org.junit.Assert.assertNotNull(queryBuilder68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(queryBuilder70);
        org.junit.Assert.assertNotNull(queryBuilder71);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(accessToken79);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Bearer " + "'", str87, "Bearer ");
    }

    @Test
    public void test02404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02404");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.OsiamConnector.Builder builder7 = builder4.setClientId("GET POST PUT PATCH DELETE");
        org.osiam.client.OsiamConnector.Builder builder9 = builder7.setAuthServerEndpoint("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.OsiamClientException: ME");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test02405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02405");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector.Builder builder12 = builder2.setEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector osiamConnector13 = builder2.build();
        org.osiam.client.OsiamConnector.Builder builder14 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector19 = builder18.build();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        java.lang.String str28 = accessToken26.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder29 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder31.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.descending("hi!");
        org.osiam.client.query.Query query38 = queryBuilder37.build();
        java.lang.String str39 = query38.toString();
        java.lang.String str40 = query38.getSortOrder();
        java.lang.String str41 = query38.getSortBy();
        java.lang.String str42 = query38.getFilter();
        java.lang.String str43 = query38.toString();
        boolean boolean44 = accessToken26.equals((java.lang.Object) query38);
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector19.createQueryBuilder(query38);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.getAttributes();
        java.lang.String str57 = query55.toString();
        java.lang.String str58 = query55.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder59 = osiamConnector19.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder60 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder62 = queryBuilder60.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder62.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder66 = queryBuilder64.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query67 = queryBuilder64.build();
        org.osiam.client.query.QueryBuilder queryBuilder68 = osiamConnector19.createQueryBuilder(query67);
        java.lang.String str69 = query67.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder70 = osiamConnector13.createQueryBuilder(query67);
        org.osiam.client.query.QueryBuilder queryBuilder71 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder73 = queryBuilder71.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder75 = queryBuilder73.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder77 = queryBuilder73.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder79 = queryBuilder77.descending("hi!");
        org.osiam.client.query.Query query80 = queryBuilder79.build();
        java.lang.String str81 = query80.getAttributes();
        java.lang.String str82 = query80.toString();
        java.lang.String str83 = query80.getSortOrder();
        java.lang.String str84 = query80.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder85 = osiamConnector13.createQueryBuilder(query80);
        org.osiam.client.oauth.AccessToken.Builder builder88 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date89 = null;
        org.osiam.client.oauth.AccessToken.Builder builder90 = builder88.setRefreshTokenExpiresAt(date89);
        org.osiam.client.oauth.AccessToken.Builder builder92 = builder88.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken93 = builder92.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken93);
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector13.deleteGroup("ADMIN", accessToken93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(query38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str39, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "descending" + "'", str40, "descending");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Authorization" + "'", str56, "Authorization");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str57, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "descending" + "'", str58, "descending");
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertNotNull(query67);
        org.junit.Assert.assertNotNull(queryBuilder68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(queryBuilder70);
        org.junit.Assert.assertNotNull(queryBuilder73);
        org.junit.Assert.assertNotNull(queryBuilder75);
        org.junit.Assert.assertNotNull(queryBuilder77);
        org.junit.Assert.assertNotNull(queryBuilder79);
        org.junit.Assert.assertNotNull(query80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Authorization" + "'", str81, "Authorization");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str82, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "descending" + "'", str83, "descending");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Authorization" + "'", str84, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder85);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(accessToken93);
    }

    @Test
    public void test02406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02406");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken8 = builder5.build();
        java.util.Date date9 = accessToken8.getExpiresAt();
        java.lang.String str10 = accessToken8.toString();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.addScope(scope13);
        boolean boolean15 = accessToken8.equals((java.lang.Object) builder12);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder12.setRefreshToken("GET POST PUT PATCH DELETE");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(accessToken8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str10, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test02407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02407");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setClientId("org.osiam.client.exception.UnauthorizedException: PATCH");
        java.lang.Class<?> wildcardClass14 = builder13.getClass();
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test02408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02408");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        java.lang.String str13 = accessToken11.getUserId();
        java.lang.String str14 = accessToken11.getClientId();
        boolean boolean15 = accessToken11.isClientOnly();
        java.lang.String str16 = accessToken11.getClientId();
        java.lang.String str17 = accessToken11.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user18 = osiamUserService2.replaceUser("", user4, accessToken11);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test02409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02409");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector osiamConnector9 = builder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.descending("hi!");
        org.osiam.client.query.Query query19 = queryBuilder18.build();
        java.lang.String str20 = query19.toString();
        java.lang.String str21 = query19.getSortOrder();
        java.lang.String str22 = query19.getSortBy();
        org.osiam.client.query.Query query23 = query19.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder24 = osiamConnector9.createQueryBuilder(query23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken31 = builder30.build();
        boolean boolean32 = accessToken31.isRefreshTokenExpired();
        boolean boolean33 = accessToken31.isClientOnly();
        java.lang.String str34 = accessToken31.getRefreshToken();
        boolean boolean35 = accessToken31.isExpired();
        boolean boolean36 = accessToken31.isExpired();
        boolean boolean37 = accessToken31.isClientOnly();
        java.util.Date date38 = accessToken31.getExpiresAt();
        java.lang.String str39 = accessToken31.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user40 = osiamConnector9.getCurrentUser(accessToken31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str20, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "descending" + "'", str21, "descending");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(query23);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(accessToken31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test02410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02410");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder1.build();
        org.osiam.resources.scim.UpdateGroup updateGroup8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        java.lang.String str17 = accessToken15.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.descending("hi!");
        org.osiam.client.query.Query query27 = queryBuilder26.build();
        java.lang.String str28 = query27.toString();
        java.lang.String str29 = query27.getSortOrder();
        java.lang.String str30 = query27.getSortBy();
        java.lang.String str31 = query27.getFilter();
        java.lang.String str32 = query27.toString();
        boolean boolean33 = accessToken15.equals((java.lang.Object) query27);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group34 = osiamGroupService6.updateGroup("org.osiam.client.exception.UnauthorizedException: PATCH", updateGroup8, accessToken15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(query27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str28, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "descending" + "'", str29, "descending");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str32, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test02411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02411");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.toString();
        java.lang.String str23 = query20.toString();
        int int24 = query20.getCount();
        long long25 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder26 = osiamConnector7.createQueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        org.osiam.client.query.Query query37 = queryBuilder35.build();
        java.lang.String str38 = query37.getSortBy();
        java.lang.String str39 = query37.getFilter();
        int int40 = query37.getCount();
        long long41 = query37.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder42 = osiamConnector7.createQueryBuilder(query37);
        org.osiam.client.query.QueryBuilder queryBuilder43 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder45.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder47.count((int) (short) 0);
        org.osiam.client.query.Query query50 = queryBuilder49.build();
        org.osiam.client.query.QueryBuilder queryBuilder51 = new org.osiam.client.query.QueryBuilder(query50);
        org.osiam.client.oauth.AccessToken.Builder builder53 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date54 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.setRefreshTokenExpiresAt(date54);
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder53.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken58 = builder57.build();
        boolean boolean59 = accessToken58.isRefreshTokenExpired();
        java.lang.String str60 = accessToken58.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder61 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder63 = queryBuilder61.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder65 = queryBuilder63.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder67 = queryBuilder63.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder69 = queryBuilder67.descending("hi!");
        org.osiam.client.query.Query query70 = queryBuilder69.build();
        java.lang.String str71 = query70.toString();
        java.lang.String str72 = query70.getSortOrder();
        java.lang.String str73 = query70.getSortBy();
        java.lang.String str74 = query70.getFilter();
        java.lang.String str75 = query70.getSortOrder();
        java.lang.String str76 = query70.getAttributes();
        boolean boolean77 = accessToken58.equals((java.lang.Object) query70);
        org.osiam.client.OsiamConnector.Builder builder78 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder80 = builder78.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder82 = builder80.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder84 = builder82.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder86 = builder82.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder88 = builder82.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder90 = builder88.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder92 = builder88.setClientRedirectUri("PUT");
        boolean boolean93 = accessToken58.equals((java.lang.Object) builder92);
        java.lang.String str94 = accessToken58.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult95 = osiamConnector7.searchUsers(query50, accessToken58);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertNotNull(query37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(query50);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(accessToken58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(queryBuilder63);
        org.junit.Assert.assertNotNull(queryBuilder65);
        org.junit.Assert.assertNotNull(queryBuilder67);
        org.junit.Assert.assertNotNull(queryBuilder69);
        org.junit.Assert.assertNotNull(query70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str71, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "descending" + "'", str72, "descending");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "descending" + "'", str75, "descending");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Authorization" + "'", str76, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str94, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test02412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02412");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder3 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder3.setRefreshTokenExpiresAt(date4);
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder3.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException17 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean18 = scope15.equals((java.lang.Object) invalidAttributeException17);
        java.lang.String str19 = scope15.getValue();
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str22 = scope21.toString();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str25 = scope24.getValue();
        java.lang.String str26 = scope24.getValue();
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException29 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean30 = scope27.equals((java.lang.Object) invalidAttributeException29);
        java.lang.String str31 = scope27.getValue();
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException37 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean38 = scope35.equals((java.lang.Object) invalidAttributeException37);
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.GET;
        boolean boolean43 = scope41.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray45 = new org.osiam.client.oauth.Scope[] { scope14, scope15, scope20, scope21, scope23, scope24, scope27, scope32, scope33, scope34, scope35, scope39, scope40, scope41, scope44 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet46 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet46, scopeArray45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder11.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder9.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet46);
        boolean boolean50 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet46);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper51 = null;
        com.fasterxml.jackson.databind.JavaType javaType52 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper51, javaType52);
        boolean boolean54 = scopeSerializer0.usesObjectId();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GET" + "'", str19, "GET");
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ME" + "'", str22, "ME");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PATCH" + "'", str25, "PATCH");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PATCH" + "'", str26, "PATCH");
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "GET" + "'", str31, "GET");
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertNotNull(scopeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test02413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02413");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        java.lang.String str21 = accessToken20.toString();
        java.lang.String str22 = accessToken20.getClientId();
        java.util.Date date23 = accessToken20.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group24 = osiamGroupService3.getGroup("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]", accessToken20);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str21, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02414");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.getSortOrder();
        java.lang.String str23 = query20.getSortBy();
        java.lang.String str24 = query20.getFilter();
        java.lang.String str25 = query20.getSortOrder();
        java.lang.String str26 = query20.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder(query20);
        long long28 = query20.getStartIndex();
        org.osiam.client.query.Query query29 = query20.nextPage();
        java.lang.String str30 = query20.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder31 = new org.osiam.client.query.QueryBuilder(query20);
        java.lang.String str32 = query20.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder33 = osiamConnector7.createQueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.attributes("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.query.Query query36 = queryBuilder33.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "descending" + "'", str22, "descending");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "descending" + "'", str25, "descending");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Authorization" + "'", str26, "Authorization");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(query29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Authorization" + "'", str32, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
    }

    @Test
    public void test02415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02415");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget7 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = osiamGroupService2.extractErrorMessage("org.osiam.client.exception.NoResultException: authorization_code", statusType9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(webTarget7);
    }

    @Test
    public void test02416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02416");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        boolean boolean1 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer3 = scopeDeserializer0.unwrappingDeserializer(nameTransformer2);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader4 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.core.JsonParser jsonParser5 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext6 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer7 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean8 = scopeSerializer7.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass9 = scopeSerializer7.handledType();
        org.osiam.client.helper.ScopeSerializer scopeSerializer10 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException18 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean19 = scope16.equals((java.lang.Object) invalidAttributeException18);
        java.lang.String str20 = scope16.getValue();
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str23 = scope22.toString();
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str26 = scope25.getValue();
        java.lang.String str27 = scope25.getValue();
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException30 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean31 = scope28.equals((java.lang.Object) invalidAttributeException30);
        java.lang.String str32 = scope28.getValue();
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException38 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean39 = scope36.equals((java.lang.Object) invalidAttributeException38);
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.GET;
        boolean boolean44 = scope42.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray46 = new org.osiam.client.oauth.Scope[] { scope15, scope16, scope21, scope22, scope24, scope25, scope28, scope33, scope34, scope35, scope36, scope40, scope41, scope42, scope45 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet47 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet47, scopeArray46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder12.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet47);
        boolean boolean50 = scopeSerializer10.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet47);
        org.osiam.client.oauth.AccessToken.Builder builder52 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setRefreshTokenExpiresAt(date53);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder52.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken57 = builder56.build();
        boolean boolean58 = accessToken57.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet59 = accessToken57.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator60 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider61 = null;
        scopeSerializer10.serialize(scopeSet59, jsonGenerator60, serializerProvider61);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider63 = null;
        org.osiam.client.oauth.AccessToken.Builder builder65 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date66 = null;
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder65.setRefreshTokenExpiresAt(date66);
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder65.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken70 = builder69.build();
        boolean boolean71 = accessToken70.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet72 = accessToken70.getScopes();
        boolean boolean73 = scopeSerializer10.isEmpty(serializerProvider63, scopeSet72);
        boolean boolean74 = scopeSerializer7.isEmpty(scopeSet72);
        boolean boolean75 = scopeSerializer7.isUnwrappingSerializer();
        org.osiam.client.OsiamGroupService.Builder builder77 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService78 = builder77.build();
        org.osiam.client.oauth.AccessToken.Builder builder80 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date81 = null;
        org.osiam.client.oauth.AccessToken.Builder builder82 = builder80.setRefreshTokenExpiresAt(date81);
        org.osiam.client.oauth.AccessToken.Builder builder84 = builder80.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken85 = builder84.build();
        boolean boolean86 = accessToken85.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet87 = accessToken85.getScopes();
        java.lang.String str88 = osiamGroupService78.extractErrorMessageForbidden(accessToken85);
        boolean boolean89 = accessToken85.isClientOnly();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet90 = accessToken85.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator91 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider92 = null;
        scopeSerializer7.serialize(scopeSet90, jsonGenerator91, serializerProvider92);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet94 = scopeDeserializer0.deserialize(jsonParser5, deserializationContext6, scopeSet90);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Can not update object of type java.util.HashSet (by deserializer of type org.osiam.client.helper.ScopeDeserializer)");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer3);
        org.junit.Assert.assertNull(objectIdReader4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(scopeSetClass9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GET" + "'", str20, "GET");
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ME" + "'", str23, "ME");
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PATCH" + "'", str26, "PATCH");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PATCH" + "'", str27, "PATCH");
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "GET" + "'", str32, "GET");
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertNotNull(scopeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(accessToken57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(scopeSet59);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(accessToken70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(scopeSet72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(osiamGroupService78);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(accessToken85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(scopeSet87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Insufficient scopes: []" + "'", str88, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(scopeSet90);
    }

    @Test
    public void test02417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02417");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Bearer ");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.lang.String str10 = accessToken9.toString();
        java.util.Date date11 = accessToken9.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList12 = osiamGroupService2.getAllGroups(accessToken9);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str10, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02418");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("password");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder4 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        java.util.Date date13 = accessToken12.getExpiresAt();
        java.lang.String str14 = accessToken12.getRefreshToken();
        java.lang.String str15 = accessToken12.getType();
        java.lang.String str16 = accessToken12.getClientId();
        java.lang.String str17 = accessToken12.getUserName();
        java.lang.String str18 = osiamGroupService5.extractErrorMessageForbidden(accessToken12);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user19 = osiamUserService2.getCurrentUser(accessToken12);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
    }

    @Test
    public void test02419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02419");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder8.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.attributes("Cannot connect to server");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder11.startIndex((long) (byte) 10);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(0);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.startIndex((long) 10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.attributes("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder17.filter("");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
    }

    @Test
    public void test02420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02420");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        java.util.Date date18 = accessToken17.getExpiresAt();
        java.lang.String str19 = accessToken17.getRefreshToken();
        java.lang.String str20 = accessToken17.getType();
        java.lang.String str21 = accessToken17.getClientId();
        java.lang.String str22 = accessToken17.getUserName();
        java.lang.String str23 = accessToken17.toString();
        java.lang.String str24 = accessToken17.getUserName();
        java.lang.String str25 = accessToken17.getType();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector9.revokeAllAccessTokens("PATCH", accessToken17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str23, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test02421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02421");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        java.lang.String str23 = accessToken21.getUserName();
        java.lang.String str24 = accessToken21.toString();
        java.lang.String str25 = osiamGroupService2.extractErrorMessageForbidden(accessToken21);
        org.osiam.resources.scim.Group group27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date30 = null;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setRefreshTokenExpiresAt(date30);
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken34 = builder33.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken34);
        java.util.Date date36 = accessToken34.getExpiresAt();
        boolean boolean37 = accessToken34.isRefreshTokenExpired();
        java.util.Date date38 = accessToken34.getExpiresAt();
        java.lang.String str39 = accessToken34.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group40 = osiamGroupService2.updateResource("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", group27, accessToken34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str24, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(accessToken34);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test02422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02422");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.resources.scim.Group group5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        java.util.Date date13 = accessToken12.getExpiresAt();
        java.lang.String str14 = accessToken12.getRefreshToken();
        java.lang.String str15 = accessToken12.getType();
        java.lang.String str16 = accessToken12.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group17 = osiamGroupService3.replaceGroup("Bearer ", group5, accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test02423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02423");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.lang.String str11 = accessToken9.getUserId();
        java.lang.String str12 = accessToken9.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser13 = osiamUserService2.getCurrentUserBasic(accessToken9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test02424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02424");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setEndpoint("org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test02425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02425");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector9.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.getSortOrder();
        java.lang.String str23 = query20.getSortBy();
        java.lang.String str24 = query20.getFilter();
        java.lang.String str25 = query20.getSortOrder();
        java.lang.String str26 = query20.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder(query20);
        long long28 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder29 = new org.osiam.client.query.QueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder30 = osiamConnector9.createQueryBuilder(query20);
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date34 = null;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder33.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken38 = builder37.build();
        java.util.Date date39 = accessToken38.getExpiresAt();
        java.lang.String str40 = accessToken38.getRefreshToken();
        java.lang.String str41 = accessToken38.getType();
        java.lang.String str42 = accessToken38.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group43 = osiamConnector9.getGroup("", accessToken38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "descending" + "'", str22, "descending");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "descending" + "'", str25, "descending");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Authorization" + "'", str26, "Authorization");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test02426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02426");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.resources.scim.Group group5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        boolean boolean14 = accessToken12.isClientOnly();
        java.lang.String str15 = accessToken12.getRefreshToken();
        boolean boolean16 = accessToken12.isExpired();
        boolean boolean17 = accessToken12.isExpired();
        boolean boolean18 = accessToken12.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group19 = osiamGroupService4.createGroup(group5, accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test02427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02427");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector osiamConnector11 = builder2.build();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        java.util.Date date19 = accessToken18.getExpiresAt();
        java.lang.String str20 = accessToken18.getUserName();
        java.lang.String str21 = accessToken18.toString();
        java.lang.String str22 = accessToken18.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user23 = osiamConnector11.getCurrentUser(accessToken18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(osiamConnector11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str21, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test02428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02428");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        java.lang.String str23 = accessToken21.getUserName();
        java.lang.String str24 = accessToken21.toString();
        java.lang.String str25 = osiamGroupService2.extractErrorMessageForbidden(accessToken21);
        org.osiam.resources.scim.Group group26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        java.util.Date date34 = accessToken33.getExpiresAt();
        java.lang.String str35 = accessToken33.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken33);
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        boolean boolean44 = accessToken43.isRefreshTokenExpired();
        boolean boolean45 = accessToken43.isClientOnly();
        java.lang.String str46 = accessToken43.getClientId();
        boolean boolean47 = accessToken43.isClientOnly();
        boolean boolean48 = accessToken33.equals((java.lang.Object) accessToken43);
        org.osiam.client.query.QueryBuilder queryBuilder49 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder49.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder53 = queryBuilder51.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder55 = queryBuilder51.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder57 = queryBuilder55.descending("hi!");
        org.osiam.client.query.Query query58 = queryBuilder57.build();
        org.osiam.client.query.Query query59 = queryBuilder57.build();
        org.osiam.client.query.QueryBuilder queryBuilder61 = queryBuilder57.ascending("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        boolean boolean62 = accessToken33.equals((java.lang.Object) "org.osiam.client.exception.ConnectionInitializationException: PATCH");
        java.lang.String str63 = accessToken33.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group64 = osiamGroupService2.createResource(group26, accessToken33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str24, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(queryBuilder53);
        org.junit.Assert.assertNotNull(queryBuilder55);
        org.junit.Assert.assertNotNull(queryBuilder57);
        org.junit.Assert.assertNotNull(query58);
        org.junit.Assert.assertNotNull(query59);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
    }

    @Test
    public void test02429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02429");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService4 = builder3.build();
        org.osiam.client.AuthService.Builder builder6 = builder3.setClientRedirectUri("PATCH");
        org.osiam.client.AuthService authService7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        java.util.Date date15 = accessToken14.getExpiresAt();
        java.lang.String str16 = accessToken14.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet17 = accessToken14.getScopes();
        java.util.Date date18 = accessToken14.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken19 = authService7.validateAccessToken(accessToken14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(authService4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(authService7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(scopeSet17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02430");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        java.util.Date date17 = accessToken16.getExpiresAt();
        java.lang.String str18 = accessToken16.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken16);
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        boolean boolean28 = accessToken26.isClientOnly();
        java.lang.String str29 = accessToken26.getClientId();
        boolean boolean30 = accessToken26.isClientOnly();
        boolean boolean31 = accessToken16.equals((java.lang.Object) accessToken26);
        java.util.Date date32 = accessToken26.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList33 = osiamConnector7.getAllGroups(accessToken26);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02431");
        org.osiam.client.oauth.Scope scope0 = org.osiam.client.oauth.Scope.ALL;
        java.lang.String str1 = scope0.toString();
        java.lang.String str2 = scope0.toString();
        org.junit.Assert.assertNotNull(scope0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GET POST PUT PATCH DELETE" + "'", str1, "GET POST PUT PATCH DELETE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GET POST PUT PATCH DELETE" + "'", str2, "GET POST PUT PATCH DELETE");
    }

    @Test
    public void test02432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02432");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        boolean boolean13 = accessToken11.isClientOnly();
        java.lang.String str14 = accessToken11.getClientId();
        boolean boolean15 = accessToken11.isClientOnly();
        java.lang.String str16 = accessToken11.getToken();
        java.lang.String str17 = osiamGroupService4.extractErrorMessageForbidden(accessToken11);
        javax.ws.rs.core.Response.StatusType statusType19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = osiamGroupService4.extractErrorMessage("org.osiam.client.exception.UnauthorizedException: GET", statusType19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Bearer " + "'", str16, "Bearer ");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Insufficient scopes: []" + "'", str17, "Insufficient scopes: []");
    }

    @Test
    public void test02433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02433");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        java.lang.String str14 = osiamGroupService4.extractErrorMessageForbidden(accessToken12);
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken24 = builder21.build();
        org.osiam.client.oauth.AccessToken accessToken25 = builder21.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken25);
        java.lang.String str27 = accessToken25.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService4.deleteGroup("org.osiam.client.exception.NoResultException: authorization_code", accessToken25);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test02434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02434");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setAuthServerEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setResourceServerEndpoint("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector15 = builder10.build();
        org.osiam.client.AuthService.Builder builder17 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder19 = builder17.setClientId("ME");
        org.osiam.client.AuthService.Builder builder21 = builder19.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService26 = builder25.build();
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        boolean boolean34 = accessToken33.isRefreshTokenExpired();
        java.lang.String str35 = accessToken33.getUserId();
        java.lang.String str36 = accessToken33.getToken();
        java.lang.String str37 = authService26.extractErrorMessageForbidden(accessToken33);
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str39 = scope38.getValue();
        java.lang.String str40 = scope38.toString();
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray42 = new org.osiam.client.oauth.Scope[] { scope38, scope41 };
        java.net.URI uRI43 = authService26.getAuthorizationUri(scopeArray42);
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI44 = osiamConnector15.getAuthorizationUri(scopeArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Can't create the login uri: redirect URI was not set.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(authService26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Bearer " + "'", str36, "Bearer ");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Insufficient scopes: []" + "'", str37, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PATCH" + "'", str39, "PATCH");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PATCH" + "'", str40, "PATCH");
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertNotNull(scopeArray42);
        org.junit.Assert.assertNotNull(uRI43);
    }

    @Test
    public void test02435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02435");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.resources.scim.Group group32 = null;
        org.osiam.client.AuthService.Builder builder34 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder36 = builder34.setClientId("ME");
        org.osiam.client.AuthService.Builder builder38 = builder36.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService39 = builder38.build();
        org.osiam.client.OsiamGroupService.Builder builder41 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService42 = builder41.build();
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken49 = builder48.build();
        boolean boolean50 = accessToken49.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet51 = accessToken49.getScopes();
        java.lang.String str52 = osiamGroupService42.extractErrorMessageForbidden(accessToken49);
        boolean boolean53 = accessToken49.isClientOnly();
        java.lang.String str54 = authService39.extractErrorMessageForbidden(accessToken49);
        org.osiam.client.oauth.AccessToken.Builder builder56 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date57 = null;
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.setRefreshTokenExpiresAt(date57);
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder56.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder60.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken63 = builder60.build();
        java.lang.String str64 = accessToken63.toString();
        java.lang.String str65 = authService39.extractErrorMessageForbidden(accessToken63);
        org.osiam.client.oauth.AccessToken.Builder builder67 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date68 = null;
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder67.setRefreshTokenExpiresAt(date68);
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder67.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken72 = builder71.build();
        java.util.Date date73 = accessToken72.getExpiresAt();
        java.lang.String str74 = accessToken72.getRefreshToken();
        java.lang.String str75 = accessToken72.getType();
        java.lang.String str76 = accessToken72.getClientId();
        java.lang.String str77 = accessToken72.getUserName();
        java.lang.String str78 = authService39.extractErrorMessageForbidden(accessToken72);
        org.osiam.client.exception.UnauthorizedException unauthorizedException80 = new org.osiam.client.exception.UnauthorizedException("client_credentials");
        int int81 = unauthorizedException80.getHttpStatusCode();
        int int82 = unauthorizedException80.getHttpStatusCode();
        java.lang.Throwable[] throwableArray83 = unauthorizedException80.getSuppressed();
        boolean boolean84 = accessToken72.equals((java.lang.Object) unauthorizedException80);
        java.lang.String str85 = accessToken72.getType();
        java.util.Date date86 = accessToken72.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group87 = osiamConnector5.createGroup(group32, accessToken72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(authService39);
        org.junit.Assert.assertNotNull(osiamGroupService42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(scopeSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Insufficient scopes: []" + "'", str52, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Insufficient scopes: []" + "'", str54, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(accessToken63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str64, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Insufficient scopes: []" + "'", str65, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(accessToken72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Insufficient scopes: []" + "'", str78, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 401 + "'", int81 == 401);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 401 + "'", int82 == 401);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02436");
        org.osiam.client.exception.UnauthorizedException unauthorizedException1 = new org.osiam.client.exception.UnauthorizedException("PUT");
        org.osiam.client.exception.ForbiddenException forbiddenException4 = new org.osiam.client.exception.ForbiddenException("org.osiam.client.exception.ConnectionInitializationException: descending");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException5 = new org.osiam.client.exception.ConnectionInitializationException("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", (java.lang.Throwable) forbiddenException4);
        unauthorizedException1.addSuppressed((java.lang.Throwable) forbiddenException4);
    }

    @Test
    public void test02437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02437");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
    }

    @Test
    public void test02438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02438");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector9.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        org.osiam.client.query.Query query21 = queryBuilder19.build();
        long long22 = query21.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder23 = osiamConnector9.createQueryBuilder(query21);
        org.osiam.client.OsiamGroupService.Builder builder26 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService27 = builder26.build();
        org.osiam.client.OsiamGroupService osiamGroupService28 = builder26.build();
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken35);
        java.lang.String str37 = osiamGroupService28.extractErrorMessageForbidden(accessToken35);
        java.util.Date date38 = accessToken35.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken35);
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean41 = accessToken35.equals((java.lang.Object) scope40);
        java.util.Date date42 = accessToken35.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user43 = osiamConnector9.getUser("2024-03-22T13:51:20.388", accessToken35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(osiamGroupService27);
        org.junit.Assert.assertNotNull(osiamGroupService28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Insufficient scopes: []" + "'", str37, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02439");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken9);
        java.util.Date date11 = accessToken9.getExpiresAt();
        org.osiam.client.query.QueryBuilder queryBuilder12 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder14.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.descending("hi!");
        org.osiam.client.query.Query query21 = queryBuilder20.build();
        java.lang.String str22 = query21.toString();
        java.lang.String str23 = query21.getSortOrder();
        org.osiam.client.query.Query query24 = query21.nextPage();
        boolean boolean25 = accessToken9.equals((java.lang.Object) query21);
        java.lang.String str26 = accessToken9.getType();
        java.lang.String str27 = accessToken9.getType();
        boolean boolean28 = accessToken9.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList29 = osiamUserService2.getAllUsers(accessToken9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "descending" + "'", str23, "descending");
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test02440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02440");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("authorization_code");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.UpdateUser updateUser4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.util.Date date12 = accessToken11.getExpiresAt();
        java.lang.String str13 = accessToken11.getRefreshToken();
        java.lang.String str14 = accessToken11.getType();
        java.lang.String str15 = accessToken11.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user16 = osiamUserService2.updateUser("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", updateUser4, accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test02441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02441");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.toString();
        java.lang.String str23 = query20.toString();
        int int24 = query20.getCount();
        long long25 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder26 = osiamConnector7.createQueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        java.lang.String str37 = query36.toString();
        java.lang.String str38 = query36.getSortOrder();
        java.lang.String str39 = query36.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder40 = new org.osiam.client.query.QueryBuilder(query36);
        org.osiam.client.query.QueryBuilder queryBuilder41 = osiamConnector7.createQueryBuilder(query36);
        org.osiam.client.AuthService.Builder builder44 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder46 = builder44.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService47 = builder46.build();
        org.osiam.client.oauth.AccessToken.Builder builder49 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date50 = null;
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder49.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken54 = builder53.build();
        java.util.Date date55 = accessToken54.getExpiresAt();
        java.lang.String str56 = accessToken54.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken54);
        java.lang.String str58 = accessToken54.getClientId();
        boolean boolean59 = accessToken54.isRefreshTokenExpired();
        java.lang.String str60 = authService47.extractErrorMessageForbidden(accessToken54);
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector7.revokeAllAccessTokens("Cannot connect to server", accessToken54);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str37, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "descending" + "'", str38, "descending");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(authService47);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(accessToken54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Insufficient scopes: []" + "'", str60, "Insufficient scopes: []");
    }

    @Test
    public void test02442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02442");
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.AbstractOsiamService.Builder<org.osiam.resources.scim.User> userBuilder1 = new org.osiam.client.AbstractOsiamService.Builder<org.osiam.resources.scim.User>("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02443");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.OsiamConnector.Builder builder10 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder22 = builder18.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector23 = builder18.build();
        org.osiam.client.OsiamConnector.Builder builder24 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder26 = builder24.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder28 = builder26.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder30 = builder28.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector31 = builder30.build();
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.toString();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector31.createQueryBuilder(query41);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        org.osiam.client.query.QueryBuilder queryBuilder56 = osiamConnector31.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder57 = osiamConnector23.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder58 = osiamConnector9.createQueryBuilder(query55);
        org.osiam.client.oauth.AccessToken.Builder builder60 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date61 = null;
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder60.setRefreshTokenExpiresAt(date61);
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder60.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken65 = builder64.build();
        boolean boolean66 = accessToken65.isRefreshTokenExpired();
        boolean boolean67 = accessToken65.isClientOnly();
        java.lang.String str68 = accessToken65.getRefreshToken();
        boolean boolean69 = accessToken65.isExpired();
        boolean boolean70 = accessToken65.isExpired();
        java.lang.String str71 = accessToken65.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken72 = osiamConnector9.validateAccessToken(accessToken65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(osiamConnector23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(osiamConnector31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str42, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertNotNull(queryBuilder56);
        org.junit.Assert.assertNotNull(queryBuilder57);
        org.junit.Assert.assertNotNull(queryBuilder58);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(accessToken65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
    }

    @Test
    public void test02444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02444");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.getSortOrder();
        java.lang.String str20 = query17.getSortBy();
        java.lang.String str21 = query17.getFilter();
        java.lang.String str22 = query17.getSortOrder();
        java.lang.String str23 = query17.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder24 = new org.osiam.client.query.QueryBuilder(query17);
        long long25 = query17.getStartIndex();
        org.osiam.client.query.Query query26 = query17.nextPage();
        long long27 = query26.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder28 = osiamConnector7.createQueryBuilder(query26);
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        boolean boolean36 = accessToken35.isRefreshTokenExpired();
        java.lang.String str37 = accessToken35.getUserId();
        java.lang.String str38 = accessToken35.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken39 = osiamConnector7.validateAccessToken(accessToken35);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "descending" + "'", str19, "descending");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "descending" + "'", str22, "descending");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Authorization" + "'", str23, "Authorization");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 11L + "'", long27 == 11L);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test02445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02445");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        boolean boolean25 = accessToken24.isRefreshTokenExpired();
        java.lang.String str26 = accessToken24.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        java.lang.String str37 = query36.toString();
        java.lang.String str38 = query36.getSortOrder();
        java.lang.String str39 = query36.getSortBy();
        java.lang.String str40 = query36.getFilter();
        java.lang.String str41 = query36.toString();
        boolean boolean42 = accessToken24.equals((java.lang.Object) query36);
        java.util.Date date43 = accessToken24.getExpiresAt();
        java.lang.String str44 = accessToken24.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser45 = osiamConnector17.getCurrentUserBasic(accessToken24);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str37, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "descending" + "'", str38, "descending");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str41, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test02446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02446");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        boolean boolean15 = accessToken14.isRefreshTokenExpired();
        java.lang.String str16 = accessToken14.getUserId();
        java.lang.String str17 = accessToken14.getClientId();
        java.lang.String str18 = accessToken14.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService6.deleteGroup("Bearer ", accessToken14);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test02447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02447");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group14 = osiamGroupService2.mapToResource("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
    }

    @Test
    public void test02448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02448");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setResourceServerEndpoint("GET POST PUT PATCH DELETE");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.descending("hi!");
        org.osiam.client.query.Query query27 = queryBuilder26.build();
        java.lang.String str28 = query27.toString();
        java.lang.String str29 = query27.getSortOrder();
        java.lang.String str30 = query27.getFilter();
        java.lang.String str31 = query27.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector17.createQueryBuilder(query27);
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        boolean boolean40 = accessToken39.isRefreshTokenExpired();
        boolean boolean41 = accessToken39.isClientOnly();
        java.lang.String str42 = accessToken39.getRefreshToken();
        boolean boolean43 = accessToken39.isExpired();
        boolean boolean44 = accessToken39.isRefreshTokenExpired();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken39);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken46 = osiamConnector17.validateAccessToken(accessToken39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(query27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str28, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "descending" + "'", str29, "descending");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "descending" + "'", str31, "descending");
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test02449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02449");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector osiamConnector11 = builder2.build();
        org.osiam.resources.scim.User user12 = null;
        org.osiam.client.oauth.AccessToken accessToken13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user14 = osiamConnector11.createUser(user12, accessToken13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(osiamConnector11);
    }

    @Test
    public void test02450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02450");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Bearer ");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.lang.String str11 = accessToken9.getUserId();
        java.lang.String str12 = accessToken9.getClientId();
        boolean boolean13 = accessToken9.isClientOnly();
        java.lang.String str14 = accessToken9.getClientId();
        java.lang.String str15 = accessToken9.getRefreshToken();
        java.lang.String str16 = accessToken9.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList17 = osiamGroupService2.getAllResources(accessToken9);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test02451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02451");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientId("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector21 = builder18.build();
        org.osiam.client.AuthService.Builder builder23 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientId("ME");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder29 = builder27.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder31 = builder29.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService32 = builder31.build();
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        boolean boolean40 = accessToken39.isRefreshTokenExpired();
        java.lang.String str41 = accessToken39.getUserId();
        java.lang.String str42 = accessToken39.getToken();
        java.lang.String str43 = authService32.extractErrorMessageForbidden(accessToken39);
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str45 = scope44.getValue();
        java.lang.String str46 = scope44.toString();
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray48 = new org.osiam.client.oauth.Scope[] { scope44, scope47 };
        java.net.URI uRI49 = authService32.getAuthorizationUri(scopeArray48);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken50 = osiamConnector21.retrieveAccessToken(scopeArray48);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(authService32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Bearer " + "'", str42, "Bearer ");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Insufficient scopes: []" + "'", str43, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PATCH" + "'", str45, "PATCH");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PATCH" + "'", str46, "PATCH");
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertNotNull(scopeArray48);
        org.junit.Assert.assertNotNull(uRI49);
    }

    @Test
    public void test02452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02452");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.resources.scim.UpdateUser updateUser7 = null;
        org.osiam.client.oauth.AccessToken accessToken8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user9 = osiamConnector5.updateUser("Query [attributes=Authorization, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=10]", updateUser7, accessToken8);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
    }

    @Test
    public void test02453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02453");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        java.lang.String str10 = scope4.toString();
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
    }

    @Test
    public void test02454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02454");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.getAttributes();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query41);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.toString();
        java.lang.String str57 = query55.toString();
        org.osiam.client.query.Query query58 = query55.nextPage();
        java.lang.String str59 = query55.toString();
        org.osiam.client.query.QueryBuilder queryBuilder60 = osiamConnector5.createQueryBuilder(query55);
        org.osiam.client.oauth.AccessToken accessToken62 = null;
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector5.deleteUser("org.osiam.client.exception.ConflictException: PATCH", accessToken62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Authorization" + "'", str42, "Authorization");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str56, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str57, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str59, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder60);
    }

    @Test
    public void test02455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02455");
        org.osiam.client.OsiamConnector.setMaxConnectionsPerRoute(404);
    }

    @Test
    public void test02456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02456");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.client.OsiamConnector.Builder builder5 = builder2.setEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder7 = builder2.setEndpoint("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test02457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02457");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.getAttributes();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query41);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.toString();
        java.lang.String str57 = query55.toString();
        org.osiam.client.query.Query query58 = query55.nextPage();
        java.lang.String str59 = query55.toString();
        org.osiam.client.query.QueryBuilder queryBuilder60 = osiamConnector5.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder61 = osiamConnector5.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder62 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder62.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder66 = queryBuilder64.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder68 = queryBuilder64.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder70 = queryBuilder68.descending("hi!");
        org.osiam.client.query.Query query71 = queryBuilder70.build();
        org.osiam.client.query.Query query72 = queryBuilder70.build();
        java.lang.String str73 = query72.getSortBy();
        java.lang.String str74 = query72.getFilter();
        int int75 = query72.getCount();
        long long76 = query72.getStartIndex();
        org.osiam.client.oauth.AccessToken.Builder builder78 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken79 = builder78.build();
        java.lang.String str80 = accessToken79.toString();
        java.lang.String str81 = accessToken79.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult82 = osiamConnector5.searchUsers(query72, accessToken79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Authorization" + "'", str42, "Authorization");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str56, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str57, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str59, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder60);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertNotNull(queryBuilder68);
        org.junit.Assert.assertNotNull(queryBuilder70);
        org.junit.Assert.assertNotNull(query71);
        org.junit.Assert.assertNotNull(query72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1L + "'", long76 == 1L);
        org.junit.Assert.assertNotNull(accessToken79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str80, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
    }

    @Test
    public void test02458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02458");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        long long13 = query9.getStartIndex();
        java.lang.String str14 = query9.getSortBy();
        java.lang.String str15 = query9.toString();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str15, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test02459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02459");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder1.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService6 = builder1.build();
        org.osiam.client.AuthService authService7 = builder1.build();
        org.osiam.client.AuthService.Builder builder9 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientId("ME");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder17 = builder15.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService18 = builder17.build();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        boolean boolean26 = accessToken25.isRefreshTokenExpired();
        java.lang.String str27 = accessToken25.getUserId();
        java.lang.String str28 = accessToken25.getToken();
        java.lang.String str29 = authService18.extractErrorMessageForbidden(accessToken25);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str31 = scope30.getValue();
        java.lang.String str32 = scope30.toString();
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray34 = new org.osiam.client.oauth.Scope[] { scope30, scope33 };
        java.net.URI uRI35 = authService18.getAuthorizationUri(scopeArray34);
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI36 = authService7.getAuthorizationUri(scopeArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Can't create the login uri: redirect URI was not set.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(authService7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(authService18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Bearer " + "'", str28, "Bearer ");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Insufficient scopes: []" + "'", str29, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PATCH" + "'", str31, "PATCH");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PATCH" + "'", str32, "PATCH");
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(scopeArray34);
        org.junit.Assert.assertNotNull(uRI35);
    }

    @Test
    public void test02460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02460");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder23 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.descending("hi!");
        org.osiam.client.query.Query query32 = queryBuilder31.build();
        java.lang.String str33 = query32.toString();
        java.lang.String str34 = query32.toString();
        org.osiam.client.query.Query query35 = query32.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder36 = osiamConnector7.createQueryBuilder(query32);
        org.osiam.client.oauth.AccessToken.Builder builder39 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date40 = null;
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setRefreshTokenExpiresAt(date40);
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder39.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken44 = builder43.build();
        java.util.Date date45 = accessToken44.getExpiresAt();
        java.lang.String str46 = accessToken44.getRefreshToken();
        java.lang.String str47 = accessToken44.getType();
        java.lang.String str48 = accessToken44.getClientId();
        java.lang.String str49 = accessToken44.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group50 = osiamConnector7.getGroup("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken44);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(query32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str33, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str34, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query35);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(accessToken44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str49, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test02461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02461");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = osiamGroupService2.extractErrorMessageUnauthorized("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!", statusType4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
    }

    @Test
    public void test02462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02462");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder23 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.descending("hi!");
        org.osiam.client.query.Query query32 = queryBuilder31.build();
        java.lang.String str33 = query32.toString();
        java.lang.String str34 = query32.toString();
        org.osiam.client.query.Query query35 = query32.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder36 = osiamConnector7.createQueryBuilder(query32);
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        boolean boolean44 = accessToken43.isRefreshTokenExpired();
        java.lang.String str45 = accessToken43.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.toString();
        java.lang.String str57 = query55.getSortOrder();
        java.lang.String str58 = query55.getSortBy();
        java.lang.String str59 = query55.getFilter();
        java.lang.String str60 = query55.getSortOrder();
        java.lang.String str61 = query55.getAttributes();
        boolean boolean62 = accessToken43.equals((java.lang.Object) query55);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet63 = accessToken43.getScopes();
        org.osiam.client.AuthService.Builder builder65 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder67 = builder65.setClientId("ME");
        org.osiam.client.AuthService.Builder builder69 = builder67.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder71 = builder69.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder73 = builder71.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService74 = builder73.build();
        org.osiam.client.oauth.AccessToken.Builder builder76 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date77 = null;
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder76.setRefreshTokenExpiresAt(date77);
        org.osiam.client.oauth.AccessToken.Builder builder80 = builder76.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken81 = builder80.build();
        boolean boolean82 = accessToken81.isRefreshTokenExpired();
        java.lang.String str83 = accessToken81.getUserId();
        java.lang.String str84 = accessToken81.getToken();
        java.lang.String str85 = authService74.extractErrorMessageForbidden(accessToken81);
        org.osiam.client.oauth.Scope scope86 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str87 = scope86.getValue();
        java.lang.String str88 = scope86.toString();
        org.osiam.client.oauth.Scope scope89 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray90 = new org.osiam.client.oauth.Scope[] { scope86, scope89 };
        java.net.URI uRI91 = authService74.getAuthorizationUri(scopeArray90);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken92 = osiamConnector7.refreshAccessToken(accessToken43, scopeArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(query32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str33, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str34, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query35);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str56, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "descending" + "'", str57, "descending");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "descending" + "'", str60, "descending");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Authorization" + "'", str61, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(scopeSet63);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(authService74);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(accessToken81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Bearer " + "'", str84, "Bearer ");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Insufficient scopes: []" + "'", str85, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "PATCH" + "'", str87, "PATCH");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "PATCH" + "'", str88, "PATCH");
        org.junit.Assert.assertNotNull(scope89);
        org.junit.Assert.assertNotNull(scopeArray90);
        org.junit.Assert.assertNotNull(uRI91);
    }

    @Test
    public void test02463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02463");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder6 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        java.util.Date date15 = accessToken14.getExpiresAt();
        java.lang.String str16 = accessToken14.getRefreshToken();
        boolean boolean17 = accessToken14.isClientOnly();
        java.lang.String str18 = osiamGroupService7.extractErrorMessageForbidden(accessToken14);
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        boolean boolean26 = accessToken25.isRefreshTokenExpired();
        java.lang.String str27 = accessToken25.getUserId();
        java.lang.String str28 = accessToken25.getToken();
        boolean boolean29 = accessToken25.isExpired();
        java.lang.String str30 = accessToken25.getClientId();
        java.lang.String str31 = accessToken25.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet32 = accessToken25.getScopes();
        java.lang.String str33 = osiamGroupService7.extractErrorMessageForbidden(accessToken25);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group34 = osiamGroupService3.getResource("POST", accessToken25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Bearer " + "'", str28, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(scopeSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Insufficient scopes: []" + "'", str33, "Insufficient scopes: []");
    }

    @Test
    public void test02464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02464");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.UpdateUser updateUser4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        boolean boolean13 = accessToken11.isClientOnly();
        java.lang.String str14 = accessToken11.getClientId();
        java.lang.String str15 = accessToken11.getUserId();
        java.lang.String str16 = accessToken11.getClientId();
        java.lang.String str17 = accessToken11.getRefreshToken();
        java.lang.String str18 = accessToken11.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user19 = osiamUserService2.updateUser("org.osiam.client.exception.OsiamClientException: client_credentials", updateUser4, accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Bearer " + "'", str18, "Bearer ");
    }

    @Test
    public void test02465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02465");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getRefreshToken();
        boolean boolean17 = accessToken13.isExpired();
        java.lang.String str18 = accessToken13.getRefreshToken();
        java.lang.String str19 = accessToken13.getRefreshToken();
        java.lang.String str20 = osiamGroupService4.extractErrorMessageForbidden(accessToken13);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        java.util.Date date29 = accessToken28.getExpiresAt();
        java.lang.String str30 = accessToken28.getRefreshToken();
        java.lang.String str31 = accessToken28.getType();
        java.lang.String str32 = accessToken28.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group33 = osiamGroupService4.getResource("", accessToken28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test02466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02466");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        java.lang.String str17 = accessToken16.toString();
        java.lang.String str18 = accessToken16.getClientId();
        org.osiam.client.OsiamConnector.Builder builder19 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder21 = builder19.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder23 = builder21.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder25 = builder23.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector26 = builder25.build();
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        java.lang.String str37 = query36.toString();
        java.lang.String str38 = query36.toString();
        java.lang.String str39 = query36.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder40 = osiamConnector26.createQueryBuilder(query36);
        org.osiam.client.query.QueryBuilder queryBuilder41 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder43 = queryBuilder41.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder43.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder47.descending("hi!");
        org.osiam.client.query.Query query50 = queryBuilder49.build();
        org.osiam.client.query.QueryBuilder queryBuilder51 = osiamConnector26.createQueryBuilder(query50);
        boolean boolean52 = accessToken16.equals((java.lang.Object) queryBuilder51);
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector7.deleteUser("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken16);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str17, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(osiamConnector26);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str37, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str38, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(query50);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test02467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02467");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder11.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder11.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setUserName("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.helper.ScopeSerializer scopeSerializer24 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean25 = scopeSerializer24.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer26 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer27 = scopeSerializer24.unwrappingSerializer(nameTransformer26);
        boolean boolean28 = scopeSerializer24.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer29 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer30 = scopeSerializer24.unwrappingSerializer(nameTransformer29);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper31 = null;
        com.fasterxml.jackson.databind.JavaType javaType32 = null;
        scopeSerializer24.acceptJsonFormatVisitor(jsonFormatVisitorWrapper31, javaType32);
        boolean boolean34 = scopeSerializer24.usesObjectId();
        boolean boolean35 = scopeSerializer24.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider36 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer37 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean38 = scopeSerializer37.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass39 = scopeSerializer37.handledType();
        org.osiam.client.oauth.AccessToken.Builder builder41 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date42 = null;
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setRefreshTokenExpiresAt(date42);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder41.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken46 = builder45.build();
        java.util.Date date47 = accessToken46.getExpiresAt();
        java.lang.String str48 = accessToken46.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken46.getScopes();
        boolean boolean50 = scopeSerializer37.isEmpty(scopeSet49);
        boolean boolean51 = scopeSerializer24.isEmpty(serializerProvider36, scopeSet49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder23.addScopes(scopeSet49);
        org.osiam.client.oauth.AccessToken accessToken53 = builder52.build();
        java.lang.String str54 = accessToken53.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user55 = osiamConnector7.getCurrentUser(accessToken53);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(scopeSetClass39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(accessToken46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(accessToken53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Bearer " + "'", str54, "Bearer ");
    }

    @Test
    public void test02468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02468");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setResourceServerEndpoint("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("GET");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test02469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02469");
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException1 = new org.osiam.client.exception.InvalidAttributeException("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        java.lang.Throwable[] throwableArray2 = invalidAttributeException1.getSuppressed();
        java.lang.String str3 = invalidAttributeException1.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str3, "org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test02470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02470");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.getEmptyValue();
        java.util.Collection<java.lang.Object> objCollection7 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeDeserializer0.getEmptyValue();
        boolean boolean9 = scopeDeserializer0.isCachable();
        boolean boolean10 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer11 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer12 = scopeDeserializer0.unwrappingDeserializer(nameTransformer11);
        com.fasterxml.jackson.core.JsonParser jsonParser13 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet15 = scopeDeserializer0.deserialize(jsonParser13, deserializationContext14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNull(scopeSet6);
        org.junit.Assert.assertNull(objCollection7);
        org.junit.Assert.assertNull(scopeSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer12);
    }

    @Test
    public void test02471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02471");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("");
        org.osiam.client.AuthService.Builder builder9 = builder5.setClientId("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        boolean boolean19 = accessToken18.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet20 = accessToken18.getScopes();
        boolean boolean21 = accessToken18.isRefreshTokenExpired();
        boolean boolean22 = accessToken18.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            authService10.revokeAllAccessTokens("GET POST PUT PATCH DELETE", accessToken18);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(scopeSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test02472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02472");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.getAttributes();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query41);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.toString();
        java.lang.String str57 = query55.toString();
        org.osiam.client.query.Query query58 = query55.nextPage();
        java.lang.String str59 = query55.toString();
        org.osiam.client.query.QueryBuilder queryBuilder60 = osiamConnector5.createQueryBuilder(query55);
        org.osiam.resources.scim.User user61 = null;
        org.osiam.client.oauth.AccessToken.Builder builder63 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date64 = null;
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder63.setRefreshTokenExpiresAt(date64);
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder63.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken68 = builder67.build();
        boolean boolean69 = accessToken68.isRefreshTokenExpired();
        java.lang.String str70 = accessToken68.getUserId();
        boolean boolean71 = accessToken68.isRefreshTokenExpired();
        java.lang.String str72 = accessToken68.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user73 = osiamConnector5.createUser(user61, accessToken68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Authorization" + "'", str42, "Authorization");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str56, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str57, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str59, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder60);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(accessToken68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
    }

    @Test
    public void test02473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02473");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.AuthService.Builder builder10 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder16 = builder14.setClientSecret("");
        org.osiam.client.AuthService.Builder builder18 = builder14.setClientId("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService19 = builder14.build();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        boolean boolean28 = accessToken26.isClientOnly();
        java.lang.String str29 = accessToken26.getClientId();
        boolean boolean30 = accessToken26.isClientOnly();
        java.lang.String str31 = accessToken26.getToken();
        java.lang.String str32 = accessToken26.getToken();
        boolean boolean33 = accessToken26.isRefreshTokenExpired();
        java.lang.String str34 = authService19.extractErrorMessageForbidden(accessToken26);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user35 = osiamConnector7.getCurrentUser(accessToken26);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(authService19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Bearer " + "'", str31, "Bearer ");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Bearer " + "'", str32, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Insufficient scopes: []" + "'", str34, "Insufficient scopes: []");
    }

    @Test
    public void test02474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02474");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector17 = builder14.build();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.descending("hi!");
        org.osiam.client.query.Query query27 = queryBuilder26.build();
        java.lang.String str28 = query27.toString();
        java.lang.String str29 = query27.toString();
        java.lang.String str30 = query27.toString();
        org.osiam.client.query.QueryBuilder queryBuilder31 = new org.osiam.client.query.QueryBuilder(query27);
        java.lang.String str32 = query27.toString();
        org.osiam.client.OsiamGroupService.Builder builder34 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService35 = builder34.build();
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken42 = builder41.build();
        java.util.Date date43 = accessToken42.getExpiresAt();
        java.lang.String str44 = accessToken42.getRefreshToken();
        boolean boolean45 = accessToken42.isClientOnly();
        java.lang.String str46 = osiamGroupService35.extractErrorMessageForbidden(accessToken42);
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder48.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken53 = builder52.build();
        java.util.Date date54 = accessToken53.getExpiresAt();
        java.lang.String str55 = accessToken53.getUserName();
        java.util.Date date56 = accessToken53.getRefreshTokenExpiresAt();
        java.lang.String str57 = osiamGroupService35.extractErrorMessageForbidden(accessToken53);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult58 = osiamConnector17.searchGroups(query27, accessToken53);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(query27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str28, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str30, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str32, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(osiamGroupService35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Insufficient scopes: []" + "'", str46, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(accessToken53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Insufficient scopes: []" + "'", str57, "Insufficient scopes: []");
    }

    @Test
    public void test02475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02475");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.resources.scim.Group group7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken16 = builder13.build();
        java.util.Date date17 = accessToken16.getExpiresAt();
        java.util.Date date18 = accessToken16.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group19 = osiamGroupService3.replaceGroup("Bearer ", group7, accessToken16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02476");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector9.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query18 = queryBuilder15.build();
        org.osiam.client.query.Query query19 = query18.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder20 = osiamConnector9.createQueryBuilder(query18);
        org.osiam.client.oauth.Scope[] scopeArray23 = new org.osiam.client.oauth.Scope[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken24 = osiamConnector9.retrieveAccessToken("org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", "org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", scopeArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(query18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(scopeArray23);
    }

    @Test
    public void test02477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02477");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService4.targetEndpoint;
        org.osiam.resources.scim.Group group8 = null;
        org.osiam.client.AuthService.Builder builder10 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientId("ME");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder16 = builder14.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder18 = builder16.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService19 = builder18.build();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        java.lang.String str28 = authService19.extractErrorMessageForbidden(accessToken26);
        boolean boolean29 = accessToken26.isRefreshTokenExpired();
        java.lang.String str30 = accessToken26.getType();
        java.lang.String str31 = accessToken26.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group32 = osiamGroupService4.replaceResource("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", group8, accessToken26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(authService19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Insufficient scopes: []" + "'", str28, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Bearer " + "'", str31, "Bearer ");
    }

    @Test
    public void test02478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02478");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken10 = osiamConnector7.retrieveAccessToken("org.osiam.client.exception.ConnectionInitializationException: Bearer ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
    }

    @Test
    public void test02479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02479");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector osiamConnector5 = builder2.build();
        org.osiam.client.AuthService.Builder builder9 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientId("ME");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder17 = builder15.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService18 = builder17.build();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        boolean boolean26 = accessToken25.isRefreshTokenExpired();
        java.lang.String str27 = accessToken25.getUserId();
        java.lang.String str28 = accessToken25.getToken();
        java.lang.String str29 = authService18.extractErrorMessageForbidden(accessToken25);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str31 = scope30.getValue();
        java.lang.String str32 = scope30.toString();
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray34 = new org.osiam.client.oauth.Scope[] { scope30, scope33 };
        java.net.URI uRI35 = authService18.getAuthorizationUri(scopeArray34);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken36 = osiamConnector5.retrieveAccessToken("org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", "Cannot connect to server", scopeArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(authService18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Bearer " + "'", str28, "Bearer ");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Insufficient scopes: []" + "'", str29, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PATCH" + "'", str31, "PATCH");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PATCH" + "'", str32, "PATCH");
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(scopeArray34);
        org.junit.Assert.assertNotNull(uRI35);
    }

    @Test
    public void test02480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02480");
        org.osiam.client.exception.ConflictException conflictException1 = new org.osiam.client.exception.ConflictException("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!");
    }

    @Test
    public void test02481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02481");
        org.osiam.client.OsiamConnector.setReadTimeout((int) (short) -1);
    }

    @Test
    public void test02482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02482");
        org.osiam.client.exception.NoResultException noResultException3 = new org.osiam.client.exception.NoResultException("ME");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException4 = new org.osiam.client.exception.ConnectionInitializationException("Bearer ", (java.lang.Throwable) noResultException3);
        org.osiam.client.exception.OsiamClientException osiamClientException5 = new org.osiam.client.exception.OsiamClientException("ascending", (java.lang.Throwable) noResultException3);
    }

    @Test
    public void test02483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02483");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder3 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder3.setRefreshTokenExpiresAt(date4);
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope7 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException9 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean10 = scope7.equals((java.lang.Object) invalidAttributeException9);
        java.lang.String str11 = scope7.getValue();
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str14 = scope13.toString();
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str17 = scope16.getValue();
        java.lang.String str18 = scope16.getValue();
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException21 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean22 = scope19.equals((java.lang.Object) invalidAttributeException21);
        java.lang.String str23 = scope19.getValue();
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException29 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean30 = scope27.equals((java.lang.Object) invalidAttributeException29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.GET;
        boolean boolean35 = scope33.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray37 = new org.osiam.client.oauth.Scope[] { scope6, scope7, scope12, scope13, scope15, scope16, scope19, scope24, scope25, scope26, scope27, scope31, scope32, scope33, scope36 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet38 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet38, scopeArray37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder3.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet38);
        boolean boolean41 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet38);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass42 = scopeSerializer0.handledType();
        boolean boolean43 = scopeSerializer0.usesObjectId();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertNotNull(scope7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GET" + "'", str11, "GET");
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ME" + "'", str14, "ME");
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PATCH" + "'", str18, "PATCH");
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GET" + "'", str23, "GET");
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(scopeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(scopeSetClass42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test02484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02484");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("Bearer ");
        org.osiam.client.AuthService authService8 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken10 = authService8.retrieveAccessToken("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(authService8);
    }

    @Test
    public void test02485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02485");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget7 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        boolean boolean15 = accessToken14.isRefreshTokenExpired();
        java.lang.String str16 = accessToken14.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder17 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder19.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.descending("hi!");
        org.osiam.client.query.Query query26 = queryBuilder25.build();
        java.lang.String str27 = query26.toString();
        java.lang.String str28 = query26.getSortOrder();
        java.lang.String str29 = query26.getSortBy();
        java.lang.String str30 = query26.getFilter();
        java.lang.String str31 = query26.toString();
        boolean boolean32 = accessToken14.equals((java.lang.Object) query26);
        java.lang.String str33 = osiamGroupService3.extractErrorMessageForbidden(accessToken14);
        org.osiam.resources.scim.Group group35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken42 = builder41.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken42);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group44 = osiamGroupService3.updateGroup("org.osiam.client.exception.OsiamClientException: ME", group35, accessToken42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(webTarget7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "descending" + "'", str28, "descending");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str31, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Insufficient scopes: []" + "'", str33, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
    }

    @Test
    public void test02486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02486");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        org.osiam.resources.scim.Group group15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        java.util.Date date23 = accessToken22.getExpiresAt();
        java.lang.String str24 = accessToken22.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet25 = accessToken22.getScopes();
        java.util.Date date26 = accessToken22.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group27 = osiamGroupService2.updateResource("hi!", group15, accessToken22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(scopeSet25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02487");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder6.descending("PATCH");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder6.attributes("org.osiam.client.exception.OsiamClientException: PUT");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
    }

    @Test
    public void test02488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02488");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        boolean boolean13 = accessToken11.isClientOnly();
        java.lang.String str14 = accessToken11.getClientId();
        boolean boolean15 = accessToken11.isClientOnly();
        java.lang.String str16 = accessToken11.getToken();
        java.lang.String str17 = osiamGroupService4.extractErrorMessageForbidden(accessToken11);
        org.osiam.resources.scim.Group group19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        boolean boolean28 = accessToken26.isClientOnly();
        java.lang.String str29 = accessToken26.getClientId();
        java.lang.String str30 = accessToken26.getUserId();
        java.lang.String str31 = accessToken26.getClientId();
        java.lang.String str32 = accessToken26.getRefreshToken();
        java.lang.String str33 = accessToken26.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group34 = osiamGroupService4.updateGroup("Insufficient scopes: []", group19, accessToken26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Bearer " + "'", str16, "Bearer ");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Insufficient scopes: []" + "'", str17, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Bearer " + "'", str33, "Bearer ");
    }

    @Test
    public void test02489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02489");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setResourceServerEndpoint("hi!");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setAuthServerEndpoint("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder12 = builder4.setAuthServerEndpoint("Query [attributes=null, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=100]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test02490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02490");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector7.createQueryBuilder();
        org.osiam.resources.scim.UpdateUser updateUser24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken31 = builder30.build();
        java.lang.String str32 = accessToken31.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user33 = osiamConnector7.updateUser("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!", updateUser24, accessToken31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(accessToken31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str32, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test02491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02491");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken accessToken3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser4 = osiamUserService2.getCurrentUserBasic(accessToken3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
    }

    @Test
    public void test02492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02492");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.util.Date date12 = accessToken11.getExpiresAt();
        java.lang.String str13 = accessToken11.getRefreshToken();
        java.lang.String str14 = accessToken11.getType();
        java.lang.String str15 = accessToken11.getClientId();
        java.lang.String str16 = accessToken11.getUserName();
        java.lang.String str17 = accessToken11.toString();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken11);
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.deleteResource("org.osiam.client.exception.UnauthorizedException: PATCH", accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str17, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test02493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02493");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.OsiamConnector.Builder builder10 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder22 = builder18.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector23 = builder18.build();
        org.osiam.client.OsiamConnector.Builder builder24 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder26 = builder24.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder28 = builder26.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder30 = builder28.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector31 = builder30.build();
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.toString();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector31.createQueryBuilder(query41);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        org.osiam.client.query.QueryBuilder queryBuilder56 = osiamConnector31.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder57 = osiamConnector23.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder58 = osiamConnector9.createQueryBuilder(query55);
        org.osiam.client.oauth.AccessToken.Builder builder60 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date61 = null;
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder60.setRefreshTokenExpiresAt(date61);
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder60.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken65 = builder64.build();
        java.util.Date date66 = accessToken65.getExpiresAt();
        java.lang.String str67 = accessToken65.getRefreshToken();
        java.lang.String str68 = accessToken65.getType();
        java.lang.String str69 = accessToken65.getClientId();
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException71 = new org.osiam.client.exception.InvalidAttributeException("ADMIN");
        boolean boolean72 = accessToken65.equals((java.lang.Object) invalidAttributeException71);
        org.osiam.client.OsiamConnector.Builder builder73 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder75 = builder73.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder77 = builder75.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder79 = builder77.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector80 = builder79.build();
        org.osiam.client.query.QueryBuilder queryBuilder81 = osiamConnector80.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder83 = queryBuilder81.ascending("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        boolean boolean84 = accessToken65.equals((java.lang.Object) queryBuilder83);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList85 = osiamConnector9.getAllUsers(accessToken65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(osiamConnector23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(osiamConnector31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str42, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertNotNull(queryBuilder56);
        org.junit.Assert.assertNotNull(queryBuilder57);
        org.junit.Assert.assertNotNull(queryBuilder58);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(accessToken65);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(osiamConnector80);
        org.junit.Assert.assertNotNull(queryBuilder81);
        org.junit.Assert.assertNotNull(queryBuilder83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test02494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02494");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.resources.scim.User user19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        java.util.Date date27 = accessToken26.getExpiresAt();
        java.lang.String str28 = accessToken26.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken26);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user30 = osiamConnector17.replaceUser("org.osiam.client.exception.ConnectionInitializationException: Bearer ", user19, accessToken26);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test02495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02495");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("org.osiam.client.exception.ConnectionInitializationException: Bearer ");
    }

    @Test
    public void test02496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02496");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.resources.scim.UpdateGroup updateGroup5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        java.lang.String str14 = accessToken12.getRefreshToken();
        java.lang.String str15 = accessToken12.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group16 = osiamGroupService3.updateGroup("org.osiam.client.exception.OsiamClientException: PUT", updateGroup5, accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str15, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test02497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02497");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Bearer ");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.util.Date date11 = accessToken10.getExpiresAt();
        java.lang.String str12 = accessToken10.getUserName();
        java.util.Date date13 = accessToken10.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            osiamUserService2.deleteUser("org.osiam.client.exception.ConflictException: ", accessToken10);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test02498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02498");
        org.osiam.client.exception.ForbiddenException forbiddenException1 = new org.osiam.client.exception.ForbiddenException("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
    }

    @Test
    public void test02499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02499");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.util.Date date11 = accessToken10.getExpiresAt();
        java.lang.String str12 = accessToken10.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        boolean boolean21 = accessToken20.isRefreshTokenExpired();
        boolean boolean22 = accessToken20.isClientOnly();
        java.lang.String str23 = accessToken20.getClientId();
        boolean boolean24 = accessToken20.isClientOnly();
        boolean boolean25 = accessToken10.equals((java.lang.Object) accessToken20);
        org.osiam.client.query.QueryBuilder queryBuilder26 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder26.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder32 = queryBuilder28.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.descending("hi!");
        org.osiam.client.query.Query query35 = queryBuilder34.build();
        org.osiam.client.query.Query query36 = queryBuilder34.build();
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.ascending("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        boolean boolean39 = accessToken10.equals((java.lang.Object) "org.osiam.client.exception.ConnectionInitializationException: PATCH");
        java.lang.String str40 = accessToken10.getToken();
        java.lang.String str41 = accessToken10.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser42 = osiamUserService3.getCurrentUserBasic(accessToken10);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(query35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Bearer " + "'", str40, "Bearer ");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test02500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02500");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.client.OsiamConnector.Builder builder19 = builder16.setClientRedirectUri("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(builder19);
    }
}

