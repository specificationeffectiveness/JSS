package org.osiam.client;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test00001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00001");
        org.osiam.client.oauth.AccessToken accessToken0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00002");
        java.lang.String str0 = org.osiam.client.AbstractOsiamService.BEARER;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "Bearer " + "'", str0, "Bearer ");
    }

    @Test
    public void test00003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00003");
        javax.ws.rs.client.Client client0 = org.osiam.client.OsiamConnector.getClient();
        org.junit.Assert.assertNotNull(client0);
    }

    @Test
    public void test00004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00004");
        int int0 = org.osiam.client.query.QueryBuilder.MAX_COUNT;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 100 + "'", int0 == 100);
    }

    @Test
    public void test00005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00005");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.core.JsonParser jsonParser4 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext5 = null;
        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeserializer6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj7 = scopeDeserializer0.deserializeWithType(jsonParser4, deserializationContext5, typeDeserializer6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
    }

    @Test
    public void test00006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00006");
        org.osiam.client.OsiamConnector.setMaxConnections((int) (short) 0);
    }

    @Test
    public void test00007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00007");
        java.lang.String str0 = org.osiam.client.AbstractOsiamService.AUTHORIZATION;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "Authorization" + "'", str0, "Authorization");
    }

    @Test
    public void test00008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00008");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.core.JsonParser jsonParser2 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext3 = null;
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.GET;
        boolean boolean14 = scope12.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope[] scopeArray16 = new org.osiam.client.oauth.Scope[] { scope4, scope5, scope6, scope11, scope12, scope15 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet17 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet17, scopeArray16);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet19 = scopeDeserializer0.deserialize(jsonParser2, deserializationContext3, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Can not update object of type java.util.LinkedHashSet (by deserializer of type org.osiam.client.helper.ScopeDeserializer)");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertNotNull(scopeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test00009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00009");
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException2 = new org.osiam.client.exception.InvalidAttributeException("");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException3 = new org.osiam.client.exception.ConnectionInitializationException("Bearer ", (java.lang.Throwable) invalidAttributeException2);
        java.lang.Throwable[] throwableArray4 = connectionInitializationException3.getSuppressed();
        java.lang.Class<?> wildcardClass5 = throwableArray4.getClass();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test00010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00010");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty2 = scopeDeserializer0.findBackReference("Bearer ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'Bearer ': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00011");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty2 = scopeDeserializer0.findBackReference("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'hi!': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00012");
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.AbstractOsiamService.Builder<org.osiam.resources.scim.User> userBuilder1 = new org.osiam.client.AbstractOsiamService.Builder<org.osiam.resources.scim.User>("");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00013");
        long long0 = org.osiam.client.query.QueryBuilder.DEFAULT_START_INDEX;
        org.junit.Assert.assertTrue("'" + long0 + "' != '" + 1L + "'", long0 == 1L);
    }

    @Test
    public void test00014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00014");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty5 = scopeDeserializer0.findBackReference("Authorization");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'Authorization': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
    }

    @Test
    public void test00015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00015");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = wildcardJsonDeserializer2.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
    }

    @Test
    public void test00016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00016");
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.AbstractOsiamService.Builder<org.osiam.resources.scim.User> userBuilder1 = new org.osiam.client.AbstractOsiamService.Builder<org.osiam.resources.scim.User>("Authorization");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00017");
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException2 = new org.osiam.client.exception.InvalidAttributeException("");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException3 = new org.osiam.client.exception.ConnectionInitializationException("Bearer ", (java.lang.Throwable) invalidAttributeException2);
        org.osiam.client.exception.UnauthorizedException unauthorizedException5 = new org.osiam.client.exception.UnauthorizedException("PATCH");
        connectionInitializationException3.addSuppressed((java.lang.Throwable) unauthorizedException5);
        java.lang.Throwable[] throwableArray7 = connectionInitializationException3.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray7);
    }

    @Test
    public void test00018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00018");
        org.osiam.client.OsiamConnector.setMaxConnections((int) '#');
    }

    @Test
    public void test00019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00019");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.core.JsonParser jsonParser4 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.deserialize(jsonParser4, deserializationContext5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
    }

    @Test
    public void test00020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00020");
        java.lang.String str0 = org.osiam.client.AbstractOsiamService.CONNECTION_SETUP_ERROR_STRING;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "Cannot connect to server" + "'", str0, "Cannot connect to server");
    }

    @Test
    public void test00021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00021");
        org.joda.time.DateTime dateTime0 = null;
        java.lang.String str1 = org.osiam.client.query.QueryBuilder.getScimConformFormatedDateTime(dateTime0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2024-03-22T13:51:20.388" + "'", str1, "2024-03-22T13:51:20.388");
    }

    @Test
    public void test00022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00022");
        org.osiam.client.OsiamConnector.setMaxConnectionsPerRoute(0);
    }

    @Test
    public void test00023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00023");
        org.osiam.client.OsiamConnector.setReadTimeout((int) (byte) 0);
    }

    @Test
    public void test00024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00024");
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.AbstractOsiamService.Builder<org.osiam.resources.scim.User> userBuilder1 = new org.osiam.client.AbstractOsiamService.Builder<org.osiam.resources.scim.User>("PUT");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00025");
        int int0 = org.osiam.client.query.QueryBuilder.DEFAULT_COUNT;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 100 + "'", int0 == 100);
    }

    @Test
    public void test00026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00026");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.query.Query query3 = null;
        org.osiam.client.oauth.AccessToken accessToken4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult5 = osiamGroupService2.searchResources(query3, accessToken4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given query must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
    }

    @Test
    public void test00027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00027");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType4 = null;
        org.osiam.client.oauth.AccessToken accessToken5 = null;
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.checkAndHandleResponse("Bearer ", statusType4, accessToken5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
    }

    @Test
    public void test00028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00028");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.core.JsonParser jsonParser5 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext6 = null;
        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeserializer7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = scopeSetJsonDeserializer4.deserializeWithType(jsonParser5, deserializationContext6, typeDeserializer7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
    }

    @Test
    public void test00029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00029");
        org.osiam.client.OsiamConnector.setReadTimeout((int) (byte) 10);
    }

    @Test
    public void test00030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00030");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer5 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass6 = scopeDeserializer5.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer7 = scopeDeserializer5.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection8 = scopeDeserializer5.getKnownPropertyNames();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer9 = scopeSetJsonDeserializer4.replaceDelegatee((com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeDeserializer5);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardJsonDeserializer7);
        org.junit.Assert.assertNull(objCollection8);
    }

    @Test
    public void test00031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00031");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException1 = new org.osiam.client.exception.ConnectionInitializationException("");
    }

    @Test
    public void test00032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00032");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken accessToken5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group6 = osiamGroupService3.getResource("Authorization", accessToken5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
    }

    @Test
    public void test00033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00033");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty3 = scopeDeserializer0.findBackReference("ME");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'ME': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
    }

    @Test
    public void test00034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00034");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType4 = null;
        org.osiam.client.oauth.AccessToken accessToken5 = null;
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.checkAndHandleResponse("GET", statusType4, accessToken5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
    }

    @Test
    public void test00035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00035");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group5 = osiamGroupService3.mapToResource("GET");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: GET");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
    }

    @Test
    public void test00036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00036");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken accessToken5 = null;
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService3.deleteResource("Cannot connect to server", accessToken5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
    }

    @Test
    public void test00037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00037");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.core.JsonParser jsonParser3 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet5 = scopeDeserializer0.deserialize(jsonParser3, deserializationContext4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test00038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00038");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.resources.scim.Group group5 = null;
        org.osiam.client.oauth.AccessToken accessToken6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group7 = osiamGroupService3.replaceGroup("", group5, accessToken6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
    }

    @Test
    public void test00039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00039");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer5 = new org.osiam.client.helper.ScopeDeserializer();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer6 = scopeSetJsonDeserializer4.replaceDelegatee((com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeDeserializer5);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
    }

    @Test
    public void test00040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00040");
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.OsiamConnector.setMaxConnectionsPerRoute((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Max per route value may not be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00041");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList12 = osiamGroupService3.getAllGroups(accessToken10);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test00042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00042");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.resources.scim.Group group4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group12 = osiamGroupService2.replaceResource("2024-03-22T13:51:20.388", group4, accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
    }

    @Test
    public void test00043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00043");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.core.JsonParser jsonParser5 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext6 = null;
        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeserializer7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = scopeDeserializer0.deserializeWithType(jsonParser5, deserializationContext6, typeDeserializer7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
    }

    @Test
    public void test00044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00044");
        org.osiam.client.OsiamConnector.setConnectTimeout((int) ' ');
    }

    @Test
    public void test00045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00045");
        org.osiam.client.OsiamConnector.setMaxConnectionsPerRoute((int) (byte) 1);
    }

    @Test
    public void test00046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00046");
        org.osiam.client.exception.ForbiddenException forbiddenException1 = new org.osiam.client.exception.ForbiddenException("hi!");
        java.lang.String str2 = forbiddenException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.osiam.client.exception.ForbiddenException: hi!" + "'", str2, "org.osiam.client.exception.ForbiddenException: hi!");
    }

    @Test
    public void test00047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00047");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.lang.String str11 = accessToken10.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group12 = osiamGroupService2.getGroup("2024-03-22T13:51:20.388", accessToken10);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str11, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test00048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00048");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.core.JsonParser jsonParser3 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet5 = scopeDeserializer0.deserialize(jsonParser3, deserializationContext4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
    }

    @Test
    public void test00049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00049");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.lang.String str11 = accessToken10.toString();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.deleteResource("Authorization", accessToken10);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str11, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test00050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00050");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group12 = osiamGroupService2.getGroup("Bearer ", accessToken11);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
    }

    @Test
    public void test00051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00051");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty3 = scopeDeserializer0.findBackReference("client_credentials");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'client_credentials': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
    }

    @Test
    public void test00052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00052");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.resources.scim.Group group4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group13 = osiamGroupService2.replaceResource("PUT", group4, accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test00053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00053");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        com.fasterxml.jackson.core.JsonParser jsonParser7 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = scopeDeserializer0.deserialize(jsonParser7, deserializationContext8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
    }

    @Test
    public void test00054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00054");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.resources.scim.Group group4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.lang.String str12 = accessToken11.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group13 = osiamGroupService3.createGroup(group4, accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str12, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test00055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00055");
        org.osiam.client.exception.UnauthorizedException unauthorizedException2 = new org.osiam.client.exception.UnauthorizedException("PATCH");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException3 = new org.osiam.client.exception.ConnectionInitializationException("PATCH", (java.lang.Throwable) unauthorizedException2);
        java.lang.String str4 = connectionInitializationException3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.osiam.client.exception.ConnectionInitializationException: PATCH" + "'", str4, "org.osiam.client.exception.ConnectionInitializationException: PATCH");
    }

    @Test
    public void test00056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00056");
        org.osiam.client.exception.OsiamClientException osiamClientException1 = new org.osiam.client.exception.OsiamClientException("hi!");
        java.lang.Class<?> wildcardClass2 = osiamClientException1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test00057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00057");
        org.osiam.client.OsiamConnector.setReadTimeout((int) (short) 1);
    }

    @Test
    public void test00058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00058");
        org.osiam.client.query.Query query0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.query.QueryBuilder queryBuilder1 = new org.osiam.client.query.QueryBuilder(query0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00059");
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.AbstractOsiamService.Builder<org.osiam.resources.scim.User> userBuilder1 = new org.osiam.client.AbstractOsiamService.Builder<org.osiam.resources.scim.User>("client_credentials");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00060");
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException2 = new org.osiam.client.exception.InvalidAttributeException("");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException3 = new org.osiam.client.exception.ConnectionInitializationException("Bearer ", (java.lang.Throwable) invalidAttributeException2);
        org.osiam.client.exception.ForbiddenException forbiddenException5 = new org.osiam.client.exception.ForbiddenException("hi!");
        connectionInitializationException3.addSuppressed((java.lang.Throwable) forbiddenException5);
        java.lang.Throwable throwable7 = null;
        // The following exception was thrown during execution in test generation
        try {
            forbiddenException5.addSuppressed(throwable7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00061");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder3 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder5 = queryBuilder3.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder7 = queryBuilder5.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder5.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.descending("hi!");
        org.osiam.client.query.Query query12 = queryBuilder11.build();
        java.lang.String str13 = query12.toString();
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        java.lang.String str21 = accessToken20.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult22 = osiamGroupService2.searchGroups(query12, accessToken20);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(queryBuilder5);
        org.junit.Assert.assertNotNull(queryBuilder7);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str13, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str21, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test00062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00062");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.resources.scim.Group group5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group15 = osiamGroupService2.updateGroup("authorization_code", group5, accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test00063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00063");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.lang.String str11 = accessToken10.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList12 = osiamGroupService3.getAllGroups(accessToken10);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str11, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test00064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00064");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.resources.scim.Group group4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet13 = accessToken11.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group14 = osiamGroupService2.createResource(group4, accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(scopeSet13);
    }

    @Test
    public void test00065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00065");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.resources.scim.Group group5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet14 = accessToken12.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group15 = osiamGroupService2.replaceResource("", group5, accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(scopeSet14);
    }

    @Test
    public void test00066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00066");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder3 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder3.setRefreshTokenExpiresAt(date4);
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder3.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken8 = builder7.build();
        boolean boolean9 = accessToken8.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet10 = accessToken8.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator11 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider12 = null;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer typeSerializer13 = null;
        // The following exception was thrown during execution in test generation
        try {
            scopeSerializer0.serializeWithType(scopeSet10, jsonGenerator11, serializerProvider12, typeSerializer13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(accessToken8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(scopeSet10);
    }

    @Test
    public void test00067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00067");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.helper.ScopeSerializer scopeSerializer1 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder3 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder3.setRefreshTokenExpiresAt(date4);
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope7 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException9 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean10 = scope7.equals((java.lang.Object) invalidAttributeException9);
        java.lang.String str11 = scope7.getValue();
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str14 = scope13.toString();
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str17 = scope16.getValue();
        java.lang.String str18 = scope16.getValue();
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException21 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean22 = scope19.equals((java.lang.Object) invalidAttributeException21);
        java.lang.String str23 = scope19.getValue();
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException29 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean30 = scope27.equals((java.lang.Object) invalidAttributeException29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.GET;
        boolean boolean35 = scope33.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray37 = new org.osiam.client.oauth.Scope[] { scope6, scope7, scope12, scope13, scope15, scope16, scope19, scope24, scope25, scope26, scope27, scope31, scope32, scope33, scope36 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet38 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet38, scopeArray37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder3.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet38);
        boolean boolean41 = scopeSerializer1.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet38);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator42 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider43 = null;
        // The following exception was thrown during execution in test generation
        try {
            scopeSerializer0.serialize((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet38, jsonGenerator42, serializerProvider43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertNotNull(scope7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GET" + "'", str11, "GET");
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ME" + "'", str14, "ME");
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PATCH" + "'", str18, "PATCH");
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GET" + "'", str23, "GET");
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(scopeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test00068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00068");
        org.osiam.client.exception.OsiamRequestException osiamRequestException2 = new org.osiam.client.exception.OsiamRequestException((int) (byte) 10, "org.osiam.client.exception.ConnectionInitializationException: PATCH");
    }

    @Test
    public void test00069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00069");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty5 = scopeDeserializer0.findBackReference("Cannot connect to server");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'Cannot connect to server': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
    }

    @Test
    public void test00070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00070");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.Scope scope9 = new org.osiam.client.oauth.Scope("");
        boolean boolean11 = scope9.equals((java.lang.Object) (short) 0);
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str13 = scope12.getValue();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str15 = scope14.toString();
        org.osiam.client.oauth.Scope[] scopeArray16 = new org.osiam.client.oauth.Scope[] { scope9, scope12, scope14 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken17 = osiamConnector7.retrieveAccessToken(scopeArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PATCH" + "'", str13, "PATCH");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ME" + "'", str15, "ME");
        org.junit.Assert.assertNotNull(scopeArray16);
    }

    @Test
    public void test00071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00071");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken9 = osiamConnector7.retrieveAccessToken("2024-03-22T13:51:20.388");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
    }

    @Test
    public void test00072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00072");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        boolean boolean15 = accessToken14.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user16 = osiamConnector7.getCurrentUser(accessToken14);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test00073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00073");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.helper.ScopeSerializer scopeSerializer41 = new org.osiam.client.helper.ScopeSerializer();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer42 = scopeSerializer0.replaceDelegatee((com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeSerializer41);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test00074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00074");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.lang.String str10 = accessToken9.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user11 = osiamUserService2.getCurrentUser(accessToken9);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str10, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test00075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00075");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group11 = osiamGroupService2.getGroup("", accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
    }

    @Test
    public void test00076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00076");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.resources.scim.User user8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet17 = accessToken15.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user18 = osiamConnector7.createUser(user8, accessToken15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(scopeSet17);
    }

    @Test
    public void test00077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00077");
        org.osiam.client.OsiamConnector.setConnectTimeout((int) (byte) 0);
    }

    @Test
    public void test00078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00078");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        java.lang.String str15 = accessToken14.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user16 = osiamConnector7.getCurrentUser(accessToken14);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str15, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test00079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00079");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        java.lang.String str15 = accessToken14.toString();
        org.osiam.client.oauth.Scope scope17 = new org.osiam.client.oauth.Scope("");
        org.osiam.client.oauth.Scope[] scopeArray18 = new org.osiam.client.oauth.Scope[] { scope17 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken19 = osiamConnector7.refreshAccessToken(accessToken14, scopeArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str15, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(scopeArray18);
    }

    @Test
    public void test00080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00080");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        java.util.Date date13 = accessToken12.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService3.checkAndHandleResponse("", statusType5, accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test00081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00081");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group5 = osiamGroupService2.mapToResource("descending");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: descending");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
    }

    @Test
    public void test00082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00082");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.core.Response.StatusType statusType14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = osiamGroupService2.extractErrorMessage("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", statusType14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
    }

    @Test
    public void test00083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00083");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        java.util.Date date15 = accessToken14.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList16 = osiamConnector7.getAllUsers(accessToken14);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test00084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00084");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.OsiamGroupService.Builder builder9 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService10 = builder9.build();
        org.osiam.client.OsiamGroupService osiamGroupService11 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken18);
        java.lang.String str20 = osiamGroupService11.extractErrorMessageForbidden(accessToken18);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList21 = osiamConnector7.getAllUsers(accessToken18);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(osiamGroupService10);
        org.junit.Assert.assertNotNull(osiamGroupService11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
    }

    @Test
    public void test00085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00085");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.OsiamGroupService.Builder builder9 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        boolean boolean18 = accessToken17.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet19 = accessToken17.getScopes();
        java.lang.String str20 = osiamGroupService10.extractErrorMessageForbidden(accessToken17);
        boolean boolean21 = accessToken17.isClientOnly();
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope[] scopeArray24 = new org.osiam.client.oauth.Scope[] { scope22, scope23 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken25 = osiamConnector7.refreshAccessToken(accessToken17, scopeArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(osiamGroupService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(scopeSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scopeArray24);
    }

    @Test
    public void test00086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00086");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        java.lang.String str26 = accessToken25.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult27 = osiamConnector7.searchUsers(query17, accessToken25);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str26, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test00087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00087");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer3 = scopeDeserializer0.getDelegatee();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getEmptyValue();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer5 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass6 = scopeDeserializer5.handledType();
        java.lang.Class<?> wildcardClass7 = scopeDeserializer5.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer8 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer9 = scopeDeserializer5.unwrappingDeserializer(nameTransformer8);
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer10 = scopeDeserializer5.getDelegatee();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer11 = scopeDeserializer0.replaceDelegatee((com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeDeserializer5);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardJsonDeserializer3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer9);
        org.junit.Assert.assertNull(wildcardJsonDeserializer10);
    }

    @Test
    public void test00088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00088");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.resources.scim.Group group9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        java.lang.String str17 = accessToken16.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group18 = osiamConnector7.replaceGroup("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", group9, accessToken16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str17, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test00089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00089");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.resources.scim.Group group9 = null;
        org.osiam.client.OsiamGroupService.Builder builder11 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService12 = builder11.build();
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        boolean boolean20 = accessToken19.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet21 = accessToken19.getScopes();
        java.lang.String str22 = osiamGroupService12.extractErrorMessageForbidden(accessToken19);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group23 = osiamConnector7.replaceGroup("org.osiam.client.exception.ConnectionInitializationException: PATCH", group9, accessToken19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(osiamGroupService12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(scopeSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Insufficient scopes: []" + "'", str22, "Insufficient scopes: []");
    }

    @Test
    public void test00090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00090");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        java.util.Collection<java.lang.Object> objCollection5 = scopeDeserializer0.getKnownPropertyNames();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty7 = scopeDeserializer0.findBackReference("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference '': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNull(objCollection5);
    }

    @Test
    public void test00091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00091");
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.AbstractOsiamService.Builder<org.osiam.client.oauth.Scope> scopeBuilder1 = new org.osiam.client.AbstractOsiamService.Builder<org.osiam.client.oauth.Scope>("");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00092");
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException1 = new org.osiam.client.exception.InvalidAttributeException("PATCH");
    }

    @Test
    public void test00093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00093");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet62 = accessToken60.getScopes();
        boolean boolean63 = scopeSerializer0.isEmpty(serializerProvider53, scopeSet62);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper64 = null;
        com.fasterxml.jackson.databind.JavaType javaType65 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper64, javaType65);
        org.osiam.client.helper.ScopeSerializer scopeSerializer67 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean68 = scopeSerializer67.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass69 = scopeSerializer67.handledType();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer70 = scopeSerializer0.replaceDelegatee((com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeSerializer67);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(scopeSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(scopeSetClass69);
    }

    @Test
    public void test00094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00094");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        org.osiam.client.helper.ScopeSerializer scopeSerializer4 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean5 = scopeSerializer4.isUnwrappingSerializer();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer6 = scopeSerializer0.replaceDelegatee((com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeSerializer4);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test00095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00095");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        org.osiam.client.query.QueryBuilder queryBuilder13 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.descending("hi!");
        org.osiam.client.query.Query query22 = queryBuilder21.build();
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken29 = builder28.build();
        java.util.Date date30 = accessToken29.getExpiresAt();
        java.lang.String str31 = accessToken29.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult32 = osiamGroupService3.searchGroups(query22, accessToken29);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(query22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test00096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00096");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.resources.scim.Group group13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        boolean boolean21 = accessToken20.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet22 = accessToken20.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group23 = osiamGroupService2.createGroup(group13, accessToken20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(scopeSet22);
    }

    @Test
    public void test00097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00097");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        boolean boolean15 = accessToken14.isRefreshTokenExpired();
        boolean boolean16 = accessToken14.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user17 = osiamConnector7.getCurrentUser(accessToken14);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test00098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00098");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken accessToken5 = null;
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService3.deleteResource("descending", accessToken5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
    }

    @Test
    public void test00099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00099");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.resources.scim.Group group14 = null;
        org.osiam.client.OsiamGroupService.Builder builder16 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService17 = builder16.build();
        org.osiam.client.OsiamGroupService osiamGroupService18 = builder16.build();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken25);
        java.lang.String str27 = osiamGroupService18.extractErrorMessageForbidden(accessToken25);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group28 = osiamGroupService2.replaceResource("org.osiam.client.exception.ForbiddenException: hi!", group14, accessToken25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService17);
        org.junit.Assert.assertNotNull(osiamGroupService18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Insufficient scopes: []" + "'", str27, "Insufficient scopes: []");
    }

    @Test
    public void test00100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00100");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group5 = osiamGroupService2.mapToResource("authorization_code");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: authorization_code");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
    }

    @Test
    public void test00101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00101");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken accessToken4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user5 = osiamUserService2.getUser("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", accessToken4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
    }

    @Test
    public void test00102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00102");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.resources.scim.User user9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        java.util.Date date17 = accessToken16.getExpiresAt();
        java.lang.String str18 = accessToken16.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user19 = osiamConnector7.replaceUser("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", user9, accessToken16);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test00103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00103");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.resources.scim.Group group8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group17 = osiamConnector7.createGroup(group8, accessToken15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test00104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00104");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        boolean boolean15 = accessToken14.isRefreshTokenExpired();
        boolean boolean16 = accessToken14.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList17 = osiamConnector7.getAllGroups(accessToken14);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test00105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00105");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.resources.scim.Group group5 = null;
        org.osiam.client.OsiamGroupService.Builder builder7 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder7.build();
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder7.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken16);
        java.lang.String str18 = osiamGroupService9.extractErrorMessageForbidden(accessToken16);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group19 = osiamGroupService3.updateResource("client_credentials", group5, accessToken16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
    }

    @Test
    public void test00106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00106");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken8 = authService6.retrieveAccessToken("PATCH");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
    }

    @Test
    public void test00107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00107");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer typeSerializer52 = null;
        // The following exception was thrown during execution in test generation
        try {
            scopeSerializer0.serializeWithType(scopeSet49, jsonGenerator50, serializerProvider51, typeSerializer52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
    }

    @Test
    public void test00108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00108");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken14);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList16 = osiamConnector7.getAllGroups(accessToken14);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
    }

    @Test
    public void test00109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00109");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.lang.String str10 = accessToken9.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser11 = osiamUserService2.getCurrentUserBasic(accessToken9);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str10, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test00110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00110");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.OsiamGroupService.Builder builder8 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder8.build();
        org.osiam.client.OsiamGroupService osiamGroupService10 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken17);
        java.lang.String str19 = osiamGroupService10.extractErrorMessageForbidden(accessToken17);
        java.util.Date date20 = accessToken17.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            authService6.revokeAccessToken(accessToken17);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(osiamGroupService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test00111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00111");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.client.OsiamGroupService.Builder builder6 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder6.build();
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken15);
        java.lang.String str17 = osiamGroupService8.extractErrorMessageForbidden(accessToken15);
        java.util.Date date18 = accessToken15.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector3.revokeAllAccessTokens("", accessToken15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Insufficient scopes: []" + "'", str17, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test00112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00112");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector3.deleteGroup("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
    }

    @Test
    public void test00113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00113");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.getAttributes();
        java.lang.String str11 = query9.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.query.Query query12 = query9.previousPage();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: StartIndex < 1 is not possible.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Authorization" + "'", str10, "Authorization");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str11, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test00114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00114");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group14 = osiamGroupService2.mapToResource("hi!");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: hi!");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
    }

    @Test
    public void test00115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00115");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.resources.scim.UpdateGroup updateGroup6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group14 = osiamGroupService4.updateGroup("GET", updateGroup6, accessToken13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
    }

    @Test
    public void test00116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00116");
        org.osiam.client.OsiamConnector.setConnectTimeout(0);
    }

    @Test
    public void test00117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00117");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken accessToken3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser4 = osiamUserService2.getCurrentUserBasic(accessToken3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
    }

    @Test
    public void test00118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00118");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        java.util.Date date13 = accessToken12.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService4.deleteResource("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", accessToken12);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test00119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00119");
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException1 = new org.osiam.client.exception.InvalidAttributeException("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        java.lang.String str2 = invalidAttributeException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str2, "org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test00120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00120");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer3 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer3.handledType();
        java.lang.Class<?> wildcardClass5 = scopeDeserializer3.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer7 = scopeDeserializer3.unwrappingDeserializer(nameTransformer6);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer8 = scopeDeserializer0.replaceDelegatee(scopeSetJsonDeserializer7);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer7);
    }

    @Test
    public void test00121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00121");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty3 = scopeDeserializer0.findBackReference("authorization_code");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'authorization_code': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
    }

    @Test
    public void test00122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00122");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.resources.scim.User user4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet13 = accessToken11.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user14 = osiamConnector3.createUser(user4, accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(scopeSet13);
    }

    @Test
    public void test00123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00123");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.Scope scope7 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope9 = new org.osiam.client.oauth.Scope("Authorization");
        org.osiam.client.oauth.Scope scope10 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str11 = scope10.toString();
        java.lang.String str12 = scope10.getValue();
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str14 = scope13.toString();
        org.osiam.client.oauth.Scope[] scopeArray15 = new org.osiam.client.oauth.Scope[] { scope7, scope9, scope10, scope13 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken16 = authService6.retrieveAccessToken(scopeArray15);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(scope7);
        org.junit.Assert.assertNotNull(scope10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ME" + "'", str11, "ME");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ME" + "'", str12, "ME");
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ME" + "'", str14, "ME");
        org.junit.Assert.assertNotNull(scopeArray15);
    }

    @Test
    public void test00124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00124");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.resources.scim.Group group5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        java.util.Date date13 = accessToken12.getExpiresAt();
        java.lang.String str14 = accessToken12.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group15 = osiamGroupService4.createGroup(group5, accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test00125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00125");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.resources.scim.Group group5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        java.lang.String str13 = accessToken12.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group14 = osiamGroupService2.updateResource("Authorization", group5, accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str13, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test00126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00126");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = osiamGroupService2.extractErrorMessage("hi!", statusType5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
    }

    @Test
    public void test00127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00127");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.resources.scim.Group group5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        java.lang.String str15 = accessToken12.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group16 = osiamGroupService3.replaceGroup("Cannot connect to server", group5, accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test00128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00128");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.resources.scim.Group group4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet13 = accessToken11.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group14 = osiamConnector3.createGroup(group4, accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(scopeSet13);
    }

    @Test
    public void test00129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00129");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        java.lang.String str17 = accessToken15.getUserId();
        java.lang.String str18 = accessToken15.getClientId();
        boolean boolean19 = accessToken15.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user20 = osiamConnector7.getUser("Cannot connect to server", accessToken15);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test00130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00130");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        java.util.Date date20 = accessToken19.getExpiresAt();
        java.lang.String str21 = accessToken19.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList22 = osiamGroupService2.getAllGroups(accessToken19);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test00131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00131");
        org.osiam.client.exception.OsiamClientException osiamClientException1 = new org.osiam.client.exception.OsiamClientException("GET");
    }

    @Test
    public void test00132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00132");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group4 = osiamGroupService2.mapToResource("");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: ");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
    }

    @Test
    public void test00133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00133");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.getAttributes();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getSortBy();
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken27 = builder26.build();
        boolean boolean28 = accessToken27.isRefreshTokenExpired();
        java.lang.String str29 = accessToken27.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult30 = osiamConnector7.searchUsers(query17, accessToken27);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Authorization" + "'", str18, "Authorization");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test00134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00134");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken22);
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.checkAndHandleResponse("", statusType15, accessToken22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
    }

    @Test
    public void test00135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00135");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        javax.ws.rs.core.Response.StatusType statusType14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = osiamGroupService3.extractErrorMessage("GET", statusType14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
    }

    @Test
    public void test00136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00136");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.resources.scim.UpdateGroup updateGroup5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        boolean boolean14 = accessToken12.isClientOnly();
        java.lang.String str15 = accessToken12.getRefreshToken();
        boolean boolean16 = accessToken12.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group17 = osiamConnector3.updateGroup("ME", updateGroup5, accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test00137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00137");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getEmptyValue();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer4 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass5 = scopeDeserializer4.handledType();
        java.lang.Class<?> wildcardClass6 = scopeDeserializer4.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer7 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer8 = scopeDeserializer4.unwrappingDeserializer(nameTransformer7);
        java.util.Collection<java.lang.Object> objCollection9 = scopeDeserializer4.getKnownPropertyNames();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer10 = scopeDeserializer0.replaceDelegatee((com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeDeserializer4);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer8);
        org.junit.Assert.assertNull(objCollection9);
    }

    @Test
    public void test00138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00138");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        org.osiam.client.query.QueryBuilder queryBuilder14 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder16.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.descending("hi!");
        org.osiam.client.query.Query query23 = queryBuilder22.build();
        org.osiam.client.query.Query query24 = queryBuilder22.build();
        long long25 = query24.getStartIndex();
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult33 = osiamGroupService2.searchGroups(query24, accessToken32);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(query23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
    }

    @Test
    public void test00139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00139");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str7 = scope6.getValue();
        java.lang.String str8 = scope6.getValue();
        org.osiam.client.oauth.Scope[] scopeArray9 = new org.osiam.client.oauth.Scope[] { scope6 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken10 = osiamConnector3.retrieveAccessToken("Authorization", "authorization_code", scopeArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PATCH" + "'", str7, "PATCH");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PATCH" + "'", str8, "PATCH");
        org.junit.Assert.assertNotNull(scopeArray9);
    }

    @Test
    public void test00140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00140");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = osiamGroupService2.extractErrorMessageUnauthorized("descending", statusType5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
    }

    @Test
    public void test00141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00141");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.resources.scim.User user5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user15 = osiamConnector3.replaceUser("Insufficient scopes: []", user5, accessToken12);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test00142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00142");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken accessToken9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group10 = osiamConnector7.getGroup("PUT", accessToken9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
    }

    @Test
    public void test00143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00143");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        java.lang.String str15 = accessToken13.getUserId();
        java.lang.String str16 = accessToken13.getClientId();
        boolean boolean17 = accessToken13.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken18 = authService6.validateAccessToken(accessToken13);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test00144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00144");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user12 = osiamUserService2.replaceUser("GET", user4, accessToken11);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
    }

    @Test
    public void test00145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00145");
        org.osiam.client.OsiamConnector.setMaxConnections(401);
    }

    @Test
    public void test00146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00146");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.resources.scim.UpdateUser updateUser9 = null;
        org.osiam.client.OsiamGroupService.Builder builder11 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService12 = builder11.build();
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        boolean boolean20 = accessToken19.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet21 = accessToken19.getScopes();
        java.lang.String str22 = osiamGroupService12.extractErrorMessageForbidden(accessToken19);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user23 = osiamConnector7.updateUser("Insufficient scopes: []", updateUser9, accessToken19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(osiamGroupService12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(scopeSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Insufficient scopes: []" + "'", str22, "Insufficient scopes: []");
    }

    @Test
    public void test00147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00147");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        boolean boolean12 = accessToken10.isClientOnly();
        java.lang.String str13 = accessToken10.getClientId();
        boolean boolean14 = accessToken10.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.deleteGroup("Insufficient scopes: []", accessToken10);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test00148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00148");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.resources.scim.Group group8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        boolean boolean17 = accessToken15.isClientOnly();
        java.lang.String str18 = accessToken15.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group19 = osiamConnector7.createGroup(group8, accessToken15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test00149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00149");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = osiamGroupService2.extractErrorMessageDefault("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", statusType5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
    }

    @Test
    public void test00150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00150");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        java.util.Collection<java.lang.Object> objCollection5 = scopeDeserializer0.getKnownPropertyNames();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty7 = scopeDeserializer0.findBackReference("descending");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'descending': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNull(objCollection5);
    }

    @Test
    public void test00151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00151");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        java.util.Date date13 = accessToken12.getExpiresAt();
        java.lang.String str14 = accessToken12.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group15 = osiamGroupService4.getResource("", accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test00152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00152");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        boolean boolean12 = accessToken10.isClientOnly();
        java.lang.String str13 = accessToken10.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user14 = osiamConnector3.getCurrentUser(accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test00153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00153");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.core.Response.StatusType statusType14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        java.util.Date date22 = accessToken21.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.checkAndHandleResponse("Cannot connect to server", statusType14, accessToken21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test00154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00154");
        org.osiam.client.OsiamConnector.setReadTimeout((int) (byte) 1);
    }

    @Test
    public void test00155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00155");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        boolean boolean13 = accessToken11.isClientOnly();
        java.lang.String str14 = accessToken11.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user15 = osiamUserService2.replaceUser("PUT", user4, accessToken11);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test00156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00156");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.Scope scope7 = org.osiam.client.oauth.Scope.GET;
        boolean boolean9 = scope7.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope10 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException12 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean13 = scope10.equals((java.lang.Object) invalidAttributeException12);
        java.lang.String str14 = scope10.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.addScope(scope17);
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.DELETE;
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.addScope(scope22);
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException26 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean27 = scope24.equals((java.lang.Object) invalidAttributeException26);
        java.lang.String str28 = scope24.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder21.addScope(scope24);
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.addScope(scope32);
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException36 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean37 = scope34.equals((java.lang.Object) invalidAttributeException36);
        java.lang.String str38 = scope34.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder31.addScope(scope34);
        org.osiam.client.oauth.Scope[] scopeArray40 = new org.osiam.client.oauth.Scope[] { scope7, scope10, scope17, scope19, scope24, scope34 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken41 = authService6.retrieveAccessToken(scopeArray40);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(scope7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(scope10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GET" + "'", str14, "GET");
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GET" + "'", str28, "GET");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "GET" + "'", str38, "GET");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(scopeArray40);
    }

    @Test
    public void test00157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00157");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        java.lang.String str12 = accessToken10.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken13 = osiamConnector3.validateAccessToken(accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test00158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00158");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.Scope scope10 = new org.osiam.client.oauth.Scope("Authorization");
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException13 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean14 = scope11.equals((java.lang.Object) invalidAttributeException13);
        org.osiam.client.oauth.Scope scope16 = new org.osiam.client.oauth.Scope("Authorization");
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.POST;
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str19 = scope18.getValue();
        org.osiam.client.oauth.Scope[] scopeArray20 = new org.osiam.client.oauth.Scope[] { scope10, scope11, scope16, scope17, scope18 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken21 = authService6.retrieveAccessToken("authorization_code", "ME", scopeArray20);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PATCH" + "'", str19, "PATCH");
        org.junit.Assert.assertNotNull(scopeArray20);
    }

    @Test
    public void test00159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00159");
        org.osiam.client.exception.NoResultException noResultException1 = new org.osiam.client.exception.NoResultException("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test00160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00160");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.query.Query query10 = query9.previousPage();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: StartIndex < 1 is not possible.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
    }

    @Test
    public void test00161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00161");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        org.osiam.client.helper.ScopeSerializer scopeSerializer53 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean54 = scopeSerializer53.usesObjectId();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer55 = scopeSerializer0.replaceDelegatee((com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeSerializer53);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test00162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00162");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder4 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.descending("hi!");
        org.osiam.client.query.Query query13 = queryBuilder12.build();
        java.lang.String str14 = query13.toString();
        java.lang.String str15 = query13.getSortOrder();
        java.lang.String str16 = query13.getSortBy();
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        java.lang.String str24 = accessToken23.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult25 = osiamGroupService3.searchResources(query13, accessToken23);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "descending" + "'", str15, "descending");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str24, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test00163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00163");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken11);
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector3.revokeAllAccessTokens("org.osiam.client.exception.ConnectionInitializationException: PATCH", accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
    }

    @Test
    public void test00164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00164");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        boolean boolean11 = accessToken9.isClientOnly();
        java.lang.String str12 = accessToken9.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList13 = osiamUserService2.getAllUsers(accessToken9);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test00165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00165");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder3 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder5 = queryBuilder3.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder7 = queryBuilder5.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder5.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.descending("hi!");
        org.osiam.client.query.Query query12 = queryBuilder11.build();
        java.lang.String str13 = query12.toString();
        java.lang.String str14 = query12.getSortOrder();
        java.lang.String str15 = query12.getSortBy();
        java.lang.String str16 = query12.getFilter();
        org.osiam.client.oauth.AccessToken accessToken17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult18 = osiamUserService2.searchUsers(query12, accessToken17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(queryBuilder5);
        org.junit.Assert.assertNotNull(queryBuilder7);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str13, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "descending" + "'", str14, "descending");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test00166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00166");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer6 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass7 = scopeDeserializer6.handledType();
        java.lang.Class<?> wildcardClass8 = scopeDeserializer6.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer9 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer10 = scopeDeserializer6.unwrappingDeserializer(nameTransformer9);
        boolean boolean11 = scopeDeserializer6.isCachable();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer12 = scopeDeserializer0.replaceDelegatee((com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeDeserializer6);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test00167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00167");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.util.Date date11 = accessToken10.getExpiresAt();
        java.lang.String str12 = accessToken10.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser13 = osiamConnector3.getCurrentUserBasic(accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test00168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00168");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException17 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean18 = scope15.equals((java.lang.Object) invalidAttributeException17);
        java.lang.String str19 = scope15.getValue();
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope27 = new org.osiam.client.oauth.Scope("");
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray29 = new org.osiam.client.oauth.Scope[] { scope15, scope20, scope24, scope25, scope27, scope28 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken30 = authService6.refreshAccessToken(accessToken13, scopeArray29);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GET" + "'", str19, "GET");
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertNotNull(scopeArray29);
    }

    @Test
    public void test00169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00169");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.core.JsonParser jsonParser4 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.deserialize(jsonParser4, deserializationContext5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
    }

    @Test
    public void test00170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00170");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken accessToken3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList4 = osiamUserService2.getAllUsers(accessToken3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
    }

    @Test
    public void test00171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00171");
        org.osiam.client.OsiamConnector.setMaxConnections((int) (byte) 10);
    }

    @Test
    public void test00172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00172");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken9);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user13 = osiamUserService2.getCurrentUser(accessToken9);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test00173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00173");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer5 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.core.JsonParser jsonParser6 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext7 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer8 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean9 = scopeSerializer8.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException17 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean18 = scope15.equals((java.lang.Object) invalidAttributeException17);
        java.lang.String str19 = scope15.getValue();
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str22 = scope21.toString();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str25 = scope24.getValue();
        java.lang.String str26 = scope24.getValue();
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException29 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean30 = scope27.equals((java.lang.Object) invalidAttributeException29);
        java.lang.String str31 = scope27.getValue();
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException37 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean38 = scope35.equals((java.lang.Object) invalidAttributeException37);
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.GET;
        boolean boolean43 = scope41.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray45 = new org.osiam.client.oauth.Scope[] { scope14, scope15, scope20, scope21, scope23, scope24, scope27, scope32, scope33, scope34, scope35, scope39, scope40, scope41, scope44 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet46 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet46, scopeArray45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder11.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet46);
        boolean boolean49 = scopeSerializer8.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet46);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet50 = scopeDeserializer0.deserialize(jsonParser6, deserializationContext7, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet46);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Can not update object of type java.util.LinkedHashSet (by deserializer of type org.osiam.client.helper.ScopeDeserializer)");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNull(wildcardJsonDeserializer5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GET" + "'", str19, "GET");
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ME" + "'", str22, "ME");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PATCH" + "'", str25, "PATCH");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PATCH" + "'", str26, "PATCH");
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "GET" + "'", str31, "GET");
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertNotNull(scopeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test00174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00174");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        boolean boolean12 = accessToken10.isClientOnly();
        java.lang.String str13 = accessToken10.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user14 = osiamUserService2.createUser(user3, accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test00175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00175");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken accessToken4 = null;
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.deleteGroup("PUT", accessToken4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
    }

    @Test
    public void test00176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00176");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        java.util.Date date20 = accessToken19.getExpiresAt();
        java.lang.String str21 = accessToken19.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList22 = osiamGroupService3.getAllGroups(accessToken19);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test00177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00177");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        java.util.Date date23 = accessToken22.getExpiresAt();
        java.lang.String str24 = accessToken22.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken22);
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.checkAndHandleResponse("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", statusType15, accessToken22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test00178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00178");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        org.osiam.resources.scim.Group group15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        boolean boolean23 = accessToken22.isRefreshTokenExpired();
        boolean boolean24 = accessToken22.isClientOnly();
        java.lang.String str25 = accessToken22.getClientId();
        boolean boolean26 = accessToken22.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group27 = osiamGroupService2.updateResource("ME", group15, accessToken22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test00179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00179");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        boolean boolean21 = accessToken20.isRefreshTokenExpired();
        boolean boolean22 = accessToken20.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService3.deleteResource("hi!", accessToken20);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test00180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00180");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getRefreshToken();
        boolean boolean17 = accessToken13.isExpired();
        boolean boolean18 = accessToken13.isExpired();
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope[] scopeArray20 = new org.osiam.client.oauth.Scope[] { scope19 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken21 = authService6.refreshAccessToken(accessToken13, scopeArray20);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertNotNull(scopeArray20);
    }

    @Test
    public void test00181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00181");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.resources.scim.Group group5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        boolean boolean14 = accessToken12.isClientOnly();
        java.lang.String str15 = accessToken12.getRefreshToken();
        boolean boolean16 = accessToken12.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group17 = osiamGroupService4.createResource(group5, accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test00182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00182");
        org.osiam.client.exception.ForbiddenException forbiddenException2 = new org.osiam.client.exception.ForbiddenException("hi!");
        org.osiam.client.exception.OsiamClientException osiamClientException3 = new org.osiam.client.exception.OsiamClientException("GET", (java.lang.Throwable) forbiddenException2);
        java.lang.Class<?> wildcardClass4 = forbiddenException2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test00183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00183");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        org.osiam.client.query.Query query18 = queryBuilder16.build();
        org.osiam.client.OsiamGroupService.Builder builder20 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService21 = builder20.build();
        org.osiam.client.OsiamGroupService osiamGroupService22 = builder20.build();
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken29 = builder28.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken29);
        java.lang.String str31 = osiamGroupService22.extractErrorMessageForbidden(accessToken29);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult32 = osiamConnector7.searchUsers(query18, accessToken29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertNotNull(query18);
        org.junit.Assert.assertNotNull(osiamGroupService21);
        org.junit.Assert.assertNotNull(osiamGroupService22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Insufficient scopes: []" + "'", str31, "Insufficient scopes: []");
    }

    @Test
    public void test00184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00184");
        org.osiam.client.OsiamConnector.setMaxConnectionsPerRoute(401);
    }

    @Test
    public void test00185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00185");
        org.osiam.client.OsiamConnector.setConnectTimeout((int) (byte) 100);
    }

    @Test
    public void test00186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00186");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.resources.scim.User user5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        boolean boolean14 = accessToken12.isClientOnly();
        java.lang.String str15 = accessToken12.getRefreshToken();
        boolean boolean16 = accessToken12.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user17 = osiamUserService3.replaceUser("GET", user5, accessToken12);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test00187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00187");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken8 = authService6.retrieveAccessToken("Authorization");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
    }

    @Test
    public void test00188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00188");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.getAttributes();
        java.lang.String str11 = query9.toString();
        java.lang.String str12 = query9.getSortOrder();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.query.Query query13 = query9.previousPage();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: StartIndex < 1 is not possible.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Authorization" + "'", str10, "Authorization");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str11, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "descending" + "'", str12, "descending");
    }

    @Test
    public void test00189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00189");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        boolean boolean13 = accessToken11.isClientOnly();
        java.lang.String str14 = accessToken11.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService3.deleteGroup("", accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test00190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00190");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.resources.scim.Group group5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group15 = osiamConnector3.replaceGroup("Bearer ", group5, accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test00191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00191");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        boolean boolean17 = accessToken15.isClientOnly();
        java.lang.String str18 = accessToken15.getRefreshToken();
        boolean boolean19 = accessToken15.isExpired();
        boolean boolean20 = accessToken15.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector7.deleteGroup("", accessToken15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test00192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00192");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        boolean boolean15 = accessToken14.isRefreshTokenExpired();
        java.lang.String str16 = accessToken14.getUserId();
        java.lang.String str17 = accessToken14.getClientId();
        boolean boolean18 = accessToken14.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken19 = osiamConnector7.validateAccessToken(accessToken14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test00193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00193");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        boolean boolean14 = accessToken12.isClientOnly();
        java.lang.String str15 = accessToken12.getRefreshToken();
        boolean boolean16 = accessToken12.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService4.deleteResource("Insufficient scopes: []", accessToken12);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test00194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00194");
        org.osiam.client.OsiamConnector.setConnectTimeout((int) (short) 0);
    }

    @Test
    public void test00195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00195");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getClientId();
        boolean boolean17 = accessToken13.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService4.deleteGroup("GET", accessToken13);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test00196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00196");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.Scope[] scopeArray7 = new org.osiam.client.oauth.Scope[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI8 = authService6.getAuthorizationUri(scopeArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Can't create the login uri: redirect URI was not set.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(scopeArray7);
    }

    @Test
    public void test00197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00197");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        boolean boolean12 = accessToken10.isClientOnly();
        java.lang.String str13 = accessToken10.getRefreshToken();
        boolean boolean14 = accessToken10.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user15 = osiamConnector3.getCurrentUser(accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test00198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00198");
        org.osiam.client.OsiamConnector.setReadTimeout((int) '#');
    }

    @Test
    public void test00199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00199");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        org.osiam.resources.scim.Group group13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        boolean boolean21 = accessToken20.isRefreshTokenExpired();
        boolean boolean22 = accessToken20.isClientOnly();
        java.lang.String str23 = accessToken20.getClientId();
        boolean boolean24 = accessToken20.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group25 = osiamGroupService3.createGroup(group13, accessToken20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test00200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00200");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer3 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.core.JsonParser jsonParser4 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext5 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer6 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException14 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean15 = scope12.equals((java.lang.Object) invalidAttributeException14);
        java.lang.String str16 = scope12.getValue();
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str19 = scope18.toString();
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str22 = scope21.getValue();
        java.lang.String str23 = scope21.getValue();
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException26 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean27 = scope24.equals((java.lang.Object) invalidAttributeException26);
        java.lang.String str28 = scope24.getValue();
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException34 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean35 = scope32.equals((java.lang.Object) invalidAttributeException34);
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.GET;
        boolean boolean40 = scope38.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray42 = new org.osiam.client.oauth.Scope[] { scope11, scope12, scope17, scope18, scope20, scope21, scope24, scope29, scope30, scope31, scope32, scope36, scope37, scope38, scope41 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet43 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet43, scopeArray42);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder8.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet43);
        boolean boolean46 = scopeSerializer6.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet43);
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder48.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken53 = builder52.build();
        boolean boolean54 = accessToken53.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet55 = accessToken53.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator56 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider57 = null;
        scopeSerializer6.serialize(scopeSet55, jsonGenerator56, serializerProvider57);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider59 = null;
        org.osiam.client.oauth.AccessToken.Builder builder61 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date62 = null;
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder61.setRefreshTokenExpiresAt(date62);
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder61.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken66 = builder65.build();
        boolean boolean67 = accessToken66.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet68 = accessToken66.getScopes();
        boolean boolean69 = scopeSerializer6.isEmpty(serializerProvider59, scopeSet68);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet70 = scopeDeserializer0.deserialize(jsonParser4, deserializationContext5, scopeSet68);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Can not update object of type java.util.HashSet (by deserializer of type org.osiam.client.helper.ScopeDeserializer)");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardJsonDeserializer3);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GET" + "'", str16, "GET");
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ME" + "'", str19, "ME");
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PATCH" + "'", str22, "PATCH");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PATCH" + "'", str23, "PATCH");
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GET" + "'", str28, "GET");
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertNotNull(scopeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(accessToken53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(scopeSet55);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(accessToken66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(scopeSet68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test00201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00201");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder3 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder5 = queryBuilder3.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder7 = queryBuilder5.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder5.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.descending("hi!");
        org.osiam.client.query.Query query12 = queryBuilder11.build();
        org.osiam.client.query.Query query13 = queryBuilder11.build();
        long long14 = query13.getStartIndex();
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        boolean boolean23 = accessToken21.isClientOnly();
        java.lang.String str24 = accessToken21.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult25 = osiamUserService2.searchUsers(query13, accessToken21);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(queryBuilder5);
        org.junit.Assert.assertNotNull(queryBuilder7);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test00202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00202");
        org.osiam.client.OsiamConnector.setMaxConnections(100);
    }

    @Test
    public void test00203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00203");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType15 = null;
        org.osiam.client.OsiamGroupService.Builder builder17 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService18 = builder17.build();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        boolean boolean26 = accessToken25.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet27 = accessToken25.getScopes();
        java.lang.String str28 = osiamGroupService18.extractErrorMessageForbidden(accessToken25);
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.checkAndHandleResponse("org.osiam.client.exception.ForbiddenException: hi!", statusType15, accessToken25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(osiamGroupService18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(scopeSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Insufficient scopes: []" + "'", str28, "Insufficient scopes: []");
    }

    @Test
    public void test00204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00204");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList15 = osiamConnector7.getAllGroups(accessToken14);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
    }

    @Test
    public void test00205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00205");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        boolean boolean13 = accessToken11.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user14 = osiamUserService2.replaceUser("hi!", user4, accessToken11);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test00206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00206");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.lang.String str10 = accessToken9.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList11 = osiamUserService2.getAllUsers(accessToken9);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str10, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test00207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00207");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet12 = accessToken10.getScopes();
        boolean boolean13 = accessToken10.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user14 = osiamUserService2.createUser(user3, accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(scopeSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test00208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00208");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.resources.scim.User user8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user17 = osiamConnector7.createUser(user8, accessToken15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test00209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00209");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        java.util.Date date16 = accessToken15.getExpiresAt();
        java.lang.String str17 = accessToken15.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group18 = osiamConnector7.getGroup("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]", accessToken15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test00210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00210");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        boolean boolean14 = accessToken12.isClientOnly();
        java.lang.String str15 = accessToken12.getRefreshToken();
        boolean boolean16 = accessToken12.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group17 = osiamGroupService4.getResource("authorization_code", accessToken12);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test00211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00211");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group4 = osiamGroupService2.mapToResource("");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: ");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
    }

    @Test
    public void test00212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00212");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder3 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder5 = queryBuilder3.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder7 = queryBuilder5.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder5.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.descending("hi!");
        org.osiam.client.query.Query query12 = queryBuilder11.build();
        java.lang.String str13 = query12.toString();
        java.lang.String str14 = query12.toString();
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet23 = accessToken21.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult24 = osiamGroupService2.searchGroups(query12, accessToken21);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(queryBuilder5);
        org.junit.Assert.assertNotNull(queryBuilder7);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str13, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(scopeSet23);
    }

    @Test
    public void test00213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00213");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.resources.scim.User user5 = null;
        org.osiam.client.oauth.AccessToken accessToken6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user7 = osiamConnector3.replaceUser("Cannot connect to server", user5, accessToken6);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
    }

    @Test
    public void test00214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00214");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        boolean boolean13 = accessToken11.isClientOnly();
        java.lang.String str14 = accessToken11.getRefreshToken();
        boolean boolean15 = accessToken11.isExpired();
        boolean boolean16 = accessToken11.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList17 = osiamGroupService4.getAllGroups(accessToken11);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test00215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00215");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        boolean boolean23 = accessToken21.isClientOnly();
        java.lang.String str24 = accessToken21.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.deleteResource("hi!", accessToken21);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test00216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00216");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.resources.scim.Group group4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        java.lang.String str13 = accessToken11.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group14 = osiamConnector3.createGroup(group4, accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test00217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00217");
        org.osiam.client.OsiamConnector.setConnectTimeout((int) (byte) 1);
    }

    @Test
    public void test00218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00218");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.lang.String str11 = accessToken10.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser12 = osiamUserService3.getCurrentUserBasic(accessToken10);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str11, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test00219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00219");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        boolean boolean29 = accessToken28.isRefreshTokenExpired();
        boolean boolean30 = accessToken28.isClientOnly();
        java.lang.String str31 = accessToken28.getRefreshToken();
        boolean boolean32 = accessToken28.isExpired();
        boolean boolean33 = accessToken28.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList34 = osiamConnector7.getAllUsers(accessToken28);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test00220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00220");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer3 = new org.osiam.client.helper.ScopeDeserializer();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer4 = scopeDeserializer0.replaceDelegatee((com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeDeserializer3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
    }

    @Test
    public void test00221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00221");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group15 = osiamGroupService2.mapToResource("Insufficient scopes: []");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: Insufficient scopes: []");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
    }

    @Test
    public void test00222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00222");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        org.osiam.client.oauth.Scope[] scopeArray16 = new org.osiam.client.oauth.Scope[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken17 = authService6.refreshAccessToken(accessToken13, scopeArray16);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(scopeArray16);
    }

    @Test
    public void test00223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00223");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        java.lang.String str12 = accessToken10.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser13 = osiamUserService3.getCurrentUserBasic(accessToken10);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test00224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00224");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass2 = scopeSerializer0.handledType();
        org.osiam.client.helper.ScopeSerializer scopeSerializer3 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope9 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException11 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean12 = scope9.equals((java.lang.Object) invalidAttributeException11);
        java.lang.String str13 = scope9.getValue();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str16 = scope15.toString();
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str19 = scope18.getValue();
        java.lang.String str20 = scope18.getValue();
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException23 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean24 = scope21.equals((java.lang.Object) invalidAttributeException23);
        java.lang.String str25 = scope21.getValue();
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException31 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean32 = scope29.equals((java.lang.Object) invalidAttributeException31);
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.GET;
        boolean boolean37 = scope35.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray39 = new org.osiam.client.oauth.Scope[] { scope8, scope9, scope14, scope15, scope17, scope18, scope21, scope26, scope27, scope28, scope29, scope33, scope34, scope35, scope38 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet40 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet40, scopeArray39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder5.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet40);
        boolean boolean43 = scopeSerializer3.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet40);
        org.osiam.client.oauth.AccessToken.Builder builder45 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setRefreshTokenExpiresAt(date46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder45.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken50 = builder49.build();
        boolean boolean51 = accessToken50.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet52 = accessToken50.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator53 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider54 = null;
        scopeSerializer3.serialize(scopeSet52, jsonGenerator53, serializerProvider54);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator56 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider57 = null;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer typeSerializer58 = null;
        // The following exception was thrown during execution in test generation
        try {
            scopeSerializer0.serializeWithType(scopeSet52, jsonGenerator56, serializerProvider57, typeSerializer58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(scopeSetClass2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertNotNull(scope9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GET" + "'", str13, "GET");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ME" + "'", str16, "ME");
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PATCH" + "'", str19, "PATCH");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PATCH" + "'", str20, "PATCH");
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GET" + "'", str25, "GET");
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertNotNull(scopeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(accessToken50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(scopeSet52);
    }

    @Test
    public void test00225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00225");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        java.lang.String str14 = osiamGroupService4.extractErrorMessageForbidden(accessToken12);
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.toString();
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken35 = builder32.build();
        java.lang.String str36 = accessToken35.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult37 = osiamGroupService4.searchResources(query24, accessToken35);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str26, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str36, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
    }

    @Test
    public void test00226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00226");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer3 = scopeDeserializer0.getDelegatee();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty5 = scopeDeserializer0.findBackReference("Authorization");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'Authorization': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(wildcardJsonDeserializer3);
    }

    @Test
    public void test00227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00227");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        javax.ws.rs.core.Response.StatusType statusType14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = osiamGroupService3.extractErrorMessage("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]", statusType14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
    }

    @Test
    public void test00228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00228");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException7 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean8 = scope5.equals((java.lang.Object) invalidAttributeException7);
        java.lang.String str9 = scope5.getValue();
        org.osiam.client.oauth.Scope scope10 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str12 = scope11.toString();
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str15 = scope14.getValue();
        java.lang.String str16 = scope14.getValue();
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException19 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean20 = scope17.equals((java.lang.Object) invalidAttributeException19);
        java.lang.String str21 = scope17.getValue();
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException27 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean28 = scope25.equals((java.lang.Object) invalidAttributeException27);
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        boolean boolean33 = scope31.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray35 = new org.osiam.client.oauth.Scope[] { scope4, scope5, scope10, scope11, scope13, scope14, scope17, scope22, scope23, scope24, scope25, scope29, scope30, scope31, scope34 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet36 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet36, scopeArray35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder1.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet36);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder1.setUserName("client_credentials");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GET" + "'", str9, "GET");
        org.junit.Assert.assertNotNull(scope10);
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ME" + "'", str12, "ME");
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PATCH" + "'", str15, "PATCH");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GET" + "'", str21, "GET");
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(scopeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test00229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00229");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.Scope scope7 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException9 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean10 = scope7.equals((java.lang.Object) invalidAttributeException9);
        java.lang.String str11 = scope7.getValue();
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException15 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean16 = scope13.equals((java.lang.Object) invalidAttributeException15);
        org.osiam.client.oauth.Scope scope18 = new org.osiam.client.oauth.Scope("");
        boolean boolean20 = scope18.equals((java.lang.Object) (short) 0);
        org.osiam.client.oauth.Scope[] scopeArray21 = new org.osiam.client.oauth.Scope[] { scope7, scope12, scope13, scope18 };
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI22 = authService6.getAuthorizationUri(scopeArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Can't create the login uri: redirect URI was not set.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(scope7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GET" + "'", str11, "GET");
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(scopeArray21);
    }

    @Test
    public void test00230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00230");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.Scope scope7 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException9 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean10 = scope7.equals((java.lang.Object) invalidAttributeException9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.addScope(scope13);
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException17 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean18 = scope15.equals((java.lang.Object) invalidAttributeException17);
        java.lang.String str19 = scope15.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder12.addScope(scope15);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.addScope(scope27);
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.addScope(scope32);
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException36 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean37 = scope34.equals((java.lang.Object) invalidAttributeException36);
        java.lang.String str38 = scope34.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder31.addScope(scope34);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder43.addScope(scope46);
        org.osiam.client.oauth.Scope[] scopeArray48 = new org.osiam.client.oauth.Scope[] { scope7, scope27, scope29, scope46 };
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI49 = authService6.getAuthorizationUri(scopeArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Can't create the login uri: redirect URI was not set.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(scope7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GET" + "'", str19, "GET");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "GET" + "'", str38, "GET");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(scopeArray48);
    }

    @Test
    public void test00231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00231");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        java.lang.String str14 = osiamGroupService4.extractErrorMessageForbidden(accessToken12);
        org.osiam.resources.scim.Group group15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        java.util.Date date23 = accessToken22.getExpiresAt();
        java.lang.String str24 = accessToken22.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group25 = osiamGroupService4.createGroup(group15, accessToken22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test00232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00232");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = osiamGroupService4.extractErrorMessage("org.osiam.client.exception.ConnectionInitializationException: PATCH", statusType7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
    }

    @Test
    public void test00233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00233");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        boolean boolean13 = accessToken11.isClientOnly();
        java.lang.String str14 = accessToken11.getRefreshToken();
        boolean boolean15 = accessToken11.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector3.deleteGroup("Cannot connect to server", accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test00234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00234");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.resources.scim.User user22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken31 = builder28.build();
        java.lang.String str32 = accessToken31.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user33 = osiamConnector7.createUser(user22, accessToken31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(accessToken31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str32, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
    }

    @Test
    public void test00235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00235");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("ME");
        java.lang.Class<?> wildcardClass6 = builder5.getClass();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test00236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00236");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = osiamGroupService4.extractErrorMessageDefault("org.osiam.client.exception.ConnectionInitializationException: PATCH", statusType7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
    }

    @Test
    public void test00237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00237");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken14);
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException18 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean19 = scope16.equals((java.lang.Object) invalidAttributeException18);
        java.lang.String str20 = scope16.getValue();
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str22 = scope21.toString();
        java.lang.String str23 = scope21.getValue();
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.GET;
        boolean boolean26 = scope24.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope[] scopeArray27 = new org.osiam.client.oauth.Scope[] { scope16, scope21, scope24 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken28 = osiamConnector7.refreshAccessToken(accessToken14, scopeArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GET" + "'", str20, "GET");
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ME" + "'", str22, "ME");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ME" + "'", str23, "ME");
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(scopeArray27);
    }

    @Test
    public void test00238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00238");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.core.JsonParser jsonParser2 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.util.Date date11 = accessToken10.getExpiresAt();
        java.lang.String str12 = accessToken10.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet13 = accessToken10.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet14 = scopeDeserializer0.deserialize(jsonParser2, deserializationContext3, scopeSet13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Can not update object of type java.util.HashSet (by deserializer of type org.osiam.client.helper.ScopeDeserializer)");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(scopeSet13);
    }

    @Test
    public void test00239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00239");
        org.osiam.client.OsiamConnector.setReadTimeout((int) (byte) -1);
    }

    @Test
    public void test00240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00240");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.Scope[] scopeArray7 = new org.osiam.client.oauth.Scope[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken8 = authService6.retrieveAccessToken(scopeArray7);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(scopeArray7);
    }

    @Test
    public void test00241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00241");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.addScope(scope11);
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException15 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean16 = scope13.equals((java.lang.Object) invalidAttributeException15);
        java.lang.String str17 = scope13.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder10.addScope(scope13);
        org.osiam.client.oauth.Scope scope20 = new org.osiam.client.oauth.Scope("");
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.addScope(scope23);
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException27 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean28 = scope25.equals((java.lang.Object) invalidAttributeException27);
        java.lang.String str29 = scope25.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder22.addScope(scope25);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.addScope(scope39);
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException43 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean44 = scope41.equals((java.lang.Object) invalidAttributeException43);
        java.lang.String str45 = scope41.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder38.addScope(scope41);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder34.addScope(scope41);
        org.osiam.client.oauth.AccessToken.Builder builder49 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.addScope(scope50);
        org.osiam.client.oauth.Scope scope52 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException54 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean55 = scope52.equals((java.lang.Object) invalidAttributeException54);
        java.lang.String str56 = scope52.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder49.addScope(scope52);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder61.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder65 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope66 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder65.addScope(scope66);
        org.osiam.client.oauth.Scope scope68 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException70 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean71 = scope68.equals((java.lang.Object) invalidAttributeException70);
        java.lang.String str72 = scope68.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder65.addScope(scope68);
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder61.addScope(scope68);
        org.osiam.client.oauth.Scope scope75 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str76 = scope75.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder78 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope79 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder80 = builder78.addScope(scope79);
        org.osiam.client.oauth.Scope scope81 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException83 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean84 = scope81.equals((java.lang.Object) invalidAttributeException83);
        java.lang.String str85 = scope81.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder86 = builder78.addScope(scope81);
        org.osiam.client.oauth.Scope[] scopeArray87 = new org.osiam.client.oauth.Scope[] { scope13, scope20, scope41, scope68, scope75, scope81 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken88 = authService6.retrieveAccessToken("descending", "PATCH", scopeArray87);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GET" + "'", str17, "GET");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GET" + "'", str29, "GET");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "GET" + "'", str45, "GET");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(scope52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "GET" + "'", str56, "GET");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(scope66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(scope68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "GET" + "'", str72, "GET");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(scope75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "PATCH" + "'", str76, "PATCH");
        org.junit.Assert.assertNotNull(scope79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(scope81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "GET" + "'", str85, "GET");
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(scopeArray87);
    }

    @Test
    public void test00242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00242");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder6 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        boolean boolean15 = accessToken14.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet16 = accessToken14.getScopes();
        java.lang.String str17 = osiamGroupService7.extractErrorMessageForbidden(accessToken14);
        boolean boolean18 = accessToken14.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group19 = osiamGroupService3.getGroup("Cannot connect to server", accessToken14);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(scopeSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Insufficient scopes: []" + "'", str17, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test00243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00243");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.OsiamGroupService.Builder builder9 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        boolean boolean18 = accessToken17.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet19 = accessToken17.getScopes();
        java.lang.String str20 = osiamGroupService10.extractErrorMessageForbidden(accessToken17);
        boolean boolean21 = accessToken17.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            authService6.revokeAllAccessTokens("Cannot connect to server", accessToken17);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(osiamGroupService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(scopeSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test00244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00244");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.resources.scim.Group group5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        java.util.Date date13 = accessToken12.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group14 = osiamGroupService3.updateGroup("Cannot connect to server", group5, accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test00245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00245");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        org.osiam.client.query.QueryBuilder queryBuilder14 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder16.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.descending("hi!");
        org.osiam.client.query.Query query23 = queryBuilder22.build();
        java.lang.String str24 = query23.toString();
        java.lang.String str25 = query23.getSortOrder();
        java.lang.String str26 = query23.getSortBy();
        org.osiam.client.OsiamGroupService.Builder builder28 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService29 = builder28.build();
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken36 = builder35.build();
        boolean boolean37 = accessToken36.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet38 = accessToken36.getScopes();
        java.lang.String str39 = osiamGroupService29.extractErrorMessageForbidden(accessToken36);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult40 = osiamGroupService2.searchGroups(query23, accessToken36);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(query23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str24, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "descending" + "'", str25, "descending");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(osiamGroupService29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(accessToken36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(scopeSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
    }

    @Test
    public void test00246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00246");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope9 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.addScope(scope9);
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException13 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean14 = scope11.equals((java.lang.Object) invalidAttributeException13);
        java.lang.String str15 = scope11.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder8.addScope(scope11);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setUserId("");
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str22 = scope21.toString();
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder20.addScope(scope21);
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope[] scopeArray26 = new org.osiam.client.oauth.Scope[] { scope21, scope24, scope25 };
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI27 = authService6.getAuthorizationUri(scopeArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Can't create the login uri: redirect URI was not set.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(scope9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GET" + "'", str15, "GET");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PUT" + "'", str22, "PUT");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scopeArray26);
    }

    @Test
    public void test00247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00247");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        java.util.Date date15 = accessToken14.getExpiresAt();
        java.lang.String str16 = accessToken14.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken14);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken18 = osiamConnector7.validateAccessToken(accessToken14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test00248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00248");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.OsiamGroupService.Builder builder24 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService25 = builder24.build();
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        boolean boolean33 = accessToken32.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet34 = accessToken32.getScopes();
        java.lang.String str35 = osiamGroupService25.extractErrorMessageForbidden(accessToken32);
        boolean boolean36 = accessToken32.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user37 = osiamConnector7.getUser("Bearer ", accessToken32);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(osiamGroupService25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(scopeSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test00249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00249");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        javax.ws.rs.core.Response.StatusType statusType14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = osiamGroupService3.extractErrorMessage("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", statusType14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
    }

    @Test
    public void test00250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00250");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        org.osiam.resources.scim.Group group14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        boolean boolean23 = accessToken21.isClientOnly();
        java.lang.String str24 = accessToken21.getRefreshToken();
        java.lang.String str25 = accessToken21.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group26 = osiamGroupService3.updateGroup("ME", group14, accessToken21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str25, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test00251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00251");
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException3 = new org.osiam.client.exception.InvalidAttributeException("");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException4 = new org.osiam.client.exception.ConnectionInitializationException("Bearer ", (java.lang.Throwable) invalidAttributeException3);
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException5 = new org.osiam.client.exception.ConnectionInitializationException("client_credentials", (java.lang.Throwable) connectionInitializationException4);
        java.lang.Class<?> wildcardClass6 = connectionInitializationException4.getClass();
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test00252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00252");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.resources.scim.User user4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet13 = accessToken11.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user14 = osiamUserService3.createUser(user4, accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(scopeSet13);
    }

    @Test
    public void test00253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00253");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder6 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder6.build();
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken15);
        java.lang.String str17 = osiamGroupService8.extractErrorMessageForbidden(accessToken15);
        java.util.Date date18 = accessToken15.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken15);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user20 = osiamUserService3.getUser("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken15);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Insufficient scopes: []" + "'", str17, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test00254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00254");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.descending("hi!");
        org.osiam.client.query.Query query31 = queryBuilder30.build();
        java.lang.String str32 = query31.toString();
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        boolean boolean40 = accessToken39.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet41 = accessToken39.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult42 = osiamConnector7.searchGroups(query31, accessToken39);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(query31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str32, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(scopeSet41);
    }

    @Test
    public void test00255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00255");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder3 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder5 = queryBuilder3.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder7 = queryBuilder5.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder5.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.descending("hi!");
        org.osiam.client.query.Query query12 = queryBuilder11.build();
        java.lang.String str13 = query12.toString();
        java.lang.String str14 = query12.getSortOrder();
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        boolean boolean23 = accessToken21.isClientOnly();
        java.lang.String str24 = accessToken21.getRefreshToken();
        boolean boolean25 = accessToken21.isExpired();
        boolean boolean26 = accessToken21.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult27 = osiamUserService2.searchUsers(query12, accessToken21);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(queryBuilder5);
        org.junit.Assert.assertNotNull(queryBuilder7);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str13, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "descending" + "'", str14, "descending");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test00256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00256");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        com.fasterxml.jackson.core.JsonParser jsonParser1 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.deserialize(jsonParser1, deserializationContext2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00257");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder3 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder5 = queryBuilder3.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder7 = queryBuilder5.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder5.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.descending("hi!");
        org.osiam.client.query.Query query12 = queryBuilder11.build();
        java.lang.String str13 = query12.toString();
        java.lang.String str14 = query12.getSortOrder();
        java.lang.String str15 = query12.getSortBy();
        java.lang.String str16 = query12.getSortBy();
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken25 = builder22.build();
        java.lang.String str26 = accessToken25.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult27 = osiamGroupService2.searchResources(query12, accessToken25);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(queryBuilder5);
        org.junit.Assert.assertNotNull(queryBuilder7);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str13, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "descending" + "'", str14, "descending");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str26, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
    }

    @Test
    public void test00258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00258");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        java.util.Date date29 = accessToken28.getExpiresAt();
        java.lang.String str30 = accessToken28.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet31 = accessToken28.getScopes();
        java.util.Date date32 = accessToken28.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken33 = osiamConnector7.validateAccessToken(accessToken28);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(scopeSet31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test00259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00259");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        java.util.Date date29 = accessToken28.getExpiresAt();
        java.lang.String str30 = accessToken28.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList31 = osiamConnector7.getAllUsers(accessToken28);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test00260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00260");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.lang.String str10 = accessToken9.toString();
        java.lang.String str11 = accessToken9.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user12 = osiamUserService2.getCurrentUser(accessToken9);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str10, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test00261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00261");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.resources.scim.User user23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken32 = builder29.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user33 = osiamConnector7.replaceUser("GET", user23, accessToken32);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
    }

    @Test
    public void test00262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00262");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        org.osiam.resources.scim.Group group6 = null;
        org.osiam.client.OsiamGroupService.Builder builder8 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder8.build();
        org.osiam.client.OsiamGroupService osiamGroupService10 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken17);
        java.lang.String str19 = osiamGroupService10.extractErrorMessageForbidden(accessToken17);
        java.util.Date date20 = accessToken17.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group21 = osiamGroupService3.replaceResource("org.osiam.client.exception.ConnectionInitializationException: PATCH", group6, accessToken17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(osiamGroupService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test00263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00263");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        java.lang.String str15 = accessToken13.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group16 = osiamConnector5.getGroup("client_credentials", accessToken13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test00264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00264");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.addScope(scope11);
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException15 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean16 = scope13.equals((java.lang.Object) invalidAttributeException15);
        java.lang.String str17 = scope13.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder10.addScope(scope13);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.addScope(scope27);
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException31 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean32 = scope29.equals((java.lang.Object) invalidAttributeException31);
        java.lang.String str33 = scope29.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder26.addScope(scope29);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder22.addScope(scope29);
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.DELETE;
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.addScope(scope39);
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException43 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean44 = scope41.equals((java.lang.Object) invalidAttributeException43);
        java.lang.String str45 = scope41.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder38.addScope(scope41);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope53 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder50.addScope(scope53);
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope57 = new org.osiam.client.oauth.Scope("");
        boolean boolean59 = scope57.equals((java.lang.Object) (short) 0);
        org.osiam.client.oauth.Scope[] scopeArray60 = new org.osiam.client.oauth.Scope[] { scope29, scope36, scope53, scope55, scope57 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken61 = authService6.retrieveAccessToken("Insufficient scopes: []", "client_credentials", scopeArray60);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GET" + "'", str17, "GET");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GET" + "'", str33, "GET");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "GET" + "'", str45, "GET");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(scope53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(scopeArray60);
    }

    @Test
    public void test00265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00265");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.resources.scim.User user7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        java.util.Date date15 = accessToken14.getExpiresAt();
        java.lang.String str16 = accessToken14.getUserName();
        java.lang.String str17 = accessToken14.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user18 = osiamConnector5.replaceUser("org.osiam.client.exception.ConnectionInitializationException: PATCH", user7, accessToken14);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test00266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00266");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = osiamGroupService3.extractErrorMessage("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", statusType6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
    }

    @Test
    public void test00267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00267");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.descending("hi!");
        org.osiam.client.query.Query query31 = queryBuilder30.build();
        java.lang.String str32 = query31.toString();
        org.osiam.client.query.QueryBuilder queryBuilder33 = new org.osiam.client.query.QueryBuilder(query31);
        org.osiam.client.oauth.AccessToken.Builder builder35 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date36 = null;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setRefreshTokenExpiresAt(date36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder35.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken40 = builder39.build();
        java.lang.String str41 = accessToken40.toString();
        java.lang.String str42 = accessToken40.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult43 = osiamConnector7.searchUsers(query31, accessToken40);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(query31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str32, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(accessToken40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str41, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test00268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00268");
        org.osiam.client.OsiamConnector.setMaxConnectionsPerRoute(1);
    }

    @Test
    public void test00269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00269");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.resources.scim.Group group13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        java.util.Date date21 = accessToken20.getExpiresAt();
        java.lang.String str22 = accessToken20.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken20);
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        boolean boolean31 = accessToken30.isRefreshTokenExpired();
        boolean boolean32 = accessToken30.isClientOnly();
        java.lang.String str33 = accessToken30.getClientId();
        boolean boolean34 = accessToken30.isClientOnly();
        boolean boolean35 = accessToken20.equals((java.lang.Object) accessToken30);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group36 = osiamGroupService2.createResource(group13, accessToken30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test00270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00270");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope[] scopeArray23 = new org.osiam.client.oauth.Scope[] { scope22 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken24 = osiamConnector7.retrieveAccessToken(scopeArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertNotNull(scopeArray23);
    }

    @Test
    public void test00271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00271");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            osiamUserService2.deleteUser("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]", accessToken6);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(accessToken6);
    }

    @Test
    public void test00272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00272");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.Scope scope7 = org.osiam.client.oauth.Scope.DELETE;
        org.osiam.client.oauth.Scope[] scopeArray8 = new org.osiam.client.oauth.Scope[] { scope7 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken9 = authService6.retrieveAccessToken(scopeArray8);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(scope7);
        org.junit.Assert.assertNotNull(scopeArray8);
    }

    @Test
    public void test00273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00273");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        java.lang.String str17 = accessToken15.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.descending("hi!");
        org.osiam.client.query.Query query27 = queryBuilder26.build();
        java.lang.String str28 = query27.toString();
        java.lang.String str29 = query27.getSortOrder();
        java.lang.String str30 = query27.getSortBy();
        java.lang.String str31 = query27.getFilter();
        java.lang.String str32 = query27.toString();
        boolean boolean33 = accessToken15.equals((java.lang.Object) query27);
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector7.deleteUser("org.osiam.client.exception.ConnectionInitializationException: PATCH", accessToken15);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(query27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str28, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "descending" + "'", str29, "descending");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str32, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test00274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00274");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        boolean boolean29 = accessToken28.isRefreshTokenExpired();
        java.lang.String str30 = accessToken28.getUserId();
        java.lang.String str31 = accessToken28.getClientId();
        java.lang.String str32 = accessToken28.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken33 = osiamConnector7.validateAccessToken(accessToken28);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test00275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00275");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.resources.scim.Group group8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        boolean boolean17 = accessToken15.isClientOnly();
        java.lang.String str18 = accessToken15.getRefreshToken();
        boolean boolean19 = accessToken15.isExpired();
        boolean boolean20 = accessToken15.isExpired();
        java.lang.String str21 = accessToken15.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group22 = osiamConnector7.createGroup(group8, accessToken15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test00276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00276");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        boolean boolean1 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet2 = scopeDeserializer0.getEmptyValue();
        com.fasterxml.jackson.core.JsonParser jsonParser3 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext4 = null;
        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeserializer5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj6 = scopeDeserializer0.deserializeWithType(jsonParser3, deserializationContext4, typeDeserializer5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(scopeSet2);
    }

    @Test
    public void test00277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00277");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        org.osiam.client.helper.ScopeSerializer scopeSerializer53 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean54 = scopeSerializer53.usesObjectId();
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope56 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.AccessToken.Builder builder58 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope59 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.addScope(scope59);
        org.osiam.client.oauth.Scope scope61 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException63 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean64 = scope61.equals((java.lang.Object) invalidAttributeException63);
        java.lang.String str65 = scope61.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder58.addScope(scope61);
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder66.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder68.setUserId("");
        org.osiam.client.oauth.Scope scope71 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder70.addScope(scope71);
        org.osiam.client.oauth.AccessToken.Builder builder74 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope75 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder74.addScope(scope75);
        org.osiam.client.oauth.Scope scope77 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str78 = scope77.getValue();
        org.osiam.client.oauth.Scope[] scopeArray79 = new org.osiam.client.oauth.Scope[] { scope55, scope56, scope71, scope75, scope77 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet80 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet80, scopeArray79);
        boolean boolean82 = scopeSerializer53.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet80);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator83 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider84 = null;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer typeSerializer85 = null;
        // The following exception was thrown during execution in test generation
        try {
            scopeSerializer0.serializeWithType((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet80, jsonGenerator83, serializerProvider84, typeSerializer85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertNotNull(scope59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(scope61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "GET" + "'", str65, "GET");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(scope71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(scope75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(scope77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "PATCH" + "'", str78, "PATCH");
        org.junit.Assert.assertNotNull(scopeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test00278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00278");
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.AbstractOsiamService.Builder<org.osiam.resources.scim.User> userBuilder1 = new org.osiam.client.AbstractOsiamService.Builder<org.osiam.resources.scim.User>("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00279");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken5 = osiamConnector3.retrieveAccessToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
    }

    @Test
    public void test00280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00280");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken20);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList22 = osiamGroupService2.getAllResources(accessToken20);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
    }

    @Test
    public void test00281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00281");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        boolean boolean17 = accessToken15.isClientOnly();
        java.lang.String str18 = accessToken15.getRefreshToken();
        boolean boolean19 = accessToken15.isExpired();
        boolean boolean20 = accessToken15.isExpired();
        java.lang.String str21 = accessToken15.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user22 = osiamConnector7.getUser("2024-03-22T13:51:20.388", accessToken15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test00282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00282");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = osiamGroupService2.extractErrorMessageUnauthorized("Bearer ", statusType4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
    }

    @Test
    public void test00283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00283");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.resources.scim.User user22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken29 = builder28.build();
        boolean boolean30 = accessToken29.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet31 = accessToken29.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user32 = osiamConnector7.createUser(user22, accessToken29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(scopeSet31);
    }

    @Test
    public void test00284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00284");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        org.osiam.resources.scim.Group group6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group16 = osiamGroupService3.updateGroup("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", group6, accessToken13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test00285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00285");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.OsiamGroupService.Builder builder8 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder8.build();
        org.osiam.client.OsiamGroupService osiamGroupService10 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken17);
        java.lang.String str19 = osiamGroupService10.extractErrorMessageForbidden(accessToken17);
        java.util.Date date20 = accessToken17.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user21 = osiamConnector5.getUser("Cannot connect to server", accessToken17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(osiamGroupService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test00286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00286");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        java.lang.String str15 = accessToken14.toString();
        java.lang.String str16 = accessToken14.getType();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector7.revokeAccessToken(accessToken14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str15, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test00287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00287");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.util.Date date12 = accessToken11.getExpiresAt();
        java.lang.String str13 = accessToken11.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken11);
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        boolean boolean23 = accessToken21.isClientOnly();
        java.lang.String str24 = accessToken21.getClientId();
        boolean boolean25 = accessToken21.isClientOnly();
        boolean boolean26 = accessToken11.equals((java.lang.Object) accessToken21);
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.checkAndHandleResponse("org.osiam.client.exception.ForbiddenException: hi!", statusType4, accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test00288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00288");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.Scope scope7 = org.osiam.client.oauth.Scope.POST;
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str9 = scope8.getValue();
        java.lang.String str10 = scope8.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.addScope(scope13);
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException17 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean18 = scope15.equals((java.lang.Object) invalidAttributeException17);
        java.lang.String str19 = scope15.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder12.addScope(scope15);
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken27 = builder26.build();
        java.lang.String str28 = accessToken27.toString();
        boolean boolean29 = scope15.equals((java.lang.Object) str28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.addScope(scope32);
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException36 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean37 = scope34.equals((java.lang.Object) invalidAttributeException36);
        java.lang.String str38 = scope34.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder31.addScope(scope34);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder43.addScope(scope46);
        org.osiam.client.oauth.Scope[] scopeArray48 = new org.osiam.client.oauth.Scope[] { scope7, scope8, scope15, scope46 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken49 = authService6.retrieveAccessToken(scopeArray48);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(scope7);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PATCH" + "'", str9, "PATCH");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PATCH" + "'", str10, "PATCH");
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GET" + "'", str19, "GET");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str28, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "GET" + "'", str38, "GET");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(scopeArray48);
    }

    @Test
    public void test00289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00289");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder5 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder7 = queryBuilder5.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder7.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder7.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.descending("hi!");
        org.osiam.client.query.Query query14 = queryBuilder13.build();
        java.lang.String str15 = query14.toString();
        java.lang.String str16 = query14.getSortOrder();
        java.lang.String str17 = query14.getSortBy();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        boolean boolean25 = accessToken24.isRefreshTokenExpired();
        java.lang.String str26 = accessToken24.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult27 = osiamGroupService4.searchGroups(query14, accessToken24);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(queryBuilder7);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(query14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str15, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "descending" + "'", str16, "descending");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test00290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00290");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.resources.scim.UpdateUser updateUser7 = null;
        org.osiam.client.OsiamGroupService.Builder builder9 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService10 = builder9.build();
        org.osiam.client.OsiamGroupService osiamGroupService11 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken18);
        java.lang.String str20 = osiamGroupService11.extractErrorMessageForbidden(accessToken18);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user21 = osiamConnector5.updateUser("PATCH", updateUser7, accessToken18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(osiamGroupService10);
        org.junit.Assert.assertNotNull(osiamGroupService11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
    }

    @Test
    public void test00291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00291");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        boolean boolean13 = accessToken11.isClientOnly();
        java.lang.String str14 = accessToken11.getRefreshToken();
        boolean boolean15 = accessToken11.isExpired();
        boolean boolean16 = accessToken11.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group17 = osiamGroupService3.getResource("client_credentials", accessToken11);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test00292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00292");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder4 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.descending("hi!");
        org.osiam.client.query.Query query13 = queryBuilder12.build();
        java.lang.String str14 = query13.toString();
        java.lang.String str15 = query13.toString();
        org.osiam.client.query.Query query16 = query13.nextPage();
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        java.util.Date date24 = accessToken23.getExpiresAt();
        java.lang.String str25 = accessToken23.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult26 = osiamGroupService3.searchResources(query13, accessToken23);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str15, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test00293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00293");
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException2 = new org.osiam.client.exception.InvalidAttributeException("");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException3 = new org.osiam.client.exception.ConnectionInitializationException("Bearer ", (java.lang.Throwable) invalidAttributeException2);
        org.osiam.client.exception.ForbiddenException forbiddenException5 = new org.osiam.client.exception.ForbiddenException("hi!");
        connectionInitializationException3.addSuppressed((java.lang.Throwable) forbiddenException5);
        int int7 = forbiddenException5.getHttpStatusCode();
        java.lang.String str8 = forbiddenException5.toString();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 403 + "'", int7 == 403);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.osiam.client.exception.ForbiddenException: hi!" + "'", str8, "org.osiam.client.exception.ForbiddenException: hi!");
    }

    @Test
    public void test00294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00294");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.Scope scope9 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope[] scopeArray10 = new org.osiam.client.oauth.Scope[] { scope9 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken11 = authService6.retrieveAccessToken("Insufficient scopes: []", "2024-03-22T13:51:20.388", scopeArray10);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(scope9);
        org.junit.Assert.assertNotNull(scopeArray10);
    }

    @Test
    public void test00295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00295");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.Scope[] scopeArray6 = new org.osiam.client.oauth.Scope[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI7 = osiamConnector5.getAuthorizationUri(scopeArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Can't create the login uri: redirect URI was not set.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(scopeArray6);
    }

    @Test
    public void test00296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00296");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.resources.scim.Group group4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.util.Date date12 = accessToken11.getExpiresAt();
        java.lang.String str13 = accessToken11.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group14 = osiamGroupService2.createGroup(group4, accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test00297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00297");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        java.util.Date date29 = accessToken28.getExpiresAt();
        java.lang.String str30 = accessToken28.getUserName();
        java.lang.String str31 = accessToken28.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken32 = osiamConnector7.validateAccessToken(accessToken28);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test00298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00298");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        boolean boolean17 = accessToken15.isClientOnly();
        java.lang.String str18 = accessToken15.getRefreshToken();
        java.lang.String str19 = accessToken15.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user20 = osiamConnector7.getUser("2024-03-22T13:51:20.388", accessToken15);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str19, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test00299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00299");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        java.lang.String str12 = accessToken10.getUserId();
        java.lang.String str13 = accessToken10.getClientId();
        boolean boolean14 = accessToken10.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.deleteGroup("Insufficient scopes: []", accessToken10);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test00300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00300");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        java.lang.String str40 = accessToken39.toString();
        java.lang.String str41 = accessToken39.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector5.deleteGroup("Insufficient scopes: []", accessToken39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str40, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test00301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00301");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty4 = scopeDeserializer0.findBackReference("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference '': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
    }

    @Test
    public void test00302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00302");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException34 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean35 = scope32.equals((java.lang.Object) invalidAttributeException34);
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope32 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken37 = osiamConnector5.retrieveAccessToken(scopeArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(scopeArray36);
    }

    @Test
    public void test00303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00303");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.OsiamGroupService.Builder builder8 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken16.getScopes();
        java.lang.String str19 = osiamGroupService9.extractErrorMessageForbidden(accessToken16);
        boolean boolean20 = accessToken16.isClientOnly();
        java.lang.String str21 = authService6.extractErrorMessageForbidden(accessToken16);
        org.osiam.client.oauth.AccessToken accessToken22 = null;
        // The following exception was thrown during execution in test generation
        try {
            authService6.revokeAccessToken(accessToken22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
    }

    @Test
    public void test00304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00304");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty4 = scopeDeserializer0.findBackReference("authorization_code");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'authorization_code': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
    }

    @Test
    public void test00305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00305");
        org.osiam.client.exception.OsiamClientException osiamClientException1 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.ForbiddenException: hi!");
    }

    @Test
    public void test00306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00306");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        org.osiam.client.helper.ScopeSerializer scopeSerializer4 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean5 = scopeSerializer4.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer7 = scopeSerializer4.unwrappingSerializer(nameTransformer6);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException16 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean17 = scope14.equals((java.lang.Object) invalidAttributeException16);
        java.lang.String str18 = scope14.getValue();
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str21 = scope20.toString();
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str24 = scope23.getValue();
        java.lang.String str25 = scope23.getValue();
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        java.lang.String str30 = scope26.getValue();
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException36 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean37 = scope34.equals((java.lang.Object) invalidAttributeException36);
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.GET;
        boolean boolean42 = scope40.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray44 = new org.osiam.client.oauth.Scope[] { scope13, scope14, scope19, scope20, scope22, scope23, scope26, scope31, scope32, scope33, scope34, scope38, scope39, scope40, scope43 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet45 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet45, scopeArray44);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder10.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet45);
        boolean boolean48 = scopeSetJsonSerializer7.isEmpty(serializerProvider8, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet45);
        boolean boolean49 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet45);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass50 = scopeSerializer0.handledType();
        org.osiam.client.helper.ScopeSerializer scopeSerializer51 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder53 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date54 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.setRefreshTokenExpiresAt(date54);
        org.osiam.client.oauth.Scope scope56 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope57 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException59 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean60 = scope57.equals((java.lang.Object) invalidAttributeException59);
        java.lang.String str61 = scope57.getValue();
        org.osiam.client.oauth.Scope scope62 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope63 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str64 = scope63.toString();
        org.osiam.client.oauth.Scope scope65 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope66 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str67 = scope66.getValue();
        java.lang.String str68 = scope66.getValue();
        org.osiam.client.oauth.Scope scope69 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException71 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean72 = scope69.equals((java.lang.Object) invalidAttributeException71);
        java.lang.String str73 = scope69.getValue();
        org.osiam.client.oauth.Scope scope74 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope75 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope76 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope77 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException79 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean80 = scope77.equals((java.lang.Object) invalidAttributeException79);
        org.osiam.client.oauth.Scope scope81 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope82 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope83 = org.osiam.client.oauth.Scope.GET;
        boolean boolean85 = scope83.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope86 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray87 = new org.osiam.client.oauth.Scope[] { scope56, scope57, scope62, scope63, scope65, scope66, scope69, scope74, scope75, scope76, scope77, scope81, scope82, scope83, scope86 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet88 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet88, scopeArray87);
        org.osiam.client.oauth.AccessToken.Builder builder90 = builder53.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet88);
        boolean boolean91 = scopeSerializer51.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet88);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator92 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider93 = null;
        // The following exception was thrown during execution in test generation
        try {
            scopeSerializer0.serialize((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet88, jsonGenerator92, serializerProvider93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GET" + "'", str18, "GET");
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ME" + "'", str21, "ME");
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PATCH" + "'", str24, "PATCH");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PATCH" + "'", str25, "PATCH");
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GET" + "'", str30, "GET");
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertNotNull(scopeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(scopeSetClass50);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertNotNull(scope57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "GET" + "'", str61, "GET");
        org.junit.Assert.assertNotNull(scope62);
        org.junit.Assert.assertNotNull(scope63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ME" + "'", str64, "ME");
        org.junit.Assert.assertNotNull(scope65);
        org.junit.Assert.assertNotNull(scope66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "PATCH" + "'", str67, "PATCH");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "PATCH" + "'", str68, "PATCH");
        org.junit.Assert.assertNotNull(scope69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "GET" + "'", str73, "GET");
        org.junit.Assert.assertNotNull(scope74);
        org.junit.Assert.assertNotNull(scope75);
        org.junit.Assert.assertNotNull(scope76);
        org.junit.Assert.assertNotNull(scope77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(scope81);
        org.junit.Assert.assertNotNull(scope82);
        org.junit.Assert.assertNotNull(scope83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(scope86);
        org.junit.Assert.assertNotNull(scopeArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test00307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00307");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.util.Date date11 = accessToken10.getExpiresAt();
        java.lang.String str12 = accessToken10.getRefreshToken();
        java.lang.String str13 = accessToken10.getType();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList14 = osiamGroupService2.getAllResources(accessToken10);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test00308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00308");
        org.osiam.client.OsiamConnector.setReadTimeout((int) '4');
    }

    @Test
    public void test00309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00309");
        org.osiam.client.exception.ConflictException conflictException1 = new org.osiam.client.exception.ConflictException("");
        java.lang.String str2 = conflictException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.osiam.client.exception.ConflictException: " + "'", str2, "org.osiam.client.exception.ConflictException: ");
    }

    @Test
    public void test00310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00310");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken15 = builder12.build();
        java.lang.String str16 = accessToken15.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken17 = authService6.validateAccessToken(accessToken15);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test00311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00311");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        java.lang.String str14 = osiamGroupService4.extractErrorMessageForbidden(accessToken12);
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList18 = osiamGroupService4.getAllGroups(accessToken17);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(accessToken17);
    }

    @Test
    public void test00312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00312");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.OsiamGroupService.Builder builder8 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken16.getScopes();
        java.lang.String str19 = osiamGroupService9.extractErrorMessageForbidden(accessToken16);
        boolean boolean20 = accessToken16.isClientOnly();
        java.lang.String str21 = authService6.extractErrorMessageForbidden(accessToken16);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken23 = authService6.retrieveAccessToken("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given authentication code can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
    }

    @Test
    public void test00313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00313");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken9 = osiamConnector7.retrieveAccessToken("org.osiam.client.exception.ConflictException: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
    }

    @Test
    public void test00314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00314");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.resources.scim.UpdateGroup updateGroup6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        java.lang.String str15 = accessToken13.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.descending("hi!");
        org.osiam.client.query.Query query25 = queryBuilder24.build();
        java.lang.String str26 = query25.toString();
        java.lang.String str27 = query25.getSortOrder();
        java.lang.String str28 = query25.getSortBy();
        java.lang.String str29 = query25.getFilter();
        java.lang.String str30 = query25.toString();
        boolean boolean31 = accessToken13.equals((java.lang.Object) query25);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group32 = osiamGroupService4.updateGroup("descending", updateGroup6, accessToken13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(query25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str26, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "descending" + "'", str27, "descending");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str30, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test00315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00315");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group31 = osiamGroupService3.getGroup("PUT", accessToken12);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test00316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00316");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer4 = scopeDeserializer0.getDelegatee();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer5 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass6 = scopeDeserializer5.handledType();
        java.lang.Class<?> wildcardClass7 = scopeDeserializer5.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer8 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer9 = scopeDeserializer5.unwrappingDeserializer(nameTransformer8);
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer10 = scopeDeserializer5.getDelegatee();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer11 = scopeDeserializer0.replaceDelegatee((com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeDeserializer5);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNull(wildcardJsonDeserializer4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer9);
        org.junit.Assert.assertNull(wildcardJsonDeserializer10);
    }

    @Test
    public void test00317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00317");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        java.util.Date date13 = accessToken12.getExpiresAt();
        java.lang.String str14 = accessToken12.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        boolean boolean23 = accessToken22.isRefreshTokenExpired();
        boolean boolean24 = accessToken22.isClientOnly();
        java.lang.String str25 = accessToken22.getClientId();
        boolean boolean26 = accessToken22.isClientOnly();
        boolean boolean27 = accessToken12.equals((java.lang.Object) accessToken22);
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService3.checkAndHandleResponse("org.osiam.client.exception.ConnectionInitializationException: PATCH", statusType5, accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test00318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00318");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.OsiamGroupService.Builder builder8 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken16.getScopes();
        java.lang.String str19 = osiamGroupService9.extractErrorMessageForbidden(accessToken16);
        boolean boolean20 = accessToken16.isClientOnly();
        java.lang.String str21 = authService6.extractErrorMessageForbidden(accessToken16);
        org.osiam.client.oauth.AccessToken accessToken22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = authService6.extractErrorMessageForbidden(accessToken22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
    }

    @Test
    public void test00319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00319");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet15 = accessToken13.getScopes();
        boolean boolean16 = accessToken13.isRefreshTokenExpired();
        boolean boolean17 = accessToken13.isExpired();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.addScope(scope20);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException24 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean25 = scope22.equals((java.lang.Object) invalidAttributeException24);
        java.lang.String str26 = scope22.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder19.addScope(scope22);
        org.osiam.client.oauth.Scope scope29 = new org.osiam.client.oauth.Scope("");
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        boolean boolean32 = scope30.equals((java.lang.Object) 401);
        org.osiam.client.oauth.Scope[] scopeArray33 = new org.osiam.client.oauth.Scope[] { scope22, scope29, scope30 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken34 = authService6.refreshAccessToken(accessToken13, scopeArray33);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(scopeSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GET" + "'", str26, "GET");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(scopeArray33);
    }

    @Test
    public void test00320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00320");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        org.osiam.client.helper.ScopeSerializer scopeSerializer2 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.Scope scope7 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException10 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean11 = scope8.equals((java.lang.Object) invalidAttributeException10);
        java.lang.String str12 = scope8.getValue();
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str15 = scope14.toString();
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str18 = scope17.getValue();
        java.lang.String str19 = scope17.getValue();
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException30 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean31 = scope28.equals((java.lang.Object) invalidAttributeException30);
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.GET;
        boolean boolean36 = scope34.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray38 = new org.osiam.client.oauth.Scope[] { scope7, scope8, scope13, scope14, scope16, scope17, scope20, scope25, scope26, scope27, scope28, scope32, scope33, scope34, scope37 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet39 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet39, scopeArray38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder4.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet39);
        boolean boolean42 = scopeSerializer2.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet39);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator43 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider44 = null;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer typeSerializer45 = null;
        // The following exception was thrown during execution in test generation
        try {
            scopeSerializer0.serializeWithType((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet39, jsonGenerator43, serializerProvider44, typeSerializer45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(scope7);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GET" + "'", str12, "GET");
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ME" + "'", str15, "ME");
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PATCH" + "'", str18, "PATCH");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PATCH" + "'", str19, "PATCH");
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertNotNull(scopeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test00321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00321");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken8 = authService6.retrieveAccessToken("GET");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
    }

    @Test
    public void test00322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00322");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.resources.scim.Group group6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group10 = osiamGroupService3.createResource(group6, accessToken9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(accessToken9);
    }

    @Test
    public void test00323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00323");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        java.util.Collection<java.lang.Object> objCollection5 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.core.JsonParser jsonParser6 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeDeserializer0.deserialize(jsonParser6, deserializationContext7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNull(objCollection5);
    }

    @Test
    public void test00324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00324");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer7 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer6);
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer8 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass9 = scopeDeserializer8.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer10 = scopeDeserializer8.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection11 = scopeDeserializer8.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer12 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer13 = scopeDeserializer8.unwrappingDeserializer(nameTransformer12);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer14 = scopeSetJsonDeserializer5.replaceDelegatee((com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeDeserializer8);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(wildcardJsonDeserializer10);
        org.junit.Assert.assertNull(objCollection11);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer13);
    }

    @Test
    public void test00325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00325");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        java.lang.String str23 = accessToken21.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.deleteGroup("Insufficient scopes: []", accessToken21);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test00326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00326");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.resources.scim.Group group5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        java.util.Date date13 = accessToken12.getExpiresAt();
        java.lang.String str14 = accessToken12.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet15 = accessToken12.getScopes();
        java.util.Date date16 = accessToken12.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group17 = osiamGroupService4.createResource(group5, accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(scopeSet15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test00327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00327");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.client.query.QueryBuilder queryBuilder4 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.descending("hi!");
        org.osiam.client.query.Query query13 = queryBuilder12.build();
        java.lang.String str14 = query13.toString();
        java.lang.String str15 = query13.getSortOrder();
        java.lang.String str16 = query13.getSortBy();
        java.lang.String str17 = query13.getSortBy();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        boolean boolean25 = accessToken24.isRefreshTokenExpired();
        java.lang.String str26 = accessToken24.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult27 = osiamConnector3.searchUsers(query13, accessToken24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "descending" + "'", str15, "descending");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test00328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00328");
        org.osiam.client.OsiamConnector.setReadTimeout(401);
    }

    @Test
    public void test00329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00329");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.checkAndHandleResponse("client_credentials", statusType5, accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
    }

    @Test
    public void test00330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00330");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.resources.scim.Group group6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        java.lang.String str14 = accessToken13.toString();
        java.lang.String str15 = accessToken13.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group16 = osiamGroupService4.replaceResource("org.osiam.client.exception.ConflictException: ", group6, accessToken13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str14, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test00331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00331");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group6 = osiamGroupService3.mapToResource("Insufficient scopes: []");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: Insufficient scopes: []");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
    }

    @Test
    public void test00332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00332");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.oauth.AccessToken accessToken33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group34 = osiamConnector5.getGroup("2024-03-22T13:51:20.388", accessToken33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
    }

    @Test
    public void test00333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00333");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        java.lang.String str17 = accessToken15.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.descending("hi!");
        org.osiam.client.query.Query query27 = queryBuilder26.build();
        java.lang.String str28 = query27.toString();
        java.lang.String str29 = query27.getSortOrder();
        java.lang.String str30 = query27.getSortBy();
        java.lang.String str31 = query27.getFilter();
        java.lang.String str32 = query27.toString();
        boolean boolean33 = accessToken15.equals((java.lang.Object) query27);
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector7.deleteUser("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]", accessToken15);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(query27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str28, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "descending" + "'", str29, "descending");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str32, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test00334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00334");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.descending("hi!");
        org.osiam.client.query.Query query31 = queryBuilder30.build();
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector7.createQueryBuilder(query31);
        org.osiam.resources.scim.UpdateGroup updateGroup34 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date37 = null;
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setRefreshTokenExpiresAt(date37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder36.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken41 = builder40.build();
        boolean boolean42 = accessToken41.isRefreshTokenExpired();
        java.lang.String str43 = accessToken41.getUserId();
        java.lang.String str44 = accessToken41.getClientId();
        boolean boolean45 = accessToken41.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group46 = osiamConnector7.updateGroup("org.osiam.client.exception.ForbiddenException: hi!", updateGroup34, accessToken41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(query31);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(accessToken41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test00335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00335");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.resources.scim.Group group8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        java.util.Date date16 = accessToken15.getExpiresAt();
        java.lang.String str17 = accessToken15.getRefreshToken();
        java.lang.String str18 = accessToken15.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group19 = osiamConnector7.createGroup(group8, accessToken15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test00336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00336");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date34 = null;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder33.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken40 = builder37.build();
        boolean boolean41 = accessToken40.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector5.revokeAccessToken(accessToken40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(accessToken40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test00337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00337");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.getEmptyValue();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty8 = scopeDeserializer0.findBackReference("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNull(scopeSet6);
    }

    @Test
    public void test00338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00338");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group7 = osiamGroupService3.mapToResource("password");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: password");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
    }

    @Test
    public void test00339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00339");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.descending("hi!");
        org.osiam.client.query.Query query31 = queryBuilder30.build();
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector7.createQueryBuilder(query31);
        org.osiam.client.oauth.AccessToken.Builder builder35 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date36 = null;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setRefreshTokenExpiresAt(date36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder35.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken40 = builder39.build();
        boolean boolean41 = accessToken40.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector7.deleteUser("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", accessToken40);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(query31);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(accessToken40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test00340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00340");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.core.Response.StatusType statusType14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        java.util.Date date22 = accessToken21.getExpiresAt();
        java.lang.String str23 = accessToken21.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken21);
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken31 = builder30.build();
        boolean boolean32 = accessToken31.isRefreshTokenExpired();
        boolean boolean33 = accessToken31.isClientOnly();
        java.lang.String str34 = accessToken31.getClientId();
        boolean boolean35 = accessToken31.isClientOnly();
        boolean boolean36 = accessToken21.equals((java.lang.Object) accessToken31);
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.checkAndHandleResponse("Cannot connect to server", statusType14, accessToken21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(accessToken31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test00341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00341");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.AccessToken accessToken7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = authService6.extractErrorMessageForbidden(accessToken7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
    }

    @Test
    public void test00342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00342");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getEmptyValue();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer4 = new org.osiam.client.helper.ScopeDeserializer();
        boolean boolean5 = scopeDeserializer4.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer4.getEmptyValue();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer7 = scopeDeserializer0.replaceDelegatee((com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeDeserializer4);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(scopeSet6);
    }

    @Test
    public void test00343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00343");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = osiamGroupService2.extractErrorMessageDefault("ME", statusType5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
    }

    @Test
    public void test00344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00344");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.client.query.QueryBuilder queryBuilder4 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.descending("hi!");
        org.osiam.client.query.Query query13 = queryBuilder12.build();
        java.lang.String str14 = query13.toString();
        java.lang.String str15 = query13.getSortOrder();
        java.lang.String str16 = query13.getSortBy();
        java.lang.String str17 = query13.getFilter();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        java.util.Date date25 = accessToken24.getExpiresAt();
        java.lang.String str26 = accessToken24.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet27 = accessToken24.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult28 = osiamConnector3.searchUsers(query13, accessToken24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "descending" + "'", str15, "descending");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(scopeSet27);
    }

    @Test
    public void test00345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00345");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder4 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.descending("hi!");
        org.osiam.client.query.Query query13 = queryBuilder12.build();
        java.lang.String str14 = query13.getAttributes();
        java.lang.String str15 = query13.toString();
        java.lang.String str16 = query13.getSortBy();
        org.osiam.client.query.Query query17 = query13.nextPage();
        int int18 = query13.getCount();
        java.lang.String str19 = query13.getFilter();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        java.util.Date date27 = accessToken26.getExpiresAt();
        java.util.Date date28 = accessToken26.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult29 = osiamUserService3.searchUsers(query13, accessToken26);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Authorization" + "'", str14, "Authorization");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str15, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test00346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00346");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        java.lang.String str22 = accessToken21.toString();
        java.lang.String str23 = accessToken21.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group24 = osiamGroupService2.getGroup("GET", accessToken21);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str22, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test00347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00347");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken16 = builder13.build();
        java.lang.String str17 = accessToken16.toString();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector7.revokeAccessToken(accessToken16);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str17, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
    }

    @Test
    public void test00348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00348");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        java.lang.String str13 = accessToken12.toString();
        java.lang.String str14 = accessToken12.getType();
        boolean boolean15 = accessToken12.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group16 = osiamGroupService4.getGroup("authorization_code", accessToken12);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str13, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test00349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00349");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        org.osiam.client.helper.ScopeSerializer scopeSerializer2 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.Scope scope7 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException10 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean11 = scope8.equals((java.lang.Object) invalidAttributeException10);
        java.lang.String str12 = scope8.getValue();
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str15 = scope14.toString();
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str18 = scope17.getValue();
        java.lang.String str19 = scope17.getValue();
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException30 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean31 = scope28.equals((java.lang.Object) invalidAttributeException30);
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.GET;
        boolean boolean36 = scope34.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray38 = new org.osiam.client.oauth.Scope[] { scope7, scope8, scope13, scope14, scope16, scope17, scope20, scope25, scope26, scope27, scope28, scope32, scope33, scope34, scope37 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet39 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet39, scopeArray38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder4.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet39);
        boolean boolean42 = scopeSerializer2.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet39);
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken49 = builder48.build();
        boolean boolean50 = accessToken49.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet51 = accessToken49.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider53 = null;
        scopeSerializer2.serialize(scopeSet51, jsonGenerator52, serializerProvider53);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider55 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date58 = null;
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setRefreshTokenExpiresAt(date58);
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder57.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken62 = builder61.build();
        boolean boolean63 = accessToken62.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet64 = accessToken62.getScopes();
        boolean boolean65 = scopeSerializer2.isEmpty(serializerProvider55, scopeSet64);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper66 = null;
        com.fasterxml.jackson.databind.JavaType javaType67 = null;
        scopeSerializer2.acceptJsonFormatVisitor(jsonFormatVisitorWrapper66, javaType67);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer69 = scopeSerializer0.replaceDelegatee((com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeSerializer2);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(scope7);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GET" + "'", str12, "GET");
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ME" + "'", str15, "ME");
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PATCH" + "'", str18, "PATCH");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PATCH" + "'", str19, "PATCH");
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertNotNull(scopeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(scopeSet51);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(accessToken62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(scopeSet64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test00350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00350");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.resources.scim.User user32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        java.util.Date date40 = accessToken39.getExpiresAt();
        java.lang.String str41 = accessToken39.getRefreshToken();
        java.lang.String str42 = accessToken39.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user43 = osiamConnector5.createUser(user32, accessToken39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test00351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00351");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.descending("hi!");
        org.osiam.client.query.Query query31 = queryBuilder30.build();
        java.lang.String str32 = query31.getAttributes();
        java.lang.String str33 = query31.toString();
        java.lang.String str34 = query31.getSortOrder();
        java.lang.String str35 = query31.getAttributes();
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken42 = builder41.build();
        boolean boolean43 = accessToken42.isRefreshTokenExpired();
        java.lang.String str44 = accessToken42.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet45 = accessToken42.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult46 = osiamConnector7.searchUsers(query31, accessToken42);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(query31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Authorization" + "'", str32, "Authorization");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str33, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "descending" + "'", str34, "descending");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Authorization" + "'", str35, "Authorization");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(scopeSet45);
    }

    @Test
    public void test00352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00352");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.util.Date date11 = accessToken10.getExpiresAt();
        java.lang.String str12 = accessToken10.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user14 = osiamConnector3.getCurrentUser(accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test00353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00353");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty8 = scopeDeserializer0.findBackReference("Insufficient scopes: []");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'Insufficient scopes: []': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
    }

    @Test
    public void test00354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00354");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder4 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder4.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        java.lang.String str15 = osiamGroupService6.extractErrorMessageForbidden(accessToken13);
        java.util.Date date16 = accessToken13.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean19 = accessToken13.equals((java.lang.Object) scope18);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList20 = osiamUserService2.getAllUsers(accessToken13);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test00355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00355");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.getEmptyValue();
        com.fasterxml.jackson.core.JsonParser jsonParser7 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext8 = null;
        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeserializer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj10 = scopeDeserializer0.deserializeWithType(jsonParser7, deserializationContext8, typeDeserializer9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNull(scopeSet6);
    }

    @Test
    public void test00356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00356");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.resources.scim.Group group14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        boolean boolean23 = accessToken21.isClientOnly();
        java.lang.String str24 = accessToken21.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group25 = osiamGroupService2.replaceGroup("GET", group14, accessToken21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test00357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00357");
        org.osiam.client.OsiamConnector.setReadTimeout((int) (short) 0);
    }

    @Test
    public void test00358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00358");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.descending("hi!");
        org.osiam.client.query.Query query31 = queryBuilder30.build();
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector7.createQueryBuilder(query31);
        org.osiam.resources.scim.User user34 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date37 = null;
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setRefreshTokenExpiresAt(date37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder36.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken41 = builder40.build();
        boolean boolean42 = accessToken41.isRefreshTokenExpired();
        boolean boolean43 = accessToken41.isClientOnly();
        java.lang.String str44 = accessToken41.getRefreshToken();
        boolean boolean45 = accessToken41.isExpired();
        boolean boolean46 = accessToken41.isExpired();
        java.lang.String str47 = accessToken41.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user48 = osiamConnector7.replaceUser("", user34, accessToken41);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(query31);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(accessToken41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test00359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00359");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer5 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass6 = scopeDeserializer5.handledType();
        java.lang.Class<?> wildcardClass7 = scopeDeserializer5.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer8 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer9 = scopeDeserializer5.unwrappingDeserializer(nameTransformer8);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer10 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer11 = scopeDeserializer5.unwrappingDeserializer(nameTransformer10);
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer12 = scopeSetJsonDeserializer11.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection13 = scopeSetJsonDeserializer11.getKnownPropertyNames();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer14 = scopeDeserializer0.replaceDelegatee(scopeSetJsonDeserializer11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer9);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer11);
        org.junit.Assert.assertNull(wildcardJsonDeserializer12);
        org.junit.Assert.assertNull(objCollection13);
    }

    @Test
    public void test00360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00360");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date34 = null;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder33.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken38 = builder37.build();
        boolean boolean39 = accessToken38.isRefreshTokenExpired();
        java.lang.String str40 = accessToken38.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet41 = accessToken38.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user42 = osiamConnector5.getCurrentUser(accessToken38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(scopeSet41);
    }

    @Test
    public void test00361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00361");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user4 = null;
        org.osiam.client.oauth.AccessToken accessToken5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user6 = osiamUserService2.replaceUser("GET", user4, accessToken5);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
    }

    @Test
    public void test00362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00362");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.client.oauth.AccessToken accessToken5 = null;
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector3.revokeAllAccessTokens("PUT", accessToken5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
    }

    @Test
    public void test00363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00363");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException1 = new org.osiam.client.exception.ConnectionInitializationException("hi!");
    }

    @Test
    public void test00364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00364");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder4 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder4.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        java.lang.String str15 = osiamGroupService6.extractErrorMessageForbidden(accessToken13);
        java.util.Date date16 = accessToken13.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean19 = accessToken13.equals((java.lang.Object) scope18);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user20 = osiamUserService2.getCurrentUser(accessToken13);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test00365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00365");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.resources.scim.Group group5 = null;
        org.osiam.client.OsiamGroupService.Builder builder7 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder7.build();
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder7.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken16);
        java.lang.String str18 = osiamGroupService9.extractErrorMessageForbidden(accessToken16);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group19 = osiamGroupService2.replaceResource("authorization_code", group5, accessToken16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
    }

    @Test
    public void test00366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00366");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        boolean boolean20 = accessToken19.isRefreshTokenExpired();
        java.lang.String str21 = accessToken19.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList22 = osiamGroupService3.getAllGroups(accessToken19);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test00367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00367");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.Scope scope10 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str11 = scope10.toString();
        java.lang.String str12 = scope10.getValue();
        org.osiam.client.oauth.Scope[] scopeArray13 = new org.osiam.client.oauth.Scope[] { scope10 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken14 = osiamConnector7.retrieveAccessToken("descending", "ME", scopeArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(scope10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ME" + "'", str11, "ME");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ME" + "'", str12, "ME");
        org.junit.Assert.assertNotNull(scopeArray13);
    }

    @Test
    public void test00368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00368");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector5.deleteUser("hi!", accessToken39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
    }

    @Test
    public void test00369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00369");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.Query query23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        java.util.Date date31 = accessToken30.getExpiresAt();
        java.lang.String str32 = accessToken30.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken30);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult34 = osiamConnector7.searchUsers(query23, accessToken30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given query must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test00370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00370");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken9 = osiamConnector7.retrieveAccessToken("PATCH");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
    }

    @Test
    public void test00371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00371");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector3.revokeAccessToken(accessToken6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(accessToken6);
    }

    @Test
    public void test00372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00372");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group5 = osiamGroupService2.mapToResource("client_credentials");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: client_credentials");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
    }

    @Test
    public void test00373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00373");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.resources.scim.UpdateUser updateUser5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user14 = osiamUserService3.updateUser("2024-03-22T13:51:20.388", updateUser5, accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
    }

    @Test
    public void test00374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00374");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        org.osiam.resources.scim.Group group14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        java.lang.String str18 = accessToken17.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group19 = osiamGroupService3.replaceGroup("GET", group14, accessToken17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str18, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test00375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00375");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("ME");
    }

    @Test
    public void test00376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00376");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        boolean boolean15 = accessToken14.isRefreshTokenExpired();
        java.lang.String str16 = accessToken14.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder17 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder19.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.descending("hi!");
        org.osiam.client.query.Query query26 = queryBuilder25.build();
        java.lang.String str27 = query26.toString();
        java.lang.String str28 = query26.getSortOrder();
        java.lang.String str29 = query26.getSortBy();
        java.lang.String str30 = query26.getFilter();
        java.lang.String str31 = query26.toString();
        boolean boolean32 = accessToken14.equals((java.lang.Object) query26);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList33 = osiamConnector7.getAllUsers(accessToken14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "descending" + "'", str28, "descending");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str31, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test00377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00377");
        org.osiam.client.OsiamConnector.setReadTimeout(10);
    }

    @Test
    public void test00378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00378");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date34 = null;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder33.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken38 = builder37.build();
        java.lang.String str39 = accessToken38.toString();
        java.lang.String str40 = accessToken38.getType();
        boolean boolean41 = accessToken38.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser42 = osiamConnector5.getCurrentUserBasic(accessToken38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str39, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test00379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00379");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder6 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder6.build();
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder6.build();
        javax.ws.rs.client.WebTarget webTarget9 = osiamGroupService8.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget10 = osiamGroupService8.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        boolean boolean18 = accessToken17.isRefreshTokenExpired();
        java.lang.String str19 = accessToken17.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet20 = accessToken17.getScopes();
        java.lang.String str21 = osiamGroupService8.extractErrorMessageForbidden(accessToken17);
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.deleteGroup("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]", accessToken17);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(webTarget9);
        org.junit.Assert.assertNotNull(webTarget10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(scopeSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
    }

    @Test
    public void test00380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00380");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken13 = builder10.build();
        org.osiam.client.oauth.AccessToken accessToken14 = builder10.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken14);
        // The following exception was thrown during execution in test generation
        try {
            osiamUserService3.deleteUser("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]", accessToken14);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertNotNull(accessToken14);
    }

    @Test
    public void test00381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00381");
        org.osiam.client.OsiamConnector.setConnectTimeout((int) '4');
    }

    @Test
    public void test00382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00382");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.getAttributes();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query41);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.getAttributes();
        java.lang.String str57 = query55.toString();
        java.lang.String str58 = query55.getSortOrder();
        java.lang.String str59 = query55.getAttributes();
        org.osiam.client.oauth.AccessToken.Builder builder61 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date62 = null;
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder61.setRefreshTokenExpiresAt(date62);
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder61.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken66 = builder65.build();
        boolean boolean67 = accessToken66.isRefreshTokenExpired();
        boolean boolean68 = accessToken66.isClientOnly();
        java.lang.String str69 = accessToken66.getRefreshToken();
        boolean boolean70 = accessToken66.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult71 = osiamConnector5.searchGroups(query55, accessToken66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Authorization" + "'", str42, "Authorization");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Authorization" + "'", str56, "Authorization");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str57, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "descending" + "'", str58, "descending");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Authorization" + "'", str59, "Authorization");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(accessToken66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test00383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00383");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.resources.scim.Group group9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        java.util.Date date17 = accessToken16.getExpiresAt();
        java.lang.String str18 = accessToken16.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken16);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group20 = osiamConnector7.replaceGroup("descending", group9, accessToken16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test00384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00384");
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.AbstractOsiamService.Builder<org.osiam.client.exception.OAuthErrorMessage> oAuthErrorMessageBuilder1 = new org.osiam.client.AbstractOsiamService.Builder<org.osiam.client.exception.OAuthErrorMessage>("PATCH");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00385");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken22 = builder19.build();
        org.osiam.client.oauth.AccessToken accessToken23 = builder19.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList24 = osiamGroupService2.getAllGroups(accessToken23);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertNotNull(accessToken23);
    }

    @Test
    public void test00386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00386");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken12 = builder9.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user14 = osiamConnector3.getCurrentUser(accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test00387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00387");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date34 = null;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder33.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken38 = builder37.build();
        java.util.Date date39 = accessToken38.getExpiresAt();
        java.lang.String str40 = accessToken38.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet41 = accessToken38.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList42 = osiamConnector5.getAllGroups(accessToken38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(scopeSet41);
    }

    @Test
    public void test00388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00388");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.core.Response.StatusType statusType14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = osiamGroupService2.extractErrorMessage("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", statusType14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
    }

    @Test
    public void test00389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00389");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.resources.scim.Group group7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        java.lang.String str15 = accessToken14.toString();
        java.lang.String str16 = accessToken14.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group17 = osiamGroupService4.replaceResource("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", group7, accessToken14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str15, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test00390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00390");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.getAttributes();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query41);
        org.osiam.client.oauth.Scope[] scopeArray48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken49 = osiamConnector5.retrieveAccessToken("Insufficient scopes: []", "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", scopeArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Authorization" + "'", str42, "Authorization");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertNotNull(queryBuilder45);
    }

    @Test
    public void test00391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00391");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.resources.scim.Group group4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet13 = accessToken11.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group14 = osiamGroupService3.createResource(group4, accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(scopeSet13);
    }

    @Test
    public void test00392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00392");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException7 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean8 = scope5.equals((java.lang.Object) invalidAttributeException7);
        java.lang.String str9 = scope5.getValue();
        org.osiam.client.oauth.Scope scope10 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str12 = scope11.toString();
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str15 = scope14.getValue();
        java.lang.String str16 = scope14.getValue();
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException19 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean20 = scope17.equals((java.lang.Object) invalidAttributeException19);
        java.lang.String str21 = scope17.getValue();
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException27 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean28 = scope25.equals((java.lang.Object) invalidAttributeException27);
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        boolean boolean33 = scope31.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray35 = new org.osiam.client.oauth.Scope[] { scope4, scope5, scope10, scope11, scope13, scope14, scope17, scope22, scope23, scope24, scope25, scope29, scope30, scope31, scope34 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet36 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet36, scopeArray35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder1.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet36);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshToken("Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GET" + "'", str9, "GET");
        org.junit.Assert.assertNotNull(scope10);
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ME" + "'", str12, "ME");
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PATCH" + "'", str15, "PATCH");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GET" + "'", str21, "GET");
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(scopeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test00393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00393");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        boolean boolean12 = accessToken10.isClientOnly();
        java.lang.String str13 = accessToken10.getClientId();
        boolean boolean14 = accessToken10.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user15 = osiamUserService2.getUser("", accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test00394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00394");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.resources.scim.UpdateUser updateUser5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken8 = builder7.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user9 = osiamUserService3.updateUser("", updateUser5, accessToken8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(accessToken8);
    }

    @Test
    public void test00395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00395");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.getAttributes();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query41);
        org.osiam.resources.scim.Group group47 = null;
        org.osiam.client.oauth.AccessToken.Builder builder49 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date50 = null;
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder49.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken54 = builder53.build();
        boolean boolean55 = accessToken54.isRefreshTokenExpired();
        boolean boolean56 = accessToken54.isClientOnly();
        java.lang.String str57 = accessToken54.getRefreshToken();
        boolean boolean58 = accessToken54.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group59 = osiamConnector5.replaceGroup("org.osiam.client.exception.ForbiddenException: hi!", group47, accessToken54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Authorization" + "'", str42, "Authorization");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(accessToken54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test00396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00396");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        java.lang.String str14 = osiamGroupService4.extractErrorMessageForbidden(accessToken12);
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken27 = builder26.build();
        boolean boolean28 = accessToken27.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet29 = accessToken27.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult30 = osiamGroupService4.searchResources(query20, accessToken27);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(scopeSet29);
    }

    @Test
    public void test00397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00397");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.resources.scim.Group group5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        boolean boolean14 = accessToken12.isClientOnly();
        java.lang.String str15 = accessToken12.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group16 = osiamGroupService2.replaceGroup("refresh_token", group5, accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test00398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00398");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.OsiamConnector.Builder builder8 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector15 = builder14.build();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.descending("hi!");
        org.osiam.client.query.Query query25 = queryBuilder24.build();
        java.lang.String str26 = query25.toString();
        java.lang.String str27 = query25.toString();
        java.lang.String str28 = query25.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder29 = osiamConnector15.createQueryBuilder(query25);
        org.osiam.client.query.QueryBuilder queryBuilder30 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder32 = queryBuilder30.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.descending("hi!");
        org.osiam.client.query.Query query39 = queryBuilder38.build();
        org.osiam.client.query.QueryBuilder queryBuilder40 = osiamConnector15.createQueryBuilder(query39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        boolean boolean49 = accessToken47.isClientOnly();
        java.lang.String str50 = accessToken47.getRefreshToken();
        boolean boolean51 = accessToken47.isExpired();
        boolean boolean52 = accessToken47.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult53 = osiamConnector7.searchUsers(query39, accessToken47);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(query25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str26, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(query39);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test00399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00399");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken13 = builder10.build();
        java.lang.String str14 = accessToken13.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user15 = osiamConnector3.getUser("PATCH", accessToken13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str14, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
    }

    @Test
    public void test00400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00400");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        java.util.Date date14 = accessToken13.getExpiresAt();
        java.lang.String str15 = accessToken13.getRefreshToken();
        boolean boolean16 = accessToken13.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService4.checkAndHandleResponse("Insufficient scopes: []", statusType6, accessToken13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test00401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00401");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.resources.scim.User user9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        java.util.Date date17 = accessToken16.getExpiresAt();
        java.lang.String str18 = accessToken16.getRefreshToken();
        java.lang.String str19 = accessToken16.getType();
        java.lang.String str20 = accessToken16.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user21 = osiamConnector7.replaceUser("org.osiam.client.exception.ConflictException: ", user9, accessToken16);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test00402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00402");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        boolean boolean17 = accessToken15.isClientOnly();
        java.lang.String str18 = accessToken15.getClientId();
        java.lang.String str19 = accessToken15.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser20 = osiamConnector7.getCurrentUserBasic(accessToken15);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test00403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00403");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        java.util.Date date40 = accessToken39.getExpiresAt();
        java.lang.String str41 = accessToken39.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet42 = accessToken39.getScopes();
        java.util.Date date43 = accessToken39.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user44 = osiamConnector5.getUser("org.osiam.client.exception.ConflictException: ", accessToken39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(scopeSet42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test00404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00404");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.resources.scim.UpdateGroup updateGroup9 = null;
        org.osiam.client.oauth.AccessToken accessToken10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group11 = osiamConnector7.updateGroup("client_credentials", updateGroup9, accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
    }

    @Test
    public void test00405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00405");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        java.lang.String str15 = accessToken13.getUserId();
        java.lang.String str16 = accessToken13.getClientId();
        boolean boolean17 = accessToken13.isClientOnly();
        java.lang.String str18 = authService6.extractErrorMessageForbidden(accessToken13);
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope[] scopeArray20 = new org.osiam.client.oauth.Scope[] { scope19 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken21 = authService6.retrieveAccessToken(scopeArray20);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertNotNull(scopeArray20);
    }

    @Test
    public void test00406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00406");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken13 = builder10.build();
        java.lang.String str14 = accessToken13.toString();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector3.revokeAllAccessTokens("hi!", accessToken13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str14, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
    }

    @Test
    public void test00407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00407");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.resources.scim.Group group5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet15 = accessToken12.getScopes();
        java.util.Date date16 = accessToken12.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group17 = osiamGroupService2.replaceResource("PATCH", group5, accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(scopeSet15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test00408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00408");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.descending("hi!");
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        java.lang.String str16 = query15.getAttributes();
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        boolean boolean24 = accessToken23.isRefreshTokenExpired();
        boolean boolean25 = accessToken23.isClientOnly();
        java.lang.String str26 = accessToken23.getClientId();
        boolean boolean27 = accessToken23.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.addScope(scope30);
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException34 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean35 = scope32.equals((java.lang.Object) invalidAttributeException34);
        java.lang.String str36 = scope32.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder29.addScope(scope32);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setUserName("Authorization");
        boolean boolean44 = accessToken23.equals((java.lang.Object) builder41);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult45 = osiamGroupService3.searchResources(query15, accessToken23);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Authorization" + "'", str16, "Authorization");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GET" + "'", str36, "GET");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test00409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00409");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.resources.scim.UpdateGroup updateGroup5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken14 = builder11.build();
        org.osiam.client.oauth.AccessToken accessToken15 = builder11.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group16 = osiamConnector3.updateGroup("Authorization", updateGroup5, accessToken15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(accessToken15);
    }

    @Test
    public void test00410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00410");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.util.Date date11 = accessToken10.getExpiresAt();
        java.lang.String str12 = accessToken10.getUserName();
        java.lang.String str13 = accessToken10.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user14 = osiamUserService2.createUser(user3, accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test00411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00411");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.query.Query query12 = query9.previousPage();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: StartIndex < 1 is not possible.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
    }

    @Test
    public void test00412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00412");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.getAttributes();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query41);
        org.osiam.client.oauth.AccessToken.Builder builder47 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date48 = null;
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.setRefreshTokenExpiresAt(date48);
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder47.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken52 = builder51.build();
        boolean boolean53 = accessToken52.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet54 = accessToken52.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder56 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope57 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.addScope(scope57);
        org.osiam.client.oauth.Scope scope59 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException61 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean62 = scope59.equals((java.lang.Object) invalidAttributeException61);
        java.lang.String str63 = scope59.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder56.addScope(scope59);
        org.osiam.client.oauth.AccessToken.Builder builder66 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date67 = null;
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder66.setRefreshTokenExpiresAt(date67);
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder66.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder70.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder70.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope75 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str76 = scope75.toString();
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder70.addScope(scope75);
        org.osiam.client.oauth.Scope[] scopeArray78 = new org.osiam.client.oauth.Scope[] { scope59, scope75 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken79 = osiamConnector5.refreshAccessToken(accessToken52, scopeArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Authorization" + "'", str42, "Authorization");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(accessToken52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(scopeSet54);
        org.junit.Assert.assertNotNull(scope57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(scope59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "GET" + "'", str63, "GET");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(scope75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "PUT" + "'", str76, "PUT");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(scopeArray78);
    }

    @Test
    public void test00413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00413");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.Query query22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.query.QueryBuilder queryBuilder23 = osiamConnector7.createQueryBuilder(query22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
    }

    @Test
    public void test00414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00414");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.resources.scim.User user5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet15 = accessToken12.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user16 = osiamUserService3.replaceUser("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", user5, accessToken12);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(scopeSet15);
    }

    @Test
    public void test00415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00415");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        java.util.Date date29 = accessToken28.getExpiresAt();
        java.lang.String str30 = accessToken28.getUserName();
        java.lang.String str31 = accessToken28.toString();
        org.osiam.client.oauth.Scope[] scopeArray32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken33 = osiamConnector7.refreshAccessToken(accessToken28, scopeArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str31, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test00416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00416");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.getAttributes();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query41);
        org.osiam.resources.scim.Group group46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder48.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken53 = builder52.build();
        java.util.Date date54 = accessToken53.getExpiresAt();
        java.lang.String str55 = accessToken53.getRefreshToken();
        boolean boolean56 = accessToken53.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group57 = osiamConnector5.createGroup(group46, accessToken53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Authorization" + "'", str42, "Authorization");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(accessToken53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test00417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00417");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientId("authorization_code");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test00418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00418");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.util.Date date11 = accessToken10.getExpiresAt();
        java.lang.String str12 = accessToken10.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList13 = osiamGroupService2.getAllGroups(accessToken10);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test00419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00419");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.resources.scim.Group group5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        boolean boolean14 = accessToken12.isClientOnly();
        java.lang.String str15 = accessToken12.getClientId();
        java.lang.String str16 = accessToken12.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group17 = osiamGroupService2.replaceResource("Bearer ", group5, accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test00420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00420");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder3 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder5 = queryBuilder3.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder7 = queryBuilder5.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder5.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.descending("hi!");
        org.osiam.client.query.Query query12 = queryBuilder11.build();
        java.lang.String str13 = query12.toString();
        java.lang.String str14 = query12.toString();
        java.lang.String str15 = query12.getFilter();
        org.osiam.client.OsiamGroupService.Builder builder17 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService18 = builder17.build();
        org.osiam.client.OsiamGroupService osiamGroupService19 = builder17.build();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken26);
        java.lang.String str28 = osiamGroupService19.extractErrorMessageForbidden(accessToken26);
        java.util.Date date29 = accessToken26.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken26);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean32 = accessToken26.equals((java.lang.Object) scope31);
        java.lang.String str33 = accessToken26.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult34 = osiamGroupService2.searchGroups(query12, accessToken26);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(queryBuilder5);
        org.junit.Assert.assertNotNull(queryBuilder7);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str13, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(osiamGroupService18);
        org.junit.Assert.assertNotNull(osiamGroupService19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Insufficient scopes: []" + "'", str28, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test00421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00421");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        java.lang.String str14 = osiamGroupService4.extractErrorMessageForbidden(accessToken12);
        org.osiam.resources.scim.Group group16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken25 = builder22.build();
        org.osiam.client.oauth.AccessToken accessToken26 = builder22.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group27 = osiamGroupService4.updateGroup("descending", group16, accessToken26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertNotNull(accessToken26);
    }

    @Test
    public void test00422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00422");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.GET;
        boolean boolean36 = scope34.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope38 = new org.osiam.client.oauth.Scope("PUT");
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope41 = new org.osiam.client.oauth.Scope("Authorization");
        org.osiam.client.oauth.Scope[] scopeArray42 = new org.osiam.client.oauth.Scope[] { scope34, scope38, scope39, scope41 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken43 = osiamConnector5.retrieveAccessToken("Authorization", "", scopeArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(scopeArray42);
    }

    @Test
    public void test00423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00423");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        java.lang.String str14 = osiamGroupService4.extractErrorMessageForbidden(accessToken12);
        org.osiam.client.oauth.AccessToken accessToken16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group17 = osiamGroupService4.getResource("ADMIN", accessToken16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
    }

    @Test
    public void test00424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00424");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector7.createQueryBuilder();
        org.osiam.resources.scim.User user24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken33 = builder30.build();
        java.lang.String str34 = accessToken33.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user35 = osiamConnector7.replaceUser("", user24, accessToken33);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test00425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00425");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getEmptyValue();
        boolean boolean4 = scopeDeserializer0.isCachable();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty6 = scopeDeserializer0.findBackReference("password");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'password': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test00426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00426");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        java.lang.String str14 = osiamGroupService4.extractErrorMessageForbidden(accessToken12);
        org.osiam.client.OsiamGroupService.Builder builder17 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService18 = builder17.build();
        org.osiam.client.OsiamGroupService osiamGroupService19 = builder17.build();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken26);
        java.lang.String str28 = osiamGroupService19.extractErrorMessageForbidden(accessToken26);
        java.util.Date date29 = accessToken26.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken26);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean32 = accessToken26.equals((java.lang.Object) scope31);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group33 = osiamGroupService4.getGroup("2024-03-22T13:51:20.388", accessToken26);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService18);
        org.junit.Assert.assertNotNull(osiamGroupService19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Insufficient scopes: []" + "'", str28, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test00427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00427");
        org.osiam.client.exception.OsiamRequestException osiamRequestException2 = new org.osiam.client.exception.OsiamRequestException(1, "Cannot connect to server");
    }

    @Test
    public void test00428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00428");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass2 = scopeSerializer0.handledType();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet12 = accessToken9.getScopes();
        boolean boolean13 = scopeSerializer0.isEmpty(scopeSet12);
        org.osiam.client.helper.ScopeSerializer scopeSerializer14 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean15 = scopeSerializer14.isUnwrappingSerializer();
        boolean boolean16 = scopeSerializer14.usesObjectId();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer17 = scopeSerializer0.replaceDelegatee((com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeSerializer14);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(scopeSetClass2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(scopeSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test00429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00429");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Insufficient scopes: []");
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The string \"Insufficient scopes\" for the URI component SCHEME contains an invalid character, ' ', at index 12.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00430");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder15 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService16 = builder15.build();
        org.osiam.client.OsiamGroupService osiamGroupService17 = builder15.build();
        javax.ws.rs.client.WebTarget webTarget18 = osiamGroupService17.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget19 = osiamGroupService17.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        java.lang.String str28 = accessToken26.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet29 = accessToken26.getScopes();
        java.lang.String str30 = osiamGroupService17.extractErrorMessageForbidden(accessToken26);
        java.lang.String str31 = accessToken26.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList32 = osiamGroupService2.getAllResources(accessToken26);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(osiamGroupService16);
        org.junit.Assert.assertNotNull(osiamGroupService17);
        org.junit.Assert.assertNotNull(webTarget18);
        org.junit.Assert.assertNotNull(webTarget19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(scopeSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Insufficient scopes: []" + "'", str30, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test00431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00431");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        boolean boolean13 = accessToken11.isClientOnly();
        java.lang.String str14 = accessToken11.getRefreshToken();
        boolean boolean15 = accessToken11.isExpired();
        boolean boolean16 = accessToken11.isExpired();
        java.lang.String str17 = accessToken11.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.deleteResource("ADMIN", accessToken11);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test00432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00432");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.resources.scim.UpdateGroup updateGroup9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        java.util.Date date17 = accessToken16.getExpiresAt();
        java.lang.String str18 = accessToken16.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet19 = accessToken16.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group20 = osiamConnector7.updateGroup("", updateGroup9, accessToken16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(scopeSet19);
    }

    @Test
    public void test00433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00433");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        boolean boolean12 = accessToken10.isClientOnly();
        java.lang.String str13 = accessToken10.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList14 = osiamConnector3.getAllUsers(accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test00434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00434");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.resources.scim.User user5 = null;
        org.osiam.client.oauth.AccessToken accessToken6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user7 = osiamConnector3.replaceUser("org.osiam.client.exception.ConnectionInitializationException: PATCH", user5, accessToken6);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
    }

    @Test
    public void test00435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00435");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken12 = builder9.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user13 = osiamUserService2.getUser("PATCH", accessToken12);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
    }

    @Test
    public void test00436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00436");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        boolean boolean12 = accessToken10.isClientOnly();
        java.lang.String str13 = accessToken10.getRefreshToken();
        boolean boolean14 = accessToken10.isExpired();
        boolean boolean15 = accessToken10.isExpired();
        java.lang.String str16 = accessToken10.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group17 = osiamGroupService2.getResource("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", accessToken10);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test00437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00437");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer3 = scopeDeserializer0.getDelegatee();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getEmptyValue();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty6 = scopeDeserializer0.findBackReference("client_credentials");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'client_credentials': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardJsonDeserializer3);
        org.junit.Assert.assertNull(scopeSet4);
    }

    @Test
    public void test00438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00438");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Cannot connect to server");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        boolean boolean12 = accessToken10.isClientOnly();
        java.lang.String str13 = accessToken10.getRefreshToken();
        boolean boolean14 = accessToken10.isExpired();
        boolean boolean15 = accessToken10.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            osiamUserService2.deleteUser("", accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test00439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00439");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        java.lang.String str13 = accessToken12.toString();
        java.lang.String str14 = accessToken12.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user15 = osiamConnector5.getCurrentUser(accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str13, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test00440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00440");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.AuthService.Builder builder8 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientId("ME");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService13 = builder12.build();
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        boolean boolean21 = accessToken20.isRefreshTokenExpired();
        java.lang.String str22 = accessToken20.getUserId();
        java.lang.String str23 = accessToken20.getClientId();
        boolean boolean24 = accessToken20.isClientOnly();
        java.lang.String str25 = authService13.extractErrorMessageForbidden(accessToken20);
        java.lang.String str26 = accessToken20.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group27 = osiamGroupService4.getGroup("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", accessToken20);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(authService13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str26, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test00441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00441");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        java.lang.String str12 = accessToken10.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder13 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.descending("hi!");
        org.osiam.client.query.Query query22 = queryBuilder21.build();
        java.lang.String str23 = query22.toString();
        java.lang.String str24 = query22.getSortOrder();
        java.lang.String str25 = query22.getSortBy();
        java.lang.String str26 = query22.getFilter();
        java.lang.String str27 = query22.getSortOrder();
        java.lang.String str28 = query22.getAttributes();
        boolean boolean29 = accessToken10.equals((java.lang.Object) query22);
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken38 = builder35.build();
        boolean boolean39 = accessToken38.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult40 = osiamUserService3.searchUsers(query22, accessToken38);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(query22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "descending" + "'", str24, "descending");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "descending" + "'", str27, "descending");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Authorization" + "'", str28, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test00442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00442");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        java.util.Date date14 = accessToken13.getExpiresAt();
        java.lang.String str15 = accessToken13.getRefreshToken();
        java.lang.String str16 = accessToken13.getType();
        java.lang.String str17 = accessToken13.getClientId();
        java.lang.String str18 = accessToken13.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group19 = osiamGroupService3.getResource("refresh_token", accessToken13);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test00443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00443");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken7 = osiamConnector5.retrieveAccessToken("org.osiam.client.exception.ForbiddenException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
    }

    @Test
    public void test00444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00444");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.oauth.Scope[] scopeArray11 = new org.osiam.client.oauth.Scope[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken12 = osiamConnector7.retrieveAccessToken("ME", "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]", scopeArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(scopeArray11);
    }

    @Test
    public void test00445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00445");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Cannot connect to server");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.util.Date date11 = accessToken10.getExpiresAt();
        java.lang.String str12 = accessToken10.getRefreshToken();
        java.lang.String str13 = accessToken10.getType();
        java.lang.String str14 = accessToken10.getClientId();
        java.lang.String str15 = accessToken10.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user16 = osiamUserService2.createUser(user3, accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test00446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00446");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.resources.scim.UpdateGroup updateGroup14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        java.util.Date date22 = accessToken21.getExpiresAt();
        java.lang.String str23 = accessToken21.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group24 = osiamGroupService2.updateGroup("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", updateGroup14, accessToken21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test00447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00447");
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException1 = new org.osiam.client.exception.InvalidAttributeException("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        java.lang.String str2 = invalidAttributeException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str2, "org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test00448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00448");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        java.util.Date date15 = accessToken14.getExpiresAt();
        java.lang.String str16 = accessToken14.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken14);
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        boolean boolean25 = accessToken24.isRefreshTokenExpired();
        boolean boolean26 = accessToken24.isClientOnly();
        java.lang.String str27 = accessToken24.getClientId();
        boolean boolean28 = accessToken24.isClientOnly();
        boolean boolean29 = accessToken14.equals((java.lang.Object) accessToken24);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList30 = osiamConnector7.getAllUsers(accessToken24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test00449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00449");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getEmptyValue();
        boolean boolean4 = scopeDeserializer0.isCachable();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer5 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass6 = scopeDeserializer5.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer7 = scopeDeserializer5.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection8 = scopeDeserializer5.getKnownPropertyNames();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer9 = scopeDeserializer0.replaceDelegatee((com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeDeserializer5);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardJsonDeserializer7);
        org.junit.Assert.assertNull(objCollection8);
    }

    @Test
    public void test00450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00450");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        boolean boolean5 = scopeDeserializer0.isCachable();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty7 = scopeDeserializer0.findBackReference("refresh_token");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'refresh_token': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test00451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00451");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken accessToken7 = null;
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService4.deleteGroup("", accessToken7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
    }

    @Test
    public void test00452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00452");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Cannot connect to server");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.util.Date date12 = accessToken11.getExpiresAt();
        java.lang.String str13 = accessToken11.getUserName();
        java.lang.String str14 = accessToken11.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user15 = osiamUserService2.replaceUser("PUT", user4, accessToken11);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test00453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00453");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        java.lang.String str17 = accessToken15.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.descending("hi!");
        org.osiam.client.query.Query query27 = queryBuilder26.build();
        java.lang.String str28 = query27.toString();
        java.lang.String str29 = query27.getSortOrder();
        java.lang.String str30 = query27.getSortBy();
        java.lang.String str31 = query27.getFilter();
        java.lang.String str32 = query27.getSortOrder();
        java.lang.String str33 = query27.getAttributes();
        boolean boolean34 = accessToken15.equals((java.lang.Object) query27);
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector7.deleteUser("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(query27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str28, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "descending" + "'", str29, "descending");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "descending" + "'", str32, "descending");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Authorization" + "'", str33, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test00454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00454");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder4 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.descending("hi!");
        org.osiam.client.query.Query query13 = queryBuilder12.build();
        org.osiam.client.query.Query query14 = queryBuilder12.build();
        long long15 = query14.getStartIndex();
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        java.util.Date date23 = accessToken22.getExpiresAt();
        java.lang.String str24 = accessToken22.getRefreshToken();
        java.lang.String str25 = accessToken22.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult26 = osiamUserService3.searchUsers(query14, accessToken22);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertNotNull(query14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test00455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00455");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet62 = accessToken60.getScopes();
        boolean boolean63 = scopeSerializer0.isEmpty(serializerProvider53, scopeSet62);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass64 = scopeSerializer0.handledType();
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper65 = null;
        com.fasterxml.jackson.databind.JavaType javaType66 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper65, javaType66);
        boolean boolean68 = scopeSerializer0.isUnwrappingSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder70 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date71 = null;
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder70.setRefreshTokenExpiresAt(date71);
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder70.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken75 = builder74.build();
        java.util.Date date76 = accessToken75.getExpiresAt();
        java.lang.String str77 = accessToken75.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet78 = accessToken75.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator79 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider80 = null;
        scopeSerializer0.serialize(scopeSet78, jsonGenerator79, serializerProvider80);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(scopeSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(scopeSetClass64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(accessToken75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(scopeSet78);
    }

    @Test
    public void test00456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00456");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.getAttributes();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query41);
        org.osiam.resources.scim.UpdateUser updateUser47 = null;
        org.osiam.client.oauth.AccessToken.Builder builder49 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date50 = null;
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder49.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken54 = builder53.build();
        boolean boolean55 = accessToken54.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user56 = osiamConnector5.updateUser("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", updateUser47, accessToken54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Authorization" + "'", str42, "Authorization");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(accessToken54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test00457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00457");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("");
        org.osiam.client.AuthService authService8 = builder7.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        java.lang.String str16 = accessToken15.toString();
        java.lang.String str17 = accessToken15.getRefreshToken();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.addScope(scope20);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException24 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean25 = scope22.equals((java.lang.Object) invalidAttributeException24);
        java.lang.String str26 = scope22.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder19.addScope(scope22);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setClientId("Bearer ");
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str31 = scope30.toString();
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder27.addScope(scope30);
        org.osiam.client.oauth.Scope scope34 = new org.osiam.client.oauth.Scope("");
        boolean boolean36 = scope34.equals((java.lang.Object) (short) 0);
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str38 = scope37.toString();
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.PATCH;
        boolean boolean41 = scope39.equals((java.lang.Object) 401);
        org.osiam.client.oauth.Scope[] scopeArray42 = new org.osiam.client.oauth.Scope[] { scope30, scope34, scope37, scope39 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken43 = authService8.refreshAccessToken(accessToken15, scopeArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(authService8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str16, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GET" + "'", str26, "GET");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ME" + "'", str31, "ME");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ME" + "'", str38, "ME");
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(scopeArray42);
    }

    @Test
    public void test00458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00458");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken9);
        java.util.Date date11 = accessToken9.getExpiresAt();
        boolean boolean12 = accessToken9.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser13 = osiamUserService2.getCurrentUserBasic(accessToken9);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test00459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00459");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector7.createQueryBuilder();
        org.osiam.client.AuthService.Builder builder24 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder26 = builder24.setClientId("ME");
        org.osiam.client.AuthService.Builder builder28 = builder26.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService29 = builder28.build();
        org.osiam.client.OsiamGroupService.Builder builder31 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService32 = builder31.build();
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        boolean boolean40 = accessToken39.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet41 = accessToken39.getScopes();
        java.lang.String str42 = osiamGroupService32.extractErrorMessageForbidden(accessToken39);
        boolean boolean43 = accessToken39.isClientOnly();
        java.lang.String str44 = authService29.extractErrorMessageForbidden(accessToken39);
        org.osiam.client.oauth.AccessToken.Builder builder46 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date47 = null;
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.setRefreshTokenExpiresAt(date47);
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder46.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken53 = builder50.build();
        java.lang.String str54 = accessToken53.toString();
        java.lang.String str55 = authService29.extractErrorMessageForbidden(accessToken53);
        org.osiam.client.oauth.AccessToken.Builder builder57 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date58 = null;
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setRefreshTokenExpiresAt(date58);
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder57.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken62 = builder61.build();
        java.util.Date date63 = accessToken62.getExpiresAt();
        java.lang.String str64 = accessToken62.getRefreshToken();
        java.lang.String str65 = accessToken62.getType();
        java.lang.String str66 = accessToken62.getClientId();
        java.lang.String str67 = accessToken62.getUserName();
        java.lang.String str68 = authService29.extractErrorMessageForbidden(accessToken62);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser69 = osiamConnector7.getCurrentUserBasic(accessToken62);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(authService29);
        org.junit.Assert.assertNotNull(osiamGroupService32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(scopeSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Insufficient scopes: []" + "'", str42, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Insufficient scopes: []" + "'", str44, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(accessToken53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str54, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Insufficient scopes: []" + "'", str55, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(accessToken62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Insufficient scopes: []" + "'", str68, "Insufficient scopes: []");
    }

    @Test
    public void test00460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00460");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken accessToken7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group8 = osiamGroupService3.getGroup("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
    }

    @Test
    public void test00461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00461");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        java.lang.String str14 = osiamGroupService4.extractErrorMessageForbidden(accessToken12);
        org.osiam.resources.scim.Group group16 = null;
        org.osiam.client.AuthService.Builder builder18 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientId("ME");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService23 = builder22.build();
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        boolean boolean31 = accessToken30.isRefreshTokenExpired();
        java.lang.String str32 = accessToken30.getUserId();
        java.lang.String str33 = accessToken30.getClientId();
        boolean boolean34 = accessToken30.isClientOnly();
        java.lang.String str35 = authService23.extractErrorMessageForbidden(accessToken30);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group36 = osiamGroupService4.replaceResource("PUT", group16, accessToken30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(authService23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
    }

    @Test
    public void test00462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00462");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService3.targetEndpoint;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group8 = osiamGroupService3.mapToResource("descending");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: descending");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
    }

    @Test
    public void test00463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00463");
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.AbstractOsiamService.Builder<org.osiam.client.AuthService> authServiceBuilder1 = new org.osiam.client.AbstractOsiamService.Builder<org.osiam.client.AuthService>("Bearer ");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00464");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group4 = osiamGroupService2.mapToResource("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
    }

    @Test
    public void test00465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00465");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken13 = builder10.build();
        java.lang.String str14 = accessToken13.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user15 = osiamUserService2.replaceUser("ME", user4, accessToken13);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str14, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
    }

    @Test
    public void test00466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00466");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.PATCH;
        boolean boolean14 = scope12.equals((java.lang.Object) 401);
        org.osiam.client.oauth.Scope[] scopeArray15 = new org.osiam.client.oauth.Scope[] { scope12 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken16 = osiamConnector7.retrieveAccessToken("descending", "authorization_code", scopeArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(scopeArray15);
    }

    @Test
    public void test00467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00467");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Cannot connect to server");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.util.Date date11 = accessToken10.getExpiresAt();
        java.lang.String str12 = accessToken10.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet13 = accessToken10.getScopes();
        java.lang.String str14 = accessToken10.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user15 = osiamUserService2.getUser("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", accessToken10);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(scopeSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test00468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00468");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.oauth.Scope scope25 = new org.osiam.client.oauth.Scope("Authorization");
        org.osiam.client.oauth.Scope scope27 = new org.osiam.client.oauth.Scope("PUT");
        org.osiam.client.oauth.Scope[] scopeArray28 = new org.osiam.client.oauth.Scope[] { scope25, scope27 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken29 = osiamConnector7.retrieveAccessToken("ADMIN", "authorization_code", scopeArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(scopeArray28);
    }

    @Test
    public void test00469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00469");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        org.osiam.resources.scim.Group group14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        java.lang.String str22 = accessToken21.toString();
        java.lang.String str23 = accessToken21.getType();
        boolean boolean24 = accessToken21.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group25 = osiamGroupService3.updateResource("PUT", group14, accessToken21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str22, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test00470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00470");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.resources.scim.Group group5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        boolean boolean14 = accessToken12.isClientOnly();
        java.lang.String str15 = accessToken12.getRefreshToken();
        boolean boolean16 = accessToken12.isExpired();
        boolean boolean17 = accessToken12.isRefreshTokenExpired();
        java.lang.String str18 = accessToken12.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group19 = osiamGroupService4.createGroup(group5, accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Bearer " + "'", str18, "Bearer ");
    }

    @Test
    public void test00471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00471");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        java.lang.String str8 = accessToken6.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder9 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.descending("hi!");
        org.osiam.client.query.Query query18 = queryBuilder17.build();
        java.lang.String str19 = query18.toString();
        java.lang.String str20 = query18.getSortOrder();
        java.lang.String str21 = query18.getSortBy();
        java.lang.String str22 = query18.getFilter();
        java.lang.String str23 = query18.toString();
        boolean boolean24 = accessToken6.equals((java.lang.Object) query18);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.query.Query query25 = query18.previousPage();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: StartIndex < 1 is not possible.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(query18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "descending" + "'", str20, "descending");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test00472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00472");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        boolean boolean11 = accessToken9.isClientOnly();
        java.lang.String str12 = accessToken9.getClientId();
        java.lang.String str13 = accessToken9.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser14 = osiamUserService2.getCurrentUserBasic(accessToken9);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test00473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00473");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = osiamGroupService3.extractErrorMessageUnauthorized("org.osiam.client.exception.ForbiddenException: hi!", statusType8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
    }

    @Test
    public void test00474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00474");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        org.osiam.client.helper.ScopeSerializer scopeSerializer4 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean5 = scopeSerializer4.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer7 = scopeSerializer4.unwrappingSerializer(nameTransformer6);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException16 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean17 = scope14.equals((java.lang.Object) invalidAttributeException16);
        java.lang.String str18 = scope14.getValue();
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str21 = scope20.toString();
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str24 = scope23.getValue();
        java.lang.String str25 = scope23.getValue();
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        java.lang.String str30 = scope26.getValue();
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException36 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean37 = scope34.equals((java.lang.Object) invalidAttributeException36);
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.GET;
        boolean boolean42 = scope40.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray44 = new org.osiam.client.oauth.Scope[] { scope13, scope14, scope19, scope20, scope22, scope23, scope26, scope31, scope32, scope33, scope34, scope38, scope39, scope40, scope43 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet45 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet45, scopeArray44);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder10.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet45);
        boolean boolean48 = scopeSetJsonSerializer7.isEmpty(serializerProvider8, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet45);
        boolean boolean49 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet45);
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer50 = scopeSerializer0.getDelegatee();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GET" + "'", str18, "GET");
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ME" + "'", str21, "ME");
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PATCH" + "'", str24, "PATCH");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PATCH" + "'", str25, "PATCH");
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GET" + "'", str30, "GET");
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertNotNull(scopeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardJsonSerializer50);
    }

    @Test
    public void test00475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00475");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.resources.scim.User user33 = null;
        org.osiam.client.AuthService.Builder builder35 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder37 = builder35.setClientId("ME");
        org.osiam.client.AuthService.Builder builder39 = builder37.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService40 = builder39.build();
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.lang.String str49 = accessToken47.getUserId();
        java.lang.String str50 = accessToken47.getClientId();
        boolean boolean51 = accessToken47.isClientOnly();
        java.lang.String str52 = authService40.extractErrorMessageForbidden(accessToken47);
        boolean boolean53 = accessToken47.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user54 = osiamConnector5.replaceUser("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", user33, accessToken47);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(authService40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Insufficient scopes: []" + "'", str52, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test00476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00476");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.AuthService.Builder builder10 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientId("ME");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService15 = builder14.build();
        org.osiam.client.OsiamGroupService.Builder builder17 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService18 = builder17.build();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        boolean boolean26 = accessToken25.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet27 = accessToken25.getScopes();
        java.lang.String str28 = osiamGroupService18.extractErrorMessageForbidden(accessToken25);
        boolean boolean29 = accessToken25.isClientOnly();
        java.lang.String str30 = authService15.extractErrorMessageForbidden(accessToken25);
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken39 = builder36.build();
        java.lang.String str40 = accessToken39.toString();
        java.lang.String str41 = authService15.extractErrorMessageForbidden(accessToken39);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user42 = osiamConnector7.getCurrentUser(accessToken39);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(authService15);
        org.junit.Assert.assertNotNull(osiamGroupService18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(scopeSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Insufficient scopes: []" + "'", str28, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Insufficient scopes: []" + "'", str30, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str40, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: []" + "'", str41, "Insufficient scopes: []");
    }

    @Test
    public void test00477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00477");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken14);
        java.util.Date date16 = accessToken14.getExpiresAt();
        boolean boolean17 = accessToken14.isClientOnly();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str19 = scope18.getValue();
        org.osiam.client.oauth.Scope[] scopeArray20 = new org.osiam.client.oauth.Scope[] { scope18 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken21 = osiamConnector7.refreshAccessToken(accessToken14, scopeArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PATCH" + "'", str19, "PATCH");
        org.junit.Assert.assertNotNull(scopeArray20);
    }

    @Test
    public void test00478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00478");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.getAttributes();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query41);
        org.osiam.resources.scim.Group group47 = null;
        org.osiam.client.oauth.AccessToken.Builder builder49 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date50 = null;
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder49.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken54 = builder53.build();
        java.util.Date date55 = accessToken54.getExpiresAt();
        java.lang.String str56 = accessToken54.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet57 = accessToken54.getScopes();
        java.util.Date date58 = accessToken54.getExpiresAt();
        java.lang.String str59 = accessToken54.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group60 = osiamConnector5.replaceGroup("org.osiam.client.exception.ForbiddenException: hi!", group47, accessToken54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Authorization" + "'", str42, "Authorization");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(accessToken54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(scopeSet57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Bearer " + "'", str59, "Bearer ");
    }

    @Test
    public void test00479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00479");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        java.lang.String str12 = accessToken10.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet13 = accessToken10.getScopes();
        java.util.Date date14 = accessToken10.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user15 = osiamUserService2.getUser("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken10);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(scopeSet13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test00480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00480");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = osiamGroupService3.extractErrorMessageDefault("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", statusType7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
    }

    @Test
    public void test00481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00481");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.resources.scim.User user4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken13 = builder10.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user15 = osiamUserService3.createUser(user4, accessToken13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test00482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00482");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamConnector.Builder builder4 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        java.lang.String str18 = accessToken16.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder19 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder21.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.descending("hi!");
        org.osiam.client.query.Query query28 = queryBuilder27.build();
        java.lang.String str29 = query28.toString();
        java.lang.String str30 = query28.getSortOrder();
        java.lang.String str31 = query28.getSortBy();
        java.lang.String str32 = query28.getFilter();
        java.lang.String str33 = query28.toString();
        boolean boolean34 = accessToken16.equals((java.lang.Object) query28);
        org.osiam.client.query.QueryBuilder queryBuilder35 = osiamConnector9.createQueryBuilder(query28);
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken44 = builder41.build();
        org.osiam.client.oauth.AccessToken accessToken45 = builder41.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken45);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult47 = osiamGroupService3.searchResources(query28, accessToken45);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(query28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "descending" + "'", str30, "descending");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str33, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(accessToken44);
        org.junit.Assert.assertNotNull(accessToken45);
    }

    @Test
    public void test00483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00483");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder1.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService6 = builder1.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken8 = authService6.retrieveAccessToken("2024-03-22T13:51:20.388");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client secret can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
    }

    @Test
    public void test00484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00484");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.resources.scim.UpdateGroup updateGroup23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        boolean boolean31 = accessToken30.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet32 = accessToken30.getScopes();
        boolean boolean33 = accessToken30.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group34 = osiamConnector7.updateGroup("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]", updateGroup23, accessToken30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(scopeSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test00485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00485");
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException2 = new org.osiam.client.exception.InvalidAttributeException("");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException3 = new org.osiam.client.exception.ConnectionInitializationException("Bearer ", (java.lang.Throwable) invalidAttributeException2);
        org.osiam.client.exception.ForbiddenException forbiddenException5 = new org.osiam.client.exception.ForbiddenException("hi!");
        connectionInitializationException3.addSuppressed((java.lang.Throwable) forbiddenException5);
        org.osiam.client.exception.OsiamRequestException osiamRequestException9 = new org.osiam.client.exception.OsiamRequestException((int) (byte) 0, "hi!");
        connectionInitializationException3.addSuppressed((java.lang.Throwable) osiamRequestException9);
        java.lang.String str11 = osiamRequestException9.toString();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.osiam.client.exception.OsiamRequestException: hi!" + "'", str11, "org.osiam.client.exception.OsiamRequestException: hi!");
    }

    @Test
    public void test00486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00486");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.util.Date date12 = accessToken10.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user13 = osiamUserService2.getUser("org.osiam.client.exception.ForbiddenException: hi!", accessToken10);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test00487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00487");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.resources.scim.Group group22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken29 = builder28.build();
        boolean boolean30 = accessToken29.isRefreshTokenExpired();
        boolean boolean31 = accessToken29.isClientOnly();
        java.lang.String str32 = accessToken29.getRefreshToken();
        boolean boolean33 = accessToken29.isExpired();
        boolean boolean34 = accessToken29.isExpired();
        java.lang.String str35 = accessToken29.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group36 = osiamConnector7.createGroup(group22, accessToken29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test00488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00488");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.resources.scim.UpdateGroup updateGroup7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken16 = builder13.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group17 = osiamGroupService3.updateGroup("org.osiam.client.exception.OsiamRequestException: hi!", updateGroup7, accessToken16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
    }

    @Test
    public void test00489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00489");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        boolean boolean12 = accessToken10.isClientOnly();
        java.lang.String str13 = accessToken10.getRefreshToken();
        boolean boolean14 = accessToken10.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser15 = osiamConnector3.getCurrentUserBasic(accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test00490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00490");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        java.util.Date date19 = accessToken18.getExpiresAt();
        java.lang.String str20 = accessToken18.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken18);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        boolean boolean29 = accessToken28.isRefreshTokenExpired();
        boolean boolean30 = accessToken28.isClientOnly();
        java.lang.String str31 = accessToken28.getClientId();
        boolean boolean32 = accessToken28.isClientOnly();
        boolean boolean33 = accessToken18.equals((java.lang.Object) accessToken28);
        // The following exception was thrown during execution in test generation
        try {
            authService10.revokeAllAccessTokens("authorization_code", accessToken18);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test00491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00491");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Cannot connect to server");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder4 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder4.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder4.build();
        javax.ws.rs.client.WebTarget webTarget7 = osiamGroupService6.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget8 = osiamGroupService6.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        java.lang.String str17 = accessToken15.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken15.getScopes();
        java.lang.String str19 = osiamGroupService6.extractErrorMessageForbidden(accessToken15);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList20 = osiamUserService2.getAllUsers(accessToken15);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(webTarget7);
        org.junit.Assert.assertNotNull(webTarget8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
    }

    @Test
    public void test00492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00492");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        boolean boolean12 = accessToken10.isClientOnly();
        java.lang.String str13 = accessToken10.getRefreshToken();
        boolean boolean14 = accessToken10.isExpired();
        boolean boolean15 = accessToken10.isExpired();
        java.lang.String str16 = accessToken10.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            osiamUserService2.deleteUser("org.osiam.client.exception.ForbiddenException: hi!", accessToken10);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test00493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00493");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector7.revokeAllAccessTokens("authorization_code", accessToken11);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(accessToken11);
    }

    @Test
    public void test00494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00494");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.OsiamGroupService.Builder builder8 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken16.getScopes();
        java.lang.String str19 = osiamGroupService9.extractErrorMessageForbidden(accessToken16);
        boolean boolean20 = accessToken16.isClientOnly();
        java.lang.String str21 = authService6.extractErrorMessageForbidden(accessToken16);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken30 = builder27.build();
        java.lang.String str31 = accessToken30.toString();
        java.lang.String str32 = authService6.extractErrorMessageForbidden(accessToken30);
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        java.util.Date date40 = accessToken39.getExpiresAt();
        java.lang.String str41 = accessToken39.getRefreshToken();
        java.lang.String str42 = accessToken39.getType();
        java.lang.String str43 = accessToken39.getClientId();
        java.lang.String str44 = accessToken39.getUserName();
        java.lang.String str45 = authService6.extractErrorMessageForbidden(accessToken39);
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder48.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken53 = builder52.build();
        boolean boolean54 = accessToken53.isRefreshTokenExpired();
        boolean boolean55 = accessToken53.isClientOnly();
        java.lang.String str56 = accessToken53.getClientId();
        boolean boolean57 = accessToken53.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder59 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope60 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.addScope(scope60);
        org.osiam.client.oauth.Scope scope62 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException64 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean65 = scope62.equals((java.lang.Object) invalidAttributeException64);
        java.lang.String str66 = scope62.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder59.addScope(scope62);
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder67.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder69.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder71.setUserName("Authorization");
        boolean boolean74 = accessToken53.equals((java.lang.Object) builder71);
        // The following exception was thrown during execution in test generation
        try {
            authService6.revokeAllAccessTokens("authorization_code", accessToken53);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str31, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Insufficient scopes: []" + "'", str45, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(accessToken53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(scope60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(scope62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "GET" + "'", str66, "GET");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test00495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00495");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet15 = accessToken12.getScopes();
        java.lang.String str16 = osiamGroupService3.extractErrorMessageForbidden(accessToken12);
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        boolean boolean25 = accessToken24.isRefreshTokenExpired();
        boolean boolean26 = accessToken24.isClientOnly();
        java.lang.String str27 = accessToken24.getRefreshToken();
        boolean boolean28 = accessToken24.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService3.deleteResource("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken24);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(scopeSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Insufficient scopes: []" + "'", str16, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test00496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00496");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.getAttributes();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query41);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.toString();
        java.lang.String str57 = query55.getSortOrder();
        java.lang.String str58 = query55.getAttributes();
        org.osiam.client.oauth.AccessToken.Builder builder60 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date61 = null;
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder60.setRefreshTokenExpiresAt(date61);
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder60.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken65 = builder64.build();
        java.util.Date date66 = accessToken65.getExpiresAt();
        java.lang.String str67 = accessToken65.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult68 = osiamConnector5.searchGroups(query55, accessToken65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Authorization" + "'", str42, "Authorization");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str56, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "descending" + "'", str57, "descending");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Authorization" + "'", str58, "Authorization");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(accessToken65);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
    }

    @Test
    public void test00497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00497");
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.AbstractOsiamService.Builder<org.osiam.resources.scim.User> userBuilder1 = new org.osiam.client.AbstractOsiamService.Builder<org.osiam.resources.scim.User>("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00498");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        java.lang.String str15 = accessToken13.getUserId();
        java.lang.String str16 = accessToken13.getClientId();
        boolean boolean17 = accessToken13.isClientOnly();
        java.lang.String str18 = authService6.extractErrorMessageForbidden(accessToken13);
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken25);
        java.util.Date date27 = accessToken25.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            authService6.revokeAccessToken(accessToken25);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test00499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00499");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = osiamGroupService2.extractErrorMessage("Cannot connect to server", statusType4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
    }

    @Test
    public void test00500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00500");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = osiamGroupService3.extractErrorMessageDefault("hi!", statusType8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
    }
}
