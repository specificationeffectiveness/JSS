package org.osiam.client;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest22 {

    public static boolean debug = false;

    @Test
    public void test11001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11001");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        org.osiam.client.AuthService.Builder builder6 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientId("ME");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService11 = builder10.build();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        boolean boolean19 = accessToken18.isRefreshTokenExpired();
        java.lang.String str20 = accessToken18.getUserId();
        java.lang.String str21 = accessToken18.getClientId();
        boolean boolean22 = accessToken18.isClientOnly();
        java.lang.String str23 = authService11.extractErrorMessageForbidden(accessToken18);
        java.lang.String str24 = accessToken18.toString();
        java.lang.String str25 = accessToken18.getClientId();
        java.lang.String str26 = osiamGroupService3.extractErrorMessageForbidden(accessToken18);
        javax.ws.rs.core.Response.StatusType statusType28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = osiamGroupService3.extractErrorMessage("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE, PUT], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=]", statusType28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(authService11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Insufficient scopes: []" + "'", str23, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str24, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Insufficient scopes: []" + "'", str26, "Insufficient scopes: []");
    }

    @Test
    public void test11002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11002");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector osiamConnector5 = builder2.build();
        org.osiam.resources.scim.User user7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken14);
        java.util.Date date16 = accessToken14.getExpiresAt();
        boolean boolean17 = accessToken14.isRefreshTokenExpired();
        java.util.Date date18 = accessToken14.getExpiresAt();
        java.lang.String str19 = accessToken14.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user20 = osiamConnector5.replaceUser("org.osiam.client.exception.OsiamRequestException: Query [attributes=Authorization, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=10]", user7, accessToken14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The string \"AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16\" for the URI component SCHEME contains an invalid character, ' ', at index 11.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test11003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11003");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.toString();
        org.osiam.client.query.Query query12 = query9.nextPage();
        java.lang.String str13 = query9.toString();
        org.osiam.client.query.Query query14 = query9.nextPage();
        java.lang.String str15 = query14.getAttributes();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str11, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str13, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Authorization" + "'", str15, "Authorization");
    }

    @Test
    public void test11004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11004");
        org.osiam.client.exception.NoResultException noResultException1 = new org.osiam.client.exception.NoResultException("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConflictException: PATCH");
    }

    @Test
    public void test11005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11005");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.AuthService.Builder builder5 = new org.osiam.client.AuthService.Builder("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        java.lang.String str15 = accessToken13.getUserId();
        java.lang.String str16 = accessToken13.getToken();
        boolean boolean17 = accessToken13.isExpired();
        java.lang.String str18 = accessToken13.getClientId();
        java.lang.String str19 = accessToken13.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet20 = accessToken13.getScopes();
        java.lang.String str21 = authService6.extractErrorMessageForbidden(accessToken13);
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.deleteResource("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.ConflictException: ", accessToken13);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Bearer " + "'", str16, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(scopeSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
    }

    @Test
    public void test11006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11006");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientRedirectUri("password");
        org.osiam.client.OsiamConnector osiamConnector11 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder12 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder14.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.descending("hi!");
        org.osiam.client.query.Query query21 = queryBuilder20.build();
        java.lang.String str22 = query21.toString();
        java.lang.String str23 = query21.getSortOrder();
        java.lang.String str24 = query21.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder25 = new org.osiam.client.query.QueryBuilder(query21);
        java.lang.String str26 = query21.toString();
        java.lang.String str27 = query21.toString();
        org.osiam.client.query.QueryBuilder queryBuilder28 = new org.osiam.client.query.QueryBuilder(query21);
        org.osiam.client.query.Query query29 = queryBuilder28.build();
        org.osiam.client.query.QueryBuilder queryBuilder30 = new org.osiam.client.query.QueryBuilder(query29);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector11.createQueryBuilder(query29);
        org.osiam.client.OsiamGroupService.Builder builder33 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService34 = builder33.build();
        org.osiam.client.OsiamGroupService osiamGroupService35 = builder33.build();
        javax.ws.rs.client.WebTarget webTarget36 = osiamGroupService35.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget37 = osiamGroupService35.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder39 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date40 = null;
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setRefreshTokenExpiresAt(date40);
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder39.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken44 = builder43.build();
        boolean boolean45 = accessToken44.isRefreshTokenExpired();
        java.lang.String str46 = accessToken44.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet47 = accessToken44.getScopes();
        java.lang.String str48 = osiamGroupService35.extractErrorMessageForbidden(accessToken44);
        java.lang.String str49 = accessToken44.getUserId();
        java.lang.String str50 = accessToken44.getClientId();
        java.lang.String str51 = accessToken44.getClientId();
        boolean boolean52 = accessToken44.isRefreshTokenExpired();
        boolean boolean53 = accessToken44.isClientOnly();
        java.lang.String str54 = accessToken44.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser55 = osiamConnector11.getCurrentUserBasic(accessToken44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(osiamConnector11);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "descending" + "'", str23, "descending");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str26, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(osiamGroupService34);
        org.junit.Assert.assertNotNull(osiamGroupService35);
        org.junit.Assert.assertNotNull(webTarget36);
        org.junit.Assert.assertNotNull(webTarget37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(accessToken44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(scopeSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Insufficient scopes: []" + "'", str48, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test11007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11007");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        org.osiam.client.AuthService.Builder builder6 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientId("ME");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService11 = builder10.build();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        boolean boolean19 = accessToken18.isRefreshTokenExpired();
        java.lang.String str20 = accessToken18.getUserId();
        java.lang.String str21 = accessToken18.getClientId();
        boolean boolean22 = accessToken18.isClientOnly();
        java.lang.String str23 = authService11.extractErrorMessageForbidden(accessToken18);
        java.lang.String str24 = accessToken18.toString();
        java.lang.String str25 = accessToken18.getClientId();
        java.lang.String str26 = osiamGroupService3.extractErrorMessageForbidden(accessToken18);
        org.osiam.resources.scim.Group group28 = null;
        org.osiam.client.OsiamGroupService.Builder builder30 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService31 = builder30.build();
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date34 = null;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder33.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken38 = builder37.build();
        boolean boolean39 = accessToken38.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet40 = accessToken38.getScopes();
        java.lang.String str41 = osiamGroupService31.extractErrorMessageForbidden(accessToken38);
        boolean boolean42 = accessToken38.isRefreshTokenExpired();
        org.osiam.client.query.QueryBuilder queryBuilder43 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder45.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder45.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder49.descending("hi!");
        org.osiam.client.query.Query query52 = queryBuilder51.build();
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder51.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder56 = queryBuilder51.filter("org.osiam.client.exception.ForbiddenException: hi!");
        boolean boolean57 = accessToken38.equals((java.lang.Object) "org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken38);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group59 = osiamGroupService3.replaceResource("", group28, accessToken38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(authService11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Insufficient scopes: []" + "'", str23, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str24, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Insufficient scopes: []" + "'", str26, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(scopeSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: []" + "'", str41, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(query52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(queryBuilder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test11008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11008");
        org.osiam.client.oauth.Scope scope1 = new org.osiam.client.oauth.Scope("authorization_code");
        java.lang.String str2 = scope1.getValue();
        java.lang.String str3 = scope1.toString();
        java.lang.String str4 = scope1.getValue();
        org.osiam.client.OsiamGroupService.Builder builder6 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder6.build();
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken15);
        java.lang.String str17 = osiamGroupService8.extractErrorMessageForbidden(accessToken15);
        boolean boolean18 = scope1.equals((java.lang.Object) osiamGroupService8);
        org.osiam.resources.scim.Group group19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        java.lang.String str28 = accessToken26.getUserId();
        java.lang.String str29 = accessToken26.getClientId();
        boolean boolean30 = accessToken26.isClientOnly();
        java.lang.String str31 = accessToken26.getRefreshToken();
        boolean boolean32 = accessToken26.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group33 = osiamGroupService8.createResource(group19, accessToken26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "authorization_code" + "'", str2, "authorization_code");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "authorization_code" + "'", str3, "authorization_code");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "authorization_code" + "'", str4, "authorization_code");
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Insufficient scopes: []" + "'", str17, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test11009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11009");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.AuthService.Builder builder7 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder17 = builder15.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder19 = builder15.setClientSecret("PATCH");
        org.osiam.client.AuthService authService20 = builder19.build();
        org.osiam.client.AuthService authService21 = builder19.build();
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.addScope(scope25);
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException29 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean30 = scope27.equals((java.lang.Object) invalidAttributeException29);
        java.lang.String str31 = scope27.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder24.addScope(scope27);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setUserId("");
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.addScope(scope37);
        org.osiam.client.oauth.Scope scope40 = new org.osiam.client.oauth.Scope("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope42 = new org.osiam.client.oauth.Scope("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope[] scopeArray43 = new org.osiam.client.oauth.Scope[] { scope22, scope37, scope40, scope42 };
        java.net.URI uRI44 = authService21.getAuthorizationUri(scopeArray43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date47 = null;
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.setRefreshTokenExpiresAt(date47);
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder46.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken51 = builder50.build();
        java.util.Date date52 = accessToken51.getExpiresAt();
        java.lang.String str53 = accessToken51.getUserName();
        java.lang.String str54 = accessToken51.toString();
        java.lang.String str55 = accessToken51.toString();
        java.lang.String str56 = authService21.extractErrorMessageForbidden(accessToken51);
        java.util.Date date57 = accessToken51.getRefreshTokenExpiresAt();
        java.lang.String str58 = accessToken51.getToken();
        // The following exception was thrown during execution in test generation
        try {
            osiamUserService4.deleteUser("org.osiam.client.exception.ConflictException: org.osiam.client.exception.OsiamClientException: ME", accessToken51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(authService20);
        org.junit.Assert.assertNotNull(authService21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "GET" + "'", str31, "GET");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(scopeArray43);
        org.junit.Assert.assertNotNull(uRI44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(accessToken51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str54, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str55, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Insufficient scopes: []" + "'", str56, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Bearer " + "'", str58, "Bearer ");
    }

    @Test
    public void test11010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11010");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper41 = null;
        com.fasterxml.jackson.databind.JavaType javaType42 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper41, javaType42);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer44 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer45 = scopeSerializer0.unwrappingSerializer(nameTransformer44);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer46 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer47 = scopeSerializer0.unwrappingSerializer(nameTransformer46);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer48 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer49 = scopeSetJsonSerializer47.unwrappingSerializer(nameTransformer48);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer45);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer47);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer49);
    }

    @Test
    public void test11011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11011");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet62 = accessToken60.getScopes();
        boolean boolean63 = scopeSerializer0.isEmpty(serializerProvider53, scopeSet62);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper64 = null;
        com.fasterxml.jackson.databind.JavaType javaType65 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper64, javaType65);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass67 = scopeSerializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer68 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer69 = scopeSerializer0.unwrappingSerializer(nameTransformer68);
        boolean boolean70 = scopeSerializer0.isUnwrappingSerializer();
        boolean boolean71 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer72 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer73 = scopeSerializer0.unwrappingSerializer(nameTransformer72);
        boolean boolean74 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer75 = scopeSerializer0.getDelegatee();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass76 = scopeSerializer0.handledType();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(scopeSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(scopeSetClass67);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(wildcardJsonSerializer75);
        org.junit.Assert.assertNull(scopeSetClass76);
    }

    @Test
    public void test11012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11012");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setResourceServerEndpoint("org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector5 = builder0.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.descending("hi!");
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        java.lang.String str16 = query15.toString();
        java.lang.String str17 = query15.getSortOrder();
        java.lang.String str18 = query15.getSortBy();
        java.lang.String str19 = query15.getFilter();
        java.lang.String str20 = query15.getSortOrder();
        java.lang.String str21 = query15.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder(query15);
        long long23 = query15.getStartIndex();
        java.lang.String str24 = query15.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder25 = osiamConnector5.createQueryBuilder(query15);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        boolean boolean34 = accessToken33.isRefreshTokenExpired();
        java.lang.String str35 = accessToken33.getUserId();
        java.lang.String str36 = accessToken33.getToken();
        boolean boolean37 = accessToken33.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group38 = osiamConnector5.getGroup("org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str16, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "descending" + "'", str17, "descending");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "descending" + "'", str20, "descending");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Authorization" + "'", str21, "Authorization");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Authorization" + "'", str24, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Bearer " + "'", str36, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test11013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11013");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        boolean boolean6 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer7 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader8 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer9 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer10 = scopeDeserializer0.unwrappingDeserializer(nameTransformer9);
        java.util.Collection<java.lang.Object> objCollection11 = scopeDeserializer0.getKnownPropertyNames();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardJsonDeserializer7);
        org.junit.Assert.assertNull(objectIdReader8);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer10);
        org.junit.Assert.assertNull(objCollection11);
    }

    @Test
    public void test11014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11014");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector13 = builder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder14 = osiamConnector13.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.attributes("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
    }

    @Test
    public void test11015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11015");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388");
        org.osiam.client.AuthService authService2 = builder1.build();
        org.osiam.client.AuthService authService3 = builder1.build();
        org.osiam.client.oauth.Scope[] scopeArray6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken7 = authService3.retrieveAccessToken("Query [attributes=null, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=100]", "org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", scopeArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(authService2);
        org.junit.Assert.assertNotNull(authService3);
    }

    @Test
    public void test11016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11016");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.OsiamConnector.Builder builder11 = builder6.setAuthServerEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder13 = builder11.setClientId("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector osiamConnector14 = builder11.build();
        org.osiam.client.query.QueryBuilder queryBuilder15 = osiamConnector14.createQueryBuilder();
        org.osiam.resources.scim.UpdateUser updateUser17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        java.util.Date date25 = accessToken24.getExpiresAt();
        java.lang.String str26 = accessToken24.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet27 = accessToken24.getScopes();
        java.lang.String str28 = accessToken24.getUserName();
        java.lang.String str29 = accessToken24.getType();
        java.util.Date date30 = accessToken24.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user31 = osiamConnector14.updateUser("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", updateUser17, accessToken24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(osiamConnector14);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(scopeSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11017");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet2 = scopeDeserializer0.getEmptyValue();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty4 = scopeDeserializer0.findBackReference("org.osiam.client.exception.ConflictException: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'org.osiam.client.exception.ConflictException: ': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(scopeSet2);
    }

    @Test
    public void test11018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11018");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.OsiamConnector.Builder builder6 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector13 = builder12.build();
        org.osiam.client.query.QueryBuilder queryBuilder14 = osiamConnector13.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder15 = osiamConnector13.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder16 = osiamConnector13.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder19.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.descending("hi!");
        org.osiam.client.query.Query query26 = queryBuilder25.build();
        java.lang.String str27 = query26.toString();
        java.lang.String str28 = query26.getSortOrder();
        java.lang.String str29 = query26.getSortBy();
        java.lang.String str30 = query26.getFilter();
        java.lang.String str31 = query26.getSortOrder();
        java.lang.String str32 = query26.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder33 = new org.osiam.client.query.QueryBuilder(query26);
        long long34 = query26.getStartIndex();
        org.osiam.client.query.Query query35 = query26.nextPage();
        java.lang.String str36 = query26.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder37 = new org.osiam.client.query.QueryBuilder(query26);
        java.lang.String str38 = query26.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder39 = osiamConnector13.createQueryBuilder(query26);
        org.osiam.client.query.Query query40 = query26.nextPage();
        org.osiam.client.query.Query query41 = query40.nextPage();
        java.lang.String str42 = query40.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder43 = osiamConnector5.createQueryBuilder(query40);
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.ascending("org.osiam.client.exception.NoResultException: refresh_token");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "descending" + "'", str28, "descending");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "descending" + "'", str31, "descending");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Authorization" + "'", str32, "Authorization");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(query35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Authorization" + "'", str38, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(query40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "descending" + "'", str42, "descending");
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(queryBuilder45);
    }

    @Test
    public void test11019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11019");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setResourceServerEndpoint("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientRedirectUri("Authorization");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientId("ADMIN");
        org.osiam.client.OsiamConnector.Builder builder12 = builder2.setClientSecret("org.osiam.client.exception.ConflictException: ");
        org.osiam.client.OsiamConnector osiamConnector13 = builder2.build();
        org.osiam.resources.scim.User user15 = null;
        org.osiam.client.OsiamGroupService.Builder builder17 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService18 = builder17.build();
        org.osiam.client.OsiamGroupService osiamGroupService19 = builder17.build();
        javax.ws.rs.client.WebTarget webTarget20 = osiamGroupService19.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget21 = osiamGroupService19.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget22 = osiamGroupService19.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken29 = builder28.build();
        java.lang.String str30 = osiamGroupService19.extractErrorMessageForbidden(accessToken29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        java.lang.String str38 = accessToken37.toString();
        java.lang.String str39 = accessToken37.getType();
        boolean boolean40 = accessToken37.isExpired();
        java.lang.String str41 = accessToken37.getToken();
        java.lang.String str42 = osiamGroupService19.extractErrorMessageForbidden(accessToken37);
        boolean boolean43 = accessToken37.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user44 = osiamConnector13.replaceUser("ME", user15, accessToken37);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(osiamGroupService18);
        org.junit.Assert.assertNotNull(osiamGroupService19);
        org.junit.Assert.assertNotNull(webTarget20);
        org.junit.Assert.assertNotNull(webTarget21);
        org.junit.Assert.assertNotNull(webTarget22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Insufficient scopes: []" + "'", str30, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str38, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Bearer " + "'", str41, "Bearer ");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Insufficient scopes: []" + "'", str42, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test11020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11020");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeSetJsonDeserializer4.unwrappingDeserializer(nameTransformer5);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet7 = scopeSetJsonDeserializer4.getEmptyValue();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNull(scopeSet7);
    }

    @Test
    public void test11021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11021");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        boolean boolean12 = accessToken9.isClientOnly();
        java.lang.String str13 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.client.AuthService.Builder builder15 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder17 = builder15.setClientId("ME");
        org.osiam.client.AuthService.Builder builder19 = builder17.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService20 = builder19.build();
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken27 = builder26.build();
        boolean boolean28 = accessToken27.isRefreshTokenExpired();
        java.lang.String str29 = accessToken27.getUserId();
        java.lang.String str30 = accessToken27.getClientId();
        boolean boolean31 = accessToken27.isClientOnly();
        java.lang.String str32 = authService20.extractErrorMessageForbidden(accessToken27);
        org.osiam.client.OsiamGroupService.Builder builder34 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService35 = builder34.build();
        org.osiam.client.OsiamGroupService osiamGroupService36 = builder34.build();
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken43);
        java.lang.String str45 = osiamGroupService36.extractErrorMessageForbidden(accessToken43);
        java.util.Date date46 = accessToken43.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken43);
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean49 = accessToken43.equals((java.lang.Object) scope48);
        java.lang.String str50 = accessToken43.getRefreshToken();
        boolean boolean51 = accessToken43.isRefreshTokenExpired();
        java.lang.String str52 = authService20.extractErrorMessageForbidden(accessToken43);
        java.lang.String str53 = osiamGroupService2.extractErrorMessageForbidden(accessToken43);
        org.osiam.resources.scim.Group group54 = null;
        org.osiam.client.AuthService.Builder builder56 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder58 = builder56.setClientId("ME");
        org.osiam.client.AuthService.Builder builder60 = builder58.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder62 = builder60.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder64 = builder62.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService65 = builder64.build();
        org.osiam.client.oauth.AccessToken.Builder builder67 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date68 = null;
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder67.setRefreshTokenExpiresAt(date68);
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder67.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken72 = builder71.build();
        boolean boolean73 = accessToken72.isRefreshTokenExpired();
        java.lang.String str74 = authService65.extractErrorMessageForbidden(accessToken72);
        boolean boolean75 = accessToken72.isRefreshTokenExpired();
        java.lang.String str76 = accessToken72.getType();
        java.util.Date date77 = accessToken72.getExpiresAt();
        boolean boolean78 = accessToken72.isRefreshTokenExpired();
        boolean boolean79 = accessToken72.isClientOnly();
        java.util.Date date80 = accessToken72.getRefreshTokenExpiresAt();
        java.lang.String str81 = accessToken72.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group82 = osiamGroupService2.createGroup(group54, accessToken72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Insufficient scopes: []" + "'", str13, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(authService20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService35);
        org.junit.Assert.assertNotNull(osiamGroupService36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Insufficient scopes: []" + "'", str45, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Insufficient scopes: []" + "'", str52, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Insufficient scopes: []" + "'", str53, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(authService65);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(accessToken72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Insufficient scopes: []" + "'", str74, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Bearer " + "'", str81, "Bearer ");
    }

    @Test
    public void test11022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11022");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientId("org.osiam.client.exception.ConnectionInitializationException: descending");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientId("org.osiam.client.exception.OsiamRequestException: hi!");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test11023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11023");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder11 = builder7.setClientId("");
        org.osiam.client.AuthService.Builder builder13 = builder7.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientId("PATCH");
        org.osiam.client.AuthService.Builder builder17 = builder13.setClientRedirectUri("Bearer ");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test11024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11024");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        boolean boolean4 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer6 = scopeSerializer0.unwrappingSerializer(nameTransformer5);
        boolean boolean7 = scopeSetJsonSerializer6.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer8 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer9 = scopeSetJsonSerializer6.unwrappingSerializer(nameTransformer8);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper10 = null;
        com.fasterxml.jackson.databind.JavaType javaType11 = null;
        scopeSetJsonSerializer6.acceptJsonFormatVisitor(jsonFormatVisitorWrapper10, javaType11);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer9);
    }

    @Test
    public void test11025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11025");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        boolean boolean18 = accessToken17.isRefreshTokenExpired();
        java.lang.String str19 = authService10.extractErrorMessageForbidden(accessToken17);
        org.osiam.client.AuthService.Builder builder21 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientId("ME");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService26 = builder25.build();
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        boolean boolean34 = accessToken33.isRefreshTokenExpired();
        java.lang.String str35 = accessToken33.getUserId();
        java.lang.String str36 = accessToken33.getClientId();
        boolean boolean37 = accessToken33.isClientOnly();
        java.lang.String str38 = authService26.extractErrorMessageForbidden(accessToken33);
        boolean boolean39 = accessToken33.isExpired();
        java.lang.String str40 = authService10.extractErrorMessageForbidden(accessToken33);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        java.util.Date date48 = accessToken47.getExpiresAt();
        java.lang.String str49 = accessToken47.getUserName();
        java.lang.String str50 = accessToken47.getUserName();
        org.osiam.client.oauth.AccessToken.Builder builder52 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setRefreshTokenExpiresAt(date53);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder52.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken57 = builder56.build();
        boolean boolean58 = accessToken57.isRefreshTokenExpired();
        java.lang.String str59 = accessToken57.getClientId();
        boolean boolean60 = accessToken47.equals((java.lang.Object) accessToken57);
        java.lang.String str61 = accessToken57.getUserId();
        java.lang.String str62 = authService10.extractErrorMessageForbidden(accessToken57);
        org.osiam.client.oauth.Scope[] scopeArray65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken66 = authService10.retrieveAccessToken("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", "org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.ConflictException: ", scopeArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(authService26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Insufficient scopes: []" + "'", str38, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Insufficient scopes: []" + "'", str40, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(accessToken57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Insufficient scopes: []" + "'", str62, "Insufficient scopes: []");
    }

    @Test
    public void test11026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11026");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setResourceServerEndpoint("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientRedirectUri("Authorization");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientId("ADMIN");
        org.osiam.client.OsiamConnector osiamConnector11 = builder2.build();
        org.osiam.client.query.QueryBuilder queryBuilder12 = osiamConnector11.createQueryBuilder();
        org.osiam.client.OsiamGroupService.Builder builder14 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService15 = builder14.build();
        org.osiam.client.OsiamGroupService osiamGroupService16 = builder14.build();
        org.osiam.client.OsiamGroupService osiamGroupService17 = builder14.build();
        org.osiam.client.AuthService.Builder builder19 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder21 = builder19.setClientId("ME");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService28 = builder27.build();
        org.osiam.client.OsiamGroupService.Builder builder30 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService31 = builder30.build();
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date34 = null;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder33.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken38 = builder37.build();
        boolean boolean39 = accessToken38.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet40 = accessToken38.getScopes();
        java.lang.String str41 = osiamGroupService31.extractErrorMessageForbidden(accessToken38);
        boolean boolean42 = accessToken38.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken38);
        java.lang.String str44 = authService28.extractErrorMessageForbidden(accessToken38);
        java.lang.String str45 = accessToken38.getType();
        java.lang.String str46 = osiamGroupService17.extractErrorMessageForbidden(accessToken38);
        boolean boolean47 = accessToken38.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList48 = osiamConnector11.getAllGroups(accessToken38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(osiamConnector11);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(osiamGroupService15);
        org.junit.Assert.assertNotNull(osiamGroupService16);
        org.junit.Assert.assertNotNull(osiamGroupService17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(authService28);
        org.junit.Assert.assertNotNull(osiamGroupService31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(scopeSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: []" + "'", str41, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Insufficient scopes: []" + "'", str44, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Insufficient scopes: []" + "'", str46, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test11027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11027");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientId("password");
        org.osiam.client.AuthService.Builder builder11 = builder7.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test11028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11028");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.helper.ScopeSerializer scopeSerializer16 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean17 = scopeSerializer16.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass18 = scopeSerializer16.handledType();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        java.util.Date date26 = accessToken25.getExpiresAt();
        java.lang.String str27 = accessToken25.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet28 = accessToken25.getScopes();
        boolean boolean29 = scopeSerializer16.isEmpty(scopeSet28);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder15.addScopes(scopeSet28);
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        java.util.Date date38 = accessToken37.getExpiresAt();
        java.lang.String str39 = accessToken37.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        boolean boolean49 = accessToken47.isClientOnly();
        java.lang.String str50 = accessToken47.getClientId();
        boolean boolean51 = accessToken47.isClientOnly();
        boolean boolean52 = accessToken37.equals((java.lang.Object) accessToken47);
        org.osiam.client.query.QueryBuilder queryBuilder53 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder55 = queryBuilder53.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder57 = queryBuilder55.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder59 = queryBuilder55.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder61 = queryBuilder59.descending("hi!");
        org.osiam.client.query.Query query62 = queryBuilder61.build();
        org.osiam.client.query.Query query63 = queryBuilder61.build();
        org.osiam.client.query.QueryBuilder queryBuilder65 = queryBuilder61.ascending("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        boolean boolean66 = accessToken37.equals((java.lang.Object) "org.osiam.client.exception.ConnectionInitializationException: PATCH");
        java.lang.String str67 = accessToken37.getRefreshToken();
        java.util.Date date68 = accessToken37.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder15.setExpiresAt(date68);
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder15.setUserId("2024-03-22T13:51:20.388");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(scopeSetClass18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(scopeSet28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(queryBuilder55);
        org.junit.Assert.assertNotNull(queryBuilder57);
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(query62);
        org.junit.Assert.assertNotNull(query63);
        org.junit.Assert.assertNotNull(queryBuilder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test11029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11029");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        java.lang.String str15 = accessToken13.getUserId();
        java.lang.String str16 = accessToken13.getClientId();
        boolean boolean17 = accessToken13.isClientOnly();
        java.lang.String str18 = authService6.extractErrorMessageForbidden(accessToken13);
        org.osiam.client.AuthService.Builder builder20 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientId("ME");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService25 = builder24.build();
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        boolean boolean33 = accessToken32.isRefreshTokenExpired();
        boolean boolean34 = accessToken32.isClientOnly();
        java.lang.String str35 = accessToken32.getClientId();
        java.lang.String str36 = authService25.extractErrorMessageForbidden(accessToken32);
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        boolean boolean44 = accessToken43.isRefreshTokenExpired();
        java.lang.String str45 = accessToken43.getUserId();
        java.lang.String str46 = accessToken43.getClientId();
        java.lang.String str47 = accessToken43.getUserId();
        java.lang.String str48 = authService25.extractErrorMessageForbidden(accessToken43);
        java.util.Date date49 = accessToken43.getRefreshTokenExpiresAt();
        java.util.Date date50 = accessToken43.getRefreshTokenExpiresAt();
        java.lang.String str51 = accessToken43.getClientId();
        java.util.Date date52 = accessToken43.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            authService6.revokeAccessToken(accessToken43);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(authService25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Insufficient scopes: []" + "'", str48, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11030");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        java.lang.String str12 = accessToken10.getUserId();
        java.lang.String str13 = accessToken10.getClientId();
        java.util.Date date14 = accessToken10.getRefreshTokenExpiresAt();
        java.lang.String str15 = accessToken10.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user16 = osiamUserService2.createUser(user3, accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test11031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11031");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService4 = builder3.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.util.Date date12 = accessToken11.getExpiresAt();
        java.lang.String str13 = accessToken11.getRefreshToken();
        java.lang.String str14 = accessToken11.getType();
        java.lang.String str15 = accessToken11.getClientId();
        java.lang.String str16 = accessToken11.getUserName();
        java.lang.String str17 = accessToken11.toString();
        java.lang.String str18 = accessToken11.getUserName();
        java.lang.String str19 = authService4.extractErrorMessageForbidden(accessToken11);
        org.osiam.client.query.QueryBuilder queryBuilder20 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder22.count(10);
        org.osiam.client.query.Query query27 = queryBuilder26.build();
        long long28 = query27.getStartIndex();
        boolean boolean29 = accessToken11.equals((java.lang.Object) query27);
        java.lang.String str30 = query27.getFilter();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(authService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str17, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(query27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test11032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11032");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet62 = accessToken60.getScopes();
        boolean boolean63 = scopeSerializer0.isEmpty(serializerProvider53, scopeSet62);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass64 = scopeSerializer0.handledType();
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper65 = null;
        com.fasterxml.jackson.databind.JavaType javaType66 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper65, javaType66);
        boolean boolean68 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer69 = scopeSerializer0.getDelegatee();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer70 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer71 = scopeSerializer0.unwrappingSerializer(nameTransformer70);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(scopeSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(scopeSetClass64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(wildcardJsonSerializer69);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer71);
    }

    @Test
    public void test11033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11033");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService2.targetEndpoint;
        org.osiam.resources.scim.Group group6 = null;
        org.osiam.client.AuthService.Builder builder8 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientId("ME");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder16 = builder14.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService17 = builder16.build();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        boolean boolean25 = accessToken24.isRefreshTokenExpired();
        java.lang.String str26 = authService17.extractErrorMessageForbidden(accessToken24);
        boolean boolean27 = accessToken24.isRefreshTokenExpired();
        java.lang.String str28 = accessToken24.getType();
        boolean boolean29 = accessToken24.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group30 = osiamGroupService2.replaceResource("descending", group6, accessToken24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(authService17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Insufficient scopes: []" + "'", str26, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test11034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11034");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("descending");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test11035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11035");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken8 = builder5.build();
        org.osiam.client.oauth.AccessToken accessToken9 = builder5.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken9);
        java.lang.String str11 = accessToken9.getUserName();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getUserName();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(accessToken8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test11036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11036");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("PUT");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder10 = builder6.setClientRedirectUri("org.osiam.client.exception.ConflictException: ");
        org.osiam.client.OsiamConnector.Builder builder12 = builder6.setResourceServerEndpoint("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientSecret("org.osiam.client.exception.UnauthorizedException: DELETE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test11037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11037");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.getAttributes();
        java.lang.String str11 = query9.toString();
        java.lang.String str12 = query9.getSortBy();
        org.osiam.client.query.Query query13 = query9.nextPage();
        int int14 = query13.getCount();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder(query13);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.filter("");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Authorization" + "'", str10, "Authorization");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str11, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(queryBuilder17);
    }

    @Test
    public void test11038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11038");
        org.osiam.client.exception.OAuthErrorMessage oAuthErrorMessage0 = new org.osiam.client.exception.OAuthErrorMessage();
        java.lang.String str1 = oAuthErrorMessage0.getDescription();
        java.lang.String str2 = oAuthErrorMessage0.getDescription();
        java.lang.String str3 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str4 = oAuthErrorMessage0.getDescription();
        java.lang.String str5 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str6 = oAuthErrorMessage0.getDescription();
        java.lang.String str7 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str8 = oAuthErrorMessage0.getDescription();
        java.lang.String str9 = oAuthErrorMessage0.getDescription();
        java.lang.String str10 = oAuthErrorMessage0.getDescription();
        java.lang.String str11 = oAuthErrorMessage0.getDescription();
        java.lang.String str12 = oAuthErrorMessage0.getDescription();
        java.lang.String str13 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str14 = oAuthErrorMessage0.getErrorCode();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test11039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11039");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("");
        org.osiam.client.AuthService.Builder builder5 = builder1.setClientSecret("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test11040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11040");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget7 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        java.util.Date date15 = accessToken14.getExpiresAt();
        java.lang.String str16 = accessToken14.getUserName();
        boolean boolean17 = accessToken14.isExpired();
        java.lang.String str18 = accessToken14.getToken();
        java.lang.String str19 = osiamGroupService3.extractErrorMessageForbidden(accessToken14);
        org.osiam.client.AuthService.Builder builder21 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientId("ME");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder29 = builder27.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService30 = builder29.build();
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        boolean boolean38 = accessToken37.isRefreshTokenExpired();
        java.lang.String str39 = authService30.extractErrorMessageForbidden(accessToken37);
        boolean boolean40 = accessToken37.isRefreshTokenExpired();
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException42 = new org.osiam.client.exception.InvalidAttributeException("POST");
        boolean boolean43 = accessToken37.equals((java.lang.Object) invalidAttributeException42);
        java.util.Date date44 = accessToken37.getExpiresAt();
        java.lang.String str45 = osiamGroupService3.extractErrorMessageForbidden(accessToken37);
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder48.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken53 = builder52.build();
        java.util.Date date54 = accessToken53.getRefreshTokenExpiresAt();
        java.lang.String str55 = accessToken53.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService3.deleteResource("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]", accessToken53);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(webTarget7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Bearer " + "'", str18, "Bearer ");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(authService30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Insufficient scopes: []" + "'", str45, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(accessToken53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test11041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11041");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService2.targetEndpoint;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group16 = osiamGroupService2.mapToResource("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamRequestException: hi!");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamRequestException: hi!");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Insufficient scopes: []" + "'", str13, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget14);
    }

    @Test
    public void test11042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11042");
        org.osiam.client.exception.NoResultException noResultException1 = new org.osiam.client.exception.NoResultException("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamRequestException: hi!");
    }

    @Test
    public void test11043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11043");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.OsiamConnector osiamConnector8 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector8.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        java.util.Date date18 = accessToken17.getExpiresAt();
        java.lang.String str19 = accessToken17.getRefreshToken();
        java.lang.String str20 = accessToken17.getType();
        java.lang.String str21 = accessToken17.getClientId();
        java.lang.String str22 = accessToken17.toString();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector8.deleteGroup("org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(osiamConnector8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str22, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test11044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11044");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector.Builder builder12 = builder2.setEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector osiamConnector13 = builder2.build();
        org.osiam.client.OsiamConnector.Builder builder14 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector19 = builder18.build();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        java.lang.String str28 = accessToken26.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder29 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder31.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.descending("hi!");
        org.osiam.client.query.Query query38 = queryBuilder37.build();
        java.lang.String str39 = query38.toString();
        java.lang.String str40 = query38.getSortOrder();
        java.lang.String str41 = query38.getSortBy();
        java.lang.String str42 = query38.getFilter();
        java.lang.String str43 = query38.toString();
        boolean boolean44 = accessToken26.equals((java.lang.Object) query38);
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector19.createQueryBuilder(query38);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.getAttributes();
        java.lang.String str57 = query55.toString();
        java.lang.String str58 = query55.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder59 = osiamConnector19.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder60 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder62 = queryBuilder60.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder62.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder66 = queryBuilder64.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query67 = queryBuilder64.build();
        org.osiam.client.query.QueryBuilder queryBuilder68 = osiamConnector19.createQueryBuilder(query67);
        java.lang.String str69 = query67.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder70 = osiamConnector13.createQueryBuilder(query67);
        org.osiam.client.query.QueryBuilder queryBuilder71 = osiamConnector13.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder72 = osiamConnector13.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder73 = osiamConnector13.createQueryBuilder();
        org.osiam.client.OsiamGroupService.Builder builder75 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService76 = builder75.build();
        org.osiam.client.OsiamGroupService osiamGroupService77 = builder75.build();
        org.osiam.client.OsiamGroupService osiamGroupService78 = builder75.build();
        org.osiam.client.OsiamGroupService osiamGroupService79 = builder75.build();
        org.osiam.client.oauth.Scope scope80 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str81 = scope80.toString();
        org.osiam.client.oauth.AccessToken.Builder builder83 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date84 = null;
        org.osiam.client.oauth.AccessToken.Builder builder85 = builder83.setRefreshTokenExpiresAt(date84);
        org.osiam.client.oauth.AccessToken.Builder builder87 = builder83.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken88 = builder87.build();
        boolean boolean89 = accessToken88.isRefreshTokenExpired();
        java.lang.String str90 = accessToken88.getUserId();
        boolean boolean91 = accessToken88.isRefreshTokenExpired();
        java.lang.String str92 = accessToken88.getRefreshToken();
        boolean boolean93 = scope80.equals((java.lang.Object) accessToken88);
        java.lang.String str94 = osiamGroupService79.extractErrorMessageForbidden(accessToken88);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken95 = osiamConnector13.validateAccessToken(accessToken88);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(query38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str39, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "descending" + "'", str40, "descending");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Authorization" + "'", str56, "Authorization");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str57, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "descending" + "'", str58, "descending");
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertNotNull(query67);
        org.junit.Assert.assertNotNull(queryBuilder68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(queryBuilder70);
        org.junit.Assert.assertNotNull(queryBuilder71);
        org.junit.Assert.assertNotNull(queryBuilder72);
        org.junit.Assert.assertNotNull(queryBuilder73);
        org.junit.Assert.assertNotNull(osiamGroupService76);
        org.junit.Assert.assertNotNull(osiamGroupService77);
        org.junit.Assert.assertNotNull(osiamGroupService78);
        org.junit.Assert.assertNotNull(osiamGroupService79);
        org.junit.Assert.assertNotNull(scope80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "PUT" + "'", str81, "PUT");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(accessToken88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Insufficient scopes: []" + "'", str94, "Insufficient scopes: []");
    }

    @Test
    public void test11045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11045");
        org.osiam.client.exception.UnauthorizedException unauthorizedException1 = new org.osiam.client.exception.UnauthorizedException("org.osiam.client.exception.ConflictException: Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        java.lang.Throwable[] throwableArray2 = unauthorizedException1.getSuppressed();
        int int3 = unauthorizedException1.getHttpStatusCode();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 401 + "'", int3 == 401);
    }

    @Test
    public void test11046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11046");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder7 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder7.build();
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder7.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken16);
        java.lang.String str18 = osiamGroupService9.extractErrorMessageForbidden(accessToken16);
        java.util.Date date19 = accessToken16.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken16);
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean22 = accessToken16.equals((java.lang.Object) scope21);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user23 = osiamUserService4.getUser("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]", accessToken16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test11047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11047");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.OsiamConnector.Builder builder6 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector13 = builder12.build();
        org.osiam.client.query.QueryBuilder queryBuilder14 = osiamConnector13.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder15 = osiamConnector13.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder16 = osiamConnector13.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder19.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.descending("hi!");
        org.osiam.client.query.Query query26 = queryBuilder25.build();
        java.lang.String str27 = query26.toString();
        java.lang.String str28 = query26.getSortOrder();
        java.lang.String str29 = query26.getSortBy();
        java.lang.String str30 = query26.getFilter();
        java.lang.String str31 = query26.getSortOrder();
        java.lang.String str32 = query26.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder33 = new org.osiam.client.query.QueryBuilder(query26);
        long long34 = query26.getStartIndex();
        org.osiam.client.query.Query query35 = query26.nextPage();
        java.lang.String str36 = query26.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder37 = new org.osiam.client.query.QueryBuilder(query26);
        java.lang.String str38 = query26.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder39 = osiamConnector13.createQueryBuilder(query26);
        org.osiam.client.query.Query query40 = query26.nextPage();
        org.osiam.client.query.Query query41 = query40.nextPage();
        java.lang.String str42 = query40.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder43 = osiamConnector5.createQueryBuilder(query40);
        org.osiam.client.oauth.AccessToken.Builder builder46 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.addScope(scope47);
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException51 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean52 = scope49.equals((java.lang.Object) invalidAttributeException51);
        java.lang.String str53 = scope49.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder46.addScope(scope49);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken accessToken59 = builder58.build();
        java.lang.String str60 = accessToken59.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user61 = osiamConnector5.getUser("org.osiam.client.exception.NoResultException: refresh_token", accessToken59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "descending" + "'", str28, "descending");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "descending" + "'", str31, "descending");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Authorization" + "'", str32, "Authorization");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(query35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Authorization" + "'", str38, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(query40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "descending" + "'", str42, "descending");
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "GET" + "'", str53, "GET");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(accessToken59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Bearer " + "'", str60, "Bearer ");
    }

    @Test
    public void test11048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11048");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeSetJsonDeserializer4.unwrappingDeserializer(nameTransformer5);
        java.lang.Class<?> wildcardClass7 = scopeSetJsonDeserializer6.handledType();
        java.lang.Class<?> wildcardClass8 = scopeSetJsonDeserializer6.getClass();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test11049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11049");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        org.osiam.client.OsiamGroupService.Builder builder14 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService15 = builder14.build();
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        boolean boolean23 = accessToken22.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet24 = accessToken22.getScopes();
        java.lang.String str25 = osiamGroupService15.extractErrorMessageForbidden(accessToken22);
        boolean boolean26 = accessToken22.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken22);
        java.lang.String str28 = osiamGroupService3.extractErrorMessageForbidden(accessToken22);
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken35);
        java.util.Date date37 = accessToken35.getExpiresAt();
        boolean boolean38 = accessToken35.isRefreshTokenExpired();
        java.util.Date date39 = accessToken35.getExpiresAt();
        java.util.Date date40 = accessToken35.getRefreshTokenExpiresAt();
        java.lang.String str41 = accessToken35.getUserId();
        java.util.Date date42 = accessToken35.getRefreshTokenExpiresAt();
        java.lang.String str43 = osiamGroupService3.extractErrorMessageForbidden(accessToken35);
        javax.ws.rs.client.WebTarget webTarget44 = osiamGroupService3.targetEndpoint;
        org.osiam.resources.scim.UpdateGroup updateGroup46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder48.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken53 = builder52.build();
        boolean boolean54 = accessToken53.isRefreshTokenExpired();
        boolean boolean55 = accessToken53.isClientOnly();
        java.lang.String str56 = accessToken53.getRefreshToken();
        boolean boolean57 = accessToken53.isExpired();
        boolean boolean58 = accessToken53.isExpired();
        boolean boolean59 = accessToken53.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group60 = osiamGroupService3.updateGroup("Query [attributes=Authorization, filter=null, sortBy=ME, sortOrder=descending, startIndex=1, count=10]", updateGroup46, accessToken53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(scopeSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Insufficient scopes: []" + "'", str28, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Insufficient scopes: []" + "'", str43, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget44);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(accessToken53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test11050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11050");
        org.osiam.client.exception.ForbiddenException forbiddenException2 = new org.osiam.client.exception.ForbiddenException("GET");
        org.osiam.client.exception.OsiamRequestException osiamRequestException5 = new org.osiam.client.exception.OsiamRequestException(403, "org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException10 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean11 = scope8.equals((java.lang.Object) invalidAttributeException10);
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException12 = new org.osiam.client.exception.ConnectionInitializationException("client_credentials", (java.lang.Throwable) invalidAttributeException10);
        org.osiam.client.exception.OsiamClientException osiamClientException13 = new org.osiam.client.exception.OsiamClientException("Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]", (java.lang.Throwable) connectionInitializationException12);
        osiamRequestException5.addSuppressed((java.lang.Throwable) osiamClientException13);
        forbiddenException2.addSuppressed((java.lang.Throwable) osiamRequestException5);
        java.lang.Throwable[] throwableArray16 = forbiddenException2.getSuppressed();
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException17 = new org.osiam.client.exception.ConnectionInitializationException("org.osiam.client.exception.UnauthorizedException: client_credentials", (java.lang.Throwable) forbiddenException2);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(throwableArray16);
    }

    @Test
    public void test11051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11051");
        org.osiam.client.exception.OsiamClientException osiamClientException1 = new org.osiam.client.exception.OsiamClientException("Insufficient scopes: [GET, GET POST PUT PATCH DELETE]");
    }

    @Test
    public void test11052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11052");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.util.Collection<java.lang.Object> objCollection1 = scopeDeserializer0.getKnownPropertyNames();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.core.JsonParser jsonParser4 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext5 = null;
        org.osiam.client.AuthService.Builder builder7 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientId("ME");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService12 = builder11.build();
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        boolean boolean20 = accessToken19.isRefreshTokenExpired();
        boolean boolean21 = accessToken19.isClientOnly();
        java.lang.String str22 = accessToken19.getClientId();
        java.lang.String str23 = authService12.extractErrorMessageForbidden(accessToken19);
        java.lang.String str24 = accessToken19.getUserId();
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken31 = builder30.build();
        boolean boolean32 = accessToken31.isRefreshTokenExpired();
        java.lang.String str33 = accessToken31.getUserId();
        boolean boolean34 = accessToken31.isRefreshTokenExpired();
        boolean boolean35 = accessToken19.equals((java.lang.Object) accessToken31);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet36 = accessToken31.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet37 = scopeDeserializer0.deserialize(jsonParser4, deserializationContext5, scopeSet36);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Can not update object of type java.util.HashSet (by deserializer of type org.osiam.client.helper.ScopeDeserializer)");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objCollection1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(authService12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Insufficient scopes: []" + "'", str23, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(accessToken31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(scopeSet36);
    }

    @Test
    public void test11053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11053");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientId("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setResourceServerEndpoint("org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector9 = builder2.build();
        org.osiam.client.OsiamGroupService.Builder builder11 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService12 = builder11.build();
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        java.util.Date date20 = accessToken19.getExpiresAt();
        java.lang.String str21 = accessToken19.getUserName();
        java.lang.String str22 = accessToken19.toString();
        java.lang.String str23 = osiamGroupService12.extractErrorMessageForbidden(accessToken19);
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        java.lang.String str31 = accessToken30.toString();
        java.lang.String str32 = accessToken30.getType();
        boolean boolean33 = accessToken30.isExpired();
        java.util.Date date34 = accessToken30.getExpiresAt();
        boolean boolean35 = accessToken30.isClientOnly();
        java.lang.String str36 = osiamGroupService12.extractErrorMessageForbidden(accessToken30);
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        boolean boolean44 = accessToken43.isRefreshTokenExpired();
        java.lang.String str45 = accessToken43.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.toString();
        java.lang.String str57 = query55.getSortOrder();
        java.lang.String str58 = query55.getSortBy();
        java.lang.String str59 = query55.getFilter();
        java.lang.String str60 = query55.getSortOrder();
        java.lang.String str61 = query55.getAttributes();
        boolean boolean62 = accessToken43.equals((java.lang.Object) query55);
        org.osiam.client.OsiamConnector.Builder builder63 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder65 = builder63.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder67 = builder65.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder69 = builder67.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder71 = builder67.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder73 = builder67.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder75 = builder73.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder77 = builder73.setClientRedirectUri("PUT");
        boolean boolean78 = accessToken43.equals((java.lang.Object) builder77);
        java.lang.String str79 = accessToken43.getClientId();
        boolean boolean80 = accessToken43.isClientOnly();
        java.lang.String str81 = osiamGroupService12.extractErrorMessageForbidden(accessToken43);
        java.lang.String str82 = accessToken43.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList83 = osiamConnector9.getAllUsers(accessToken43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(osiamGroupService12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str22, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Insufficient scopes: []" + "'", str23, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str31, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str56, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "descending" + "'", str57, "descending");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "descending" + "'", str60, "descending");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Authorization" + "'", str61, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Insufficient scopes: []" + "'", str81, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
    }

    @Test
    public void test11054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11054");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass4 = scopeSerializer0.handledType();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider5 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer6 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException14 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean15 = scope12.equals((java.lang.Object) invalidAttributeException14);
        java.lang.String str16 = scope12.getValue();
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str19 = scope18.toString();
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str22 = scope21.getValue();
        java.lang.String str23 = scope21.getValue();
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException26 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean27 = scope24.equals((java.lang.Object) invalidAttributeException26);
        java.lang.String str28 = scope24.getValue();
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException34 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean35 = scope32.equals((java.lang.Object) invalidAttributeException34);
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.GET;
        boolean boolean40 = scope38.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray42 = new org.osiam.client.oauth.Scope[] { scope11, scope12, scope17, scope18, scope20, scope21, scope24, scope29, scope30, scope31, scope32, scope36, scope37, scope38, scope41 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet43 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet43, scopeArray42);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder8.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet43);
        boolean boolean46 = scopeSerializer6.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet43);
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder48.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken53 = builder52.build();
        boolean boolean54 = accessToken53.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet55 = accessToken53.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator56 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider57 = null;
        scopeSerializer6.serialize(scopeSet55, jsonGenerator56, serializerProvider57);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider59 = null;
        org.osiam.client.oauth.AccessToken.Builder builder61 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date62 = null;
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder61.setRefreshTokenExpiresAt(date62);
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder61.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken66 = builder65.build();
        boolean boolean67 = accessToken66.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet68 = accessToken66.getScopes();
        boolean boolean69 = scopeSerializer6.isEmpty(serializerProvider59, scopeSet68);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass70 = scopeSerializer6.handledType();
        org.osiam.client.oauth.Scope scope72 = new org.osiam.client.oauth.Scope("");
        org.osiam.client.oauth.AccessToken.Builder builder74 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope75 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder74.addScope(scope75);
        org.osiam.client.oauth.Scope[] scopeArray77 = new org.osiam.client.oauth.Scope[] { scope72, scope75 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet78 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet78, scopeArray77);
        boolean boolean80 = scopeSerializer6.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet78);
        boolean boolean81 = scopeSerializer0.isEmpty(serializerProvider5, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet78);
        org.osiam.client.helper.ScopeSerializer scopeSerializer82 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean83 = scopeSerializer82.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer84 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer85 = scopeSerializer82.unwrappingSerializer(nameTransformer84);
        boolean boolean86 = scopeSerializer82.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer87 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer88 = scopeSerializer82.unwrappingSerializer(nameTransformer87);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet89 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator90 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider91 = null;
        scopeSerializer82.serialize(scopeSet89, jsonGenerator90, serializerProvider91);
        boolean boolean93 = scopeSerializer82.usesObjectId();
        boolean boolean94 = scopeSerializer82.usesObjectId();
        boolean boolean95 = scopeSerializer82.usesObjectId();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer96 = scopeSerializer0.replaceDelegatee((com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeSerializer82);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertNull(scopeSetClass4);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GET" + "'", str16, "GET");
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ME" + "'", str19, "ME");
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PATCH" + "'", str22, "PATCH");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PATCH" + "'", str23, "PATCH");
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GET" + "'", str28, "GET");
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertNotNull(scopeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(accessToken53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(scopeSet55);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(accessToken66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(scopeSet68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(scopeSetClass70);
        org.junit.Assert.assertNotNull(scope75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(scopeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer88);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test11055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11055");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector13 = builder8.build();
        org.osiam.client.OsiamConnector.Builder builder14 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector21 = builder20.build();
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.descending("hi!");
        org.osiam.client.query.Query query31 = queryBuilder30.build();
        java.lang.String str32 = query31.toString();
        java.lang.String str33 = query31.toString();
        java.lang.String str34 = query31.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder35 = osiamConnector21.createQueryBuilder(query31);
        org.osiam.client.query.QueryBuilder queryBuilder36 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder42 = queryBuilder38.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder44 = queryBuilder42.descending("hi!");
        org.osiam.client.query.Query query45 = queryBuilder44.build();
        org.osiam.client.query.QueryBuilder queryBuilder46 = osiamConnector21.createQueryBuilder(query45);
        org.osiam.client.query.QueryBuilder queryBuilder47 = osiamConnector13.createQueryBuilder(query45);
        org.osiam.client.query.QueryBuilder queryBuilder48 = osiamConnector13.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder49 = osiamConnector13.createQueryBuilder();
        org.osiam.resources.scim.User user51 = null;
        org.osiam.client.AuthService.Builder builder53 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder55 = builder53.setClientId("ME");
        org.osiam.client.AuthService.Builder builder57 = builder55.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService58 = builder57.build();
        org.osiam.client.OsiamGroupService.Builder builder60 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService61 = builder60.build();
        org.osiam.client.oauth.AccessToken.Builder builder63 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date64 = null;
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder63.setRefreshTokenExpiresAt(date64);
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder63.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken68 = builder67.build();
        boolean boolean69 = accessToken68.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet70 = accessToken68.getScopes();
        java.lang.String str71 = osiamGroupService61.extractErrorMessageForbidden(accessToken68);
        boolean boolean72 = accessToken68.isClientOnly();
        java.lang.String str73 = authService58.extractErrorMessageForbidden(accessToken68);
        org.osiam.client.oauth.AccessToken.Builder builder75 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date76 = null;
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder75.setRefreshTokenExpiresAt(date76);
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder75.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder81 = builder79.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken82 = builder79.build();
        java.lang.String str83 = accessToken82.toString();
        java.lang.String str84 = authService58.extractErrorMessageForbidden(accessToken82);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet85 = accessToken82.getScopes();
        org.osiam.client.OsiamConnector.Builder builder86 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder88 = builder86.setEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder90 = builder86.setClientSecret("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        boolean boolean91 = accessToken82.equals((java.lang.Object) "org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken82);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user93 = osiamConnector13.replaceUser("org.osiam.client.exception.ConnectionInitializationException: descending", user51, accessToken82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The string \"Insufficient scopes\" for the URI component SCHEME contains an invalid character, ' ', at index 12.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(query31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str32, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str33, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(query45);
        org.junit.Assert.assertNotNull(queryBuilder46);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(authService58);
        org.junit.Assert.assertNotNull(osiamGroupService61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(accessToken68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(scopeSet70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Insufficient scopes: []" + "'", str71, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Insufficient scopes: []" + "'", str73, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(accessToken82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str83, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Insufficient scopes: []" + "'", str84, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scopeSet85);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test11056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11056");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Bearer ");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService6 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.lang.String str10 = accessToken9.toString();
        java.lang.String str11 = accessToken9.getUserId();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getToken();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList14 = osiamUserService6.getAllUsers(accessToken9);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(osiamUserService6);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str10, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "client_credentials" + "'", str13, "client_credentials");
    }

    @Test
    public void test11057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11057");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        java.lang.String str13 = query9.getFilter();
        java.lang.String str14 = query9.getSortOrder();
        java.lang.String str15 = query9.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder(query9);
        long long17 = query9.getStartIndex();
        org.osiam.client.query.Query query18 = query9.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder19 = new org.osiam.client.query.QueryBuilder(query18);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.startIndex((long) 'a');
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "descending" + "'", str14, "descending");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Authorization" + "'", str15, "Authorization");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(query18);
        org.junit.Assert.assertNotNull(queryBuilder21);
    }

    @Test
    public void test11058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11058");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        java.lang.String str8 = accessToken6.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = accessToken6.getScopes();
        org.osiam.client.helper.ScopeSerializer scopeSerializer10 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean11 = scopeSerializer10.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException19 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean20 = scope17.equals((java.lang.Object) invalidAttributeException19);
        java.lang.String str21 = scope17.getValue();
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str24 = scope23.toString();
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str27 = scope26.getValue();
        java.lang.String str28 = scope26.getValue();
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException31 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean32 = scope29.equals((java.lang.Object) invalidAttributeException31);
        java.lang.String str33 = scope29.getValue();
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException39 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean40 = scope37.equals((java.lang.Object) invalidAttributeException39);
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.GET;
        boolean boolean45 = scope43.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray47 = new org.osiam.client.oauth.Scope[] { scope16, scope17, scope22, scope23, scope25, scope26, scope29, scope34, scope35, scope36, scope37, scope41, scope42, scope43, scope46 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet48 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet48, scopeArray47);
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder13.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet48);
        boolean boolean51 = scopeSerializer10.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet48);
        boolean boolean52 = accessToken6.equals((java.lang.Object) scopeSet48);
        boolean boolean53 = accessToken6.isClientOnly();
        org.osiam.client.OsiamConnector.Builder builder54 = new org.osiam.client.OsiamConnector.Builder();
        boolean boolean55 = accessToken6.equals((java.lang.Object) builder54);
        org.osiam.client.OsiamConnector.Builder builder57 = builder54.setClientSecret("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        org.osiam.client.OsiamConnector osiamConnector58 = builder54.build();
        org.osiam.client.query.QueryBuilder queryBuilder59 = osiamConnector58.createQueryBuilder();
        org.osiam.client.OsiamGroupService.Builder builder61 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService62 = builder61.build();
        org.osiam.client.oauth.AccessToken.Builder builder64 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date65 = null;
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder64.setRefreshTokenExpiresAt(date65);
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder64.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken69 = builder68.build();
        java.util.Date date70 = accessToken69.getExpiresAt();
        java.lang.String str71 = accessToken69.getRefreshToken();
        java.lang.String str72 = accessToken69.getType();
        java.lang.String str73 = osiamGroupService62.extractErrorMessageForbidden(accessToken69);
        java.lang.String str74 = accessToken69.getUserId();
        java.lang.String str75 = accessToken69.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken76 = osiamConnector58.validateAccessToken(accessToken69);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(scopeSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GET" + "'", str21, "GET");
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ME" + "'", str24, "ME");
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PATCH" + "'", str27, "PATCH");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PATCH" + "'", str28, "PATCH");
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GET" + "'", str33, "GET");
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertNotNull(scopeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(osiamConnector58);
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(osiamGroupService62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(accessToken69);
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Insufficient scopes: []" + "'", str73, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
    }

    @Test
    public void test11059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11059");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.util.Date date11 = accessToken10.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder1.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder1.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder1.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.Scope scope18 = new org.osiam.client.oauth.Scope("");
        java.lang.String str19 = scope18.toString();
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.addScope(scope18);
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.addScope(scope23);
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException27 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean28 = scope25.equals((java.lang.Object) invalidAttributeException27);
        java.lang.String str29 = scope25.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder22.addScope(scope25);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder40 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date41 = null;
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setRefreshTokenExpiresAt(date41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken49 = builder48.build();
        java.util.Date date50 = accessToken49.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder40.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder40.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder40.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.Scope scope57 = new org.osiam.client.oauth.Scope("");
        java.lang.String str58 = scope57.toString();
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.addScope(scope57);
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder38.addScope(scope57);
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder16.addScope(scope57);
        org.osiam.client.OsiamGroupService.Builder builder63 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService64 = builder63.build();
        org.osiam.client.oauth.AccessToken.Builder builder66 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date67 = null;
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder66.setRefreshTokenExpiresAt(date67);
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder66.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken71 = builder70.build();
        java.util.Date date72 = accessToken71.getExpiresAt();
        java.lang.String str73 = accessToken71.getRefreshToken();
        boolean boolean74 = accessToken71.isClientOnly();
        java.lang.String str75 = osiamGroupService64.extractErrorMessageForbidden(accessToken71);
        boolean boolean76 = scope57.equals((java.lang.Object) osiamGroupService64);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group78 = osiamGroupService64.mapToResource("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GET" + "'", str29, "GET");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(osiamGroupService64);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(accessToken71);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Insufficient scopes: []" + "'", str75, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test11060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11060");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        java.util.Collection<java.lang.Object> objCollection7 = scopeSetJsonDeserializer6.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeSetJsonDeserializer6.getNullValue();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNull(objCollection7);
        org.junit.Assert.assertNull(scopeSet8);
    }

    @Test
    public void test11061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11061");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget15 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService3.targetEndpoint;
        org.osiam.resources.scim.Group group18 = null;
        org.osiam.client.AuthService.Builder builder20 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder26 = builder24.setClientSecret("");
        org.osiam.client.AuthService authService27 = builder26.build();
        org.osiam.client.AuthService.Builder builder29 = builder26.setClientId("hi!");
        org.osiam.client.AuthService authService30 = builder26.build();
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.addScope(scope33);
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException37 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean38 = scope35.equals((java.lang.Object) invalidAttributeException37);
        java.lang.String str39 = scope35.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder32.addScope(scope35);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken accessToken45 = builder44.build();
        java.util.Date date46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder44.setRefreshTokenExpiresAt(date46);
        org.osiam.client.oauth.AccessToken accessToken48 = builder44.build();
        java.lang.String str49 = authService30.extractErrorMessageForbidden(accessToken48);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group50 = osiamGroupService3.updateGroup("GET POST PUT PATCH DELETE", group18, accessToken48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(webTarget15);
        org.junit.Assert.assertNotNull(webTarget16);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(authService27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(authService30);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GET" + "'", str39, "GET");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(accessToken45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(accessToken48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Insufficient scopes: [GET, GET POST PUT PATCH DELETE]" + "'", str49, "Insufficient scopes: [GET, GET POST PUT PATCH DELETE]");
    }

    @Test
    public void test11062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11062");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        boolean boolean4 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer6 = scopeSerializer0.unwrappingSerializer(nameTransformer5);
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer7 = scopeSetJsonSerializer6.getDelegatee();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = null;
        boolean boolean9 = scopeSetJsonSerializer6.isEmpty(scopeSet8);
        org.osiam.client.OsiamGroupService.Builder builder11 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService12 = builder11.build();
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        java.util.Date date20 = accessToken19.getExpiresAt();
        java.lang.String str21 = accessToken19.getUserName();
        java.lang.String str22 = accessToken19.toString();
        java.lang.String str23 = osiamGroupService12.extractErrorMessageForbidden(accessToken19);
        java.util.Date date24 = accessToken19.getRefreshTokenExpiresAt();
        java.util.Date date25 = accessToken19.getRefreshTokenExpiresAt();
        boolean boolean26 = accessToken19.isClientOnly();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet27 = accessToken19.getScopes();
        boolean boolean28 = scopeSetJsonSerializer6.isEmpty(scopeSet27);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer6);
        org.junit.Assert.assertNull(wildcardJsonSerializer7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(osiamGroupService12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str22, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Insufficient scopes: []" + "'", str23, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(scopeSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test11063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11063");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("authorization_code");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder4 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder4.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder4.build();
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder4.build();
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder4.build();
        org.osiam.client.oauth.Scope scope9 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str10 = scope9.toString();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        boolean boolean18 = accessToken17.isRefreshTokenExpired();
        java.lang.String str19 = accessToken17.getUserId();
        boolean boolean20 = accessToken17.isRefreshTokenExpired();
        java.lang.String str21 = accessToken17.getRefreshToken();
        boolean boolean22 = scope9.equals((java.lang.Object) accessToken17);
        java.lang.String str23 = osiamGroupService8.extractErrorMessageForbidden(accessToken17);
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        java.util.Date date31 = accessToken30.getExpiresAt();
        java.lang.String str32 = accessToken30.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken30);
        org.osiam.client.oauth.AccessToken.Builder builder35 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date36 = null;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setRefreshTokenExpiresAt(date36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder35.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken40 = builder39.build();
        boolean boolean41 = accessToken40.isRefreshTokenExpired();
        boolean boolean42 = accessToken40.isClientOnly();
        java.lang.String str43 = accessToken40.getClientId();
        boolean boolean44 = accessToken40.isClientOnly();
        boolean boolean45 = accessToken30.equals((java.lang.Object) accessToken40);
        java.lang.String str46 = accessToken30.getToken();
        java.lang.String str47 = osiamGroupService8.extractErrorMessageForbidden(accessToken30);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser48 = osiamUserService2.getCurrentUserBasic(accessToken30);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(scope9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PUT" + "'", str10, "PUT");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Insufficient scopes: []" + "'", str23, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(accessToken40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Bearer " + "'", str46, "Bearer ");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Insufficient scopes: []" + "'", str47, "Insufficient scopes: []");
    }

    @Test
    public void test11064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11064");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder3 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder5 = queryBuilder3.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder7 = queryBuilder5.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder5.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.descending("hi!");
        org.osiam.client.query.Query query12 = queryBuilder11.build();
        java.lang.String str13 = query12.toString();
        java.lang.String str14 = query12.toString();
        org.osiam.client.query.Query query15 = query12.nextPage();
        org.osiam.client.query.Query query16 = query15.previousPage();
        java.lang.String str17 = query16.getSortBy();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        java.lang.String str25 = accessToken24.toString();
        java.lang.String str26 = accessToken24.getType();
        boolean boolean27 = accessToken24.isExpired();
        java.lang.String str28 = accessToken24.getToken();
        java.lang.String str29 = accessToken24.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult30 = osiamGroupService2.searchGroups(query16, accessToken24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(queryBuilder5);
        org.junit.Assert.assertNotNull(queryBuilder7);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str13, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str25, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Bearer " + "'", str28, "Bearer ");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Bearer " + "'", str29, "Bearer ");
    }

    @Test
    public void test11065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11065");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder13 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.ascending("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.ascending("org.osiam.client.exception.OsiamClientException: ME");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
    }

    @Test
    public void test11066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11066");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        boolean boolean12 = accessToken9.isClientOnly();
        java.lang.String str13 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        boolean boolean21 = accessToken20.isRefreshTokenExpired();
        java.lang.String str22 = accessToken20.getUserId();
        java.lang.String str23 = accessToken20.getToken();
        boolean boolean24 = accessToken20.isExpired();
        java.lang.String str25 = accessToken20.getClientId();
        java.lang.String str26 = accessToken20.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet27 = accessToken20.getScopes();
        java.lang.String str28 = osiamGroupService2.extractErrorMessageForbidden(accessToken20);
        javax.ws.rs.client.WebTarget webTarget29 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = osiamGroupService2.extractErrorMessageDefault("org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388", statusType31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Insufficient scopes: []" + "'", str13, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Bearer " + "'", str23, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(scopeSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Insufficient scopes: []" + "'", str28, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget29);
    }

    @Test
    public void test11067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11067");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder3 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder3.setRefreshTokenExpiresAt(date4);
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope7 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException9 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean10 = scope7.equals((java.lang.Object) invalidAttributeException9);
        java.lang.String str11 = scope7.getValue();
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str14 = scope13.toString();
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str17 = scope16.getValue();
        java.lang.String str18 = scope16.getValue();
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException21 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean22 = scope19.equals((java.lang.Object) invalidAttributeException21);
        java.lang.String str23 = scope19.getValue();
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException29 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean30 = scope27.equals((java.lang.Object) invalidAttributeException29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.GET;
        boolean boolean35 = scope33.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray37 = new org.osiam.client.oauth.Scope[] { scope6, scope7, scope12, scope13, scope15, scope16, scope19, scope24, scope25, scope26, scope27, scope31, scope32, scope33, scope36 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet38 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet38, scopeArray37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder3.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet38);
        boolean boolean41 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet38);
        org.osiam.client.oauth.AccessToken.Builder builder43 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date44 = null;
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setRefreshTokenExpiresAt(date44);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder43.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken48 = builder47.build();
        boolean boolean49 = accessToken48.isRefreshTokenExpired();
        java.lang.String str50 = accessToken48.getUserId();
        java.lang.String str51 = accessToken48.getClientId();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet52 = accessToken48.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator53 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider54 = null;
        scopeSerializer0.serialize(scopeSet52, jsonGenerator53, serializerProvider54);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer56 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer57 = scopeSerializer0.unwrappingSerializer(nameTransformer56);
        boolean boolean58 = scopeSetJsonSerializer57.usesObjectId();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider59 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer60 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean61 = scopeSerializer60.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer62 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer63 = scopeSerializer60.unwrappingSerializer(nameTransformer62);
        boolean boolean64 = scopeSerializer60.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer65 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer66 = scopeSerializer60.unwrappingSerializer(nameTransformer65);
        boolean boolean67 = scopeSetJsonSerializer66.usesObjectId();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider68 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer69 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean70 = scopeSerializer69.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer71 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer72 = scopeSerializer69.unwrappingSerializer(nameTransformer71);
        org.osiam.client.helper.ScopeSerializer scopeSerializer73 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder75 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date76 = null;
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder75.setRefreshTokenExpiresAt(date76);
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder75.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken80 = builder79.build();
        boolean boolean81 = accessToken80.isRefreshTokenExpired();
        java.lang.String str82 = accessToken80.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet83 = accessToken80.getScopes();
        boolean boolean84 = scopeSerializer73.isEmpty(scopeSet83);
        boolean boolean85 = scopeSerializer69.isEmpty(scopeSet83);
        boolean boolean86 = scopeSetJsonSerializer66.isEmpty(serializerProvider68, scopeSet83);
        boolean boolean87 = scopeSetJsonSerializer57.isEmpty(serializerProvider59, scopeSet83);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertNotNull(scope7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GET" + "'", str11, "GET");
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ME" + "'", str14, "ME");
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PATCH" + "'", str18, "PATCH");
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GET" + "'", str23, "GET");
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(scopeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(accessToken48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(scopeSet52);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer72);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(accessToken80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(scopeSet83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test11068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11068");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientId("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setAuthServerEndpoint("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder18 = builder14.setAuthServerEndpoint("org.osiam.client.exception.OsiamClientException: descending");
        org.osiam.client.OsiamConnector osiamConnector19 = builder18.build();
        org.osiam.client.AuthService.Builder builder21 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientId("ME");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder29 = builder27.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder31 = builder27.setClientId("");
        org.osiam.client.AuthService.Builder builder33 = builder27.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService34 = builder33.build();
        org.osiam.client.oauth.Scope scope36 = new org.osiam.client.oauth.Scope("");
        java.lang.String str37 = scope36.getValue();
        org.osiam.client.oauth.Scope scope39 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.Scope[] scopeArray40 = new org.osiam.client.oauth.Scope[] { scope36, scope39 };
        java.net.URI uRI41 = authService34.getAuthorizationUri(scopeArray40);
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI42 = osiamConnector19.getAuthorizationUri(scopeArray40);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to create redirect URI");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(authService34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(scopeArray40);
        org.junit.Assert.assertNotNull(uRI41);
    }

    @Test
    public void test11069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11069");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("PUT");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder10 = builder6.setClientRedirectUri("org.osiam.client.exception.ConflictException: ");
        org.osiam.client.OsiamConnector.Builder builder12 = builder6.setClientRedirectUri("org.osiam.client.exception.OsiamClientException: descending");
        org.osiam.client.OsiamConnector.Builder builder14 = builder6.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setAuthServerEndpoint("Authorization");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test11070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11070");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = osiamConnector5.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder7 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder7.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder9.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.descending("hi!");
        org.osiam.client.query.Query query16 = queryBuilder15.build();
        java.lang.String str17 = query16.toString();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder(query16);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.ascending("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.query.Query query21 = queryBuilder18.build();
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector5.createQueryBuilder(query21);
        org.osiam.client.AuthService.Builder builder24 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder26 = builder24.setClientId("ME");
        org.osiam.client.AuthService.Builder builder28 = builder26.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder30 = builder28.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder32 = builder30.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder34 = builder30.setClientId("");
        org.osiam.client.AuthService.Builder builder36 = builder30.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService37 = builder36.build();
        org.osiam.client.oauth.Scope scope39 = new org.osiam.client.oauth.Scope("");
        java.lang.String str40 = scope39.getValue();
        org.osiam.client.oauth.Scope scope42 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.Scope[] scopeArray43 = new org.osiam.client.oauth.Scope[] { scope39, scope42 };
        java.net.URI uRI44 = authService37.getAuthorizationUri(scopeArray43);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken45 = osiamConnector5.retrieveAccessToken(scopeArray43);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str17, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(authService37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(scopeArray43);
        org.junit.Assert.assertNotNull(uRI44);
    }

    @Test
    public void test11071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11071");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.getAttributes();
        java.lang.String str11 = query9.toString();
        java.lang.String str12 = query9.getSortOrder();
        java.lang.String str13 = query9.getAttributes();
        java.lang.String str14 = query9.getFilter();
        java.lang.String str15 = query9.getAttributes();
        java.lang.String str16 = query9.getSortBy();
        org.osiam.client.query.Query query17 = query9.nextPage();
        java.lang.String str18 = query17.getFilter();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Authorization" + "'", str10, "Authorization");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str11, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "descending" + "'", str12, "descending");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Authorization" + "'", str13, "Authorization");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Authorization" + "'", str15, "Authorization");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test11072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11072");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET POST PUT PATCH DELETE], refreshTokenId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=refresh_token, userId=org.osiam.client.exception.ConflictException: PATCH, userName=]");
    }

    @Test
    public void test11073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11073");
        org.osiam.client.oauth.Scope scope0 = org.osiam.client.oauth.Scope.POST;
        org.osiam.client.OsiamGroupService.Builder builder2 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder2.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder2.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken11);
        java.lang.String str13 = osiamGroupService4.extractErrorMessageForbidden(accessToken11);
        java.util.Date date14 = accessToken11.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken11);
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean17 = accessToken11.equals((java.lang.Object) scope16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        boolean boolean25 = accessToken24.isRefreshTokenExpired();
        boolean boolean26 = accessToken24.isClientOnly();
        java.lang.String str27 = accessToken24.getClientId();
        boolean boolean28 = accessToken24.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.addScope(scope31);
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException35 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean36 = scope33.equals((java.lang.Object) invalidAttributeException35);
        java.lang.String str37 = scope33.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder30.addScope(scope33);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setUserName("Authorization");
        boolean boolean45 = accessToken24.equals((java.lang.Object) builder42);
        org.osiam.client.oauth.AccessToken.Builder builder47 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.addScope(scope48);
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException52 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean53 = scope50.equals((java.lang.Object) invalidAttributeException52);
        java.lang.String str54 = scope50.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder47.addScope(scope50);
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope62 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder59.addScope(scope62);
        org.osiam.client.oauth.GrantType grantType64 = org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS;
        java.lang.String str65 = grantType64.getUrlParam();
        boolean boolean66 = scope62.equals((java.lang.Object) grantType64);
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder42.addScope(scope62);
        boolean boolean68 = scope16.equals((java.lang.Object) builder67);
        boolean boolean69 = scope0.equals((java.lang.Object) builder67);
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder67.setClientId("Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder71.setType("Insufficient scopes: []");
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder73.setClientId("org.osiam.client.exception.UnauthorizedException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(scope0);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Insufficient scopes: []" + "'", str13, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "GET" + "'", str37, "GET");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "GET" + "'", str54, "GET");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(scope62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + grantType64 + "' != '" + org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS + "'", grantType64.equals(org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "client_credentials" + "'", str65, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test11074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11074");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder7 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder7.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet17 = accessToken15.getScopes();
        java.lang.String str18 = osiamGroupService8.extractErrorMessageForbidden(accessToken15);
        boolean boolean19 = accessToken15.isClientOnly();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet20 = accessToken15.getScopes();
        java.lang.String str21 = accessToken15.getToken();
        java.lang.String str22 = osiamGroupService3.extractErrorMessageForbidden(accessToken15);
        org.osiam.client.query.Query query23 = null;
        org.osiam.client.AuthService.Builder builder25 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientId("ME");
        org.osiam.client.AuthService.Builder builder29 = builder27.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService30 = builder29.build();
        org.osiam.client.OsiamGroupService.Builder builder32 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService33 = builder32.build();
        org.osiam.client.oauth.AccessToken.Builder builder35 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date36 = null;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setRefreshTokenExpiresAt(date36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder35.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken40 = builder39.build();
        boolean boolean41 = accessToken40.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet42 = accessToken40.getScopes();
        java.lang.String str43 = osiamGroupService33.extractErrorMessageForbidden(accessToken40);
        boolean boolean44 = accessToken40.isClientOnly();
        java.lang.String str45 = authService30.extractErrorMessageForbidden(accessToken40);
        org.osiam.client.oauth.AccessToken.Builder builder47 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date48 = null;
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.setRefreshTokenExpiresAt(date48);
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder47.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken54 = builder51.build();
        java.lang.String str55 = accessToken54.toString();
        java.lang.String str56 = authService30.extractErrorMessageForbidden(accessToken54);
        org.osiam.client.oauth.AccessToken.Builder builder58 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date59 = null;
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setRefreshTokenExpiresAt(date59);
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder58.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken63 = builder62.build();
        java.util.Date date64 = accessToken63.getExpiresAt();
        java.lang.String str65 = accessToken63.getRefreshToken();
        java.lang.String str66 = accessToken63.getType();
        java.lang.String str67 = accessToken63.getClientId();
        java.lang.String str68 = accessToken63.getUserName();
        java.lang.String str69 = authService30.extractErrorMessageForbidden(accessToken63);
        org.osiam.client.oauth.AccessToken.Builder builder71 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date72 = null;
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder71.setRefreshTokenExpiresAt(date72);
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder71.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken76 = builder75.build();
        boolean boolean77 = accessToken76.isRefreshTokenExpired();
        java.lang.String str78 = accessToken76.getUserId();
        java.lang.String str79 = authService30.extractErrorMessageForbidden(accessToken76);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult80 = osiamGroupService3.searchGroups(query23, accessToken76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given query must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(scopeSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(scopeSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Bearer " + "'", str21, "Bearer ");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Insufficient scopes: []" + "'", str22, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(authService30);
        org.junit.Assert.assertNotNull(osiamGroupService33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(accessToken40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(scopeSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Insufficient scopes: []" + "'", str43, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Insufficient scopes: []" + "'", str45, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(accessToken54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str55, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Insufficient scopes: []" + "'", str56, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(accessToken63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Insufficient scopes: []" + "'", str69, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(accessToken76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Insufficient scopes: []" + "'", str79, "Insufficient scopes: []");
    }

    @Test
    public void test11075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11075");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.descending("hi!");
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        java.lang.String str16 = query15.toString();
        java.lang.String str17 = query15.getSortOrder();
        java.lang.String str18 = query15.getSortBy();
        java.lang.String str19 = query15.getFilter();
        java.lang.String str20 = query15.getSortOrder();
        java.lang.String str21 = query15.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder(query15);
        long long23 = query15.getStartIndex();
        org.osiam.client.query.Query query24 = query15.nextPage();
        java.lang.String str25 = query15.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder26 = new org.osiam.client.query.QueryBuilder(query15);
        java.lang.String str27 = query15.getAttributes();
        java.lang.String str28 = query15.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder29 = osiamConnector5.createQueryBuilder(query15);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.ascending("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.startIndex((long) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str16, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "descending" + "'", str17, "descending");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "descending" + "'", str20, "descending");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Authorization" + "'", str21, "Authorization");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Authorization" + "'", str27, "Authorization");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
    }

    @Test
    public void test11076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11076");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        java.lang.Class<?> wildcardClass8 = builder7.getClass();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test11077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11077");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.descending("hi!");
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        java.lang.String str16 = query15.toString();
        java.lang.String str17 = query15.getSortOrder();
        java.lang.String str18 = query15.getSortBy();
        java.lang.String str19 = query15.getFilter();
        java.lang.String str20 = query15.getSortOrder();
        java.lang.String str21 = query15.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder(query15);
        long long23 = query15.getStartIndex();
        org.osiam.client.query.Query query24 = query15.nextPage();
        java.lang.String str25 = query15.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder26 = new org.osiam.client.query.QueryBuilder(query15);
        java.lang.String str27 = query15.getAttributes();
        java.lang.String str28 = query15.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder29 = osiamConnector5.createQueryBuilder(query15);
        org.osiam.client.query.QueryBuilder queryBuilder30 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder32 = queryBuilder30.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.descending("hi!");
        org.osiam.client.query.Query query39 = queryBuilder38.build();
        org.osiam.client.query.Query query40 = queryBuilder38.build();
        java.lang.String str41 = query40.getSortBy();
        java.lang.String str42 = query40.getFilter();
        java.lang.String str43 = query40.toString();
        java.lang.String str44 = query40.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query40);
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder48.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken53 = builder52.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken53);
        java.util.Date date55 = accessToken53.getExpiresAt();
        boolean boolean56 = accessToken53.isRefreshTokenExpired();
        java.util.Date date57 = accessToken53.getExpiresAt();
        java.lang.String str58 = accessToken53.getUserName();
        boolean boolean59 = accessToken53.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector5.deleteGroup("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=org.osiam.client.exception.ConnectionInitializationException: PATCH, userId=org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]]", accessToken53);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str16, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "descending" + "'", str17, "descending");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "descending" + "'", str20, "descending");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Authorization" + "'", str21, "Authorization");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Authorization" + "'", str27, "Authorization");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(query39);
        org.junit.Assert.assertNotNull(query40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(accessToken53);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test11078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11078");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer7 = scopeDeserializer0.getDelegatee();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass9 = scopeDeserializer0.handledType();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNull(wildcardJsonDeserializer7);
        org.junit.Assert.assertNull(scopeSet8);
        org.junit.Assert.assertNull(wildcardClass9);
    }

    @Test
    public void test11079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11079");
        org.osiam.client.exception.ConflictException conflictException3 = new org.osiam.client.exception.ConflictException("org.osiam.client.exception.NoResultException: authorization_code");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException4 = new org.osiam.client.exception.ConnectionInitializationException("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", (java.lang.Throwable) conflictException3);
        org.osiam.client.exception.OsiamClientException osiamClientException5 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.UnauthorizedException: PATCH", (java.lang.Throwable) connectionInitializationException4);
    }

    @Test
    public void test11080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11080");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = accessToken6.getScopes();
        boolean boolean9 = accessToken6.isRefreshTokenExpired();
        boolean boolean10 = accessToken6.isClientOnly();
        org.osiam.client.helper.ScopeSerializer scopeSerializer11 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean12 = scopeSerializer11.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer13 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer14 = scopeSerializer11.unwrappingSerializer(nameTransformer13);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass15 = scopeSetJsonSerializer14.handledType();
        boolean boolean16 = scopeSetJsonSerializer14.usesObjectId();
        boolean boolean17 = accessToken6.equals((java.lang.Object) scopeSetJsonSerializer14);
        boolean boolean18 = scopeSetJsonSerializer14.usesObjectId();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(scopeSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer14);
        org.junit.Assert.assertNull(scopeSetClass15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test11081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11081");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder11 = builder7.setClientId("org.osiam.client.exception.OsiamClientException: ADMIN");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientId("Insufficient scopes: [GET, GET POST PUT PATCH DELETE]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test11082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11082");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder2.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken7 = builder6.build();
        boolean boolean8 = accessToken7.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = accessToken7.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider11 = null;
        scopeSerializer0.serialize(scopeSet9, jsonGenerator10, serializerProvider11);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper13 = null;
        com.fasterxml.jackson.databind.JavaType javaType14 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper13, javaType14);
        org.osiam.client.helper.ScopeSerializer scopeSerializer16 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException24 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean25 = scope22.equals((java.lang.Object) invalidAttributeException24);
        java.lang.String str26 = scope22.getValue();
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str29 = scope28.toString();
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str32 = scope31.getValue();
        java.lang.String str33 = scope31.getValue();
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException36 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean37 = scope34.equals((java.lang.Object) invalidAttributeException36);
        java.lang.String str38 = scope34.getValue();
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException44 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean45 = scope42.equals((java.lang.Object) invalidAttributeException44);
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.GET;
        boolean boolean50 = scope48.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope51 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray52 = new org.osiam.client.oauth.Scope[] { scope21, scope22, scope27, scope28, scope30, scope31, scope34, scope39, scope40, scope41, scope42, scope46, scope47, scope48, scope51 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet53 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet53, scopeArray52);
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder18.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet53);
        boolean boolean56 = scopeSerializer16.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet53);
        org.osiam.client.oauth.AccessToken.Builder builder58 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date59 = null;
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setRefreshTokenExpiresAt(date59);
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder58.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken63 = builder62.build();
        boolean boolean64 = accessToken63.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet65 = accessToken63.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator66 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider67 = null;
        scopeSerializer16.serialize(scopeSet65, jsonGenerator66, serializerProvider67);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator69 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider70 = null;
        scopeSerializer0.serialize(scopeSet65, jsonGenerator69, serializerProvider70);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass72 = scopeSerializer0.handledType();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(accessToken7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(scopeSet9);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GET" + "'", str26, "GET");
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ME" + "'", str29, "ME");
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PATCH" + "'", str32, "PATCH");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PATCH" + "'", str33, "PATCH");
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "GET" + "'", str38, "GET");
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(scope51);
        org.junit.Assert.assertNotNull(scopeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(accessToken63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(scopeSet65);
        org.junit.Assert.assertNull(scopeSetClass72);
    }

    @Test
    public void test11083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11083");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getUserName();
        java.lang.String str12 = accessToken9.toString();
        java.lang.String str13 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        boolean boolean23 = accessToken21.isClientOnly();
        java.lang.String str24 = accessToken21.getClientId();
        java.lang.String str25 = accessToken21.getUserId();
        java.lang.String str26 = accessToken21.getClientId();
        java.lang.String str27 = accessToken21.getRefreshToken();
        java.lang.String str28 = osiamGroupService2.extractErrorMessageForbidden(accessToken21);
        org.osiam.resources.scim.Group group30 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        java.lang.String str38 = accessToken37.toString();
        java.lang.String str39 = accessToken37.getClientId();
        org.osiam.client.OsiamConnector.Builder builder40 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder42 = builder40.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder44 = builder42.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder46 = builder44.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector47 = builder46.build();
        org.osiam.client.query.QueryBuilder queryBuilder48 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder50.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder50.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder56 = queryBuilder54.descending("hi!");
        org.osiam.client.query.Query query57 = queryBuilder56.build();
        java.lang.String str58 = query57.toString();
        java.lang.String str59 = query57.toString();
        java.lang.String str60 = query57.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder61 = osiamConnector47.createQueryBuilder(query57);
        org.osiam.client.query.QueryBuilder queryBuilder62 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder62.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder66 = queryBuilder64.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder68 = queryBuilder64.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder70 = queryBuilder68.descending("hi!");
        org.osiam.client.query.Query query71 = queryBuilder70.build();
        org.osiam.client.query.QueryBuilder queryBuilder72 = osiamConnector47.createQueryBuilder(query71);
        boolean boolean73 = accessToken37.equals((java.lang.Object) queryBuilder72);
        java.util.Date date74 = accessToken37.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group75 = osiamGroupService2.updateResource("Query [attributes=org.osiam.client.exception.OsiamRequestException: hi!, filter=null, sortBy=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], sortOrder=descending, startIndex=1, count=10]", group30, accessToken37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str12, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Insufficient scopes: []" + "'", str13, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Insufficient scopes: []" + "'", str28, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str38, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(osiamConnector47);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(queryBuilder56);
        org.junit.Assert.assertNotNull(query57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str58, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str59, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertNotNull(queryBuilder68);
        org.junit.Assert.assertNotNull(queryBuilder70);
        org.junit.Assert.assertNotNull(query71);
        org.junit.Assert.assertNotNull(queryBuilder72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11084");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder1.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService.Builder builder7 = builder1.setClientRedirectUri("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientId("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder11 = builder7.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=GET, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test11085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11085");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str7 = scope6.toString();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        boolean boolean15 = accessToken14.isRefreshTokenExpired();
        java.lang.String str16 = accessToken14.getUserId();
        boolean boolean17 = accessToken14.isRefreshTokenExpired();
        java.lang.String str18 = accessToken14.getRefreshToken();
        boolean boolean19 = scope6.equals((java.lang.Object) accessToken14);
        java.lang.String str20 = osiamGroupService5.extractErrorMessageForbidden(accessToken14);
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken27 = builder26.build();
        java.util.Date date28 = accessToken27.getExpiresAt();
        java.lang.String str29 = accessToken27.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken27);
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        boolean boolean38 = accessToken37.isRefreshTokenExpired();
        boolean boolean39 = accessToken37.isClientOnly();
        java.lang.String str40 = accessToken37.getClientId();
        boolean boolean41 = accessToken37.isClientOnly();
        boolean boolean42 = accessToken27.equals((java.lang.Object) accessToken37);
        java.util.Date date43 = accessToken37.getRefreshTokenExpiresAt();
        java.lang.String str44 = accessToken37.toString();
        java.lang.String str45 = osiamGroupService5.extractErrorMessageForbidden(accessToken37);
        org.osiam.resources.scim.Group group46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken49 = builder48.build();
        java.lang.String str50 = accessToken49.toString();
        java.util.Date date51 = accessToken49.getExpiresAt();
        java.lang.String str52 = accessToken49.getUserId();
        java.lang.String str53 = accessToken49.getUserId();
        java.lang.String str54 = accessToken49.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group55 = osiamGroupService5.createResource(group46, accessToken49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PUT" + "'", str7, "PUT");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str44, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Insufficient scopes: []" + "'", str45, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str50, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "client_credentials" + "'", str54, "client_credentials");
    }

    @Test
    public void test11086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11086");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer7 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer6);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeSetJsonDeserializer5.getEmptyValue();
        boolean boolean9 = scopeSetJsonDeserializer5.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet10 = scopeSetJsonDeserializer5.getEmptyValue();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer11 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer12 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer11);
        boolean boolean13 = scopeSetJsonDeserializer12.isCachable();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer14 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer15 = scopeSetJsonDeserializer12.unwrappingDeserializer(nameTransformer14);
        com.fasterxml.jackson.core.JsonParser jsonParser16 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext17 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer18 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean19 = scopeSerializer18.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer20 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer21 = scopeSerializer18.unwrappingSerializer(nameTransformer20);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException30 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean31 = scope28.equals((java.lang.Object) invalidAttributeException30);
        java.lang.String str32 = scope28.getValue();
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str35 = scope34.toString();
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str38 = scope37.getValue();
        java.lang.String str39 = scope37.getValue();
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException42 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean43 = scope40.equals((java.lang.Object) invalidAttributeException42);
        java.lang.String str44 = scope40.getValue();
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException50 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean51 = scope48.equals((java.lang.Object) invalidAttributeException50);
        org.osiam.client.oauth.Scope scope52 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope53 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.GET;
        boolean boolean56 = scope54.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope57 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray58 = new org.osiam.client.oauth.Scope[] { scope27, scope28, scope33, scope34, scope36, scope37, scope40, scope45, scope46, scope47, scope48, scope52, scope53, scope54, scope57 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet59 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet59, scopeArray58);
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder24.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet59);
        boolean boolean62 = scopeSetJsonSerializer21.isEmpty(serializerProvider22, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet59);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet63 = scopeSetJsonDeserializer12.deserialize(jsonParser16, deserializationContext17, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet59);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Can not update object of type java.util.LinkedHashSet (by deserializer of type org.osiam.client.helper.ScopeDeserializer)");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer7);
        org.junit.Assert.assertNull(scopeSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(scopeSet10);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "GET" + "'", str32, "GET");
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ME" + "'", str35, "ME");
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PATCH" + "'", str38, "PATCH");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PATCH" + "'", str39, "PATCH");
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "GET" + "'", str44, "GET");
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(scope52);
        org.junit.Assert.assertNotNull(scope53);
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(scope57);
        org.junit.Assert.assertNotNull(scopeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test11087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11087");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientId("descending");
        org.osiam.client.AuthService.Builder builder13 = builder9.setClientRedirectUri("PUT");
        org.osiam.client.AuthService authService14 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder16.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder16.setType("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.addScope(scope27);
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException31 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean32 = scope29.equals((java.lang.Object) invalidAttributeException31);
        java.lang.String str33 = scope29.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder26.addScope(scope29);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setRefreshToken("GET");
        org.osiam.client.OsiamGroupService.Builder builder44 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService45 = builder44.build();
        org.osiam.client.OsiamGroupService osiamGroupService46 = builder44.build();
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder48.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken53 = builder52.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken53);
        java.lang.String str55 = osiamGroupService46.extractErrorMessageForbidden(accessToken53);
        java.util.Date date56 = accessToken53.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder40.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder16.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder60 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date61 = null;
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder60.setRefreshTokenExpiresAt(date61);
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder60.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder60.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder68 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date69 = null;
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder68.setRefreshTokenExpiresAt(date69);
        org.osiam.client.oauth.AccessToken.Builder builder72 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date73 = null;
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder72.setRefreshTokenExpiresAt(date73);
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder72.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken77 = builder76.build();
        java.util.Date date78 = accessToken77.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder68.setRefreshTokenExpiresAt(date78);
        org.osiam.client.oauth.AccessToken.Builder builder80 = builder66.setRefreshTokenExpiresAt(date78);
        org.osiam.client.oauth.AccessToken.Builder builder81 = builder58.setRefreshTokenExpiresAt(date78);
        org.osiam.client.oauth.AccessToken accessToken82 = builder58.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken83 = authService14.validateAccessToken(accessToken82);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(authService14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GET" + "'", str33, "GET");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(osiamGroupService45);
        org.junit.Assert.assertNotNull(osiamGroupService46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(accessToken53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Insufficient scopes: []" + "'", str55, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(accessToken77);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(accessToken82);
    }

    @Test
    public void test11088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11088");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope7 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.addScope(scope7);
        org.osiam.client.oauth.Scope scope9 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException11 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean12 = scope9.equals((java.lang.Object) invalidAttributeException11);
        java.lang.String str13 = scope9.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder6.addScope(scope9);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.addScope(scope21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder18.setRefreshToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList26 = osiamGroupService3.getAllResources(accessToken25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(scope7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(scope9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GET" + "'", str13, "GET");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
    }

    @Test
    public void test11089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11089");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder8.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.attributes("Cannot connect to server");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Bearer ");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.descending("");
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("org.osiam.client.exception.ConnectionInitializationException: descending");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.descending("GET");
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("org.osiam.client.exception.ConflictException: PATCH");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
    }

    @Test
    public void test11090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11090");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.addScope(scope18);
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder17.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder13.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.addScope(scope29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException33 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean34 = scope31.equals((java.lang.Object) invalidAttributeException33);
        java.lang.String str35 = scope31.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder28.addScope(scope31);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder28.setRefreshToken("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder40 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date41 = null;
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setRefreshTokenExpiresAt(date41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder40.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken45 = builder44.build();
        java.util.Date date46 = accessToken45.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder38.setRefreshTokenExpiresAt(date46);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder26.setRefreshTokenExpiresAt(date46);
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.PATCH;
        boolean boolean51 = scope49.equals((java.lang.Object) 401);
        java.lang.String str52 = scope49.toString();
        java.lang.String str53 = scope49.getValue();
        java.lang.String str54 = scope49.toString();
        org.osiam.client.OsiamGroupService.Builder builder56 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService57 = builder56.build();
        org.osiam.client.OsiamGroupService osiamGroupService58 = builder56.build();
        boolean boolean59 = scope49.equals((java.lang.Object) builder56);
        java.lang.String str60 = scope49.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder48.addScope(scope49);
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GET" + "'", str35, "GET");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(accessToken45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PATCH" + "'", str52, "PATCH");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "PATCH" + "'", str53, "PATCH");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PATCH" + "'", str54, "PATCH");
        org.junit.Assert.assertNotNull(osiamGroupService57);
        org.junit.Assert.assertNotNull(osiamGroupService58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PATCH" + "'", str60, "PATCH");
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test11091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11091");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector5 = builder0.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.descending("hi!");
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder14.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Cannot connect to server");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.startIndex((long) (byte) 10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.count(0);
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        org.osiam.client.query.Query query25 = query24.previousPage();
        org.osiam.client.query.Query query26 = query25.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder27 = osiamConnector5.createQueryBuilder(query25);
        org.osiam.resources.scim.UpdateGroup updateGroup29 = null;
        org.osiam.client.AuthService.Builder builder31 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder33 = builder31.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder35 = builder33.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder37 = builder35.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder39 = builder37.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder41 = builder39.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder43 = builder39.setClientSecret("PATCH");
        org.osiam.client.AuthService.Builder builder45 = builder43.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService46 = builder43.build();
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.GET;
        java.lang.String str48 = scope47.getValue();
        java.lang.String str49 = scope47.getValue();
        java.lang.String str50 = scope47.toString();
        java.lang.String str51 = scope47.toString();
        org.osiam.client.oauth.Scope[] scopeArray52 = new org.osiam.client.oauth.Scope[] { scope47 };
        java.net.URI uRI53 = authService46.getAuthorizationUri(scopeArray52);
        org.osiam.client.AuthService.Builder builder55 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388");
        org.osiam.client.AuthService authService56 = builder55.build();
        org.osiam.client.AuthService.Builder builder58 = builder55.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        org.osiam.client.AuthService authService59 = builder58.build();
        org.osiam.client.oauth.AccessToken.Builder builder61 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date62 = null;
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder61.setRefreshTokenExpiresAt(date62);
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder61.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder65.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken68 = builder65.build();
        boolean boolean69 = accessToken68.isRefreshTokenExpired();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken68);
        java.lang.String str71 = authService59.extractErrorMessageForbidden(accessToken68);
        java.lang.String str72 = authService46.extractErrorMessageForbidden(accessToken68);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group73 = osiamConnector5.updateGroup("org.osiam.client.exception.OsiamRequestException: hi!", updateGroup29, accessToken68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertNotNull(query25);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(authService46);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "GET" + "'", str48, "GET");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "GET" + "'", str49, "GET");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "GET" + "'", str50, "GET");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "GET" + "'", str51, "GET");
        org.junit.Assert.assertNotNull(scopeArray52);
        org.junit.Assert.assertNotNull(uRI53);
        org.junit.Assert.assertNotNull(authService56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(authService59);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(accessToken68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Insufficient scopes: []" + "'", str71, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Insufficient scopes: []" + "'", str72, "Insufficient scopes: []");
    }

    @Test
    public void test11092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11092");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getEmptyValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        java.util.Collection<java.lang.Object> objCollection6 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer7 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer8 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer9 = scopeDeserializer0.unwrappingDeserializer(nameTransformer8);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet10 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.core.JsonParser jsonParser11 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet13 = scopeDeserializer0.deserialize(jsonParser11, deserializationContext12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertNull(objCollection6);
        org.junit.Assert.assertNull(wildcardJsonDeserializer7);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer9);
        org.junit.Assert.assertNull(scopeSet10);
    }

    @Test
    public void test11093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11093");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        org.osiam.resources.scim.Group group6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        java.util.Date date14 = accessToken13.getExpiresAt();
        java.lang.String str15 = accessToken13.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        java.lang.String str17 = accessToken13.getClientId();
        boolean boolean18 = accessToken13.isRefreshTokenExpired();
        boolean boolean19 = accessToken13.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group20 = osiamGroupService3.replaceResource("Query [attributes=ME, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", group6, accessToken13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test11094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11094");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.client.OsiamConnector.Builder builder5 = builder2.setAuthServerEndpoint("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test11095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11095");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder1.setRefreshToken("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        java.util.Date date19 = accessToken18.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder11.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setUserId("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.ConflictException: ");
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.OsiamRequestException: hi!");
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder20.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test11096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11096");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.addScope(scope18);
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder17.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder13.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.addScope(scope29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException33 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean34 = scope31.equals((java.lang.Object) invalidAttributeException33);
        java.lang.String str35 = scope31.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder28.addScope(scope31);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.addScope(scope45);
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException49 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean50 = scope47.equals((java.lang.Object) invalidAttributeException49);
        java.lang.String str51 = scope47.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder44.addScope(scope47);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder40.addScope(scope47);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder13.addScope(scope47);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setType("");
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder54.setClientId("Insufficient scopes: []");
        org.osiam.client.oauth.Scope scope59 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str60 = scope59.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder54.addScope(scope59);
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder61.setUserId("org.osiam.client.exception.ConnectionInitializationException: descending");
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder61.setRefreshToken("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder61.setRefreshToken("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder61.setType("org.osiam.client.exception.OsiamClientException: ADMIN");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GET" + "'", str35, "GET");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "GET" + "'", str51, "GET");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(scope59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PUT" + "'", str60, "PUT");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test11097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11097");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.getEmptyValue();
        java.util.Collection<java.lang.Object> objCollection7 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeDeserializer0.getEmptyValue();
        boolean boolean9 = scopeDeserializer0.isCachable();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        boolean boolean18 = accessToken16.isClientOnly();
        java.lang.String str19 = accessToken16.getClientId();
        boolean boolean20 = accessToken16.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.addScope(scope23);
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException27 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean28 = scope25.equals((java.lang.Object) invalidAttributeException27);
        java.lang.String str29 = scope25.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder22.addScope(scope25);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setUserName("Authorization");
        boolean boolean37 = accessToken16.equals((java.lang.Object) builder34);
        org.osiam.client.oauth.AccessToken.Builder builder39 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.addScope(scope40);
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException44 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean45 = scope42.equals((java.lang.Object) invalidAttributeException44);
        java.lang.String str46 = scope42.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder39.addScope(scope42);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder51.addScope(scope54);
        org.osiam.client.oauth.GrantType grantType56 = org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS;
        java.lang.String str57 = grantType56.getUrlParam();
        boolean boolean58 = scope54.equals((java.lang.Object) grantType56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder34.addScope(scope54);
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer60 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass61 = scopeDeserializer60.handledType();
        java.lang.Class<?> wildcardClass62 = scopeDeserializer60.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer63 = scopeDeserializer60.getDelegatee();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader64 = scopeDeserializer60.getObjectIdReader();
        boolean boolean65 = scope54.equals((java.lang.Object) scopeDeserializer60);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer66 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer67 = scopeDeserializer60.unwrappingDeserializer(nameTransformer66);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer68 = scopeDeserializer0.replaceDelegatee(scopeSetJsonDeserializer67);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNull(scopeSet6);
        org.junit.Assert.assertNull(objCollection7);
        org.junit.Assert.assertNull(scopeSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GET" + "'", str29, "GET");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "GET" + "'", str46, "GET");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + grantType56 + "' != '" + org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS + "'", grantType56.equals(org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "client_credentials" + "'", str57, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(wildcardClass61);
        org.junit.Assert.assertNull(wildcardClass62);
        org.junit.Assert.assertNull(wildcardJsonDeserializer63);
        org.junit.Assert.assertNull(objectIdReader64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer67);
    }

    @Test
    public void test11098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11098");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientId("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setEndpoint("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientRedirectUri("Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]");
        org.osiam.client.OsiamConnector osiamConnector21 = builder20.build();
        org.osiam.client.OsiamConnector.Builder builder23 = builder20.setClientId("ADMIN");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test11099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11099");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.lang.String str11 = accessToken10.toString();
        java.lang.String str12 = accessToken10.getClientId();
        org.osiam.client.OsiamConnector.Builder builder13 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder15 = builder13.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder17 = builder15.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder19 = builder17.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector20 = builder19.build();
        org.osiam.client.query.QueryBuilder queryBuilder21 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder23.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.descending("hi!");
        org.osiam.client.query.Query query30 = queryBuilder29.build();
        java.lang.String str31 = query30.toString();
        java.lang.String str32 = query30.toString();
        java.lang.String str33 = query30.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder34 = osiamConnector20.createQueryBuilder(query30);
        org.osiam.client.query.QueryBuilder queryBuilder35 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder37.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder37.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder43 = queryBuilder41.descending("hi!");
        org.osiam.client.query.Query query44 = queryBuilder43.build();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector20.createQueryBuilder(query44);
        boolean boolean46 = accessToken10.equals((java.lang.Object) queryBuilder45);
        java.util.Date date47 = accessToken10.getExpiresAt();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet48 = accessToken10.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user49 = osiamUserService2.getUser("org.osiam.client.exception.ConnectionInitializationException: descending", accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str11, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(osiamConnector20);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(query30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str31, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str32, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(query44);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scopeSet48);
    }

    @Test
    public void test11100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11100");
        org.osiam.client.oauth.Scope scope1 = new org.osiam.client.oauth.Scope("Insufficient scopes: [GET]");
    }

    @Test
    public void test11101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11101");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        java.lang.String str13 = query9.getFilter();
        java.lang.String str14 = query9.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder(query9);
        java.lang.String str16 = query9.getSortBy();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test11102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11102");
        org.osiam.client.oauth.Scope scope0 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str1 = scope0.getValue();
        java.lang.String str2 = scope0.getValue();
        java.lang.String str3 = scope0.getValue();
        org.osiam.client.helper.ScopeSerializer scopeSerializer4 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.Scope scope9 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope10 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException12 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean13 = scope10.equals((java.lang.Object) invalidAttributeException12);
        java.lang.String str14 = scope10.getValue();
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str17 = scope16.toString();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str20 = scope19.getValue();
        java.lang.String str21 = scope19.getValue();
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException24 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean25 = scope22.equals((java.lang.Object) invalidAttributeException24);
        java.lang.String str26 = scope22.getValue();
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException32 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean33 = scope30.equals((java.lang.Object) invalidAttributeException32);
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.GET;
        boolean boolean38 = scope36.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray40 = new org.osiam.client.oauth.Scope[] { scope9, scope10, scope15, scope16, scope18, scope19, scope22, scope27, scope28, scope29, scope30, scope34, scope35, scope36, scope39 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet41 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet41, scopeArray40);
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder6.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet41);
        boolean boolean44 = scopeSerializer4.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet41);
        org.osiam.client.oauth.AccessToken.Builder builder46 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date47 = null;
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.setRefreshTokenExpiresAt(date47);
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder46.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken51 = builder50.build();
        boolean boolean52 = accessToken51.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet53 = accessToken51.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator54 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider55 = null;
        scopeSerializer4.serialize(scopeSet53, jsonGenerator54, serializerProvider55);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider57 = null;
        org.osiam.client.oauth.AccessToken.Builder builder59 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date60 = null;
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.setRefreshTokenExpiresAt(date60);
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder59.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken64 = builder63.build();
        boolean boolean65 = accessToken64.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet66 = accessToken64.getScopes();
        boolean boolean67 = scopeSerializer4.isEmpty(serializerProvider57, scopeSet66);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper68 = null;
        com.fasterxml.jackson.databind.JavaType javaType69 = null;
        scopeSerializer4.acceptJsonFormatVisitor(jsonFormatVisitorWrapper68, javaType69);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass71 = scopeSerializer4.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer72 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer73 = scopeSerializer4.unwrappingSerializer(nameTransformer72);
        boolean boolean74 = scopeSerializer4.isUnwrappingSerializer();
        boolean boolean75 = scopeSerializer4.usesObjectId();
        boolean boolean76 = scopeSerializer4.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer77 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer78 = scopeSerializer4.unwrappingSerializer(nameTransformer77);
        boolean boolean79 = scope0.equals((java.lang.Object) scopeSerializer4);
        org.junit.Assert.assertNotNull(scope0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "PUT" + "'", str1, "PUT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PUT" + "'", str2, "PUT");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PUT" + "'", str3, "PUT");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(scope9);
        org.junit.Assert.assertNotNull(scope10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GET" + "'", str14, "GET");
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ME" + "'", str17, "ME");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PATCH" + "'", str20, "PATCH");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PATCH" + "'", str21, "PATCH");
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GET" + "'", str26, "GET");
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(scopeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(accessToken51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(scopeSet53);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(accessToken64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(scopeSet66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(scopeSetClass71);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test11103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11103");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setResourceServerEndpoint("GET");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("descending");
        org.osiam.client.OsiamConnector.Builder builder20 = builder16.setAuthServerEndpoint("org.osiam.client.exception.UnauthorizedException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector21 = builder20.build();
        org.osiam.resources.scim.User user22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken29 = builder28.build();
        boolean boolean30 = accessToken29.isRefreshTokenExpired();
        boolean boolean31 = accessToken29.isClientOnly();
        java.lang.String str32 = accessToken29.getClientId();
        java.lang.String str33 = accessToken29.getUserId();
        boolean boolean34 = accessToken29.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user35 = osiamConnector21.createUser(user22, accessToken29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test11104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11104");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder5 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder5.build();
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken14);
        java.lang.String str16 = osiamGroupService7.extractErrorMessageForbidden(accessToken14);
        org.osiam.client.OsiamGroupService.Builder builder18 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService19 = builder18.build();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet28 = accessToken26.getScopes();
        java.lang.String str29 = osiamGroupService19.extractErrorMessageForbidden(accessToken26);
        boolean boolean30 = accessToken26.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken26);
        java.lang.String str32 = osiamGroupService7.extractErrorMessageForbidden(accessToken26);
        java.lang.String str33 = osiamGroupService2.extractErrorMessageForbidden(accessToken26);
        org.osiam.client.query.QueryBuilder queryBuilder34 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder36.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder42 = queryBuilder40.descending("hi!");
        org.osiam.client.query.Query query43 = queryBuilder42.build();
        java.lang.String str44 = query43.toString();
        java.lang.String str45 = query43.getSortOrder();
        java.lang.String str46 = query43.getSortBy();
        java.lang.String str47 = query43.getFilter();
        java.lang.String str48 = query43.getSortOrder();
        java.lang.String str49 = query43.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder50 = new org.osiam.client.query.QueryBuilder(query43);
        long long51 = query43.getStartIndex();
        org.osiam.client.query.Query query52 = query43.nextPage();
        long long53 = query52.getStartIndex();
        org.osiam.client.query.Query query54 = query52.nextPage();
        int int55 = query52.getCount();
        org.osiam.client.OsiamGroupService.Builder builder57 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService58 = builder57.build();
        org.osiam.client.OsiamGroupService osiamGroupService59 = builder57.build();
        org.osiam.client.oauth.AccessToken.Builder builder61 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date62 = null;
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder61.setRefreshTokenExpiresAt(date62);
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder61.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken66 = builder65.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken66);
        java.lang.String str68 = osiamGroupService59.extractErrorMessageForbidden(accessToken66);
        java.util.Date date69 = accessToken66.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken66);
        java.lang.String str71 = accessToken66.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult72 = osiamGroupService2.searchResources(query52, accessToken66);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Insufficient scopes: []" + "'", str16, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(scopeSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Insufficient scopes: []" + "'", str29, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Insufficient scopes: []" + "'", str33, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(query43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str44, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "descending" + "'", str45, "descending");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "descending" + "'", str48, "descending");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Authorization" + "'", str49, "Authorization");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(query52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 11L + "'", long53 == 11L);
        org.junit.Assert.assertNotNull(query54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(osiamGroupService58);
        org.junit.Assert.assertNotNull(osiamGroupService59);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(accessToken66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Insufficient scopes: []" + "'", str68, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Bearer " + "'", str71, "Bearer ");
    }

    @Test
    public void test11105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11105");
        org.osiam.client.exception.OsiamClientException osiamClientException1 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.OsiamRequestException: hi!");
    }

    @Test
    public void test11106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11106");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.resources.scim.Group group4 = null;
        org.osiam.client.AuthService.Builder builder6 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientId("ME");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService15 = builder14.build();
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        boolean boolean23 = accessToken22.isRefreshTokenExpired();
        java.lang.String str24 = authService15.extractErrorMessageForbidden(accessToken22);
        boolean boolean25 = accessToken22.isRefreshTokenExpired();
        java.lang.String str26 = accessToken22.getType();
        java.util.Date date27 = accessToken22.getExpiresAt();
        boolean boolean28 = accessToken22.isClientOnly();
        org.osiam.client.OsiamConnector.Builder builder29 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder31 = builder29.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder33 = builder31.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder35 = builder33.setResourceServerEndpoint("hi!");
        org.osiam.client.OsiamConnector.Builder builder37 = builder33.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder39 = builder33.setAuthServerEndpoint("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder41 = builder39.setClientSecret("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.osiam.client.OsiamConnector.Builder builder43 = builder41.setClientRedirectUri("password");
        org.osiam.client.OsiamConnector.Builder builder45 = builder43.setEndpoint("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector.Builder builder47 = builder45.setEndpoint("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        boolean boolean48 = accessToken22.equals((java.lang.Object) builder45);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group49 = osiamGroupService2.updateResource("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamRequestException: hi!", group4, accessToken22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(authService15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Insufficient scopes: []" + "'", str24, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test11107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11107");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.OsiamConnector.Builder builder11 = builder6.setAuthServerEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder13 = builder11.setClientId("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector osiamConnector14 = builder11.build();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getFilter();
        java.lang.String str28 = query24.getSortOrder();
        java.lang.String str29 = query24.getAttributes();
        org.osiam.client.query.Query query30 = query24.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector14.createQueryBuilder(query24);
        org.osiam.resources.scim.User user33 = null;
        org.osiam.client.OsiamGroupService.Builder builder35 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService36 = builder35.build();
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        java.util.Date date44 = accessToken43.getExpiresAt();
        java.lang.String str45 = accessToken43.getRefreshToken();
        boolean boolean46 = accessToken43.isClientOnly();
        java.lang.String str47 = osiamGroupService36.extractErrorMessageForbidden(accessToken43);
        org.osiam.client.oauth.AccessToken.Builder builder49 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date50 = null;
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder49.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken54 = builder53.build();
        java.util.Date date55 = accessToken54.getExpiresAt();
        java.lang.String str56 = accessToken54.getUserName();
        java.util.Date date57 = accessToken54.getRefreshTokenExpiresAt();
        java.lang.String str58 = osiamGroupService36.extractErrorMessageForbidden(accessToken54);
        java.lang.String str59 = accessToken54.getToken();
        java.lang.String str60 = accessToken54.getClientId();
        java.lang.String str61 = accessToken54.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user62 = osiamConnector14.replaceUser("org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", user33, accessToken54);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(osiamConnector14);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "descending" + "'", str28, "descending");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Authorization" + "'", str29, "Authorization");
        org.junit.Assert.assertNotNull(query30);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(osiamGroupService36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Insufficient scopes: []" + "'", str47, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(accessToken54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Insufficient scopes: []" + "'", str58, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Bearer " + "'", str59, "Bearer ");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }

    @Test
    public void test11108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11108");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder13 = builder9.setClientSecret("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.osiam.client.AuthService authService16 = builder15.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken18 = authService16.retrieveAccessToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=GET, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=]");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(authService16);
    }

    @Test
    public void test11109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11109");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder4 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet14 = accessToken12.getScopes();
        java.lang.String str15 = osiamGroupService5.extractErrorMessageForbidden(accessToken12);
        boolean boolean16 = accessToken12.isClientOnly();
        java.lang.String str17 = accessToken12.getType();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList19 = osiamGroupService2.getAllResources(accessToken12);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(scopeSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test11110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11110");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder1.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.setType("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.addScope(scope12);
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException16 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean17 = scope14.equals((java.lang.Object) invalidAttributeException16);
        java.lang.String str18 = scope14.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder11.addScope(scope14);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshToken("GET");
        org.osiam.client.OsiamGroupService.Builder builder29 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService30 = builder29.build();
        org.osiam.client.OsiamGroupService osiamGroupService31 = builder29.build();
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date34 = null;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder33.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken38 = builder37.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken38);
        java.lang.String str40 = osiamGroupService31.extractErrorMessageForbidden(accessToken38);
        java.util.Date date41 = accessToken38.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder25.setRefreshTokenExpiresAt(date41);
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder1.setRefreshTokenExpiresAt(date41);
        org.osiam.client.oauth.AccessToken.Builder builder45 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setRefreshTokenExpiresAt(date46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder45.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder45.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder53 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date54 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.setRefreshTokenExpiresAt(date54);
        org.osiam.client.oauth.AccessToken.Builder builder57 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date58 = null;
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setRefreshTokenExpiresAt(date58);
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder57.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken62 = builder61.build();
        java.util.Date date63 = accessToken62.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder53.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder51.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder43.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken accessToken67 = builder43.build();
        java.util.Date date68 = accessToken67.getExpiresAt();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GET" + "'", str18, "GET");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(osiamGroupService30);
        org.junit.Assert.assertNotNull(osiamGroupService31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Insufficient scopes: []" + "'", str40, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(accessToken62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(accessToken67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11111");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamRequestException: hi!");
    }

    @Test
    public void test11112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11112");
        org.osiam.client.oauth.Scope scope0 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str1 = scope0.toString();
        org.osiam.client.oauth.AccessToken.Builder builder3 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder3.setRefreshTokenExpiresAt(date4);
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder3.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken8 = builder7.build();
        boolean boolean9 = accessToken8.isRefreshTokenExpired();
        java.lang.String str10 = accessToken8.getUserId();
        boolean boolean11 = accessToken8.isRefreshTokenExpired();
        java.lang.String str12 = accessToken8.getRefreshToken();
        boolean boolean13 = scope0.equals((java.lang.Object) accessToken8);
        java.lang.String str14 = scope0.toString();
        org.junit.Assert.assertNotNull(scope0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "PUT" + "'", str1, "PUT");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(accessToken8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PUT" + "'", str14, "PUT");
    }

    @Test
    public void test11113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11113");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.toString();
        java.lang.String str23 = query20.toString();
        int int24 = query20.getCount();
        long long25 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder26 = osiamConnector7.createQueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        org.osiam.client.query.Query query37 = queryBuilder35.build();
        java.lang.String str38 = query37.getSortBy();
        java.lang.String str39 = query37.getFilter();
        int int40 = query37.getCount();
        long long41 = query37.getStartIndex();
        java.lang.String str42 = query37.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder43 = osiamConnector7.createQueryBuilder(query37);
        org.osiam.client.query.QueryBuilder queryBuilder44 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder46 = queryBuilder44.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder50.descending("hi!");
        org.osiam.client.query.Query query53 = queryBuilder52.build();
        java.lang.String str54 = query53.toString();
        java.lang.String str55 = query53.toString();
        org.osiam.client.query.Query query56 = query53.nextPage();
        java.lang.String str57 = query53.toString();
        org.osiam.client.query.Query query58 = query53.nextPage();
        int int59 = query53.getCount();
        java.lang.String str60 = query53.getSortBy();
        java.lang.String str61 = query53.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder62 = osiamConnector7.createQueryBuilder(query53);
        java.lang.String str63 = query53.getFilter();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertNotNull(query37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "descending" + "'", str42, "descending");
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(queryBuilder46);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(query53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str54, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str55, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str57, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNull(str63);
    }

    @Test
    public void test11114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11114");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("ME");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder4 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.descending("hi!");
        org.osiam.client.query.Query query13 = queryBuilder12.build();
        java.lang.String str14 = query13.toString();
        java.lang.String str15 = query13.getSortOrder();
        int int16 = query13.getCount();
        java.lang.String str17 = query13.getSortBy();
        java.lang.String str18 = query13.getAttributes();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        java.lang.Object obj26 = null;
        boolean boolean27 = accessToken25.equals(obj26);
        java.util.Date date28 = accessToken25.getExpiresAt();
        boolean boolean29 = accessToken25.isExpired();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken25);
        java.lang.String str31 = accessToken25.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult32 = osiamGroupService3.searchGroups(query13, accessToken25);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "descending" + "'", str15, "descending");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Authorization" + "'", str18, "Authorization");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test11115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11115");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.descending("hi!");
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        java.lang.String str16 = query15.toString();
        java.lang.String str17 = query15.getSortOrder();
        java.lang.String str18 = query15.getSortBy();
        java.lang.String str19 = query15.getFilter();
        java.lang.String str20 = query15.getSortOrder();
        java.lang.String str21 = query15.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder(query15);
        long long23 = query15.getStartIndex();
        org.osiam.client.query.Query query24 = query15.nextPage();
        java.lang.String str25 = query15.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder26 = new org.osiam.client.query.QueryBuilder(query15);
        java.lang.String str27 = query15.getAttributes();
        java.lang.String str28 = query15.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder29 = osiamConnector5.createQueryBuilder(query15);
        org.osiam.client.query.QueryBuilder queryBuilder30 = osiamConnector5.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder31 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder33.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder37.descending("hi!");
        org.osiam.client.query.Query query40 = queryBuilder39.build();
        java.lang.String str41 = query40.getAttributes();
        java.lang.String str42 = query40.toString();
        java.lang.String str43 = query40.getSortBy();
        org.osiam.client.query.Query query44 = query40.nextPage();
        int int45 = query44.getCount();
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder(query44);
        org.osiam.client.query.QueryBuilder queryBuilder47 = new org.osiam.client.query.QueryBuilder(query44);
        org.osiam.client.oauth.AccessToken.Builder builder49 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date50 = null;
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder49.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder49.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder49.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope58 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.addScope(scope58);
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.setUserName("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.helper.ScopeSerializer scopeSerializer62 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean63 = scopeSerializer62.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer64 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer65 = scopeSerializer62.unwrappingSerializer(nameTransformer64);
        boolean boolean66 = scopeSerializer62.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer67 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer68 = scopeSerializer62.unwrappingSerializer(nameTransformer67);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper69 = null;
        com.fasterxml.jackson.databind.JavaType javaType70 = null;
        scopeSerializer62.acceptJsonFormatVisitor(jsonFormatVisitorWrapper69, javaType70);
        boolean boolean72 = scopeSerializer62.usesObjectId();
        boolean boolean73 = scopeSerializer62.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider74 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer75 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean76 = scopeSerializer75.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass77 = scopeSerializer75.handledType();
        org.osiam.client.oauth.AccessToken.Builder builder79 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date80 = null;
        org.osiam.client.oauth.AccessToken.Builder builder81 = builder79.setRefreshTokenExpiresAt(date80);
        org.osiam.client.oauth.AccessToken.Builder builder83 = builder79.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken84 = builder83.build();
        java.util.Date date85 = accessToken84.getExpiresAt();
        java.lang.String str86 = accessToken84.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet87 = accessToken84.getScopes();
        boolean boolean88 = scopeSerializer75.isEmpty(scopeSet87);
        boolean boolean89 = scopeSerializer62.isEmpty(serializerProvider74, scopeSet87);
        org.osiam.client.oauth.AccessToken.Builder builder90 = builder61.addScopes(scopeSet87);
        org.osiam.client.oauth.AccessToken accessToken91 = builder90.build();
        java.lang.String str92 = accessToken91.getToken();
        java.lang.String str93 = accessToken91.getUserName();
        java.util.Date date94 = accessToken91.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult95 = osiamConnector5.searchUsers(query44, accessToken91);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str16, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "descending" + "'", str17, "descending");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "descending" + "'", str20, "descending");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Authorization" + "'", str21, "Authorization");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Authorization" + "'", str27, "Authorization");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(query40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Authorization" + "'", str41, "Authorization");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str42, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(query44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(scope58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(scopeSetClass77);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(accessToken84);
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(scopeSet87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(accessToken91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Bearer " + "'", str92, "Bearer ");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "org.osiam.client.exception.UnauthorizedException: GET" + "'", str93, "org.osiam.client.exception.UnauthorizedException: GET");
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11116");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("refresh_token");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.resources.scim.Group group6 = null;
        org.osiam.client.AuthService.Builder builder8 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientId("ME");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService13 = builder12.build();
        org.osiam.client.OsiamGroupService.Builder builder15 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService16 = builder15.build();
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        boolean boolean24 = accessToken23.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet25 = accessToken23.getScopes();
        java.lang.String str26 = osiamGroupService16.extractErrorMessageForbidden(accessToken23);
        boolean boolean27 = accessToken23.isClientOnly();
        java.lang.String str28 = authService13.extractErrorMessageForbidden(accessToken23);
        java.util.Date date29 = accessToken23.getRefreshTokenExpiresAt();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet30 = accessToken23.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group31 = osiamGroupService4.createResource(group6, accessToken23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(authService13);
        org.junit.Assert.assertNotNull(osiamGroupService16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(scopeSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Insufficient scopes: []" + "'", str26, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Insufficient scopes: []" + "'", str28, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scopeSet30);
    }

    @Test
    public void test11117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11117");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.util.Date date11 = accessToken10.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder1.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder1.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder1.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.Scope scope18 = new org.osiam.client.oauth.Scope("");
        java.lang.String str19 = scope18.toString();
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.addScope(scope18);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setClientId("org.osiam.client.exception.OsiamClientException: hi!");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test11118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11118");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("ADMIN");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientRedirectUri("org.osiam.client.exception.ConflictException: Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.AuthService authService4 = builder1.build();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(authService4);
    }

    @Test
    public void test11119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11119");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        boolean boolean6 = scopeDeserializer0.isCachable();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer7 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass8 = scopeDeserializer7.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer9 = scopeDeserializer7.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection10 = scopeDeserializer7.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer11 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer12 = scopeDeserializer7.unwrappingDeserializer(nameTransformer11);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer13 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer14 = scopeSetJsonDeserializer12.unwrappingDeserializer(nameTransformer13);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet15 = scopeSetJsonDeserializer12.getEmptyValue();
        boolean boolean16 = scopeSetJsonDeserializer12.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet17 = scopeSetJsonDeserializer12.getEmptyValue();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer18 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer19 = scopeSetJsonDeserializer12.unwrappingDeserializer(nameTransformer18);
        java.lang.Class<?> wildcardClass20 = scopeSetJsonDeserializer12.handledType();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader21 = scopeSetJsonDeserializer12.getObjectIdReader();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer22 = scopeDeserializer0.replaceDelegatee(scopeSetJsonDeserializer12);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(wildcardJsonDeserializer9);
        org.junit.Assert.assertNull(objCollection10);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer12);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer14);
        org.junit.Assert.assertNull(scopeSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(scopeSet17);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer19);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNull(objectIdReader21);
    }

    @Test
    public void test11120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11120");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setType("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        boolean boolean25 = accessToken24.isRefreshTokenExpired();
        boolean boolean26 = accessToken24.isClientOnly();
        java.lang.String str27 = accessToken24.getRefreshToken();
        boolean boolean28 = accessToken24.isExpired();
        boolean boolean29 = accessToken24.isRefreshTokenExpired();
        java.lang.String str30 = accessToken24.getToken();
        java.util.Date date31 = accessToken24.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder15.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setUserId("PUT");
        org.osiam.client.oauth.AccessToken accessToken35 = builder32.build();
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder32.setClientId("Query [attributes=org.osiam.client.exception.OsiamRequestException: hi!, filter=null, sortBy=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder32.setUserId("org.osiam.client.exception.NoResultException: org.osiam.client.exception.ConnectionInitializationException: descending");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Bearer " + "'", str30, "Bearer ");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test11121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11121");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getUserName();
        java.lang.String str12 = accessToken9.toString();
        java.lang.String str13 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        java.lang.String str21 = accessToken20.toString();
        java.lang.String str22 = accessToken20.getType();
        boolean boolean23 = accessToken20.isExpired();
        java.util.Date date24 = accessToken20.getExpiresAt();
        boolean boolean25 = accessToken20.isClientOnly();
        java.lang.String str26 = osiamGroupService2.extractErrorMessageForbidden(accessToken20);
        java.lang.String str27 = accessToken20.getRefreshToken();
        java.lang.String str28 = accessToken20.getToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken20);
        boolean boolean30 = accessToken20.isRefreshTokenExpired();
        java.lang.Object obj31 = null;
        boolean boolean32 = accessToken20.equals(obj31);
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str12, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Insufficient scopes: []" + "'", str13, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str21, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Insufficient scopes: []" + "'", str26, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Bearer " + "'", str28, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test11122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11122");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("");
        org.osiam.client.AuthService.Builder builder9 = builder5.setClientSecret("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientRedirectUri("GET POST PUT PATCH DELETE");
        org.osiam.client.AuthService authService12 = builder11.build();
        org.osiam.client.AuthService.Builder builder14 = builder11.setClientRedirectUri("DELETE");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(authService12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test11123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11123");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count((int) (short) 0);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder4.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder4.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.ascending("password");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.filter("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.startIndex(21L);
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
    }

    @Test
    public void test11124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11124");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector17 = builder14.build();
        org.osiam.client.OsiamConnector osiamConnector18 = builder14.build();
        org.osiam.client.OsiamConnector osiamConnector19 = builder14.build();
        org.osiam.client.OsiamGroupService.Builder builder22 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService23 = builder22.build();
        org.osiam.client.OsiamGroupService osiamGroupService24 = builder22.build();
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken31 = builder30.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken31);
        java.lang.String str33 = osiamGroupService24.extractErrorMessageForbidden(accessToken31);
        javax.ws.rs.client.WebTarget webTarget34 = osiamGroupService24.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget35 = osiamGroupService24.targetEndpoint;
        org.osiam.client.AuthService.Builder builder37 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder39 = builder37.setClientId("ME");
        org.osiam.client.AuthService.Builder builder41 = builder39.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService42 = builder41.build();
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken49 = builder48.build();
        boolean boolean50 = accessToken49.isRefreshTokenExpired();
        boolean boolean51 = accessToken49.isClientOnly();
        java.lang.String str52 = accessToken49.getClientId();
        java.lang.String str53 = authService42.extractErrorMessageForbidden(accessToken49);
        java.lang.String str54 = accessToken49.getUserId();
        java.lang.String str55 = accessToken49.getClientId();
        java.lang.String str56 = osiamGroupService24.extractErrorMessageForbidden(accessToken49);
        boolean boolean57 = accessToken49.isRefreshTokenExpired();
        java.lang.String str58 = accessToken49.getRefreshToken();
        java.util.Date date59 = accessToken49.getExpiresAt();
        boolean boolean60 = accessToken49.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user61 = osiamConnector19.getUser("org.osiam.client.exception.ForbiddenException: Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]", accessToken49);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(osiamConnector18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(osiamGroupService23);
        org.junit.Assert.assertNotNull(osiamGroupService24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(accessToken31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Insufficient scopes: []" + "'", str33, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget34);
        org.junit.Assert.assertNotNull(webTarget35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(authService42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Insufficient scopes: []" + "'", str53, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Insufficient scopes: []" + "'", str56, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test11125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11125");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getFilter();
        java.lang.String str13 = query9.getSortOrder();
        long long14 = query9.getStartIndex();
        java.lang.String str15 = query9.getAttributes();
        long long16 = query9.getStartIndex();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "descending" + "'", str13, "descending");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Authorization" + "'", str15, "Authorization");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
    }

    @Test
    public void test11126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11126");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.ascending("org.osiam.client.exception.ConflictException: org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.filter("org.osiam.client.exception.NoResultException: Insufficient scopes: []");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
    }

    @Test
    public void test11127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11127");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer7 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer6);
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer8 = scopeSetJsonDeserializer5.getDelegatee();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader9 = scopeSetJsonDeserializer5.getObjectIdReader();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader10 = scopeSetJsonDeserializer5.getObjectIdReader();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty12 = scopeSetJsonDeserializer5.findBackReference("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=GET, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=GET, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer7);
        org.junit.Assert.assertNull(wildcardJsonDeserializer8);
        org.junit.Assert.assertNull(objectIdReader9);
        org.junit.Assert.assertNull(objectIdReader10);
    }

    @Test
    public void test11128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11128");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.util.Date date12 = accessToken11.getExpiresAt();
        java.lang.String str13 = accessToken11.getUserName();
        boolean boolean14 = accessToken11.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            osiamUserService3.deleteUser("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET POST PUT PATCH DELETE], refreshTokenId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=refresh_token, userId=org.osiam.client.exception.ConflictException: PATCH, userName=]", accessToken11);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test11129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11129");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder1.setRefreshToken("Bearer ");
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.PATCH;
        boolean boolean14 = scope12.equals((java.lang.Object) 401);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder1.addScope(scope12);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setType("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]");
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.addScope(scope20);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException24 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean25 = scope22.equals((java.lang.Object) invalidAttributeException24);
        java.lang.String str26 = scope22.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder19.addScope(scope22);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("password");
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setClientId("org.osiam.client.exception.OsiamClientException: client_credentials");
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.addScope(scope38);
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException42 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean43 = scope40.equals((java.lang.Object) invalidAttributeException42);
        java.lang.String str44 = scope40.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder37.addScope(scope40);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder53 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.addScope(scope54);
        org.osiam.client.oauth.Scope scope56 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException58 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean59 = scope56.equals((java.lang.Object) invalidAttributeException58);
        java.lang.String str60 = scope56.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder53.addScope(scope56);
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder49.addScope(scope56);
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder49.setRefreshToken("");
        org.osiam.client.oauth.AccessToken accessToken65 = builder64.build();
        java.util.Date date66 = accessToken65.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder35.setRefreshTokenExpiresAt(date66);
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder29.setExpiresAt(date66);
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder17.setExpiresAt(date66);
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GET" + "'", str26, "GET");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "GET" + "'", str44, "GET");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "GET" + "'", str60, "GET");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(accessToken65);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test11130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11130");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientRedirectUri("password");
        org.osiam.client.OsiamConnector osiamConnector11 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder12 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder14.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.descending("hi!");
        org.osiam.client.query.Query query21 = queryBuilder20.build();
        java.lang.String str22 = query21.toString();
        java.lang.String str23 = query21.getSortOrder();
        java.lang.String str24 = query21.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder25 = new org.osiam.client.query.QueryBuilder(query21);
        java.lang.String str26 = query21.toString();
        java.lang.String str27 = query21.toString();
        org.osiam.client.query.QueryBuilder queryBuilder28 = new org.osiam.client.query.QueryBuilder(query21);
        org.osiam.client.query.Query query29 = queryBuilder28.build();
        org.osiam.client.query.QueryBuilder queryBuilder30 = new org.osiam.client.query.QueryBuilder(query29);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector11.createQueryBuilder(query29);
        org.osiam.client.OsiamGroupService.Builder builder33 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService34 = builder33.build();
        org.osiam.client.oauth.AccessToken.Builder builder36 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date37 = null;
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setRefreshTokenExpiresAt(date37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder36.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken41 = builder40.build();
        boolean boolean42 = accessToken41.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet43 = accessToken41.getScopes();
        java.lang.String str44 = osiamGroupService34.extractErrorMessageForbidden(accessToken41);
        java.lang.String str45 = accessToken41.getRefreshToken();
        java.lang.String str46 = accessToken41.getType();
        java.lang.String str47 = accessToken41.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList48 = osiamConnector11.getAllUsers(accessToken41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(osiamConnector11);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "descending" + "'", str23, "descending");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str26, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(osiamGroupService34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(accessToken41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(scopeSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Insufficient scopes: []" + "'", str44, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test11131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11131");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder4.setClientId("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientSecret("descending");
        org.osiam.client.OsiamConnector osiamConnector17 = builder12.build();
        org.osiam.client.OsiamConnector.Builder builder18 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder24 = builder22.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder26 = builder24.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder28 = builder26.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder30 = builder26.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector31 = builder26.build();
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector31.createQueryBuilder();
        org.osiam.client.query.Query query33 = queryBuilder32.build();
        org.osiam.client.oauth.AccessToken.Builder builder35 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date36 = null;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setRefreshTokenExpiresAt(date36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date40 = null;
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setRefreshTokenExpiresAt(date40);
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder39.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken44 = builder43.build();
        java.util.Date date45 = accessToken44.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder35.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder35.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder35.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder52 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setRefreshTokenExpiresAt(date53);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder52.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken57 = builder56.build();
        boolean boolean58 = accessToken57.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet59 = accessToken57.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder50.addScopes(scopeSet59);
        org.osiam.client.oauth.AccessToken accessToken61 = builder60.build();
        java.lang.String str62 = accessToken61.getClientId();
        boolean boolean63 = accessToken61.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult64 = osiamConnector17.searchUsers(query33, accessToken61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(osiamConnector31);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(query33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(accessToken44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(accessToken57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(scopeSet59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(accessToken61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test11132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11132");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        java.lang.String str13 = query9.getFilter();
        java.lang.String str14 = query9.getSortOrder();
        java.lang.String str15 = query9.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder(query9);
        long long17 = query9.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.QueryBuilder queryBuilder19 = new org.osiam.client.query.QueryBuilder(query9);
        java.lang.String str20 = query9.getFilter();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "descending" + "'", str14, "descending");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Authorization" + "'", str15, "Authorization");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test11133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11133");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        org.osiam.client.helper.ScopeSerializer scopeSerializer4 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean5 = scopeSerializer4.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer7 = scopeSerializer4.unwrappingSerializer(nameTransformer6);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException16 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean17 = scope14.equals((java.lang.Object) invalidAttributeException16);
        java.lang.String str18 = scope14.getValue();
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str21 = scope20.toString();
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str24 = scope23.getValue();
        java.lang.String str25 = scope23.getValue();
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        java.lang.String str30 = scope26.getValue();
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException36 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean37 = scope34.equals((java.lang.Object) invalidAttributeException36);
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.GET;
        boolean boolean42 = scope40.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray44 = new org.osiam.client.oauth.Scope[] { scope13, scope14, scope19, scope20, scope22, scope23, scope26, scope31, scope32, scope33, scope34, scope38, scope39, scope40, scope43 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet45 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet45, scopeArray44);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder10.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet45);
        boolean boolean48 = scopeSetJsonSerializer7.isEmpty(serializerProvider8, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet45);
        boolean boolean49 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet45);
        boolean boolean50 = scopeSerializer0.isUnwrappingSerializer();
        boolean boolean51 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer52 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer53 = scopeSerializer0.unwrappingSerializer(nameTransformer52);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass54 = scopeSerializer0.handledType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GET" + "'", str18, "GET");
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ME" + "'", str21, "ME");
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PATCH" + "'", str24, "PATCH");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PATCH" + "'", str25, "PATCH");
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GET" + "'", str30, "GET");
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertNotNull(scopeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer53);
        org.junit.Assert.assertNull(scopeSetClass54);
    }

    @Test
    public void test11134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11134");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader4 = scopeDeserializer0.getObjectIdReader();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty6 = scopeDeserializer0.findBackReference("org.osiam.client.exception.OsiamClientException: client_credentials");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'org.osiam.client.exception.OsiamClientException: client_credentials': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(objectIdReader4);
    }

    @Test
    public void test11135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11135");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        java.lang.String str13 = accessToken11.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet14 = accessToken11.getScopes();
        java.util.Date date15 = accessToken11.getExpiresAt();
        java.lang.String str16 = accessToken11.getType();
        java.util.Date date17 = accessToken11.getRefreshTokenExpiresAt();
        java.lang.String str18 = osiamGroupService2.extractErrorMessageForbidden(accessToken11);
        org.osiam.client.query.QueryBuilder queryBuilder19 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder21.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.descending("hi!");
        org.osiam.client.query.Query query28 = queryBuilder27.build();
        java.lang.String str29 = query28.toString();
        java.lang.String str30 = query28.getSortOrder();
        java.lang.String str31 = query28.getSortBy();
        java.lang.String str32 = query28.getFilter();
        java.lang.String str33 = query28.getSortOrder();
        java.lang.String str34 = query28.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder35 = new org.osiam.client.query.QueryBuilder(query28);
        long long36 = query28.getStartIndex();
        org.osiam.client.query.Query query37 = query28.nextPage();
        java.lang.String str38 = query28.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder39 = new org.osiam.client.query.QueryBuilder(query28);
        java.lang.String str40 = query28.getAttributes();
        java.lang.String str41 = query28.getFilter();
        org.osiam.client.query.Query query42 = query28.nextPage();
        org.osiam.client.query.Query query43 = query42.nextPage();
        java.lang.String str44 = query43.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder45 = new org.osiam.client.query.QueryBuilder(query43);
        java.lang.String str46 = query43.getSortBy();
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder48.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken53 = builder52.build();
        boolean boolean54 = accessToken53.isRefreshTokenExpired();
        boolean boolean55 = accessToken53.isClientOnly();
        java.lang.String str56 = accessToken53.getRefreshToken();
        java.lang.String str57 = accessToken53.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult58 = osiamGroupService2.searchResources(query43, accessToken53);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(scopeSet14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(query28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "descending" + "'", str30, "descending");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "descending" + "'", str33, "descending");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Authorization" + "'", str34, "Authorization");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(query37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Authorization" + "'", str40, "Authorization");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertNotNull(query43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Authorization" + "'", str44, "Authorization");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(accessToken53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
    }

    @Test
    public void test11136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11136");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer3 = scopeDeserializer0.getDelegatee();
        boolean boolean4 = scopeDeserializer0.isCachable();
        java.util.Collection<java.lang.Object> objCollection5 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.getEmptyValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader7 = scopeDeserializer0.getObjectIdReader();
        java.util.Collection<java.lang.Object> objCollection8 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Collection<java.lang.Object> objCollection9 = scopeDeserializer0.getKnownPropertyNames();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty11 = scopeDeserializer0.findBackReference("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=GET, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=GET, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=]': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(wildcardJsonDeserializer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(objCollection5);
        org.junit.Assert.assertNull(scopeSet6);
        org.junit.Assert.assertNull(objectIdReader7);
        org.junit.Assert.assertNull(objCollection8);
        org.junit.Assert.assertNull(objCollection9);
    }

    @Test
    public void test11137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11137");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector11 = builder10.build();
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken19);
        java.util.Date date21 = accessToken19.getExpiresAt();
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.descending("hi!");
        org.osiam.client.query.Query query31 = queryBuilder30.build();
        java.lang.String str32 = query31.toString();
        java.lang.String str33 = query31.getSortOrder();
        org.osiam.client.query.Query query34 = query31.nextPage();
        boolean boolean35 = accessToken19.equals((java.lang.Object) query31);
        java.lang.String str36 = accessToken19.getType();
        java.lang.String str37 = accessToken19.getType();
        boolean boolean38 = accessToken19.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector11.deleteUser("org.osiam.client.exception.InvalidAttributeException: authorization_code", accessToken19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(osiamConnector11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(query31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str32, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "descending" + "'", str33, "descending");
        org.junit.Assert.assertNotNull(query34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test11138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11138");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector9.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query18 = queryBuilder15.build();
        org.osiam.client.query.Query query19 = query18.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder20 = osiamConnector9.createQueryBuilder(query18);
        org.osiam.resources.scim.Group group22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        java.util.Date date34 = accessToken33.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder24.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder24.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder24.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder41 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date42 = null;
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setRefreshTokenExpiresAt(date42);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder41.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken46 = builder45.build();
        boolean boolean47 = accessToken46.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet48 = accessToken46.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder39.addScopes(scopeSet48);
        org.osiam.client.oauth.AccessToken accessToken50 = builder49.build();
        boolean boolean51 = accessToken50.isRefreshTokenExpired();
        java.lang.String str52 = accessToken50.getRefreshToken();
        java.lang.String str53 = accessToken50.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group54 = osiamConnector9.replaceGroup("org.osiam.client.exception.ForbiddenException: hi!", group22, accessToken50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(query18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(accessToken46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(scopeSet48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(accessToken50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test11139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11139");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserName("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.addScope(scope14);
        org.osiam.client.helper.ScopeSerializer scopeSerializer16 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean17 = scopeSerializer16.isUnwrappingSerializer();
        org.osiam.client.helper.ScopeSerializer scopeSerializer18 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        boolean boolean26 = accessToken25.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet27 = accessToken25.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator28 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider29 = null;
        scopeSerializer18.serialize(scopeSet27, jsonGenerator28, serializerProvider29);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator31 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider32 = null;
        scopeSerializer16.serialize(scopeSet27, jsonGenerator31, serializerProvider32);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder11.addScopes(scopeSet27);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setClientId("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        java.lang.Class<?> wildcardClass37 = builder34.getClass();
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(scopeSet27);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test11140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11140");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        org.osiam.client.helper.ScopeSerializer scopeSerializer15 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean16 = scopeSerializer15.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer17 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer18 = scopeSerializer15.unwrappingSerializer(nameTransformer17);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException27 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean28 = scope25.equals((java.lang.Object) invalidAttributeException27);
        java.lang.String str29 = scope25.getValue();
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str32 = scope31.toString();
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str35 = scope34.getValue();
        java.lang.String str36 = scope34.getValue();
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException39 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean40 = scope37.equals((java.lang.Object) invalidAttributeException39);
        java.lang.String str41 = scope37.getValue();
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException47 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean48 = scope45.equals((java.lang.Object) invalidAttributeException47);
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope51 = org.osiam.client.oauth.Scope.GET;
        boolean boolean53 = scope51.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray55 = new org.osiam.client.oauth.Scope[] { scope24, scope25, scope30, scope31, scope33, scope34, scope37, scope42, scope43, scope44, scope45, scope49, scope50, scope51, scope54 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet56 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet56, scopeArray55);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder21.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet56);
        boolean boolean59 = scopeSetJsonSerializer18.isEmpty(serializerProvider19, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet56);
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder13.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet56);
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder13.setClientId("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setUserId("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder66 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date67 = null;
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder66.setRefreshTokenExpiresAt(date67);
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder66.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken71 = builder70.build();
        java.util.Date date72 = accessToken71.getExpiresAt();
        java.lang.String str73 = accessToken71.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet74 = accessToken71.getScopes();
        java.util.Date date75 = accessToken71.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder62.setExpiresAt(date75);
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GET" + "'", str29, "GET");
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ME" + "'", str32, "ME");
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PATCH" + "'", str35, "PATCH");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PATCH" + "'", str36, "PATCH");
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "GET" + "'", str41, "GET");
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertNotNull(scope51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertNotNull(scopeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(accessToken71);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(scopeSet74);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test11141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11141");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider2 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer3 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        java.lang.String str12 = accessToken10.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet13 = accessToken10.getScopes();
        boolean boolean14 = scopeSerializer3.isEmpty(scopeSet13);
        boolean boolean15 = scopeSerializer0.isEmpty(serializerProvider2, scopeSet13);
        boolean boolean16 = scopeSerializer0.usesObjectId();
        org.osiam.client.AuthService.Builder builder18 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientId("ME");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService23 = builder22.build();
        org.osiam.client.OsiamGroupService.Builder builder25 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService26 = builder25.build();
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        boolean boolean34 = accessToken33.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet35 = accessToken33.getScopes();
        java.lang.String str36 = osiamGroupService26.extractErrorMessageForbidden(accessToken33);
        boolean boolean37 = accessToken33.isClientOnly();
        java.lang.String str38 = authService23.extractErrorMessageForbidden(accessToken33);
        org.osiam.client.oauth.AccessToken.Builder builder40 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date41 = null;
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setRefreshTokenExpiresAt(date41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder40.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken47 = builder44.build();
        java.lang.String str48 = accessToken47.toString();
        java.lang.String str49 = authService23.extractErrorMessageForbidden(accessToken47);
        org.osiam.client.oauth.AccessToken.Builder builder51 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date52 = null;
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setRefreshTokenExpiresAt(date52);
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder51.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken56 = builder55.build();
        java.util.Date date57 = accessToken56.getExpiresAt();
        java.lang.String str58 = accessToken56.getRefreshToken();
        java.lang.String str59 = accessToken56.getType();
        java.lang.String str60 = accessToken56.getClientId();
        java.lang.String str61 = accessToken56.getUserName();
        java.lang.String str62 = authService23.extractErrorMessageForbidden(accessToken56);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet63 = accessToken56.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator64 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider65 = null;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer typeSerializer66 = null;
        // The following exception was thrown during execution in test generation
        try {
            scopeSerializer0.serializeWithType(scopeSet63, jsonGenerator64, serializerProvider65, typeSerializer66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(scopeSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(authService23);
        org.junit.Assert.assertNotNull(osiamGroupService26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(scopeSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Insufficient scopes: []" + "'", str38, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str48, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Insufficient scopes: []" + "'", str49, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(accessToken56);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Insufficient scopes: []" + "'", str62, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scopeSet63);
    }

    @Test
    public void test11142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11142");
        org.osiam.client.exception.OsiamRequestException osiamRequestException3 = new org.osiam.client.exception.OsiamRequestException(401, "Query [attributes=Authorization, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=10]");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException4 = new org.osiam.client.exception.ConnectionInitializationException("org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", (java.lang.Throwable) osiamRequestException3);
        int int5 = osiamRequestException3.getHttpStatusCode();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 401 + "'", int5 == 401);
    }

    @Test
    public void test11143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11143");
        org.osiam.client.exception.ConflictException conflictException1 = new org.osiam.client.exception.ConflictException("org.osiam.client.exception.ConnectionInitializationException: descending");
        java.lang.Throwable throwable2 = null;
        // The following exception was thrown during execution in test generation
        try {
            conflictException1.addSuppressed(throwable2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11144");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setEndpoint("org.osiam.client.exception.OsiamRequestException: hi!");
        org.osiam.client.OsiamConnector osiamConnector19 = builder18.build();
        org.osiam.client.AuthService.Builder builder21 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientId("ME");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder29 = builder27.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder31 = builder27.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService32 = builder31.build();
        org.osiam.client.AuthService.Builder builder34 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder36 = builder34.setClientId("ME");
        org.osiam.client.AuthService.Builder builder38 = builder36.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder40 = builder38.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder42 = builder40.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService43 = builder42.build();
        org.osiam.client.oauth.AccessToken.Builder builder45 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setRefreshTokenExpiresAt(date46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder45.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken50 = builder49.build();
        boolean boolean51 = accessToken50.isRefreshTokenExpired();
        java.lang.String str52 = accessToken50.getUserId();
        java.lang.String str53 = accessToken50.getToken();
        java.lang.String str54 = authService43.extractErrorMessageForbidden(accessToken50);
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str56 = scope55.getValue();
        java.lang.String str57 = scope55.toString();
        org.osiam.client.oauth.Scope scope58 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray59 = new org.osiam.client.oauth.Scope[] { scope55, scope58 };
        java.net.URI uRI60 = authService43.getAuthorizationUri(scopeArray59);
        java.net.URI uRI61 = authService32.getAuthorizationUri(scopeArray59);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken62 = osiamConnector19.retrieveAccessToken(scopeArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(authService32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(authService43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(accessToken50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Bearer " + "'", str53, "Bearer ");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Insufficient scopes: []" + "'", str54, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PATCH" + "'", str56, "PATCH");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PATCH" + "'", str57, "PATCH");
        org.junit.Assert.assertNotNull(scope58);
        org.junit.Assert.assertNotNull(scopeArray59);
        org.junit.Assert.assertNotNull(uRI60);
        org.junit.Assert.assertNotNull(uRI61);
    }

    @Test
    public void test11145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11145");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet62 = accessToken60.getScopes();
        boolean boolean63 = scopeSerializer0.isEmpty(serializerProvider53, scopeSet62);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass64 = scopeSerializer0.handledType();
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper65 = null;
        com.fasterxml.jackson.databind.JavaType javaType66 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper65, javaType66);
        boolean boolean68 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer69 = scopeSerializer0.getDelegatee();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass70 = scopeSerializer0.handledType();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass71 = scopeSerializer0.handledType();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(scopeSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(scopeSetClass64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(wildcardJsonSerializer69);
        org.junit.Assert.assertNull(scopeSetClass70);
        org.junit.Assert.assertNull(scopeSetClass71);
    }

    @Test
    public void test11146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11146");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken13 = builder10.build();
        java.lang.String str14 = accessToken13.toString();
        java.lang.String str15 = accessToken13.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user16 = osiamUserService4.getCurrentUser(accessToken13);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str14, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test11147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11147");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.getUserName();
        java.lang.String str15 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.client.OsiamGroupService.Builder builder17 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService18 = builder17.build();
        org.osiam.client.OsiamGroupService osiamGroupService19 = builder17.build();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken26);
        java.lang.String str28 = osiamGroupService19.extractErrorMessageForbidden(accessToken26);
        java.util.Date date29 = accessToken26.getExpiresAt();
        boolean boolean30 = accessToken26.isRefreshTokenExpired();
        java.lang.String str31 = accessToken26.getUserId();
        java.lang.String str32 = accessToken26.getType();
        java.lang.String str33 = osiamGroupService2.extractErrorMessageForbidden(accessToken26);
        org.osiam.client.oauth.AccessToken.Builder builder36 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date37 = null;
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setRefreshTokenExpiresAt(date37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder36.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken41 = builder40.build();
        boolean boolean42 = accessToken41.isRefreshTokenExpired();
        boolean boolean43 = accessToken41.isClientOnly();
        java.lang.String str44 = accessToken41.getUserId();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken41);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet46 = accessToken41.getScopes();
        org.osiam.client.query.QueryBuilder queryBuilder47 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder47.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder49.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder53 = queryBuilder49.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder55 = queryBuilder53.descending("hi!");
        org.osiam.client.query.Query query56 = queryBuilder55.build();
        org.osiam.client.query.Query query57 = queryBuilder55.build();
        org.osiam.client.query.QueryBuilder queryBuilder59 = queryBuilder55.filter("org.osiam.client.exception.NoResultException: authorization_code");
        org.osiam.client.query.Query query60 = queryBuilder55.build();
        org.osiam.client.query.QueryBuilder queryBuilder62 = queryBuilder55.attributes("Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]");
        boolean boolean63 = accessToken41.equals((java.lang.Object) queryBuilder62);
        java.lang.String str64 = accessToken41.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group65 = osiamGroupService2.getResource("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.NoResultException: refresh_token", accessToken41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService18);
        org.junit.Assert.assertNotNull(osiamGroupService19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Insufficient scopes: []" + "'", str28, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Insufficient scopes: []" + "'", str33, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(accessToken41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(scopeSet46);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(queryBuilder53);
        org.junit.Assert.assertNotNull(queryBuilder55);
        org.junit.Assert.assertNotNull(query56);
        org.junit.Assert.assertNotNull(query57);
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(query60);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
    }

    @Test
    public void test11148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11148");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector17 = builder14.build();
        org.osiam.client.OsiamConnector.Builder builder19 = builder14.setClientRedirectUri("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: descending");
        org.osiam.client.OsiamConnector osiamConnector20 = builder14.build();
        org.osiam.resources.scim.UpdateGroup updateGroup22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        java.util.Date date34 = accessToken33.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder24.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder24.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder24.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder41 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date42 = null;
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setRefreshTokenExpiresAt(date42);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder41.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken46 = builder45.build();
        boolean boolean47 = accessToken46.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet48 = accessToken46.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder39.addScopes(scopeSet48);
        org.osiam.client.oauth.AccessToken accessToken50 = builder39.build();
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder39.setClientId("org.osiam.client.exception.ConflictException: ");
        org.osiam.client.oauth.AccessToken accessToken53 = builder39.build();
        boolean boolean54 = accessToken53.isExpired();
        boolean boolean55 = accessToken53.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group56 = osiamConnector20.updateGroup("PUT", updateGroup22, accessToken53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(osiamConnector20);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(accessToken46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(scopeSet48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(accessToken50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(accessToken53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test11149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11149");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
    }

    @Test
    public void test11150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11150");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        boolean boolean18 = accessToken17.isRefreshTokenExpired();
        java.lang.String str19 = accessToken17.getUserId();
        java.lang.String str20 = accessToken17.getToken();
        java.lang.String str21 = authService10.extractErrorMessageForbidden(accessToken17);
        org.osiam.client.OsiamGroupService.Builder builder23 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService24 = builder23.build();
        org.osiam.client.OsiamGroupService osiamGroupService25 = builder23.build();
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken32);
        java.lang.String str34 = osiamGroupService25.extractErrorMessageForbidden(accessToken32);
        javax.ws.rs.client.WebTarget webTarget35 = osiamGroupService25.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget36 = osiamGroupService25.targetEndpoint;
        org.osiam.client.AuthService.Builder builder38 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder40 = builder38.setClientId("ME");
        org.osiam.client.AuthService.Builder builder42 = builder40.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService43 = builder42.build();
        org.osiam.client.OsiamGroupService.Builder builder45 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService46 = builder45.build();
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder48.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken53 = builder52.build();
        boolean boolean54 = accessToken53.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet55 = accessToken53.getScopes();
        java.lang.String str56 = osiamGroupService46.extractErrorMessageForbidden(accessToken53);
        boolean boolean57 = accessToken53.isClientOnly();
        java.lang.String str58 = authService43.extractErrorMessageForbidden(accessToken53);
        java.lang.String str59 = accessToken53.getUserId();
        java.lang.String str60 = accessToken53.getToken();
        java.lang.String str61 = osiamGroupService25.extractErrorMessageForbidden(accessToken53);
        java.lang.String str62 = authService10.extractErrorMessageForbidden(accessToken53);
        org.osiam.client.oauth.AccessToken.Builder builder64 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date65 = null;
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder64.setRefreshTokenExpiresAt(date65);
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder64.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken69 = builder68.build();
        boolean boolean70 = accessToken69.isRefreshTokenExpired();
        boolean boolean71 = accessToken69.isClientOnly();
        java.lang.String str72 = accessToken69.getClientId();
        java.lang.String str73 = accessToken69.getClientId();
        java.lang.String str74 = accessToken69.getToken();
        java.lang.String str75 = accessToken69.toString();
        java.lang.String str76 = accessToken69.getType();
        boolean boolean77 = accessToken69.isClientOnly();
        java.lang.String str78 = authService10.extractErrorMessageForbidden(accessToken69);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet79 = accessToken69.getScopes();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Bearer " + "'", str20, "Bearer ");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService24);
        org.junit.Assert.assertNotNull(osiamGroupService25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Insufficient scopes: []" + "'", str34, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget35);
        org.junit.Assert.assertNotNull(webTarget36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(authService43);
        org.junit.Assert.assertNotNull(osiamGroupService46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(accessToken53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(scopeSet55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Insufficient scopes: []" + "'", str56, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Insufficient scopes: []" + "'", str58, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Bearer " + "'", str60, "Bearer ");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Insufficient scopes: []" + "'", str61, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Insufficient scopes: []" + "'", str62, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(accessToken69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Bearer " + "'", str74, "Bearer ");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str75, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Insufficient scopes: []" + "'", str78, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scopeSet79);
    }

    @Test
    public void test11151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11151");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("ME");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getUserName();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.toString();
        java.lang.String str14 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        java.lang.String str22 = accessToken21.toString();
        java.lang.String str23 = accessToken21.getType();
        boolean boolean24 = accessToken21.isExpired();
        java.util.Date date25 = accessToken21.getExpiresAt();
        boolean boolean26 = accessToken21.isRefreshTokenExpired();
        java.lang.String str27 = accessToken21.getRefreshToken();
        java.lang.String str28 = osiamGroupService2.extractErrorMessageForbidden(accessToken21);
        org.osiam.resources.scim.Group group30 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        boolean boolean38 = accessToken37.isRefreshTokenExpired();
        java.lang.String str39 = accessToken37.getUserId();
        java.lang.String str40 = accessToken37.getClientId();
        java.lang.String str41 = accessToken37.getUserId();
        java.lang.String str42 = accessToken37.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group43 = osiamGroupService2.updateResource("Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]", group30, accessToken37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str13, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str22, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Insufficient scopes: []" + "'", str28, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test11152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11152");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        java.lang.String str13 = accessToken11.getUserId();
        java.lang.String str14 = accessToken11.getToken();
        boolean boolean15 = accessToken11.isExpired();
        java.lang.String str16 = accessToken11.getClientId();
        java.lang.String str17 = accessToken11.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken11.getScopes();
        java.lang.String str19 = accessToken11.getClientId();
        boolean boolean20 = accessToken11.isClientOnly();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet21 = accessToken11.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user22 = osiamUserService3.getUser("org.osiam.client.exception.ConflictException: org.osiam.client.exception.OsiamClientException: descending", accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Bearer " + "'", str14, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(scopeSet21);
    }

    @Test
    public void test11153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11153");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        java.util.Date date13 = accessToken10.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean16 = accessToken10.equals((java.lang.Object) scope15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        boolean boolean24 = accessToken23.isRefreshTokenExpired();
        boolean boolean25 = accessToken23.isClientOnly();
        java.lang.String str26 = accessToken23.getClientId();
        boolean boolean27 = accessToken23.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.addScope(scope30);
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException34 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean35 = scope32.equals((java.lang.Object) invalidAttributeException34);
        java.lang.String str36 = scope32.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder29.addScope(scope32);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setUserName("Authorization");
        boolean boolean44 = accessToken23.equals((java.lang.Object) builder41);
        org.osiam.client.oauth.AccessToken.Builder builder46 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.addScope(scope47);
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException51 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean52 = scope49.equals((java.lang.Object) invalidAttributeException51);
        java.lang.String str53 = scope49.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder46.addScope(scope49);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope61 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder58.addScope(scope61);
        org.osiam.client.oauth.GrantType grantType63 = org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS;
        java.lang.String str64 = grantType63.getUrlParam();
        boolean boolean65 = scope61.equals((java.lang.Object) grantType63);
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder41.addScope(scope61);
        boolean boolean67 = scope15.equals((java.lang.Object) builder66);
        java.lang.String str68 = scope15.toString();
        java.lang.String str69 = scope15.getValue();
        org.osiam.client.exception.NoResultException noResultException71 = new org.osiam.client.exception.NoResultException("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        java.lang.Throwable[] throwableArray72 = noResultException71.getSuppressed();
        boolean boolean73 = scope15.equals((java.lang.Object) throwableArray72);
        java.lang.Object obj74 = null;
        boolean boolean75 = scope15.equals(obj74);
        java.lang.String str76 = scope15.toString();
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GET" + "'", str36, "GET");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "GET" + "'", str53, "GET");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(scope61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + grantType63 + "' != '" + org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS + "'", grantType63.equals(org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "client_credentials" + "'", str64, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ADMIN" + "'", str68, "ADMIN");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ADMIN" + "'", str69, "ADMIN");
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "ADMIN" + "'", str76, "ADMIN");
    }

    @Test
    public void test11154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11154");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.OsiamRequestException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.resources.scim.Group group3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.addScope(scope6);
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException10 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean11 = scope8.equals((java.lang.Object) invalidAttributeException10);
        java.lang.String str12 = scope8.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder5.addScope(scope8);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setUserName("DELETE");
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        boolean boolean31 = accessToken30.isRefreshTokenExpired();
        boolean boolean32 = accessToken30.isClientOnly();
        java.lang.String str33 = accessToken30.getClientId();
        boolean boolean34 = accessToken30.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder36 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.addScope(scope37);
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException41 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean42 = scope39.equals((java.lang.Object) invalidAttributeException41);
        java.lang.String str43 = scope39.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder36.addScope(scope39);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setUserName("Authorization");
        boolean boolean51 = accessToken30.equals((java.lang.Object) builder48);
        org.osiam.client.oauth.AccessToken.Builder builder53 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.addScope(scope54);
        org.osiam.client.oauth.Scope scope56 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException58 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean59 = scope56.equals((java.lang.Object) invalidAttributeException58);
        java.lang.String str60 = scope56.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder53.addScope(scope56);
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder61.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder63.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder65.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope68 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder65.addScope(scope68);
        org.osiam.client.oauth.GrantType grantType70 = org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS;
        java.lang.String str71 = grantType70.getUrlParam();
        boolean boolean72 = scope68.equals((java.lang.Object) grantType70);
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder48.addScope(scope68);
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder21.addScope(scope68);
        org.osiam.client.oauth.AccessToken accessToken75 = builder74.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group76 = osiamGroupService2.createGroup(group3, accessToken75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GET" + "'", str12, "GET");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "GET" + "'", str43, "GET");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "GET" + "'", str60, "GET");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(scope68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + grantType70 + "' != '" + org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS + "'", grantType70.equals(org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "client_credentials" + "'", str71, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(accessToken75);
    }

    @Test
    public void test11155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11155");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getClientId();
        boolean boolean17 = accessToken13.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.addScope(scope20);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException24 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean25 = scope22.equals((java.lang.Object) invalidAttributeException24);
        java.lang.String str26 = scope22.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder19.addScope(scope22);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setUserName("Authorization");
        boolean boolean34 = accessToken13.equals((java.lang.Object) builder31);
        java.lang.String str35 = osiamGroupService6.extractErrorMessageForbidden(accessToken13);
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken42 = builder41.build();
        boolean boolean43 = accessToken42.isRefreshTokenExpired();
        java.lang.String str44 = accessToken42.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet45 = accessToken42.getScopes();
        java.util.Date date46 = accessToken42.getExpiresAt();
        java.lang.String str47 = osiamGroupService6.extractErrorMessageForbidden(accessToken42);
        javax.ws.rs.core.Response.StatusType statusType49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder51 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date52 = null;
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setRefreshTokenExpiresAt(date52);
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder51.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken56 = builder55.build();
        java.util.Date date57 = accessToken56.getExpiresAt();
        java.lang.String str58 = accessToken56.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet59 = accessToken56.getScopes();
        java.util.Date date60 = accessToken56.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService6.checkAndHandleResponse("org.osiam.client.exception.ConflictException: org.osiam.client.exception.ForbiddenException: hi!", statusType49, accessToken56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GET" + "'", str26, "GET");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(scopeSet45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Insufficient scopes: []" + "'", str47, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(accessToken56);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(scopeSet59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11156");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.toString();
        java.lang.String str23 = query20.toString();
        int int24 = query20.getCount();
        long long25 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder26 = osiamConnector7.createQueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        org.osiam.client.query.Query query37 = queryBuilder35.build();
        java.lang.String str38 = query37.getSortBy();
        java.lang.String str39 = query37.getFilter();
        int int40 = query37.getCount();
        long long41 = query37.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder42 = osiamConnector7.createQueryBuilder(query37);
        org.osiam.client.query.QueryBuilder queryBuilder43 = new org.osiam.client.query.QueryBuilder(query37);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertNotNull(query37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder42);
    }

    @Test
    public void test11157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11157");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        java.lang.String str7 = accessToken6.toString();
        java.lang.String str8 = accessToken6.getClientId();
        org.osiam.client.OsiamConnector.Builder builder9 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder11 = builder9.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder13 = builder11.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder15 = builder13.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector16 = builder15.build();
        org.osiam.client.query.QueryBuilder queryBuilder17 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder19.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.descending("hi!");
        org.osiam.client.query.Query query26 = queryBuilder25.build();
        java.lang.String str27 = query26.toString();
        java.lang.String str28 = query26.toString();
        java.lang.String str29 = query26.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder30 = osiamConnector16.createQueryBuilder(query26);
        org.osiam.client.query.QueryBuilder queryBuilder31 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder33.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder37.descending("hi!");
        org.osiam.client.query.Query query40 = queryBuilder39.build();
        org.osiam.client.query.QueryBuilder queryBuilder41 = osiamConnector16.createQueryBuilder(query40);
        boolean boolean42 = accessToken6.equals((java.lang.Object) queryBuilder41);
        org.osiam.client.query.QueryBuilder queryBuilder44 = queryBuilder41.filter("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamRequestException: hi!");
        org.osiam.client.query.QueryBuilder queryBuilder46 = queryBuilder44.filter("org.osiam.client.exception.ForbiddenException: Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str7, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(osiamConnector16);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str28, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(query40);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(queryBuilder46);
    }

    @Test
    public void test11158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11158");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.ascending("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.attributes("Query [attributes=Authorization, filter=null, sortBy=ME, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
    }

    @Test
    public void test11159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11159");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder2.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = osiamConnector5.createQueryBuilder();
        org.osiam.resources.scim.Group group8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        java.util.Date date16 = accessToken15.getExpiresAt();
        java.lang.String str17 = accessToken15.getRefreshToken();
        java.lang.String str18 = accessToken15.getType();
        java.lang.String str19 = accessToken15.getClientId();
        java.lang.String str20 = accessToken15.getUserName();
        boolean boolean21 = accessToken15.isClientOnly();
        boolean boolean22 = accessToken15.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group23 = osiamConnector5.replaceGroup("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", group8, accessToken15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test11160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11160");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        java.lang.String str13 = query9.getFilter();
        java.lang.String str14 = query9.toString();
        java.lang.String str15 = query9.getSortOrder();
        java.lang.String str16 = query9.getSortBy();
        java.lang.String str17 = query9.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder(query9);
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "descending" + "'", str15, "descending");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test11161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11161");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        java.lang.String str7 = accessToken6.toString();
        java.lang.String str8 = accessToken6.getRefreshToken();
        boolean boolean9 = accessToken6.isRefreshTokenExpired();
        java.util.Date date10 = accessToken6.getRefreshTokenExpiresAt();
        java.lang.String str11 = accessToken6.getUserId();
        java.lang.String str12 = accessToken6.getRefreshToken();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str7, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test11162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11162");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector.Builder builder12 = builder2.setEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setResourceServerEndpoint("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("org.osiam.client.exception.OsiamRequestException: hi!");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientSecret("org.osiam.client.exception.OsiamRequestException: descending");
        org.osiam.client.OsiamConnector.Builder builder22 = builder18.setAuthServerEndpoint("org.osiam.client.exception.OsiamClientException: descending");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test11163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11163");
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.AbstractOsiamService.Builder<org.osiam.client.AbstractOsiamService<org.osiam.resources.scim.Group>> groupAbstractOsiamServiceBuilder1 = new org.osiam.client.AbstractOsiamService.Builder<org.osiam.client.AbstractOsiamService<org.osiam.resources.scim.Group>>("org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11164");
        org.osiam.client.exception.OsiamRequestException osiamRequestException3 = new org.osiam.client.exception.OsiamRequestException((int) (byte) 1, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException4 = new org.osiam.client.exception.ConnectionInitializationException("org.osiam.client.exception.OsiamRequestException: hi!", (java.lang.Throwable) osiamRequestException3);
        org.osiam.client.exception.NoResultException noResultException6 = new org.osiam.client.exception.NoResultException("authorization_code");
        osiamRequestException3.addSuppressed((java.lang.Throwable) noResultException6);
        int int8 = osiamRequestException3.getHttpStatusCode();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test11165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11165");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.descending("hi!");
        org.osiam.client.query.Query query31 = queryBuilder30.build();
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector7.createQueryBuilder(query31);
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.attributes("ME");
        org.osiam.client.query.Query query35 = queryBuilder32.build();
        org.osiam.client.query.Query query36 = queryBuilder32.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(query31);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(query35);
        org.junit.Assert.assertNotNull(query36);
    }

    @Test
    public void test11166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11166");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass4 = scopeSetJsonSerializer3.handledType();
        boolean boolean5 = scopeSetJsonSerializer3.usesObjectId();
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer6 = scopeSetJsonSerializer3.getDelegatee();
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper7 = null;
        com.fasterxml.jackson.databind.JavaType javaType8 = null;
        scopeSetJsonSerializer3.acceptJsonFormatVisitor(jsonFormatVisitorWrapper7, javaType8);
        boolean boolean10 = scopeSetJsonSerializer3.isUnwrappingSerializer();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertNull(scopeSetClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardJsonSerializer6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test11167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11167");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        java.lang.String str13 = query9.getFilter();
        java.lang.String str14 = query9.getSortOrder();
        java.lang.String str15 = query9.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder(query9);
        long long17 = query9.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.filter("org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.startIndex((long) 100);
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder20.ascending("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "descending" + "'", str14, "descending");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Authorization" + "'", str15, "Authorization");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
    }

    @Test
    public void test11168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11168");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector5 = builder0.build();
        org.osiam.resources.scim.User user7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        java.util.Date date15 = accessToken14.getExpiresAt();
        java.lang.String str16 = accessToken14.getUserName();
        java.lang.String str17 = accessToken14.getType();
        java.lang.String str18 = accessToken14.getClientId();
        java.lang.String str19 = accessToken14.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user20 = osiamConnector5.replaceUser("Insufficient scopes: [null, PATCH, GET, ME, ADMIN, GET POST PUT PATCH DELETE, PUT]", user7, accessToken14);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test11169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11169");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.ascending("hi!");
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder4.descending("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder4.count((int) (short) 0);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder4.filter("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder4.descending("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.filter("org.osiam.client.exception.ForbiddenException: Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
    }

    @Test
    public void test11170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11170");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setAuthServerEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setResourceServerEndpoint("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector15 = builder10.build();
        org.osiam.client.OsiamConnector.Builder builder17 = builder10.setClientId("GET");
        org.osiam.client.OsiamConnector.Builder builder19 = builder10.setResourceServerEndpoint("org.osiam.client.exception.InvalidAttributeException: Insufficient scopes: [null, PATCH, GET, ME, ADMIN, GET POST PUT PATCH DELETE, PUT]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test11171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11171");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("PUT");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("Authorization");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test11172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11172");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.resources.scim.Group group5 = null;
        org.osiam.client.AuthService.Builder builder7 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.AuthService.Builder builder12 = builder9.setClientRedirectUri("PATCH");
        org.osiam.client.AuthService authService13 = builder12.build();
        org.osiam.client.OsiamGroupService.Builder builder15 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService16 = builder15.build();
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        java.util.Date date24 = accessToken23.getExpiresAt();
        java.lang.String str25 = accessToken23.getRefreshToken();
        boolean boolean26 = accessToken23.isClientOnly();
        java.lang.String str27 = osiamGroupService16.extractErrorMessageForbidden(accessToken23);
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date30 = null;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setRefreshTokenExpiresAt(date30);
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken34 = builder33.build();
        boolean boolean35 = accessToken34.isRefreshTokenExpired();
        java.lang.String str36 = accessToken34.getUserId();
        java.lang.String str37 = accessToken34.getToken();
        boolean boolean38 = accessToken34.isExpired();
        java.lang.String str39 = accessToken34.getClientId();
        java.lang.String str40 = accessToken34.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet41 = accessToken34.getScopes();
        java.lang.String str42 = osiamGroupService16.extractErrorMessageForbidden(accessToken34);
        java.util.Date date43 = accessToken34.getExpiresAt();
        java.lang.String str44 = authService13.extractErrorMessageForbidden(accessToken34);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group45 = osiamGroupService2.updateResource("org.osiam.client.exception.OsiamClientException: ME", group5, accessToken34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(authService13);
        org.junit.Assert.assertNotNull(osiamGroupService16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Insufficient scopes: []" + "'", str27, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(accessToken34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Bearer " + "'", str37, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(scopeSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Insufficient scopes: []" + "'", str42, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Insufficient scopes: []" + "'", str44, "Insufficient scopes: []");
    }

    @Test
    public void test11173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11173");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder12.setClientRedirectUri("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector23 = builder22.build();
        org.osiam.client.query.QueryBuilder queryBuilder24 = osiamConnector23.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder25 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.descending("hi!");
        org.osiam.client.query.Query query34 = queryBuilder33.build();
        java.lang.String str35 = query34.toString();
        java.lang.String str36 = query34.getSortOrder();
        java.lang.String str37 = query34.getSortBy();
        long long38 = query34.getStartIndex();
        org.osiam.client.query.Query query39 = query34.nextPage();
        org.osiam.client.query.Query query40 = query39.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder41 = new org.osiam.client.query.QueryBuilder(query39);
        org.osiam.client.query.Query query42 = query39.previousPage();
        org.osiam.client.query.QueryBuilder queryBuilder43 = osiamConnector23.createQueryBuilder(query42);
        org.osiam.resources.scim.User user45 = null;
        org.osiam.client.AuthService.Builder builder47 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder49 = builder47.setClientId("ME");
        org.osiam.client.AuthService.Builder builder51 = builder49.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService52 = builder51.build();
        org.osiam.client.oauth.AccessToken.Builder builder54 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date55 = null;
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setRefreshTokenExpiresAt(date55);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder54.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken59 = builder58.build();
        boolean boolean60 = accessToken59.isRefreshTokenExpired();
        boolean boolean61 = accessToken59.isClientOnly();
        java.lang.String str62 = accessToken59.getClientId();
        java.lang.String str63 = authService52.extractErrorMessageForbidden(accessToken59);
        org.osiam.client.oauth.AccessToken.Builder builder65 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date66 = null;
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder65.setRefreshTokenExpiresAt(date66);
        org.osiam.client.oauth.AccessToken.Builder builder69 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date70 = null;
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder69.setRefreshTokenExpiresAt(date70);
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder69.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken74 = builder73.build();
        java.util.Date date75 = accessToken74.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder65.setRefreshTokenExpiresAt(date75);
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder65.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder80 = builder65.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder82 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date83 = null;
        org.osiam.client.oauth.AccessToken.Builder builder84 = builder82.setRefreshTokenExpiresAt(date83);
        org.osiam.client.oauth.AccessToken.Builder builder86 = builder82.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken87 = builder86.build();
        boolean boolean88 = accessToken87.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet89 = accessToken87.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder90 = builder80.addScopes(scopeSet89);
        org.osiam.client.oauth.AccessToken accessToken91 = builder90.build();
        boolean boolean92 = accessToken91.isRefreshTokenExpired();
        java.lang.String str93 = accessToken91.getType();
        java.lang.String str94 = authService52.extractErrorMessageForbidden(accessToken91);
        java.lang.String str95 = accessToken91.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user96 = osiamConnector23.replaceUser("POST", user45, accessToken91);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(osiamConnector23);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(query34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str35, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "descending" + "'", str36, "descending");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(query39);
        org.junit.Assert.assertNotNull(query40);
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(authService52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(accessToken59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Insufficient scopes: []" + "'", str63, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(accessToken74);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(accessToken87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(scopeSet89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(accessToken91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "descending" + "'", str93, "descending");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Insufficient scopes: []" + "'", str94, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Bearer " + "'", str95, "Bearer ");
    }

    @Test
    public void test11174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11174");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.getUserName();
        java.lang.String str15 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.addScope(scope20);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException24 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean25 = scope22.equals((java.lang.Object) invalidAttributeException24);
        java.lang.String str26 = scope22.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder19.addScope(scope22);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setUserId("");
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str33 = scope32.toString();
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder31.addScope(scope32);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setType("Insufficient scopes: []");
        org.osiam.client.oauth.Scope scope38 = new org.osiam.client.oauth.Scope("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder36.addScope(scope38);
        org.osiam.client.oauth.AccessToken accessToken40 = builder36.build();
        java.lang.String str41 = osiamGroupService2.extractErrorMessageForbidden(accessToken40);
        org.osiam.resources.scim.UpdateGroup updateGroup43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder45 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.addScope(scope46);
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException50 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean51 = scope48.equals((java.lang.Object) invalidAttributeException50);
        java.lang.String str52 = scope48.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder45.addScope(scope48);
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder59.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken64 = builder63.build();
        boolean boolean65 = accessToken64.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group66 = osiamGroupService2.updateGroup("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", updateGroup43, accessToken64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget16);
        org.junit.Assert.assertNotNull(webTarget17);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GET" + "'", str26, "GET");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PUT" + "'", str33, "PUT");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(accessToken40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: [Authorization, GET, GET POST PUT PATCH DELETE, PUT]" + "'", str41, "Insufficient scopes: [Authorization, GET, GET POST PUT PATCH DELETE, PUT]");
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "GET" + "'", str52, "GET");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(accessToken64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test11175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11175");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder11 = builder7.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService12 = builder11.build();
        org.osiam.client.AuthService.Builder builder14 = builder11.setClientSecret("GET POST PUT PATCH DELETE");
        org.osiam.client.AuthService.Builder builder16 = builder14.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder18 = builder16.setClientSecret("ME");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(authService12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test11176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11176");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector osiamConnector11 = builder2.build();
        org.osiam.client.query.QueryBuilder queryBuilder12 = osiamConnector11.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = osiamConnector11.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken22 = builder19.build();
        java.util.Date date23 = accessToken22.getExpiresAt();
        java.lang.String str24 = accessToken22.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList25 = osiamConnector11.getAllGroups(accessToken22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(osiamConnector11);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str24, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
    }

    @Test
    public void test11177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11177");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientId("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setEndpoint("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector osiamConnector19 = builder18.build();
        org.osiam.resources.scim.UpdateUser updateUser21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        java.lang.String str29 = accessToken28.toString();
        java.lang.String str30 = accessToken28.getType();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken28);
        java.lang.String str32 = accessToken28.getClientId();
        boolean boolean33 = accessToken28.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user34 = osiamConnector19.updateUser("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConnectionInitializationException: Bearer ", updateUser21, accessToken28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str29, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test11178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11178");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("refresh_token");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        boolean boolean12 = accessToken9.isExpired();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.getToken();
        java.lang.String str15 = accessToken9.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser16 = osiamUserService2.getCurrentUserBasic(accessToken9);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Bearer " + "'", str14, "Bearer ");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test11179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11179");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        java.lang.String str13 = query9.getSortBy();
        java.lang.String str14 = query9.getFilter();
        java.lang.String str15 = query9.getSortBy();
        java.lang.String str16 = query9.toString();
        org.osiam.client.query.Query query17 = query9.nextPage();
        java.lang.String str18 = query17.getAttributes();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str16, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Authorization" + "'", str18, "Authorization");
    }

    @Test
    public void test11180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11180");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.Query query7 = queryBuilder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder(query7);
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(query7);
    }

    @Test
    public void test11181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11181");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader4 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer5 = scopeDeserializer0.getDelegatee();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.getNullValue();
        java.util.Collection<java.lang.Object> objCollection7 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Collection<java.lang.Object> objCollection8 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer9 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer10 = scopeDeserializer0.unwrappingDeserializer(nameTransformer9);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(objectIdReader4);
        org.junit.Assert.assertNull(wildcardJsonDeserializer5);
        org.junit.Assert.assertNull(scopeSet6);
        org.junit.Assert.assertNull(objCollection7);
        org.junit.Assert.assertNull(objCollection8);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer10);
    }

    @Test
    public void test11182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11182");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException1 = new org.osiam.client.exception.ConnectionInitializationException("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
    }

    @Test
    public void test11183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11183");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientRedirectUri("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder18 = builder14.setClientSecret("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test11184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11184");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.OsiamClientException: client_credentials");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        java.lang.String str12 = accessToken10.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder13 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.descending("hi!");
        org.osiam.client.query.Query query22 = queryBuilder21.build();
        java.lang.String str23 = query22.toString();
        java.lang.String str24 = query22.getSortOrder();
        java.lang.String str25 = query22.getSortBy();
        java.lang.String str26 = query22.getFilter();
        java.lang.String str27 = query22.toString();
        boolean boolean28 = accessToken10.equals((java.lang.Object) query22);
        java.util.Date date29 = accessToken10.getExpiresAt();
        java.lang.String str30 = accessToken10.getUserName();
        java.lang.String str31 = accessToken10.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user32 = osiamUserService2.createUser(user3, accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(query22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "descending" + "'", str24, "descending");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str31, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test11185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11185");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer3 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader4 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.core.JsonParser jsonParser5 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet7 = scopeDeserializer0.deserialize(jsonParser5, deserializationContext6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(wildcardJsonDeserializer3);
        org.junit.Assert.assertNull(objectIdReader4);
    }

    @Test
    public void test11186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11186");
        org.osiam.client.oauth.Scope scope1 = new org.osiam.client.oauth.Scope("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.osiam.client.OsiamConnector.Builder builder2 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder10 = builder6.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.client.query.QueryBuilder queryBuilder18 = osiamConnector17.createQueryBuilder();
        boolean boolean19 = scope1.equals((java.lang.Object) osiamConnector17);
        org.osiam.client.AuthService.Builder builder21 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder29 = builder27.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder31 = builder29.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder33 = builder29.setClientSecret("PATCH");
        org.osiam.client.AuthService authService34 = builder33.build();
        org.osiam.client.AuthService authService35 = builder33.build();
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.addScope(scope39);
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException43 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean44 = scope41.equals((java.lang.Object) invalidAttributeException43);
        java.lang.String str45 = scope41.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder38.addScope(scope41);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setUserId("");
        org.osiam.client.oauth.Scope scope51 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.addScope(scope51);
        org.osiam.client.oauth.Scope scope54 = new org.osiam.client.oauth.Scope("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope56 = new org.osiam.client.oauth.Scope("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope[] scopeArray57 = new org.osiam.client.oauth.Scope[] { scope36, scope51, scope54, scope56 };
        java.net.URI uRI58 = authService35.getAuthorizationUri(scopeArray57);
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI59 = osiamConnector17.getAuthorizationUri(scopeArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Can't create the login uri: redirect URI was not set.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(authService34);
        org.junit.Assert.assertNotNull(authService35);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "GET" + "'", str45, "GET");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(scope51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(scopeArray57);
        org.junit.Assert.assertNotNull(uRI58);
    }

    @Test
    public void test11187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11187");
        org.osiam.client.exception.OsiamRequestException osiamRequestException2 = new org.osiam.client.exception.OsiamRequestException((int) (short) 100, "");
    }

    @Test
    public void test11188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11188");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.util.Date date11 = accessToken10.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder1.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder1.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder1.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        boolean boolean24 = accessToken23.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet25 = accessToken23.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder16.addScopes(scopeSet25);
        org.osiam.client.oauth.AccessToken accessToken27 = builder26.build();
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder26.setType("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setRefreshToken("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshToken("");
        org.osiam.client.oauth.AccessToken.Builder builder35 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.addScope(scope36);
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException40 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean41 = scope38.equals((java.lang.Object) invalidAttributeException40);
        java.lang.String str42 = scope38.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder35.addScope(scope38);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder49.setUserId("client_credentials");
        org.osiam.client.oauth.Scope scope55 = new org.osiam.client.oauth.Scope("GET");
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder49.addScope(scope55);
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder31.addScope(scope55);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(scopeSet25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GET" + "'", str42, "GET");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test11189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11189");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setResourceServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientId("PUT");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        java.util.Date date16 = accessToken15.getExpiresAt();
        java.lang.String str17 = accessToken15.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken15.getScopes();
        java.util.Date date19 = accessToken15.getExpiresAt();
        java.util.Date date20 = accessToken15.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector7.deleteGroup("Insufficient scopes: [null, PATCH, GET, ME, ADMIN, GET POST PUT PATCH DELETE, PUT]", accessToken15);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11190");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder11 = builder7.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService12 = builder11.build();
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        java.lang.String str16 = accessToken15.toString();
        java.lang.String str17 = accessToken15.getToken();
        boolean boolean18 = accessToken15.isExpired();
        java.lang.String str19 = accessToken15.getClientId();
        boolean boolean20 = accessToken15.isRefreshTokenExpired();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken15);
        java.util.Date date22 = accessToken15.getRefreshTokenExpiresAt();
        java.lang.String str23 = authService12.extractErrorMessageForbidden(accessToken15);
        org.osiam.client.AuthService.Builder builder25 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientId("ME");
        org.osiam.client.AuthService.Builder builder29 = builder27.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder31 = builder29.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder33 = builder31.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService34 = builder33.build();
        org.osiam.client.oauth.AccessToken.Builder builder36 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date37 = null;
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setRefreshTokenExpiresAt(date37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder36.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken41 = builder40.build();
        boolean boolean42 = accessToken41.isRefreshTokenExpired();
        java.lang.String str43 = accessToken41.getUserId();
        java.lang.String str44 = accessToken41.getToken();
        java.lang.String str45 = authService34.extractErrorMessageForbidden(accessToken41);
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str47 = scope46.getValue();
        java.lang.String str48 = scope46.toString();
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray50 = new org.osiam.client.oauth.Scope[] { scope46, scope49 };
        java.net.URI uRI51 = authService34.getAuthorizationUri(scopeArray50);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken52 = authService12.retrieveAccessToken(scopeArray50);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(authService12);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str16, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "client_credentials" + "'", str17, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Insufficient scopes: []" + "'", str23, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(authService34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(accessToken41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Bearer " + "'", str44, "Bearer ");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Insufficient scopes: []" + "'", str45, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PATCH" + "'", str47, "PATCH");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PATCH" + "'", str48, "PATCH");
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertNotNull(scopeArray50);
        org.junit.Assert.assertNotNull(uRI51);
    }

    @Test
    public void test11191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11191");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder3 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder3.setRefreshTokenExpiresAt(date4);
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope7 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException9 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean10 = scope7.equals((java.lang.Object) invalidAttributeException9);
        java.lang.String str11 = scope7.getValue();
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str14 = scope13.toString();
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str17 = scope16.getValue();
        java.lang.String str18 = scope16.getValue();
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException21 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean22 = scope19.equals((java.lang.Object) invalidAttributeException21);
        java.lang.String str23 = scope19.getValue();
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException29 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean30 = scope27.equals((java.lang.Object) invalidAttributeException29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.GET;
        boolean boolean35 = scope33.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray37 = new org.osiam.client.oauth.Scope[] { scope6, scope7, scope12, scope13, scope15, scope16, scope19, scope24, scope25, scope26, scope27, scope31, scope32, scope33, scope36 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet38 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet38, scopeArray37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder3.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet38);
        boolean boolean41 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet38);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer42 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer43 = scopeSerializer0.unwrappingSerializer(nameTransformer42);
        boolean boolean44 = scopeSerializer0.usesObjectId();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertNotNull(scope7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GET" + "'", str11, "GET");
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ME" + "'", str14, "ME");
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PATCH" + "'", str18, "PATCH");
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GET" + "'", str23, "GET");
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(scopeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test11192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11192");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388");
        org.osiam.client.AuthService authService2 = builder1.build();
        org.osiam.client.AuthService.Builder builder4 = builder1.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        org.osiam.client.AuthService.Builder builder6 = builder1.setClientSecret("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.UnauthorizedException: PATCH");
        org.junit.Assert.assertNotNull(authService2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test11193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11193");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.UpdateUser updateUser4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken13 = builder10.build();
        java.util.Date date14 = accessToken13.getExpiresAt();
        java.lang.String str15 = accessToken13.toString();
        java.lang.String str16 = accessToken13.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user17 = osiamUserService2.updateUser("org.osiam.client.exception.OsiamRequestException: Query [attributes=Authorization, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=10]", updateUser4, accessToken13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str15, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str16, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
    }

    @Test
    public void test11194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11194");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        java.lang.String str7 = accessToken6.toString();
        java.lang.String str8 = accessToken6.getClientId();
        org.osiam.client.OsiamConnector.Builder builder9 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder11 = builder9.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder13 = builder11.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder15 = builder13.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector16 = builder15.build();
        org.osiam.client.query.QueryBuilder queryBuilder17 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder19.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.descending("hi!");
        org.osiam.client.query.Query query26 = queryBuilder25.build();
        java.lang.String str27 = query26.toString();
        java.lang.String str28 = query26.toString();
        java.lang.String str29 = query26.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder30 = osiamConnector16.createQueryBuilder(query26);
        org.osiam.client.query.QueryBuilder queryBuilder31 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder33.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder37.descending("hi!");
        org.osiam.client.query.Query query40 = queryBuilder39.build();
        org.osiam.client.query.QueryBuilder queryBuilder41 = osiamConnector16.createQueryBuilder(query40);
        boolean boolean42 = accessToken6.equals((java.lang.Object) queryBuilder41);
        java.util.Date date43 = accessToken6.getRefreshTokenExpiresAt();
        boolean boolean44 = accessToken6.isExpired();
        java.lang.String str45 = accessToken6.getRefreshToken();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str7, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(osiamConnector16);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str28, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(query40);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test11195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11195");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet7 = scopeSetJsonDeserializer6.getNullValue();
        java.util.Collection<java.lang.Object> objCollection8 = scopeSetJsonDeserializer6.getKnownPropertyNames();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer9 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass10 = scopeDeserializer9.handledType();
        boolean boolean11 = scopeDeserializer9.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet12 = scopeDeserializer9.getNullValue();
        java.lang.Class<?> wildcardClass13 = scopeDeserializer9.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer14 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer15 = scopeDeserializer9.unwrappingDeserializer(nameTransformer14);
        boolean boolean16 = scopeSetJsonDeserializer15.isCachable();
        boolean boolean17 = scopeSetJsonDeserializer15.isCachable();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer18 = scopeSetJsonDeserializer15.getDelegatee();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer19 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer20 = scopeSetJsonDeserializer15.unwrappingDeserializer(nameTransformer19);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet21 = scopeSetJsonDeserializer20.getNullValue();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer22 = scopeSetJsonDeserializer6.replaceDelegatee(scopeSetJsonDeserializer20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNull(scopeSet7);
        org.junit.Assert.assertNull(objCollection8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(scopeSet12);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardJsonDeserializer18);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer20);
        org.junit.Assert.assertNull(scopeSet21);
    }

    @Test
    public void test11196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11196");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.descending("hi!");
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        java.lang.String str16 = query15.toString();
        java.lang.String str17 = query15.getSortOrder();
        java.lang.String str18 = query15.getSortBy();
        java.lang.String str19 = query15.getFilter();
        java.lang.String str20 = query15.getSortOrder();
        java.lang.String str21 = query15.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder(query15);
        long long23 = query15.getStartIndex();
        org.osiam.client.query.Query query24 = query15.nextPage();
        java.lang.String str25 = query15.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder26 = new org.osiam.client.query.QueryBuilder(query15);
        java.lang.String str27 = query15.getAttributes();
        java.lang.String str28 = query15.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder29 = osiamConnector5.createQueryBuilder(query15);
        org.osiam.client.query.QueryBuilder queryBuilder30 = osiamConnector5.createQueryBuilder();
        org.osiam.client.OsiamConnector.Builder builder31 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder33 = builder31.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder35 = builder33.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector36 = builder35.build();
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        boolean boolean44 = accessToken43.isRefreshTokenExpired();
        java.lang.String str45 = accessToken43.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.toString();
        java.lang.String str57 = query55.getSortOrder();
        java.lang.String str58 = query55.getSortBy();
        java.lang.String str59 = query55.getFilter();
        java.lang.String str60 = query55.toString();
        boolean boolean61 = accessToken43.equals((java.lang.Object) query55);
        org.osiam.client.query.QueryBuilder queryBuilder62 = osiamConnector36.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder63 = osiamConnector36.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder64 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder66 = queryBuilder64.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder68 = queryBuilder66.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder70 = queryBuilder66.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder72 = queryBuilder70.descending("hi!");
        org.osiam.client.query.Query query73 = queryBuilder72.build();
        java.lang.String str74 = query73.toString();
        java.lang.String str75 = query73.getSortOrder();
        java.lang.String str76 = query73.getSortBy();
        java.lang.String str77 = query73.getFilter();
        java.lang.String str78 = query73.getSortOrder();
        java.lang.String str79 = query73.getAttributes();
        java.lang.String str80 = query73.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder81 = osiamConnector36.createQueryBuilder(query73);
        org.osiam.client.query.Query query82 = queryBuilder81.build();
        org.osiam.client.query.QueryBuilder queryBuilder83 = new org.osiam.client.query.QueryBuilder(query82);
        java.lang.String str84 = query82.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder85 = osiamConnector5.createQueryBuilder(query82);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str16, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "descending" + "'", str17, "descending");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "descending" + "'", str20, "descending");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Authorization" + "'", str21, "Authorization");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Authorization" + "'", str27, "Authorization");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(osiamConnector36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str56, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "descending" + "'", str57, "descending");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str60, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNotNull(queryBuilder63);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertNotNull(queryBuilder68);
        org.junit.Assert.assertNotNull(queryBuilder70);
        org.junit.Assert.assertNotNull(queryBuilder72);
        org.junit.Assert.assertNotNull(query73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str74, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "descending" + "'", str75, "descending");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "descending" + "'", str78, "descending");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Authorization" + "'", str79, "Authorization");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Authorization" + "'", str80, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder81);
        org.junit.Assert.assertNotNull(query82);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(queryBuilder85);
    }

    @Test
    public void test11197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11197");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector13 = builder8.build();
        org.osiam.client.OsiamConnector.Builder builder14 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector21 = builder20.build();
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.descending("hi!");
        org.osiam.client.query.Query query31 = queryBuilder30.build();
        java.lang.String str32 = query31.toString();
        java.lang.String str33 = query31.toString();
        java.lang.String str34 = query31.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder35 = osiamConnector21.createQueryBuilder(query31);
        org.osiam.client.query.QueryBuilder queryBuilder36 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder42 = queryBuilder38.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder44 = queryBuilder42.descending("hi!");
        org.osiam.client.query.Query query45 = queryBuilder44.build();
        org.osiam.client.query.QueryBuilder queryBuilder46 = osiamConnector21.createQueryBuilder(query45);
        org.osiam.client.query.QueryBuilder queryBuilder47 = osiamConnector13.createQueryBuilder(query45);
        org.osiam.client.oauth.AccessToken.Builder builder50 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date51 = null;
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.setRefreshTokenExpiresAt(date51);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder50.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken55 = builder54.build();
        java.util.Date date56 = accessToken55.getExpiresAt();
        java.lang.String str57 = accessToken55.getRefreshToken();
        java.lang.String str58 = accessToken55.getType();
        java.util.Date date59 = accessToken55.getExpiresAt();
        java.lang.String str60 = accessToken55.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector13.deleteGroup("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: descending", accessToken55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The string \"Insufficient scopes\" for the URI component SCHEME contains an invalid character, ' ', at index 12.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(query31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str32, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str33, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(query45);
        org.junit.Assert.assertNotNull(queryBuilder46);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(accessToken55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
    }

    @Test
    public void test11198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11198");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder3 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder3.setRefreshTokenExpiresAt(date4);
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope7 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException9 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean10 = scope7.equals((java.lang.Object) invalidAttributeException9);
        java.lang.String str11 = scope7.getValue();
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str14 = scope13.toString();
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str17 = scope16.getValue();
        java.lang.String str18 = scope16.getValue();
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException21 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean22 = scope19.equals((java.lang.Object) invalidAttributeException21);
        java.lang.String str23 = scope19.getValue();
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException29 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean30 = scope27.equals((java.lang.Object) invalidAttributeException29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.GET;
        boolean boolean35 = scope33.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray37 = new org.osiam.client.oauth.Scope[] { scope6, scope7, scope12, scope13, scope15, scope16, scope19, scope24, scope25, scope26, scope27, scope31, scope32, scope33, scope36 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet38 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet38, scopeArray37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder3.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet38);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        java.util.Date date48 = accessToken47.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder40.setExpiresAt(date48);
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder1.setRefreshTokenExpiresAt(date48);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.setType("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setUserName("Authorization");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertNotNull(scope7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GET" + "'", str11, "GET");
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ME" + "'", str14, "ME");
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PATCH" + "'", str18, "PATCH");
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GET" + "'", str23, "GET");
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(scopeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test11199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11199");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setAuthServerEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setClientSecret("org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector17 = builder14.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken19 = osiamConnector17.retrieveAccessToken("org.osiam.client.exception.NoResultException: org.osiam.client.exception.OsiamClientException: ME");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
    }

    @Test
    public void test11200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11200");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.OsiamConnector.Builder builder10 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder22 = builder18.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector23 = builder18.build();
        org.osiam.client.OsiamConnector.Builder builder24 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder26 = builder24.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder28 = builder26.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder30 = builder28.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector31 = builder30.build();
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.toString();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector31.createQueryBuilder(query41);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        org.osiam.client.query.QueryBuilder queryBuilder56 = osiamConnector31.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder57 = osiamConnector23.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder58 = osiamConnector9.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder59 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder61 = queryBuilder59.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder63 = queryBuilder61.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder65 = queryBuilder61.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder67 = queryBuilder65.descending("hi!");
        org.osiam.client.query.Query query68 = queryBuilder67.build();
        java.lang.String str69 = query68.toString();
        java.lang.String str70 = query68.getSortOrder();
        java.lang.String str71 = query68.getSortBy();
        int int72 = query68.getCount();
        int int73 = query68.getCount();
        org.osiam.client.query.QueryBuilder queryBuilder74 = osiamConnector9.createQueryBuilder(query68);
        org.osiam.resources.scim.UpdateGroup updateGroup76 = null;
        org.osiam.client.oauth.AccessToken.Builder builder78 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date79 = null;
        org.osiam.client.oauth.AccessToken.Builder builder80 = builder78.setRefreshTokenExpiresAt(date79);
        org.osiam.client.oauth.AccessToken.Builder builder82 = builder78.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken83 = builder82.build();
        boolean boolean84 = accessToken83.isRefreshTokenExpired();
        java.lang.String str85 = accessToken83.getUserId();
        java.lang.String str86 = accessToken83.getClientId();
        java.util.Date date87 = accessToken83.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group88 = osiamConnector9.updateGroup("org.osiam.client.exception.ConnectionInitializationException: Cannot connect to server", updateGroup76, accessToken83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(osiamConnector23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(osiamConnector31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str42, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertNotNull(queryBuilder56);
        org.junit.Assert.assertNotNull(queryBuilder57);
        org.junit.Assert.assertNotNull(queryBuilder58);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(queryBuilder63);
        org.junit.Assert.assertNotNull(queryBuilder65);
        org.junit.Assert.assertNotNull(queryBuilder67);
        org.junit.Assert.assertNotNull(query68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str69, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "descending" + "'", str70, "descending");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNotNull(queryBuilder74);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(accessToken83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11201");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.addScope(scope16);
        org.osiam.client.oauth.GrantType grantType18 = org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS;
        java.lang.String str19 = grantType18.getUrlParam();
        boolean boolean20 = scope16.equals((java.lang.Object) grantType18);
        java.lang.String str21 = grantType18.getUrlParam();
        java.lang.String str22 = grantType18.getUrlParam();
        java.lang.String str23 = grantType18.getUrlParam();
        java.lang.String str24 = grantType18.getUrlParam();
        java.lang.String str25 = grantType18.getUrlParam();
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + grantType18 + "' != '" + org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS + "'", grantType18.equals(org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "client_credentials" + "'", str19, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "client_credentials" + "'", str21, "client_credentials");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "client_credentials" + "'", str22, "client_credentials");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "client_credentials" + "'", str23, "client_credentials");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "client_credentials" + "'", str24, "client_credentials");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "client_credentials" + "'", str25, "client_credentials");
    }

    @Test
    public void test11202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11202");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Bearer ");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.resources.scim.UpdateGroup updateGroup5 = null;
        org.osiam.client.OsiamGroupService.Builder builder7 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder7.build();
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder7.build();
        org.osiam.client.OsiamGroupService osiamGroupService10 = builder7.build();
        javax.ws.rs.client.WebTarget webTarget11 = osiamGroupService10.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken18);
        java.lang.String str20 = osiamGroupService10.extractErrorMessageForbidden(accessToken18);
        java.lang.String str21 = accessToken18.getRefreshToken();
        java.lang.String str22 = accessToken18.getRefreshToken();
        boolean boolean23 = accessToken18.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group24 = osiamGroupService2.updateGroup("org.osiam.client.exception.OsiamRequestException: ", updateGroup5, accessToken18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(osiamGroupService10);
        org.junit.Assert.assertNotNull(webTarget11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test11203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11203");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("hi!");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder5 = builder1.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder7 = builder1.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.AuthService.Builder builder13 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientRedirectUri("ME");
        org.osiam.client.AuthService authService16 = builder13.build();
        org.osiam.client.OsiamGroupService.Builder builder18 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService19 = builder18.build();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        java.util.Date date27 = accessToken26.getExpiresAt();
        java.lang.String str28 = accessToken26.getUserName();
        java.lang.String str29 = accessToken26.toString();
        java.lang.String str30 = osiamGroupService19.extractErrorMessageForbidden(accessToken26);
        boolean boolean31 = accessToken26.isClientOnly();
        java.lang.String str32 = authService16.extractErrorMessageForbidden(accessToken26);
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken39);
        boolean boolean41 = accessToken39.isExpired();
        java.lang.String str42 = authService16.extractErrorMessageForbidden(accessToken39);
        // The following exception was thrown during execution in test generation
        try {
            authService10.revokeAllAccessTokens("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConnectionInitializationException: Bearer ", accessToken39);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(authService16);
        org.junit.Assert.assertNotNull(osiamGroupService19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str29, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Insufficient scopes: []" + "'", str30, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Insufficient scopes: []" + "'", str42, "Insufficient scopes: []");
    }

    @Test
    public void test11204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11204");
        org.osiam.client.exception.NoResultException noResultException1 = new org.osiam.client.exception.NoResultException("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        int int2 = noResultException1.getHttpStatusCode();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 404 + "'", int2 == 404);
    }

    @Test
    public void test11205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11205");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamConnector.Builder builder3 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder5 = builder3.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder7 = builder5.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder9 = builder7.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector10 = builder9.build();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.toString();
        java.lang.String str23 = query20.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder24 = osiamConnector10.createQueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder25 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.descending("hi!");
        org.osiam.client.query.Query query34 = queryBuilder33.build();
        org.osiam.client.query.QueryBuilder queryBuilder35 = osiamConnector10.createQueryBuilder(query34);
        java.lang.String str36 = query34.getSortBy();
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        java.util.Date date44 = accessToken43.getExpiresAt();
        java.util.Date date45 = accessToken43.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult46 = osiamUserService2.searchUsers(query34, accessToken43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(osiamConnector10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(query34);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11206");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.Query query10 = queryBuilder8.build();
        long long11 = query10.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder12 = new org.osiam.client.query.QueryBuilder(query10);
        java.lang.String str13 = query10.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder14 = new org.osiam.client.query.QueryBuilder(query10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.ascending("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(query10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "descending" + "'", str13, "descending");
        org.junit.Assert.assertNotNull(queryBuilder16);
    }

    @Test
    public void test11207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11207");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientSecret("GET");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setEndpoint("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector osiamConnector19 = builder16.build();
        org.osiam.client.AuthService.Builder builder21 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientId("ME");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder29 = builder27.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder31 = builder27.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService32 = builder31.build();
        org.osiam.client.AuthService.Builder builder34 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder36 = builder34.setClientId("ME");
        org.osiam.client.AuthService.Builder builder38 = builder36.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder40 = builder38.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder42 = builder40.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService43 = builder42.build();
        org.osiam.client.oauth.AccessToken.Builder builder45 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setRefreshTokenExpiresAt(date46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder45.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken50 = builder49.build();
        boolean boolean51 = accessToken50.isRefreshTokenExpired();
        java.lang.String str52 = accessToken50.getUserId();
        java.lang.String str53 = accessToken50.getToken();
        java.lang.String str54 = authService43.extractErrorMessageForbidden(accessToken50);
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str56 = scope55.getValue();
        java.lang.String str57 = scope55.toString();
        org.osiam.client.oauth.Scope scope58 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray59 = new org.osiam.client.oauth.Scope[] { scope55, scope58 };
        java.net.URI uRI60 = authService43.getAuthorizationUri(scopeArray59);
        java.net.URI uRI61 = authService32.getAuthorizationUri(scopeArray59);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken62 = osiamConnector19.retrieveAccessToken(scopeArray59);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(authService32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(authService43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(accessToken50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Bearer " + "'", str53, "Bearer ");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Insufficient scopes: []" + "'", str54, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PATCH" + "'", str56, "PATCH");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PATCH" + "'", str57, "PATCH");
        org.junit.Assert.assertNotNull(scope58);
        org.junit.Assert.assertNotNull(scopeArray59);
        org.junit.Assert.assertNotNull(uRI60);
        org.junit.Assert.assertNotNull(uRI61);
    }

    @Test
    public void test11208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11208");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass4 = scopeSetJsonSerializer3.handledType();
        boolean boolean5 = scopeSetJsonSerializer3.usesObjectId();
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer6 = scopeSetJsonSerializer3.getDelegatee();
        boolean boolean7 = scopeSetJsonSerializer3.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper8 = null;
        com.fasterxml.jackson.databind.JavaType javaType9 = null;
        scopeSetJsonSerializer3.acceptJsonFormatVisitor(jsonFormatVisitorWrapper8, javaType9);
        boolean boolean11 = scopeSetJsonSerializer3.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper12 = null;
        com.fasterxml.jackson.databind.JavaType javaType13 = null;
        scopeSetJsonSerializer3.acceptJsonFormatVisitor(jsonFormatVisitorWrapper12, javaType13);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass15 = scopeSetJsonSerializer3.handledType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertNull(scopeSetClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardJsonSerializer6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(scopeSetClass15);
    }

    @Test
    public void test11209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11209");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.util.Date date11 = accessToken10.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder1.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder1.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder1.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        boolean boolean24 = accessToken23.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet25 = accessToken23.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder16.addScopes(scopeSet25);
        org.osiam.client.oauth.AccessToken accessToken27 = builder26.build();
        boolean boolean28 = accessToken27.isRefreshTokenExpired();
        java.lang.String str29 = accessToken27.getRefreshToken();
        java.lang.String str30 = accessToken27.getRefreshToken();
        java.lang.String str31 = accessToken27.getUserId();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(scopeSet25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str31, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test11210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11210");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.InvalidAttributeException: authorization_code");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.util.Date date13 = accessToken9.getExpiresAt();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet14 = accessToken9.getScopes();
        java.lang.String str15 = accessToken9.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user16 = osiamUserService2.getCurrentUser(accessToken9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scopeSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test11211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11211");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector.Builder builder12 = builder2.setEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setResourceServerEndpoint("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("org.osiam.client.exception.OsiamRequestException: hi!");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientSecret("org.osiam.client.exception.OsiamRequestException: descending");
        org.osiam.client.OsiamConnector osiamConnector21 = builder20.build();
        org.osiam.resources.scim.Group group23 = null;
        org.osiam.client.AuthService.Builder builder25 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientId("ME");
        org.osiam.client.AuthService.Builder builder29 = builder27.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService30 = builder29.build();
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        boolean boolean38 = accessToken37.isRefreshTokenExpired();
        boolean boolean39 = accessToken37.isClientOnly();
        java.lang.String str40 = accessToken37.getClientId();
        java.lang.String str41 = authService30.extractErrorMessageForbidden(accessToken37);
        java.lang.String str42 = accessToken37.getUserId();
        java.lang.String str43 = accessToken37.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group44 = osiamConnector21.replaceGroup("org.osiam.client.exception.ConnectionInitializationException: descending", group23, accessToken37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(authService30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: []" + "'", str41, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test11212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11212");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count((int) (short) 0);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder4.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder4.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.ascending("password");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count((int) (byte) 1);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder10.descending("2024-03-22T13:51:20.388");
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder10.ascending("Cannot connect to server");
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.filter("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.filter("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
    }

    @Test
    public void test11213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11213");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        java.lang.String str12 = accessToken10.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder13 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.descending("hi!");
        org.osiam.client.query.Query query22 = queryBuilder21.build();
        java.lang.String str23 = query22.toString();
        java.lang.String str24 = query22.getSortOrder();
        java.lang.String str25 = query22.getSortBy();
        java.lang.String str26 = query22.getFilter();
        java.lang.String str27 = query22.toString();
        boolean boolean28 = accessToken10.equals((java.lang.Object) query22);
        java.util.Date date29 = accessToken10.getExpiresAt();
        java.lang.String str30 = accessToken10.getUserName();
        java.lang.String str31 = osiamGroupService2.extractErrorMessageForbidden(accessToken10);
        javax.ws.rs.client.WebTarget webTarget32 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget33 = osiamGroupService2.targetEndpoint;
        org.osiam.client.OsiamConnector.Builder builder34 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder36 = builder34.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder38 = builder36.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder40 = builder38.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder42 = builder40.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector43 = builder40.build();
        org.osiam.client.query.QueryBuilder queryBuilder44 = osiamConnector43.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder45.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder47.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder47.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder53 = queryBuilder51.descending("hi!");
        org.osiam.client.query.Query query54 = queryBuilder53.build();
        org.osiam.client.query.Query query55 = queryBuilder53.build();
        long long56 = query55.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder57 = osiamConnector43.createQueryBuilder(query55);
        java.lang.String str58 = query55.getAttributes();
        org.osiam.client.oauth.AccessToken.Builder builder60 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date61 = null;
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder60.setRefreshTokenExpiresAt(date61);
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder60.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder64.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken67 = builder64.build();
        java.util.Date date68 = accessToken67.getExpiresAt();
        java.lang.String str69 = accessToken67.toString();
        boolean boolean70 = accessToken67.isClientOnly();
        java.lang.String str71 = accessToken67.getUserId();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken67);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult73 = osiamGroupService2.searchResources(query55, accessToken67);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(query22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "descending" + "'", str24, "descending");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Insufficient scopes: []" + "'", str31, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget32);
        org.junit.Assert.assertNotNull(webTarget33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(osiamConnector43);
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(queryBuilder53);
        org.junit.Assert.assertNotNull(query54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Authorization" + "'", str58, "Authorization");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(accessToken67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str69, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str71, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test11214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11214");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getEmptyValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        java.util.Collection<java.lang.Object> objCollection6 = scopeDeserializer0.getKnownPropertyNames();
        java.lang.Class<?> wildcardClass7 = scopeDeserializer0.handledType();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer8 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass9 = scopeDeserializer8.handledType();
        java.lang.Class<?> wildcardClass10 = scopeDeserializer8.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer11 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer12 = scopeDeserializer8.unwrappingDeserializer(nameTransformer11);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer13 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer14 = scopeDeserializer8.unwrappingDeserializer(nameTransformer13);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet15 = scopeSetJsonDeserializer14.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader16 = scopeSetJsonDeserializer14.getObjectIdReader();
        boolean boolean17 = scopeSetJsonDeserializer14.isCachable();
        boolean boolean18 = scopeSetJsonDeserializer14.isCachable();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer19 = scopeSetJsonDeserializer14.getDelegatee();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet20 = scopeSetJsonDeserializer14.getEmptyValue();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer21 = scopeDeserializer0.replaceDelegatee(scopeSetJsonDeserializer14);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertNull(objCollection6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer12);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer14);
        org.junit.Assert.assertNull(scopeSet15);
        org.junit.Assert.assertNull(objectIdReader16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(wildcardJsonDeserializer19);
        org.junit.Assert.assertNull(scopeSet20);
    }

    @Test
    public void test11215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11215");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.addScope(scope6);
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException10 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean11 = scope8.equals((java.lang.Object) invalidAttributeException10);
        java.lang.String str12 = scope8.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder5.addScope(scope8);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setClientId("Bearer ");
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str17 = scope16.toString();
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder13.addScope(scope16);
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.addScope(scope21);
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException25 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean26 = scope23.equals((java.lang.Object) invalidAttributeException25);
        java.lang.String str27 = scope23.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder20.addScope(scope23);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder20.setRefreshToken("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        java.util.Date date38 = accessToken37.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder30.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder18.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder18.setUserId("2024-03-22T13:51:20.388");
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setType("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamGroupService.Builder builder46 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService47 = builder46.build();
        org.osiam.client.OsiamGroupService osiamGroupService48 = builder46.build();
        javax.ws.rs.client.WebTarget webTarget49 = osiamGroupService48.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget50 = osiamGroupService48.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder52 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setRefreshTokenExpiresAt(date53);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder52.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken57 = builder56.build();
        boolean boolean58 = accessToken57.isRefreshTokenExpired();
        java.lang.String str59 = accessToken57.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet60 = accessToken57.getScopes();
        java.lang.String str61 = osiamGroupService48.extractErrorMessageForbidden(accessToken57);
        java.lang.String str62 = accessToken57.getUserId();
        java.util.Date date63 = accessToken57.getRefreshTokenExpiresAt();
        java.util.Date date64 = accessToken57.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder44.setRefreshTokenExpiresAt(date64);
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder44.setUserId("org.osiam.client.exception.ConflictException: org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder67.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder67.setRefreshToken("");
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder67.setClientId("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder67.setType("org.osiam.client.exception.ConnectionInitializationException: AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken76 = builder75.build();
        // The following exception was thrown during execution in test generation
        try {
            osiamUserService2.deleteUser("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=org.osiam.client.exception.ConnectionInitializationException: Bearer , userId=, userName=org.osiam.client.exception.NoResultException: refresh_token]", accessToken76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GET" + "'", str12, "GET");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ME" + "'", str17, "ME");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "GET" + "'", str27, "GET");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(osiamGroupService47);
        org.junit.Assert.assertNotNull(osiamGroupService48);
        org.junit.Assert.assertNotNull(webTarget49);
        org.junit.Assert.assertNotNull(webTarget50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(accessToken57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(scopeSet60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Insufficient scopes: []" + "'", str61, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(accessToken76);
    }

    @Test
    public void test11216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11216");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setClientId("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder14 = builder8.setClientSecret("org.osiam.client.exception.NoResultException: authorization_code");
        org.osiam.client.OsiamConnector osiamConnector15 = builder14.build();
        org.osiam.resources.scim.User user16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        boolean boolean24 = accessToken23.isRefreshTokenExpired();
        java.lang.String str25 = accessToken23.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder26 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder26.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder32 = queryBuilder28.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.descending("hi!");
        org.osiam.client.query.Query query35 = queryBuilder34.build();
        java.lang.String str36 = query35.toString();
        java.lang.String str37 = query35.getSortOrder();
        java.lang.String str38 = query35.getSortBy();
        java.lang.String str39 = query35.getFilter();
        java.lang.String str40 = query35.toString();
        boolean boolean41 = accessToken23.equals((java.lang.Object) query35);
        java.util.Date date42 = accessToken23.getExpiresAt();
        java.lang.String str43 = accessToken23.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user44 = osiamConnector15.createUser(user16, accessToken23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(query35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str36, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "descending" + "'", str37, "descending");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str40, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test11217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11217");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet7 = scopeSetJsonDeserializer6.getNullValue();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer8 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer9 = scopeSetJsonDeserializer6.unwrappingDeserializer(nameTransformer8);
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer10 = scopeSetJsonDeserializer9.getDelegatee();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer11 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer12 = scopeSetJsonDeserializer9.unwrappingDeserializer(nameTransformer11);
        java.lang.Class<?> wildcardClass13 = scopeSetJsonDeserializer9.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer14 = scopeSetJsonDeserializer9.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection15 = scopeSetJsonDeserializer9.getKnownPropertyNames();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNull(scopeSet7);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer9);
        org.junit.Assert.assertNull(wildcardJsonDeserializer10);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer12);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(wildcardJsonDeserializer14);
        org.junit.Assert.assertNull(objCollection15);
    }

    @Test
    public void test11218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11218");
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException1 = new org.osiam.client.exception.InvalidAttributeException("org.osiam.client.exception.ConflictException: PATCH");
        java.lang.Throwable[] throwableArray2 = invalidAttributeException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test11219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11219");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder5 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        java.util.Date date14 = accessToken13.getExpiresAt();
        java.lang.String str15 = accessToken13.getUserName();
        java.lang.String str16 = accessToken13.toString();
        java.lang.String str17 = osiamGroupService6.extractErrorMessageForbidden(accessToken13);
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        java.lang.String str25 = accessToken24.toString();
        java.lang.String str26 = accessToken24.getType();
        boolean boolean27 = accessToken24.isExpired();
        java.util.Date date28 = accessToken24.getExpiresAt();
        boolean boolean29 = accessToken24.isClientOnly();
        java.lang.String str30 = osiamGroupService6.extractErrorMessageForbidden(accessToken24);
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        boolean boolean38 = accessToken37.isRefreshTokenExpired();
        java.lang.String str39 = accessToken37.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder40 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder42 = queryBuilder40.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder44 = queryBuilder42.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder46 = queryBuilder42.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.descending("hi!");
        org.osiam.client.query.Query query49 = queryBuilder48.build();
        java.lang.String str50 = query49.toString();
        java.lang.String str51 = query49.getSortOrder();
        java.lang.String str52 = query49.getSortBy();
        java.lang.String str53 = query49.getFilter();
        java.lang.String str54 = query49.getSortOrder();
        java.lang.String str55 = query49.getAttributes();
        boolean boolean56 = accessToken37.equals((java.lang.Object) query49);
        org.osiam.client.OsiamConnector.Builder builder57 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder59 = builder57.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder61 = builder59.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder63 = builder61.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder65 = builder61.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder67 = builder61.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder69 = builder67.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder71 = builder67.setClientRedirectUri("PUT");
        boolean boolean72 = accessToken37.equals((java.lang.Object) builder71);
        java.lang.String str73 = accessToken37.getClientId();
        boolean boolean74 = accessToken37.isClientOnly();
        java.lang.String str75 = osiamGroupService6.extractErrorMessageForbidden(accessToken37);
        // The following exception was thrown during execution in test generation
        try {
            osiamUserService2.deleteUser("Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]", accessToken37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str16, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Insufficient scopes: []" + "'", str17, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str25, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Insufficient scopes: []" + "'", str30, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(queryBuilder46);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(query49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str50, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "descending" + "'", str51, "descending");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "descending" + "'", str54, "descending");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Authorization" + "'", str55, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Insufficient scopes: []" + "'", str75, "Insufficient scopes: []");
    }

    @Test
    public void test11220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11220");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.client.OsiamConnector osiamConnector18 = builder16.build();
        org.osiam.client.OsiamGroupService.Builder builder21 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService22 = builder21.build();
        org.osiam.client.OsiamGroupService osiamGroupService23 = builder21.build();
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken30);
        java.lang.String str32 = osiamGroupService23.extractErrorMessageForbidden(accessToken30);
        java.util.Date date33 = accessToken30.getExpiresAt();
        boolean boolean34 = accessToken30.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group35 = osiamConnector18.getGroup("org.osiam.client.exception.OsiamClientException: ME", accessToken30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(osiamConnector18);
        org.junit.Assert.assertNotNull(osiamGroupService22);
        org.junit.Assert.assertNotNull(osiamGroupService23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test11221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11221");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientId("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.OsiamConnector osiamConnector6 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder7 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder7.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder9.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.descending("hi!");
        org.osiam.client.query.Query query16 = queryBuilder15.build();
        java.lang.String str17 = query16.toString();
        java.lang.String str18 = query16.toString();
        org.osiam.client.query.Query query19 = query16.nextPage();
        java.lang.String str20 = query16.toString();
        int int21 = query16.getCount();
        org.osiam.client.query.Query query22 = query16.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder23 = osiamConnector6.createQueryBuilder(query22);
        org.osiam.client.OsiamGroupService.Builder builder25 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService26 = builder25.build();
        org.osiam.client.OsiamGroupService osiamGroupService27 = builder25.build();
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date30 = null;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setRefreshTokenExpiresAt(date30);
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken34 = builder33.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken34);
        java.lang.String str36 = osiamGroupService27.extractErrorMessageForbidden(accessToken34);
        java.util.Date date37 = accessToken34.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken34);
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean40 = accessToken34.equals((java.lang.Object) scope39);
        java.lang.String str41 = accessToken34.getRefreshToken();
        java.lang.String str42 = accessToken34.getUserName();
        java.util.Date date43 = accessToken34.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user44 = osiamConnector6.getCurrentUser(accessToken34);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(osiamConnector6);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str17, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str20, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(query22);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(osiamGroupService26);
        org.junit.Assert.assertNotNull(osiamGroupService27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(accessToken34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11222");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.addScope(scope14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshToken("ascending");
        org.osiam.client.oauth.Scope scope19 = new org.osiam.client.oauth.Scope("");
        boolean boolean21 = scope19.equals((java.lang.Object) (short) 0);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder15.addScope(scope19);
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.addScope(scope25);
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException29 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean30 = scope27.equals((java.lang.Object) invalidAttributeException29);
        java.lang.String str31 = scope27.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder24.addScope(scope27);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder38.setUserName("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder38.setRefreshToken("org.osiam.client.exception.ConflictException: org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.addScope(scope49);
        org.osiam.client.oauth.Scope scope51 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException53 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean54 = scope51.equals((java.lang.Object) invalidAttributeException53);
        java.lang.String str55 = scope51.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder48.addScope(scope51);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setUserId("");
        org.osiam.client.oauth.Scope scope61 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str62 = scope61.toString();
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder60.addScope(scope61);
        org.osiam.client.AuthService.Builder builder65 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder67 = builder65.setClientId("ME");
        org.osiam.client.AuthService.Builder builder69 = builder67.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService70 = builder69.build();
        org.osiam.client.oauth.AccessToken.Builder builder72 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date73 = null;
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder72.setRefreshTokenExpiresAt(date73);
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder72.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken77 = builder76.build();
        boolean boolean78 = accessToken77.isRefreshTokenExpired();
        boolean boolean79 = accessToken77.isClientOnly();
        java.lang.String str80 = accessToken77.getClientId();
        java.lang.String str81 = authService70.extractErrorMessageForbidden(accessToken77);
        java.util.Date date82 = accessToken77.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder83 = builder60.setExpiresAt(date82);
        org.osiam.client.oauth.AccessToken.Builder builder84 = builder46.setExpiresAt(date82);
        org.osiam.client.oauth.AccessToken.Builder builder85 = builder15.setExpiresAt(date82);
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "GET" + "'", str31, "GET");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(scope51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "GET" + "'", str55, "GET");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(scope61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "PUT" + "'", str62, "PUT");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(authService70);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(accessToken77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Insufficient scopes: []" + "'", str81, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test11223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11223");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector.Builder builder12 = builder2.setEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector osiamConnector13 = builder2.build();
        org.osiam.client.OsiamConnector.Builder builder14 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector19 = builder18.build();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        java.lang.String str28 = accessToken26.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder29 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder31.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.descending("hi!");
        org.osiam.client.query.Query query38 = queryBuilder37.build();
        java.lang.String str39 = query38.toString();
        java.lang.String str40 = query38.getSortOrder();
        java.lang.String str41 = query38.getSortBy();
        java.lang.String str42 = query38.getFilter();
        java.lang.String str43 = query38.toString();
        boolean boolean44 = accessToken26.equals((java.lang.Object) query38);
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector19.createQueryBuilder(query38);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.getAttributes();
        java.lang.String str57 = query55.toString();
        java.lang.String str58 = query55.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder59 = osiamConnector19.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder60 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder62 = queryBuilder60.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder62.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder66 = queryBuilder64.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query67 = queryBuilder64.build();
        org.osiam.client.query.QueryBuilder queryBuilder68 = osiamConnector19.createQueryBuilder(query67);
        java.lang.String str69 = query67.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder70 = osiamConnector13.createQueryBuilder(query67);
        org.osiam.client.query.QueryBuilder queryBuilder71 = osiamConnector13.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder72 = osiamConnector13.createQueryBuilder();
        org.osiam.resources.scim.Group group73 = null;
        org.osiam.client.oauth.AccessToken.Builder builder75 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date76 = null;
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder75.setRefreshTokenExpiresAt(date76);
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder75.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken80 = builder79.build();
        java.util.Date date81 = accessToken80.getExpiresAt();
        java.lang.String str82 = accessToken80.getUserName();
        java.lang.String str83 = accessToken80.getUserName();
        org.osiam.client.oauth.AccessToken.Builder builder85 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date86 = null;
        org.osiam.client.oauth.AccessToken.Builder builder87 = builder85.setRefreshTokenExpiresAt(date86);
        org.osiam.client.oauth.AccessToken.Builder builder89 = builder85.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken90 = builder89.build();
        boolean boolean91 = accessToken90.isRefreshTokenExpired();
        java.lang.String str92 = accessToken90.getClientId();
        boolean boolean93 = accessToken80.equals((java.lang.Object) accessToken90);
        java.lang.String str94 = accessToken90.getUserName();
        boolean boolean95 = accessToken90.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group96 = osiamConnector13.createGroup(group73, accessToken90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(query38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str39, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "descending" + "'", str40, "descending");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Authorization" + "'", str56, "Authorization");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str57, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "descending" + "'", str58, "descending");
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertNotNull(query67);
        org.junit.Assert.assertNotNull(queryBuilder68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(queryBuilder70);
        org.junit.Assert.assertNotNull(queryBuilder71);
        org.junit.Assert.assertNotNull(queryBuilder72);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(accessToken80);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(accessToken90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test11224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11224");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setClientId("ME");
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder5.setUserId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        java.lang.Object obj19 = null;
        boolean boolean20 = accessToken18.equals(obj19);
        boolean boolean21 = accessToken18.isExpired();
        java.util.Date date22 = accessToken18.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder5.setExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder5.setUserId("org.osiam.client.exception.OsiamRequestException: hi!");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test11225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11225");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setEndpoint("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.OsiamConnector osiamConnector15 = builder14.build();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query23 = queryBuilder20.build();
        org.osiam.client.query.Query query24 = query23.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder25 = new org.osiam.client.query.QueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder26 = osiamConnector15.createQueryBuilder(query24);
        org.osiam.client.query.Query query27 = query24.previousPage();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(query23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(query27);
    }

    @Test
    public void test11226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11226");
        org.osiam.client.exception.OsiamRequestException osiamRequestException4 = new org.osiam.client.exception.OsiamRequestException(10, "authorization_code");
        int int5 = osiamRequestException4.getHttpStatusCode();
        org.osiam.client.exception.OsiamClientException osiamClientException6 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.ConflictException: PATCH", (java.lang.Throwable) osiamRequestException4);
        org.osiam.client.exception.OsiamClientException osiamClientException7 = new org.osiam.client.exception.OsiamClientException("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]", (java.lang.Throwable) osiamRequestException4);
        java.lang.Throwable[] throwableArray8 = osiamRequestException4.getSuppressed();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(throwableArray8);
    }

    @Test
    public void test11227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11227");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientRedirectUri("ME");
        org.osiam.client.AuthService authService4 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder6 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        java.util.Date date15 = accessToken14.getExpiresAt();
        java.lang.String str16 = accessToken14.getUserName();
        java.lang.String str17 = accessToken14.toString();
        java.lang.String str18 = osiamGroupService7.extractErrorMessageForbidden(accessToken14);
        boolean boolean19 = accessToken14.isClientOnly();
        java.lang.String str20 = authService4.extractErrorMessageForbidden(accessToken14);
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken27 = builder26.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken27);
        boolean boolean29 = accessToken27.isExpired();
        java.lang.String str30 = authService4.extractErrorMessageForbidden(accessToken27);
        java.lang.String str31 = accessToken27.getType();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(authService4);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str17, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Insufficient scopes: []" + "'", str30, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test11228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11228");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.InvalidAttributeException: authorization_code");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken9);
        java.util.Date date11 = accessToken9.getExpiresAt();
        org.osiam.client.query.QueryBuilder queryBuilder12 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder14.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.descending("hi!");
        org.osiam.client.query.Query query21 = queryBuilder20.build();
        java.lang.String str22 = query21.toString();
        java.lang.String str23 = query21.getSortOrder();
        org.osiam.client.query.Query query24 = query21.nextPage();
        boolean boolean25 = accessToken9.equals((java.lang.Object) query21);
        org.osiam.client.query.Query query26 = query21.nextPage();
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        java.util.Date date34 = accessToken33.getExpiresAt();
        java.lang.String str35 = accessToken33.getRefreshToken();
        java.lang.String str36 = accessToken33.getType();
        java.util.Date date37 = accessToken33.getExpiresAt();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet38 = accessToken33.getScopes();
        java.lang.String str39 = accessToken33.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult40 = osiamUserService2.searchUsers(query21, accessToken33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "descending" + "'", str23, "descending");
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scopeSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test11229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11229");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder5 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder5.build();
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder5.build();
        javax.ws.rs.client.WebTarget webTarget8 = osiamGroupService7.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget9 = osiamGroupService7.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget10 = osiamGroupService7.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        java.lang.String str18 = osiamGroupService7.extractErrorMessageForbidden(accessToken17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        java.lang.String str26 = accessToken25.toString();
        java.lang.String str27 = accessToken25.getType();
        boolean boolean28 = accessToken25.isExpired();
        java.lang.String str29 = accessToken25.getToken();
        java.lang.String str30 = osiamGroupService7.extractErrorMessageForbidden(accessToken25);
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        boolean boolean38 = accessToken37.isRefreshTokenExpired();
        boolean boolean39 = accessToken37.isClientOnly();
        java.lang.String str40 = accessToken37.getUserName();
        java.lang.String str41 = osiamGroupService7.extractErrorMessageForbidden(accessToken37);
        java.util.Date date42 = accessToken37.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            osiamUserService2.deleteUser("", accessToken37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(webTarget8);
        org.junit.Assert.assertNotNull(webTarget9);
        org.junit.Assert.assertNotNull(webTarget10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str26, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Bearer " + "'", str29, "Bearer ");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Insufficient scopes: []" + "'", str30, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: []" + "'", str41, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11230");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder12.setClientRedirectUri("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector23 = builder20.build();
        org.osiam.client.AuthService.Builder builder26 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder28 = builder26.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService29 = builder28.build();
        org.osiam.client.OsiamGroupService.Builder builder31 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService32 = builder31.build();
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        java.util.Date date40 = accessToken39.getExpiresAt();
        java.lang.String str41 = accessToken39.getRefreshToken();
        boolean boolean42 = accessToken39.isClientOnly();
        java.lang.String str43 = osiamGroupService32.extractErrorMessageForbidden(accessToken39);
        org.osiam.client.oauth.AccessToken.Builder builder45 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setRefreshTokenExpiresAt(date46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder45.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken50 = builder49.build();
        java.util.Date date51 = accessToken50.getExpiresAt();
        java.lang.String str52 = accessToken50.getUserName();
        java.util.Date date53 = accessToken50.getRefreshTokenExpiresAt();
        java.lang.String str54 = osiamGroupService32.extractErrorMessageForbidden(accessToken50);
        java.lang.String str55 = authService29.extractErrorMessageForbidden(accessToken50);
        org.osiam.client.OsiamConnector.Builder builder56 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder58 = builder56.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder60 = builder58.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder62 = builder60.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector63 = builder62.build();
        org.osiam.client.query.QueryBuilder queryBuilder64 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder66 = queryBuilder64.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder68 = queryBuilder66.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder70 = queryBuilder66.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder72 = queryBuilder70.descending("hi!");
        org.osiam.client.query.Query query73 = queryBuilder72.build();
        java.lang.String str74 = query73.toString();
        java.lang.String str75 = query73.getSortOrder();
        java.lang.String str76 = query73.getSortBy();
        java.lang.String str77 = query73.getFilter();
        java.lang.String str78 = query73.getSortOrder();
        java.lang.String str79 = query73.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder80 = new org.osiam.client.query.QueryBuilder(query73);
        long long81 = query73.getStartIndex();
        org.osiam.client.query.Query query82 = query73.nextPage();
        long long83 = query82.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder84 = osiamConnector63.createQueryBuilder(query82);
        org.osiam.client.query.QueryBuilder queryBuilder86 = queryBuilder84.ascending("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.query.QueryBuilder queryBuilder88 = queryBuilder86.ascending("org.osiam.client.exception.OsiamClientException: descending");
        org.osiam.client.query.QueryBuilder queryBuilder90 = queryBuilder88.startIndex(101L);
        boolean boolean91 = accessToken50.equals((java.lang.Object) queryBuilder88);
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector23.deleteGroup("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME", accessToken50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(osiamConnector23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(authService29);
        org.junit.Assert.assertNotNull(osiamGroupService32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Insufficient scopes: []" + "'", str43, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(accessToken50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Insufficient scopes: []" + "'", str54, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Insufficient scopes: []" + "'", str55, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(osiamConnector63);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertNotNull(queryBuilder68);
        org.junit.Assert.assertNotNull(queryBuilder70);
        org.junit.Assert.assertNotNull(queryBuilder72);
        org.junit.Assert.assertNotNull(query73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str74, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "descending" + "'", str75, "descending");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "descending" + "'", str78, "descending");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Authorization" + "'", str79, "Authorization");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1L + "'", long81 == 1L);
        org.junit.Assert.assertNotNull(query82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 11L + "'", long83 == 11L);
        org.junit.Assert.assertNotNull(queryBuilder84);
        org.junit.Assert.assertNotNull(queryBuilder86);
        org.junit.Assert.assertNotNull(queryBuilder88);
        org.junit.Assert.assertNotNull(queryBuilder90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test11231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11231");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConnectionInitializationException: descending");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group4 = osiamGroupService2.mapToResource("org.osiam.client.exception.OsiamClientException: PUT");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: org.osiam.client.exception.OsiamClientException: PUT");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
    }

    @Test
    public void test11232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11232");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("");
        org.osiam.client.AuthService.Builder builder9 = builder5.setClientSecret("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientRedirectUri("GET POST PUT PATCH DELETE");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientId("Authorization");
        org.osiam.client.AuthService.Builder builder15 = builder11.setClientId("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test11233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11233");
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.AbstractOsiamService.Builder<org.osiam.resources.scim.User> userBuilder1 = new org.osiam.client.AbstractOsiamService.Builder<org.osiam.resources.scim.User>("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11234");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.toString();
        java.lang.String str23 = query20.toString();
        int int24 = query20.getCount();
        long long25 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder26 = osiamConnector7.createQueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        org.osiam.client.query.Query query37 = queryBuilder35.build();
        java.lang.String str38 = query37.getSortBy();
        java.lang.String str39 = query37.getFilter();
        int int40 = query37.getCount();
        long long41 = query37.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder42 = osiamConnector7.createQueryBuilder(query37);
        org.osiam.client.query.QueryBuilder queryBuilder43 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder45.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder45.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder49.descending("hi!");
        org.osiam.client.query.Query query52 = queryBuilder51.build();
        java.lang.String str53 = query52.toString();
        java.lang.String str54 = query52.getSortOrder();
        java.lang.String str55 = query52.getSortBy();
        java.lang.String str56 = query52.getFilter();
        java.lang.String str57 = query52.getSortOrder();
        java.lang.String str58 = query52.getAttributes();
        java.lang.String str59 = query52.getAttributes();
        org.osiam.client.query.Query query60 = query52.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder61 = osiamConnector7.createQueryBuilder(query52);
        org.osiam.resources.scim.User user62 = null;
        org.osiam.client.oauth.AccessToken.Builder builder64 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope65 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder64.addScope(scope65);
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder64.setClientId("ADMIN");
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder68.setClientId("refresh_token");
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder70.setRefreshToken("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder72.setUserId("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.oauth.AccessToken accessToken75 = builder74.build();
        java.lang.String str76 = accessToken75.getType();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet77 = accessToken75.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user78 = osiamConnector7.createUser(user62, accessToken75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertNotNull(query37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(query52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str53, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "descending" + "'", str54, "descending");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "descending" + "'", str57, "descending");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Authorization" + "'", str58, "Authorization");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Authorization" + "'", str59, "Authorization");
        org.junit.Assert.assertNotNull(query60);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(scope65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(accessToken75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(scopeSet77);
    }

    @Test
    public void test11235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11235");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("org.osiam.client.exception.ConnectionInitializationException: PATCH");
    }

    @Test
    public void test11236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11236");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass4 = scopeSetJsonSerializer3.handledType();
        boolean boolean5 = scopeSetJsonSerializer3.usesObjectId();
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer6 = scopeSetJsonSerializer3.getDelegatee();
        boolean boolean7 = scopeSetJsonSerializer3.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper8 = null;
        com.fasterxml.jackson.databind.JavaType javaType9 = null;
        scopeSetJsonSerializer3.acceptJsonFormatVisitor(jsonFormatVisitorWrapper8, javaType9);
        boolean boolean11 = scopeSetJsonSerializer3.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper12 = null;
        com.fasterxml.jackson.databind.JavaType javaType13 = null;
        scopeSetJsonSerializer3.acceptJsonFormatVisitor(jsonFormatVisitorWrapper12, javaType13);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer15 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer16 = scopeSetJsonSerializer3.unwrappingSerializer(nameTransformer15);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper17 = null;
        com.fasterxml.jackson.databind.JavaType javaType18 = null;
        scopeSetJsonSerializer16.acceptJsonFormatVisitor(jsonFormatVisitorWrapper17, javaType18);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass20 = scopeSetJsonSerializer16.handledType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertNull(scopeSetClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardJsonSerializer6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer16);
        org.junit.Assert.assertNull(scopeSetClass20);
    }

    @Test
    public void test11237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11237");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getEmptyValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        boolean boolean6 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.core.JsonParser jsonParser7 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = scopeDeserializer0.deserialize(jsonParser7, deserializationContext8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test11238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11238");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.client.OsiamGroupService.Builder builder20 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService21 = builder20.build();
        org.osiam.client.OsiamGroupService osiamGroupService22 = builder20.build();
        javax.ws.rs.client.WebTarget webTarget23 = osiamGroupService22.targetEndpoint;
        org.osiam.client.AuthService.Builder builder25 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientId("ME");
        org.osiam.client.AuthService.Builder builder29 = builder27.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService30 = builder29.build();
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        boolean boolean38 = accessToken37.isRefreshTokenExpired();
        java.lang.String str39 = accessToken37.getUserId();
        java.lang.String str40 = accessToken37.getClientId();
        boolean boolean41 = accessToken37.isClientOnly();
        java.lang.String str42 = authService30.extractErrorMessageForbidden(accessToken37);
        java.lang.String str43 = accessToken37.toString();
        java.lang.String str44 = accessToken37.getClientId();
        java.lang.String str45 = osiamGroupService22.extractErrorMessageForbidden(accessToken37);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group46 = osiamConnector17.getGroup("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME", accessToken37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(osiamGroupService21);
        org.junit.Assert.assertNotNull(osiamGroupService22);
        org.junit.Assert.assertNotNull(webTarget23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(authService30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Insufficient scopes: []" + "'", str42, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str43, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Insufficient scopes: []" + "'", str45, "Insufficient scopes: []");
    }

    @Test
    public void test11239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11239");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.client.AuthService.Builder builder7 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientId("ME");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService12 = builder11.build();
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        boolean boolean20 = accessToken19.isRefreshTokenExpired();
        java.lang.String str21 = accessToken19.getUserId();
        java.lang.String str22 = accessToken19.getClientId();
        boolean boolean23 = accessToken19.isClientOnly();
        java.lang.String str24 = authService12.extractErrorMessageForbidden(accessToken19);
        java.lang.String str25 = accessToken19.toString();
        java.lang.String str26 = accessToken19.getClientId();
        java.lang.String str27 = accessToken19.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user28 = osiamUserService5.getCurrentUser(accessToken19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(authService12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Insufficient scopes: []" + "'", str24, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str25, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test11240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11240");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test11241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11241");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider2 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer3 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope9 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException11 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean12 = scope9.equals((java.lang.Object) invalidAttributeException11);
        java.lang.String str13 = scope9.getValue();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str16 = scope15.toString();
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str19 = scope18.getValue();
        java.lang.String str20 = scope18.getValue();
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException23 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean24 = scope21.equals((java.lang.Object) invalidAttributeException23);
        java.lang.String str25 = scope21.getValue();
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException31 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean32 = scope29.equals((java.lang.Object) invalidAttributeException31);
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.GET;
        boolean boolean37 = scope35.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray39 = new org.osiam.client.oauth.Scope[] { scope8, scope9, scope14, scope15, scope17, scope18, scope21, scope26, scope27, scope28, scope29, scope33, scope34, scope35, scope38 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet40 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet40, scopeArray39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder5.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet40);
        boolean boolean43 = scopeSerializer3.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet40);
        org.osiam.client.oauth.AccessToken.Builder builder45 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setRefreshTokenExpiresAt(date46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder45.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken50 = builder49.build();
        boolean boolean51 = accessToken50.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet52 = accessToken50.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator53 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider54 = null;
        scopeSerializer3.serialize(scopeSet52, jsonGenerator53, serializerProvider54);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder58 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date59 = null;
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setRefreshTokenExpiresAt(date59);
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder58.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken63 = builder62.build();
        boolean boolean64 = accessToken63.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet65 = accessToken63.getScopes();
        boolean boolean66 = scopeSerializer3.isEmpty(serializerProvider56, scopeSet65);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass67 = scopeSerializer3.handledType();
        org.osiam.client.oauth.Scope scope69 = new org.osiam.client.oauth.Scope("");
        org.osiam.client.oauth.AccessToken.Builder builder71 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope72 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder71.addScope(scope72);
        org.osiam.client.oauth.Scope[] scopeArray74 = new org.osiam.client.oauth.Scope[] { scope69, scope72 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet75 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet75, scopeArray74);
        boolean boolean77 = scopeSerializer3.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet75);
        boolean boolean78 = scopeSerializer0.isEmpty(serializerProvider2, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet75);
        boolean boolean79 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper80 = null;
        com.fasterxml.jackson.databind.JavaType javaType81 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper80, javaType81);
        boolean boolean83 = scopeSerializer0.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder85 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope86 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder87 = builder85.addScope(scope86);
        org.osiam.client.oauth.AccessToken.Builder builder89 = builder85.setClientId("ADMIN");
        org.osiam.client.oauth.AccessToken.Builder builder91 = builder89.setClientId("refresh_token");
        org.osiam.client.oauth.AccessToken.Builder builder93 = builder91.setRefreshToken("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder95 = builder93.setUserId("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.oauth.AccessToken accessToken96 = builder95.build();
        java.lang.String str97 = accessToken96.getType();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet98 = accessToken96.getScopes();
        boolean boolean99 = scopeSerializer0.isEmpty(scopeSet98);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertNotNull(scope9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GET" + "'", str13, "GET");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ME" + "'", str16, "ME");
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PATCH" + "'", str19, "PATCH");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PATCH" + "'", str20, "PATCH");
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GET" + "'", str25, "GET");
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertNotNull(scopeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(accessToken50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(scopeSet52);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(accessToken63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(scopeSet65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(scopeSetClass67);
        org.junit.Assert.assertNotNull(scope72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(scopeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(scope86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(accessToken96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
        org.junit.Assert.assertNotNull(scopeSet98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test11242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11242");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        java.lang.Class<?> wildcardClass11 = builder10.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test11243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11243");
        org.osiam.client.exception.ConflictException conflictException2 = new org.osiam.client.exception.ConflictException("org.osiam.client.exception.NoResultException: refresh_token");
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException4 = new org.osiam.client.exception.InvalidAttributeException("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        conflictException2.addSuppressed((java.lang.Throwable) invalidAttributeException4);
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException6 = new org.osiam.client.exception.ConnectionInitializationException("PATCH", (java.lang.Throwable) invalidAttributeException4);
        org.osiam.client.exception.OsiamRequestException osiamRequestException10 = new org.osiam.client.exception.OsiamRequestException(404, "org.osiam.client.exception.OsiamClientException: descending");
        org.osiam.client.exception.OsiamClientException osiamClientException11 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.OsiamClientException: descending", (java.lang.Throwable) osiamRequestException10);
        invalidAttributeException4.addSuppressed((java.lang.Throwable) osiamRequestException10);
    }

    @Test
    public void test11244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11244");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count((int) (short) 0);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder4.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder4.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder4.count(409);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.ascending("");
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.attributes("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder14.descending("org.osiam.client.exception.OsiamRequestException: hi!");
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.count((-1));
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder20.attributes("org.osiam.client.exception.ConnectionInitializationException: Bearer ");
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder20.descending("org.osiam.client.exception.OsiamClientException: hi!");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
    }

    @Test
    public void test11245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11245");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector9.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        org.osiam.client.query.Query query21 = queryBuilder19.build();
        long long22 = query21.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder23 = osiamConnector9.createQueryBuilder(query21);
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        boolean boolean31 = accessToken30.isRefreshTokenExpired();
        java.lang.String str32 = accessToken30.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder33 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder35.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.descending("hi!");
        org.osiam.client.query.Query query42 = queryBuilder41.build();
        java.lang.String str43 = query42.toString();
        java.lang.String str44 = query42.getSortOrder();
        java.lang.String str45 = query42.getSortBy();
        java.lang.String str46 = query42.getFilter();
        java.lang.String str47 = query42.toString();
        boolean boolean48 = accessToken30.equals((java.lang.Object) query42);
        org.osiam.client.query.QueryBuilder queryBuilder49 = osiamConnector9.createQueryBuilder(query42);
        org.osiam.resources.scim.Group group51 = null;
        org.osiam.client.AuthService.Builder builder53 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder55 = builder53.setClientId("ME");
        org.osiam.client.AuthService.Builder builder57 = builder55.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder59 = builder57.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder61 = builder59.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService62 = builder61.build();
        org.osiam.client.oauth.AccessToken.Builder builder64 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date65 = null;
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder64.setRefreshTokenExpiresAt(date65);
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder64.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken69 = builder68.build();
        boolean boolean70 = accessToken69.isRefreshTokenExpired();
        java.lang.String str71 = authService62.extractErrorMessageForbidden(accessToken69);
        boolean boolean72 = accessToken69.isRefreshTokenExpired();
        java.lang.String str73 = accessToken69.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group74 = osiamConnector9.replaceGroup("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME", group51, accessToken69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str47, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(authService62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(accessToken69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Insufficient scopes: []" + "'", str71, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test11246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11246");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.util.Collection<java.lang.Object> objCollection1 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Collection<java.lang.Object> objCollection2 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer4 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass5 = scopeDeserializer4.handledType();
        boolean boolean6 = scopeDeserializer4.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet7 = scopeDeserializer4.getNullValue();
        java.lang.Class<?> wildcardClass8 = scopeDeserializer4.handledType();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader9 = scopeDeserializer4.getObjectIdReader();
        java.lang.Class<?> wildcardClass10 = scopeDeserializer4.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer11 = scopeDeserializer4.getDelegatee();
        java.lang.Class<?> wildcardClass12 = scopeDeserializer4.handledType();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader13 = scopeDeserializer4.getObjectIdReader();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer14 = scopeDeserializer0.replaceDelegatee((com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeDeserializer4);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(objCollection1);
        org.junit.Assert.assertNull(objCollection2);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(scopeSet7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(objectIdReader9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardJsonDeserializer11);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(objectIdReader13);
    }

    @Test
    public void test11247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11247");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.toString();
        java.lang.String str23 = query20.toString();
        int int24 = query20.getCount();
        long long25 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder26 = osiamConnector7.createQueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        org.osiam.client.query.Query query37 = queryBuilder35.build();
        java.lang.String str38 = query37.getSortBy();
        java.lang.String str39 = query37.getFilter();
        int int40 = query37.getCount();
        long long41 = query37.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder42 = osiamConnector7.createQueryBuilder(query37);
        org.osiam.client.query.QueryBuilder queryBuilder43 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder45.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder45.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder49.descending("hi!");
        org.osiam.client.query.Query query52 = queryBuilder51.build();
        java.lang.String str53 = query52.toString();
        java.lang.String str54 = query52.getSortOrder();
        java.lang.String str55 = query52.getSortBy();
        java.lang.String str56 = query52.getFilter();
        java.lang.String str57 = query52.getSortOrder();
        java.lang.String str58 = query52.getAttributes();
        java.lang.String str59 = query52.getAttributes();
        org.osiam.client.query.Query query60 = query52.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder61 = osiamConnector7.createQueryBuilder(query52);
        org.osiam.client.query.QueryBuilder queryBuilder62 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder62.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder66 = queryBuilder64.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder68 = queryBuilder64.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder70 = queryBuilder68.descending("hi!");
        org.osiam.client.query.Query query71 = queryBuilder70.build();
        java.lang.String str72 = query71.toString();
        java.lang.String str73 = query71.getSortOrder();
        java.lang.String str74 = query71.getSortBy();
        long long75 = query71.getStartIndex();
        java.lang.String str76 = query71.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder77 = new org.osiam.client.query.QueryBuilder(query71);
        java.lang.String str78 = query71.getSortOrder();
        int int79 = query71.getCount();
        java.lang.String str80 = query71.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder81 = new org.osiam.client.query.QueryBuilder(query71);
        org.osiam.client.query.QueryBuilder queryBuilder82 = osiamConnector7.createQueryBuilder(query71);
        org.osiam.resources.scim.Group group83 = null;
        org.osiam.client.oauth.AccessToken accessToken84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group85 = osiamConnector7.createGroup(group83, accessToken84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertNotNull(query37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(query52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str53, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "descending" + "'", str54, "descending");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "descending" + "'", str57, "descending");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Authorization" + "'", str58, "Authorization");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Authorization" + "'", str59, "Authorization");
        org.junit.Assert.assertNotNull(query60);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertNotNull(queryBuilder68);
        org.junit.Assert.assertNotNull(queryBuilder70);
        org.junit.Assert.assertNotNull(query71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str72, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "descending" + "'", str73, "descending");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "descending" + "'", str78, "descending");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Authorization" + "'", str80, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder82);
    }

    @Test
    public void test11248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11248");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector.Builder builder12 = builder2.setEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setResourceServerEndpoint("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("org.osiam.client.exception.OsiamRequestException: hi!");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientSecret("org.osiam.client.exception.OsiamRequestException: descending");
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setEndpoint("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.OsiamConnector.Builder builder24 = builder20.setEndpoint("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test11249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11249");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query7 = queryBuilder4.build();
        org.osiam.client.query.Query query8 = query7.nextPage();
        org.osiam.client.query.Query query9 = query8.previousPage();
        java.lang.String str10 = query8.getSortOrder();
        java.lang.String str11 = query8.getAttributes();
        java.lang.String str12 = query8.getFilter();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(query7);
        org.junit.Assert.assertNotNull(query8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Authorization" + "'", str11, "Authorization");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test11250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11250");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        java.lang.Class<?> wildcardClass3 = osiamUserService2.getClass();
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test11251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11251");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        boolean boolean18 = accessToken17.isRefreshTokenExpired();
        java.lang.String str19 = authService10.extractErrorMessageForbidden(accessToken17);
        boolean boolean20 = accessToken17.isRefreshTokenExpired();
        java.lang.String str21 = accessToken17.getType();
        java.lang.String str22 = accessToken17.getToken();
        java.util.Date date23 = accessToken17.getRefreshTokenExpiresAt();
        java.lang.String str24 = accessToken17.toString();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken17);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Bearer " + "'", str22, "Bearer ");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str24, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test11252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11252");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer7 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer6);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeSetJsonDeserializer5.getEmptyValue();
        boolean boolean9 = scopeSetJsonDeserializer5.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet10 = scopeSetJsonDeserializer5.getEmptyValue();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer11 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer12 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer11);
        boolean boolean13 = scopeSetJsonDeserializer12.isCachable();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer14 = scopeSetJsonDeserializer12.getDelegatee();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer7);
        org.junit.Assert.assertNull(scopeSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(scopeSet10);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardJsonDeserializer14);
    }

    @Test
    public void test11253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11253");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder6 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder6.build();
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken15);
        java.lang.String str17 = osiamGroupService8.extractErrorMessageForbidden(accessToken15);
        java.util.Date date18 = accessToken15.getExpiresAt();
        boolean boolean19 = accessToken15.isRefreshTokenExpired();
        java.lang.String str20 = accessToken15.getUserId();
        java.lang.String str21 = accessToken15.getType();
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder24.count((int) (short) -1);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.filter("Bearer ");
        org.osiam.client.query.QueryBuilder queryBuilder32 = queryBuilder30.count((int) (short) 0);
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.startIndex((long) '4');
        boolean boolean35 = accessToken15.equals((java.lang.Object) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group36 = osiamGroupService3.getGroup("hi!", accessToken15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Insufficient scopes: []" + "'", str17, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test11254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11254");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        javax.ws.rs.core.Response.StatusType statusType14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = osiamGroupService3.extractErrorMessageDefault("2024-03-22T13:51:20.388", statusType14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
    }

    @Test
    public void test11255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11255");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setAuthServerEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setResourceServerEndpoint("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector15 = builder10.build();
        org.osiam.client.OsiamConnector osiamConnector16 = builder10.build();
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        java.util.Date date24 = accessToken23.getExpiresAt();
        java.lang.String str25 = accessToken23.getRefreshToken();
        java.lang.String str26 = accessToken23.getType();
        java.lang.String str27 = accessToken23.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList28 = osiamConnector16.getAllUsers(accessToken23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
        org.junit.Assert.assertNotNull(osiamConnector16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test11256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11256");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("authorization_code");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService6 = builder3.build();
        org.osiam.client.OsiamGroupService.Builder builder8 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        java.util.Date date17 = accessToken16.getExpiresAt();
        java.lang.String str18 = accessToken16.getRefreshToken();
        boolean boolean19 = accessToken16.isClientOnly();
        java.lang.String str20 = osiamGroupService9.extractErrorMessageForbidden(accessToken16);
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken27 = builder26.build();
        boolean boolean28 = accessToken27.isRefreshTokenExpired();
        java.lang.String str29 = accessToken27.getUserId();
        java.lang.String str30 = accessToken27.getToken();
        boolean boolean31 = accessToken27.isExpired();
        java.lang.String str32 = accessToken27.getClientId();
        java.lang.String str33 = accessToken27.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet34 = accessToken27.getScopes();
        java.lang.String str35 = osiamGroupService9.extractErrorMessageForbidden(accessToken27);
        java.util.Date date36 = accessToken27.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken37 = authService6.validateAccessToken(accessToken27);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Bearer " + "'", str30, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(scopeSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11257");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setEndpoint("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientRedirectUri("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET POST PUT PATCH DELETE], refreshTokenId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=refresh_token, userId=org.osiam.client.exception.ConflictException: PATCH, userName=]");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        boolean boolean25 = accessToken24.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet26 = accessToken24.getScopes();
        boolean boolean27 = accessToken24.isRefreshTokenExpired();
        boolean boolean28 = accessToken24.isExpired();
        org.osiam.client.AuthService.Builder builder30 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder32 = builder30.setClientId("ME");
        org.osiam.client.AuthService.Builder builder34 = builder30.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService35 = builder30.build();
        boolean boolean36 = accessToken24.equals((java.lang.Object) builder30);
        java.lang.String str37 = accessToken24.getToken();
        java.lang.String str38 = accessToken24.getType();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList39 = osiamConnector17.getAllUsers(accessToken24);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(scopeSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(authService35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Bearer " + "'", str37, "Bearer ");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test11258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11258");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector osiamConnector11 = builder2.build();
        org.osiam.resources.scim.User user12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.addScope(scope15);
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException19 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean20 = scope17.equals((java.lang.Object) invalidAttributeException19);
        java.lang.String str21 = scope17.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder14.addScope(scope17);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.addScope(scope31);
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException35 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean36 = scope33.equals((java.lang.Object) invalidAttributeException35);
        java.lang.String str37 = scope33.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder30.addScope(scope33);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder26.addScope(scope33);
        org.osiam.client.oauth.AccessToken.Builder builder41 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.addScope(scope42);
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException46 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean47 = scope44.equals((java.lang.Object) invalidAttributeException46);
        java.lang.String str48 = scope44.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder41.addScope(scope44);
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setUserId("");
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.addScope(scope54);
        org.osiam.client.oauth.AccessToken.Builder builder57 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date58 = null;
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setRefreshTokenExpiresAt(date58);
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder57.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken62 = builder61.build();
        java.util.Date date63 = accessToken62.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder53.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder26.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder65.setRefreshToken("");
        org.osiam.client.oauth.AccessToken.Builder builder69 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date70 = null;
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder69.setRefreshTokenExpiresAt(date70);
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder69.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken74 = builder73.build();
        java.util.Date date75 = accessToken74.getExpiresAt();
        java.util.Date date76 = accessToken74.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder65.setRefreshTokenExpiresAt(date76);
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder65.setUserName("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder81 = builder65.setType("GET POST PUT PATCH DELETE");
        org.osiam.client.oauth.AccessToken accessToken82 = builder81.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user83 = osiamConnector11.createUser(user12, accessToken82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(osiamConnector11);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GET" + "'", str21, "GET");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "GET" + "'", str37, "GET");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "GET" + "'", str48, "GET");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(accessToken62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(accessToken74);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(accessToken82);
    }

    @Test
    public void test11259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11259");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setResourceServerEndpoint("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("authorization_code");
        org.osiam.client.OsiamConnector osiamConnector9 = builder4.build();
        org.osiam.resources.scim.Group group10 = null;
        org.osiam.client.oauth.AccessToken accessToken11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group12 = osiamConnector9.createGroup(group10, accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
    }

    @Test
    public void test11260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11260");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("PUT");
        org.osiam.client.OsiamConnector osiamConnector7 = builder4.build();
        org.osiam.client.OsiamGroupService.Builder builder9 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        java.util.Date date18 = accessToken17.getExpiresAt();
        java.lang.String str19 = accessToken17.getUserName();
        java.lang.String str20 = accessToken17.toString();
        java.lang.String str21 = osiamGroupService10.extractErrorMessageForbidden(accessToken17);
        java.util.Date date22 = accessToken17.getRefreshTokenExpiresAt();
        java.util.Date date23 = accessToken17.getRefreshTokenExpiresAt();
        boolean boolean24 = accessToken17.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user25 = osiamConnector7.getCurrentUser(accessToken17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(osiamGroupService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str20, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test11261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11261");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector osiamConnector11 = builder10.build();
        org.osiam.resources.scim.User user13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        java.lang.String str21 = accessToken20.toString();
        java.lang.String str22 = accessToken20.getType();
        java.util.Date date23 = accessToken20.getExpiresAt();
        java.util.Date date24 = accessToken20.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user25 = osiamConnector11.replaceUser("org.osiam.client.exception.UnauthorizedException: ", user13, accessToken20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The string \"AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16\" for the URI component SCHEME contains an invalid character, ' ', at index 11.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(osiamConnector11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str21, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11262");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer7 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer8 = scopeSetJsonDeserializer6.unwrappingDeserializer(nameTransformer7);
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer9 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass10 = scopeDeserializer9.handledType();
        java.lang.Class<?> wildcardClass11 = scopeDeserializer9.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer12 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer13 = scopeDeserializer9.unwrappingDeserializer(nameTransformer12);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader14 = scopeDeserializer9.getObjectIdReader();
        boolean boolean15 = scopeDeserializer9.isCachable();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer16 = scopeDeserializer9.getDelegatee();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader17 = scopeDeserializer9.getObjectIdReader();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer18 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer19 = scopeDeserializer9.unwrappingDeserializer(nameTransformer18);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer20 = scopeSetJsonDeserializer6.replaceDelegatee(scopeSetJsonDeserializer19);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer13);
        org.junit.Assert.assertNull(objectIdReader14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(wildcardJsonDeserializer16);
        org.junit.Assert.assertNull(objectIdReader17);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer19);
    }

    @Test
    public void test11263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11263");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder1.build();
        org.osiam.resources.scim.Group group8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.addScope(scope11);
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException15 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean16 = scope13.equals((java.lang.Object) invalidAttributeException15);
        java.lang.String str17 = scope13.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder10.addScope(scope13);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.addScope(scope27);
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException31 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean32 = scope29.equals((java.lang.Object) invalidAttributeException31);
        java.lang.String str33 = scope29.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder26.addScope(scope29);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder22.addScope(scope29);
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.addScope(scope38);
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException42 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean43 = scope40.equals((java.lang.Object) invalidAttributeException42);
        java.lang.String str44 = scope40.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder37.addScope(scope40);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.setUserId("");
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.addScope(scope50);
        org.osiam.client.oauth.AccessToken.Builder builder53 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date54 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.setRefreshTokenExpiresAt(date54);
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder53.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken58 = builder57.build();
        java.util.Date date59 = accessToken58.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder49.setRefreshTokenExpiresAt(date59);
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder22.setRefreshTokenExpiresAt(date59);
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder61.setRefreshToken("");
        org.osiam.client.oauth.AccessToken.Builder builder65 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date66 = null;
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder65.setRefreshTokenExpiresAt(date66);
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder65.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken70 = builder69.build();
        java.util.Date date71 = accessToken70.getExpiresAt();
        java.util.Date date72 = accessToken70.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder61.setRefreshTokenExpiresAt(date72);
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder61.setUserName("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder61.setType("GET POST PUT PATCH DELETE");
        org.osiam.client.oauth.AccessToken accessToken78 = builder77.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group79 = osiamGroupService6.updateResource("org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", group8, accessToken78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GET" + "'", str17, "GET");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GET" + "'", str33, "GET");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "GET" + "'", str44, "GET");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(accessToken58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(accessToken70);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(accessToken78);
    }

    @Test
    public void test11264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11264");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder1.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService6 = builder1.build();
        org.osiam.client.AuthService.Builder builder8 = builder1.setClientId("Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientRedirectUri("2024-03-22T13:51:20.388");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test11265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11265");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        java.lang.String str13 = query9.getFilter();
        java.lang.String str14 = query9.toString();
        java.lang.String str15 = query9.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder(query9);
        java.lang.String str17 = query9.getSortBy();
        org.osiam.client.query.Query query18 = query9.nextPage();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.query.Query query19 = query9.previousPage();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: StartIndex < 1 is not possible.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "descending" + "'", str15, "descending");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(query18);
    }

    @Test
    public void test11266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11266");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        java.util.Date date7 = accessToken6.getExpiresAt();
        java.lang.String str8 = accessToken6.getClientId();
        boolean boolean9 = accessToken6.isExpired();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test11267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11267");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.addScope(scope14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setClientId("GET");
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken24);
        java.util.Date date26 = accessToken24.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder17.setExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setType("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setUserName("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder29.setUserId("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test11268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11268");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group5 = osiamGroupService2.mapToResource("org.osiam.client.exception.OsiamClientException: ME");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: org.osiam.client.exception.OsiamClientException: ME");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
    }

    @Test
    public void test11269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11269");
        org.osiam.client.exception.OsiamClientException osiamClientException1 = new org.osiam.client.exception.OsiamClientException("Insufficient scopes: [Authorization, GET, GET POST PUT PATCH DELETE, PUT]");
        java.lang.Throwable[] throwableArray2 = osiamClientException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test11270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11270");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet62 = accessToken60.getScopes();
        boolean boolean63 = scopeSerializer0.isEmpty(serializerProvider53, scopeSet62);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass64 = scopeSerializer0.handledType();
        org.osiam.client.oauth.Scope scope66 = new org.osiam.client.oauth.Scope("");
        org.osiam.client.oauth.AccessToken.Builder builder68 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope69 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder68.addScope(scope69);
        org.osiam.client.oauth.Scope[] scopeArray71 = new org.osiam.client.oauth.Scope[] { scope66, scope69 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet72 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet72, scopeArray71);
        boolean boolean74 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet72);
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer75 = scopeSerializer0.getDelegatee();
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper76 = null;
        com.fasterxml.jackson.databind.JavaType javaType77 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper76, javaType77);
        boolean boolean79 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper80 = null;
        com.fasterxml.jackson.databind.JavaType javaType81 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper80, javaType81);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer83 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer84 = scopeSerializer0.unwrappingSerializer(nameTransformer83);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass85 = scopeSerializer0.handledType();
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer86 = scopeSerializer0.getDelegatee();
        boolean boolean87 = scopeSerializer0.usesObjectId();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(scopeSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(scopeSetClass64);
        org.junit.Assert.assertNotNull(scope69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(scopeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(wildcardJsonSerializer75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer84);
        org.junit.Assert.assertNull(scopeSetClass85);
        org.junit.Assert.assertNull(wildcardJsonSerializer86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test11271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11271");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("ME");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getUserName();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.toString();
        java.lang.String str14 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget15 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setType("");
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder22.setUserId("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.oauth.Scope scope28 = new org.osiam.client.oauth.Scope("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder22.addScope(scope28);
        org.osiam.client.oauth.AccessToken accessToken30 = builder22.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group31 = osiamGroupService2.getResource("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.NoResultException: refresh_token", accessToken30);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str13, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
    }

    @Test
    public void test11272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11272");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        boolean boolean3 = scopeDeserializer0.isCachable();
        java.util.Collection<java.lang.Object> objCollection4 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer5 = scopeDeserializer0.getDelegatee();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer7 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader8 = scopeDeserializer0.getObjectIdReader();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(objCollection4);
        org.junit.Assert.assertNull(wildcardJsonDeserializer5);
        org.junit.Assert.assertNull(scopeSet6);
        org.junit.Assert.assertNull(wildcardJsonDeserializer7);
        org.junit.Assert.assertNull(objectIdReader8);
    }

    @Test
    public void test11273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11273");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("");
        org.osiam.client.AuthService authService8 = builder7.build();
        org.osiam.client.OsiamGroupService.Builder builder10 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService11 = builder10.build();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        boolean boolean19 = accessToken18.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet20 = accessToken18.getScopes();
        java.lang.String str21 = osiamGroupService11.extractErrorMessageForbidden(accessToken18);
        boolean boolean22 = accessToken18.isClientOnly();
        java.lang.String str23 = accessToken18.getType();
        java.lang.String str24 = accessToken18.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken25 = authService8.validateAccessToken(accessToken18);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(authService8);
        org.junit.Assert.assertNotNull(osiamGroupService11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(scopeSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test11274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11274");
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.AbstractOsiamService.Builder<java.net.URI> uRIBuilder1 = new org.osiam.client.AbstractOsiamService.Builder<java.net.URI>("");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11275");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count((int) (short) 0);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder4.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder4.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.ascending("password");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count((int) (short) -1);
        org.osiam.client.query.Query query15 = queryBuilder10.build();
        java.lang.String str16 = query15.toString();
        org.osiam.client.query.QueryBuilder queryBuilder17 = new org.osiam.client.query.QueryBuilder(query15);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: descending");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]" + "'", str16, "Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
        org.junit.Assert.assertNotNull(queryBuilder19);
    }

    @Test
    public void test11276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11276");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder7 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder7.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet17 = accessToken15.getScopes();
        java.lang.String str18 = osiamGroupService8.extractErrorMessageForbidden(accessToken15);
        boolean boolean19 = accessToken15.isClientOnly();
        boolean boolean20 = accessToken15.isClientOnly();
        java.lang.String str21 = accessToken15.toString();
        java.lang.String str22 = osiamGroupService4.extractErrorMessageForbidden(accessToken15);
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken29 = builder28.build();
        boolean boolean30 = accessToken29.isRefreshTokenExpired();
        java.lang.String str31 = accessToken29.getUserId();
        java.lang.String str32 = accessToken29.getToken();
        java.util.Date date33 = accessToken29.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken29);
        java.lang.String str35 = osiamGroupService4.extractErrorMessageForbidden(accessToken29);
        org.osiam.resources.scim.UpdateGroup updateGroup37 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date40 = null;
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setRefreshTokenExpiresAt(date40);
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder39.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken44 = builder43.build();
        java.util.Date date45 = accessToken44.getExpiresAt();
        java.lang.String str46 = accessToken44.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken44);
        java.lang.String str48 = accessToken44.getClientId();
        boolean boolean49 = accessToken44.isRefreshTokenExpired();
        boolean boolean50 = accessToken44.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group51 = osiamGroupService4.updateGroup("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", updateGroup37, accessToken44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(scopeSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str21, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Insufficient scopes: []" + "'", str22, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Bearer " + "'", str32, "Bearer ");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(accessToken44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test11277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11277");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder8.descending("client_credentials");
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.descending("org.osiam.client.exception.OsiamClientException: client_credentials");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder11.startIndex((long) (byte) 1);
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
    }

    @Test
    public void test11278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11278");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector osiamConnector9 = builder8.build();
        org.osiam.client.AuthService.Builder builder13 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientId("ME");
        org.osiam.client.AuthService.Builder builder17 = builder15.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder19 = builder17.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder21 = builder19.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder23 = builder19.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService24 = builder23.build();
        org.osiam.client.AuthService.Builder builder26 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder28 = builder26.setClientId("ME");
        org.osiam.client.AuthService.Builder builder30 = builder28.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder32 = builder30.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder34 = builder32.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService35 = builder34.build();
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken42 = builder41.build();
        boolean boolean43 = accessToken42.isRefreshTokenExpired();
        java.lang.String str44 = accessToken42.getUserId();
        java.lang.String str45 = accessToken42.getToken();
        java.lang.String str46 = authService35.extractErrorMessageForbidden(accessToken42);
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str48 = scope47.getValue();
        java.lang.String str49 = scope47.toString();
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray51 = new org.osiam.client.oauth.Scope[] { scope47, scope50 };
        java.net.URI uRI52 = authService35.getAuthorizationUri(scopeArray51);
        java.net.URI uRI53 = authService24.getAuthorizationUri(scopeArray51);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken54 = osiamConnector9.retrieveAccessToken("DELETE", "refresh_token", scopeArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(authService24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(authService35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Bearer " + "'", str45, "Bearer ");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Insufficient scopes: []" + "'", str46, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PATCH" + "'", str48, "PATCH");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PATCH" + "'", str49, "PATCH");
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertNotNull(scopeArray51);
        org.junit.Assert.assertNotNull(uRI52);
        org.junit.Assert.assertNotNull(uRI53);
    }

    @Test
    public void test11279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11279");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getRefreshToken();
        boolean boolean17 = accessToken13.isExpired();
        java.lang.String str18 = accessToken13.getRefreshToken();
        java.lang.String str19 = accessToken13.getRefreshToken();
        java.lang.String str20 = osiamGroupService4.extractErrorMessageForbidden(accessToken13);
        javax.ws.rs.core.Response.StatusType statusType22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = osiamGroupService4.extractErrorMessage("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.OsiamClientException: PATCH", statusType22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
    }

    @Test
    public void test11280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11280");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setClientId("ADMIN");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setClientId("refresh_token");
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshToken("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setUserId("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        java.lang.String str13 = accessToken12.toString();
        java.lang.String str14 = accessToken12.getUserId();
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET POST PUT PATCH DELETE], refreshTokenId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=refresh_token, userId=org.osiam.client.exception.ConflictException: PATCH, userName=]" + "'", str13, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET POST PUT PATCH DELETE], refreshTokenId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=refresh_token, userId=org.osiam.client.exception.ConflictException: PATCH, userName=]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.osiam.client.exception.ConflictException: PATCH" + "'", str14, "org.osiam.client.exception.ConflictException: PATCH");
    }

    @Test
    public void test11281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11281");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.Query query10 = query9.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder(query10);
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(query10);
    }

    @Test
    public void test11282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11282");
        org.osiam.client.exception.ScimErrorMessage scimErrorMessage0 = new org.osiam.client.exception.ScimErrorMessage();
        java.lang.String str1 = scimErrorMessage0.getErrorCode();
        java.lang.String str2 = scimErrorMessage0.getDescription();
        java.lang.String str3 = scimErrorMessage0.getErrorCode();
        java.lang.String str4 = scimErrorMessage0.getDescription();
        java.lang.String str5 = scimErrorMessage0.getDescription();
        java.lang.String str6 = scimErrorMessage0.getErrorCode();
        java.lang.String str7 = scimErrorMessage0.getErrorCode();
        java.lang.String str8 = scimErrorMessage0.getErrorCode();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test11283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11283");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet17 = accessToken13.getScopes();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        java.lang.String str19 = osiamGroupService2.extractErrorMessageForbidden(accessToken13);
        org.osiam.client.OsiamConnector.Builder builder20 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder24 = builder22.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder26 = builder24.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder28 = builder24.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder30 = builder28.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder32 = builder30.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder34 = builder32.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder36 = builder34.setResourceServerEndpoint("GET POST PUT PATCH DELETE");
        org.osiam.client.OsiamConnector osiamConnector37 = builder36.build();
        boolean boolean38 = accessToken13.equals((java.lang.Object) osiamConnector37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date41 = null;
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setRefreshTokenExpiresAt(date41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder40.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken45 = builder44.build();
        boolean boolean46 = accessToken45.isRefreshTokenExpired();
        boolean boolean47 = accessToken45.isClientOnly();
        java.lang.String str48 = accessToken45.getClientId();
        boolean boolean49 = accessToken45.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder51 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope52 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.addScope(scope52);
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException56 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean57 = scope54.equals((java.lang.Object) invalidAttributeException56);
        java.lang.String str58 = scope54.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder51.addScope(scope54);
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder61.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder63.setUserName("Authorization");
        boolean boolean66 = accessToken45.equals((java.lang.Object) builder63);
        java.lang.String str67 = accessToken45.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken68 = osiamConnector37.validateAccessToken(accessToken45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(scopeSet17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(osiamConnector37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(accessToken45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(scope52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "GET" + "'", str58, "GET");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
    }

    @Test
    public void test11284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11284");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.resources.scim.Group group7 = null;
        org.osiam.client.AuthService.Builder builder9 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientSecret("");
        org.osiam.client.AuthService.Builder builder17 = builder15.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService authService18 = builder17.build();
        org.osiam.client.AuthService.Builder builder20 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientId("ME");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService25 = builder24.build();
        org.osiam.client.OsiamGroupService.Builder builder27 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService28 = builder27.build();
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        boolean boolean36 = accessToken35.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet37 = accessToken35.getScopes();
        java.lang.String str38 = osiamGroupService28.extractErrorMessageForbidden(accessToken35);
        boolean boolean39 = accessToken35.isClientOnly();
        java.lang.String str40 = authService25.extractErrorMessageForbidden(accessToken35);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken49 = builder46.build();
        java.lang.String str50 = accessToken49.toString();
        java.lang.String str51 = authService25.extractErrorMessageForbidden(accessToken49);
        org.osiam.client.oauth.AccessToken.Builder builder53 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date54 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.setRefreshTokenExpiresAt(date54);
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder53.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken58 = builder57.build();
        java.util.Date date59 = accessToken58.getExpiresAt();
        java.lang.String str60 = accessToken58.getRefreshToken();
        java.lang.String str61 = accessToken58.getType();
        java.lang.String str62 = accessToken58.getClientId();
        java.lang.String str63 = accessToken58.getUserName();
        java.lang.String str64 = authService25.extractErrorMessageForbidden(accessToken58);
        org.osiam.client.exception.UnauthorizedException unauthorizedException66 = new org.osiam.client.exception.UnauthorizedException("client_credentials");
        int int67 = unauthorizedException66.getHttpStatusCode();
        int int68 = unauthorizedException66.getHttpStatusCode();
        java.lang.Throwable[] throwableArray69 = unauthorizedException66.getSuppressed();
        boolean boolean70 = accessToken58.equals((java.lang.Object) unauthorizedException66);
        java.lang.String str71 = accessToken58.toString();
        java.lang.String str72 = accessToken58.getToken();
        java.lang.String str73 = authService18.extractErrorMessageForbidden(accessToken58);
        java.util.Date date74 = accessToken58.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group75 = osiamGroupService4.replaceResource("org.osiam.client.exception.UnauthorizedException: ", group7, accessToken58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(authService18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(authService25);
        org.junit.Assert.assertNotNull(osiamGroupService28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(scopeSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Insufficient scopes: []" + "'", str38, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Insufficient scopes: []" + "'", str40, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str50, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Insufficient scopes: []" + "'", str51, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(accessToken58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Insufficient scopes: []" + "'", str64, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 401 + "'", int67 == 401);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 401 + "'", int68 == 401);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str71, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Bearer " + "'", str72, "Bearer ");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Insufficient scopes: []" + "'", str73, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11285");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        int int12 = query9.getCount();
        org.osiam.client.query.Query query13 = query9.nextPage();
        java.lang.String str14 = query13.toString();
        java.lang.String str15 = query13.getFilter();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test11286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11286");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.NoResultException: ME");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientRedirectUri("Insufficient scopes: [GET, GET POST PUT PATCH DELETE]");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test11287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11287");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder13 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.ascending("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.ascending("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
    }

    @Test
    public void test11288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11288");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer3 = scopeDeserializer0.getDelegatee();
        boolean boolean4 = scopeDeserializer0.isCachable();
        java.util.Collection<java.lang.Object> objCollection5 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer6 = scopeDeserializer0.getDelegatee();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardJsonDeserializer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(objCollection5);
        org.junit.Assert.assertNull(wildcardJsonDeserializer6);
    }

    @Test
    public void test11289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11289");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder12.setResourceServerEndpoint("hi!");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setEndpoint("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test11290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11290");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer7 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer6);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeSetJsonDeserializer5.getEmptyValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = scopeSetJsonDeserializer5.getEmptyValue();
        java.util.Collection<java.lang.Object> objCollection10 = scopeSetJsonDeserializer5.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer11 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer12 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer11);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer7);
        org.junit.Assert.assertNull(scopeSet8);
        org.junit.Assert.assertNull(scopeSet9);
        org.junit.Assert.assertNull(objCollection10);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer12);
    }

    @Test
    public void test11291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11291");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope10 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str11 = scope10.toString();
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder5.addScope(scope10);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setType("Cannot connect to server");
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserName("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(scope10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PUT" + "'", str11, "PUT");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test11292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11292");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.core.JsonParser jsonParser4 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext5 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer6 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean7 = scopeSerializer6.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass8 = scopeSerializer6.handledType();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        java.util.Date date16 = accessToken15.getExpiresAt();
        java.lang.String str17 = accessToken15.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken15.getScopes();
        boolean boolean19 = scopeSerializer6.isEmpty(scopeSet18);
        org.osiam.client.helper.ScopeSerializer scopeSerializer20 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        java.lang.String str30 = scope26.getValue();
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str33 = scope32.toString();
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str36 = scope35.getValue();
        java.lang.String str37 = scope35.getValue();
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException40 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean41 = scope38.equals((java.lang.Object) invalidAttributeException40);
        java.lang.String str42 = scope38.getValue();
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException48 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean49 = scope46.equals((java.lang.Object) invalidAttributeException48);
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope51 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope52 = org.osiam.client.oauth.Scope.GET;
        boolean boolean54 = scope52.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray56 = new org.osiam.client.oauth.Scope[] { scope25, scope26, scope31, scope32, scope34, scope35, scope38, scope43, scope44, scope45, scope46, scope50, scope51, scope52, scope55 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet57 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet57, scopeArray56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder22.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet57);
        boolean boolean60 = scopeSerializer20.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet57);
        org.osiam.client.oauth.AccessToken.Builder builder62 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date63 = null;
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder62.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken67 = builder66.build();
        boolean boolean68 = accessToken67.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet69 = accessToken67.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator70 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider71 = null;
        scopeSerializer20.serialize(scopeSet69, jsonGenerator70, serializerProvider71);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider73 = null;
        org.osiam.client.oauth.AccessToken.Builder builder75 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date76 = null;
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder75.setRefreshTokenExpiresAt(date76);
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder75.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken80 = builder79.build();
        boolean boolean81 = accessToken80.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet82 = accessToken80.getScopes();
        boolean boolean83 = scopeSerializer20.isEmpty(serializerProvider73, scopeSet82);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator84 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider85 = null;
        scopeSerializer6.serialize(scopeSet82, jsonGenerator84, serializerProvider85);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet87 = scopeDeserializer0.deserialize(jsonParser4, deserializationContext5, scopeSet82);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Can not update object of type java.util.HashSet (by deserializer of type org.osiam.client.helper.ScopeDeserializer)");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(scopeSetClass8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GET" + "'", str30, "GET");
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ME" + "'", str33, "ME");
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PATCH" + "'", str36, "PATCH");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PATCH" + "'", str37, "PATCH");
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GET" + "'", str42, "GET");
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertNotNull(scope51);
        org.junit.Assert.assertNotNull(scope52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertNotNull(scopeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(accessToken67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(scopeSet69);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(accessToken80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(scopeSet82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test11293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11293");
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.AbstractOsiamService.Builder<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetBuilder1 = new org.osiam.client.AbstractOsiamService.Builder<java.util.Set<org.osiam.client.oauth.Scope>>("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: descending");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11294");
        org.osiam.client.oauth.Scope scope1 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.InvalidAttributeException: refresh_token");
    }

    @Test
    public void test11295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11295");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Query [attributes=Authorization, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=10]");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setType("");
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setType("authorization_code");
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshToken("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user16 = osiamUserService2.getCurrentUser(accessToken15);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
    }

    @Test
    public void test11296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11296");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        boolean boolean8 = accessToken6.isClientOnly();
        java.lang.String str9 = accessToken6.getClientId();
        java.lang.String str10 = accessToken6.getUserId();
        java.lang.String str11 = accessToken6.getClientId();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer12 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass13 = scopeDeserializer12.handledType();
        boolean boolean14 = scopeDeserializer12.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet15 = scopeDeserializer12.getNullValue();
        java.lang.Class<?> wildcardClass16 = scopeDeserializer12.handledType();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet17 = scopeDeserializer12.getNullValue();
        boolean boolean18 = accessToken6.equals((java.lang.Object) scopeDeserializer12);
        boolean boolean19 = scopeDeserializer12.isCachable();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(scopeSet15);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNull(scopeSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test11297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11297");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.descending("hi!");
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        java.lang.String str16 = query15.getAttributes();
        java.lang.String str17 = query15.toString();
        java.lang.String str18 = query15.getSortBy();
        org.osiam.client.query.Query query19 = query15.nextPage();
        java.lang.String str20 = query19.getAttributes();
        java.lang.String str21 = query19.getFilter();
        org.osiam.client.query.Query query22 = query19.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder23 = osiamConnector5.createQueryBuilder(query19);
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.attributes("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.descending("descending");
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.ascending("org.osiam.client.exception.ConnectionInitializationException: Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Authorization" + "'", str16, "Authorization");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str17, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Authorization" + "'", str20, "Authorization");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(query22);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
    }

    @Test
    public void test11298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11298");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector17 = builder14.build();
        org.osiam.client.OsiamConnector osiamConnector18 = builder14.build();
        org.osiam.client.AuthService.Builder builder20 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientId("ME");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService25 = builder24.build();
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        boolean boolean33 = accessToken32.isRefreshTokenExpired();
        boolean boolean34 = accessToken32.isClientOnly();
        java.lang.String str35 = accessToken32.getClientId();
        java.lang.String str36 = authService25.extractErrorMessageForbidden(accessToken32);
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        boolean boolean44 = accessToken43.isRefreshTokenExpired();
        boolean boolean45 = accessToken43.isClientOnly();
        java.lang.String str46 = accessToken43.getRefreshToken();
        boolean boolean47 = accessToken43.isExpired();
        boolean boolean48 = accessToken43.isRefreshTokenExpired();
        org.osiam.client.AuthService.Builder builder50 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder52 = builder50.setClientId("ME");
        boolean boolean53 = accessToken43.equals((java.lang.Object) builder50);
        boolean boolean54 = accessToken43.isRefreshTokenExpired();
        java.lang.String str55 = authService25.extractErrorMessageForbidden(accessToken43);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser56 = osiamConnector18.getCurrentUserBasic(accessToken43);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(osiamConnector18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(authService25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Insufficient scopes: []" + "'", str55, "Insufficient scopes: []");
    }

    @Test
    public void test11299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11299");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.AuthService.Builder builder4 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder6 = builder4.setClientId("ME");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        boolean boolean18 = accessToken16.isClientOnly();
        java.lang.String str19 = accessToken16.getClientId();
        java.lang.String str20 = authService9.extractErrorMessageForbidden(accessToken16);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList21 = osiamUserService2.getAllUsers(accessToken16);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(authService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
    }

    @Test
    public void test11300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11300");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken11);
        boolean boolean13 = accessToken11.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService3.deleteGroup("", accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test11301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11301");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector.Builder builder12 = builder2.setEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setResourceServerEndpoint("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("org.osiam.client.exception.OsiamRequestException: hi!");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientSecret("org.osiam.client.exception.OsiamRequestException: descending");
        org.osiam.client.OsiamConnector osiamConnector21 = builder20.build();
        org.osiam.client.OsiamGroupService.Builder builder23 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService24 = builder23.build();
        org.osiam.client.OsiamGroupService osiamGroupService25 = builder23.build();
        javax.ws.rs.client.WebTarget webTarget26 = osiamGroupService25.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget27 = osiamGroupService25.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget28 = osiamGroupService25.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        java.lang.String str36 = osiamGroupService25.extractErrorMessageForbidden(accessToken35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        java.lang.String str44 = accessToken43.toString();
        java.lang.String str45 = accessToken43.getType();
        boolean boolean46 = accessToken43.isExpired();
        java.lang.String str47 = accessToken43.getToken();
        java.lang.String str48 = osiamGroupService25.extractErrorMessageForbidden(accessToken43);
        org.osiam.client.oauth.AccessToken.Builder builder50 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date51 = null;
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.setRefreshTokenExpiresAt(date51);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder50.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken55 = builder54.build();
        boolean boolean56 = accessToken55.isRefreshTokenExpired();
        boolean boolean57 = accessToken55.isClientOnly();
        java.lang.String str58 = accessToken55.getUserName();
        java.lang.String str59 = osiamGroupService25.extractErrorMessageForbidden(accessToken55);
        java.util.Date date60 = accessToken55.getExpiresAt();
        java.lang.String str61 = accessToken55.getType();
        boolean boolean62 = accessToken55.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList63 = osiamConnector21.getAllGroups(accessToken55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(osiamGroupService24);
        org.junit.Assert.assertNotNull(osiamGroupService25);
        org.junit.Assert.assertNotNull(webTarget26);
        org.junit.Assert.assertNotNull(webTarget27);
        org.junit.Assert.assertNotNull(webTarget28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str44, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Bearer " + "'", str47, "Bearer ");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Insufficient scopes: []" + "'", str48, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(accessToken55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Insufficient scopes: []" + "'", str59, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test11302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11302");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector osiamConnector11 = builder2.build();
        org.osiam.client.OsiamConnector osiamConnector12 = builder2.build();
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        boolean boolean20 = accessToken19.isRefreshTokenExpired();
        java.lang.String str21 = accessToken19.getUserId();
        java.lang.String str22 = accessToken19.getToken();
        boolean boolean23 = accessToken19.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user24 = osiamConnector12.getCurrentUser(accessToken19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(osiamConnector11);
        org.junit.Assert.assertNotNull(osiamConnector12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Bearer " + "'", str22, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test11303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11303");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        java.lang.String str14 = osiamGroupService3.extractErrorMessageForbidden(accessToken13);
        javax.ws.rs.client.WebTarget webTarget15 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        java.util.Date date24 = accessToken23.getExpiresAt();
        java.lang.String str25 = accessToken23.getRefreshToken();
        java.lang.String str26 = accessToken23.getType();
        java.lang.String str27 = accessToken23.getClientId();
        java.lang.String str28 = accessToken23.toString();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet29 = accessToken23.getScopes();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken23);
        java.util.Date date31 = accessToken23.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService3.deleteGroup("POST", accessToken23);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str28, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(scopeSet29);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11304");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget15 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        boolean boolean24 = accessToken23.isRefreshTokenExpired();
        java.lang.String str25 = accessToken23.getUserId();
        boolean boolean26 = accessToken23.isRefreshTokenExpired();
        java.util.Date date27 = accessToken23.getExpiresAt();
        java.lang.String str28 = accessToken23.getType();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList29 = osiamGroupService3.getAllResources(accessToken23);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(webTarget15);
        org.junit.Assert.assertNotNull(webTarget16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test11305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11305");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.AuthService authService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.lang.String str11 = accessToken9.getUserId();
        java.lang.String str12 = accessToken9.getToken();
        boolean boolean13 = accessToken9.isExpired();
        java.lang.String str14 = accessToken9.getClientId();
        java.lang.String str15 = accessToken9.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet16 = accessToken9.getScopes();
        java.lang.String str17 = authService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.client.AuthService.Builder builder19 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder21 = builder19.setClientId("ME");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService28 = builder27.build();
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        boolean boolean36 = accessToken35.isRefreshTokenExpired();
        java.lang.String str37 = authService28.extractErrorMessageForbidden(accessToken35);
        boolean boolean38 = accessToken35.isRefreshTokenExpired();
        java.lang.String str39 = accessToken35.getUserName();
        java.lang.String str40 = authService2.extractErrorMessageForbidden(accessToken35);
        java.lang.String str41 = accessToken35.getType();
        org.junit.Assert.assertNotNull(authService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Bearer " + "'", str12, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(scopeSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Insufficient scopes: []" + "'", str17, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(authService28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Insufficient scopes: []" + "'", str37, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Insufficient scopes: []" + "'", str40, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test11306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11306");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        org.osiam.resources.scim.Group group6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken15 = builder12.build();
        java.lang.String str16 = accessToken15.getClientId();
        org.osiam.client.exception.NoResultException noResultException18 = new org.osiam.client.exception.NoResultException("authorization_code");
        boolean boolean19 = accessToken15.equals((java.lang.Object) "authorization_code");
        java.lang.String str20 = accessToken15.toString();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken15);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group22 = osiamGroupService3.replaceGroup("org.osiam.client.exception.OsiamClientException: client_credentials", group6, accessToken15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str20, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
    }

    @Test
    public void test11307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11307");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Bearer ");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService6 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService7 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope10 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.addScope(scope10);
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException14 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean15 = scope12.equals((java.lang.Object) invalidAttributeException14);
        java.lang.String str16 = scope12.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder9.addScope(scope12);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshToken("GET");
        org.osiam.client.OsiamGroupService.Builder builder27 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService28 = builder27.build();
        org.osiam.client.OsiamGroupService osiamGroupService29 = builder27.build();
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken36 = builder35.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken36);
        java.lang.String str38 = osiamGroupService29.extractErrorMessageForbidden(accessToken36);
        java.util.Date date39 = accessToken36.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder23.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken accessToken41 = builder23.build();
        org.osiam.client.query.QueryBuilder queryBuilder42 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder44 = queryBuilder42.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder46 = queryBuilder44.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder44.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.descending("hi!");
        org.osiam.client.query.Query query51 = queryBuilder50.build();
        java.lang.String str52 = query51.toString();
        java.lang.String str53 = query51.getSortOrder();
        java.lang.String str54 = query51.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder55 = new org.osiam.client.query.QueryBuilder(query51);
        org.osiam.client.query.Query query56 = query51.nextPage();
        java.lang.String str57 = query51.toString();
        boolean boolean58 = accessToken41.equals((java.lang.Object) str57);
        java.lang.String str59 = accessToken41.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser60 = osiamUserService7.getCurrentUserBasic(accessToken41);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(osiamUserService6);
        org.junit.Assert.assertNotNull(osiamUserService7);
        org.junit.Assert.assertNotNull(scope10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GET" + "'", str16, "GET");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(osiamGroupService28);
        org.junit.Assert.assertNotNull(osiamGroupService29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(accessToken36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Insufficient scopes: []" + "'", str38, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(accessToken41);
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(queryBuilder46);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(query51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str52, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "descending" + "'", str53, "descending");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(query56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str57, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Bearer " + "'", str59, "Bearer ");
    }

    @Test
    public void test11308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11308");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("PUT");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientId("ADMIN");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setClientId("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.ConflictException: ");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setResourceServerEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector13 = builder12.build();
        org.osiam.client.query.QueryBuilder queryBuilder14 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query21 = queryBuilder18.build();
        org.osiam.client.query.Query query22 = query21.nextPage();
        org.osiam.client.query.Query query23 = query22.previousPage();
        org.osiam.client.query.QueryBuilder queryBuilder24 = new org.osiam.client.query.QueryBuilder(query23);
        java.lang.String str25 = query23.getFilter();
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        java.lang.String str33 = accessToken32.toString();
        java.lang.String str34 = accessToken32.getRefreshToken();
        boolean boolean35 = accessToken32.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult36 = osiamConnector13.searchUsers(query23, accessToken32);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertNotNull(query22);
        org.junit.Assert.assertNotNull(query23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str33, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test11309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11309");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector17 = builder14.build();
        org.osiam.client.query.QueryBuilder queryBuilder18 = osiamConnector17.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        boolean boolean26 = accessToken25.isRefreshTokenExpired();
        boolean boolean27 = accessToken25.isClientOnly();
        java.lang.String str28 = accessToken25.getRefreshToken();
        boolean boolean29 = accessToken25.isExpired();
        boolean boolean30 = accessToken25.isExpired();
        boolean boolean31 = accessToken25.isClientOnly();
        java.util.Date date32 = accessToken25.getExpiresAt();
        java.util.Date date33 = accessToken25.getExpiresAt();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet34 = accessToken25.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user35 = osiamConnector17.getCurrentUser(accessToken25);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scopeSet34);
    }

    @Test
    public void test11310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11310");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientRedirectUri("ME");
        org.osiam.client.AuthService authService4 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder6 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        java.util.Date date15 = accessToken14.getExpiresAt();
        java.lang.String str16 = accessToken14.getUserName();
        java.lang.String str17 = accessToken14.toString();
        java.lang.String str18 = osiamGroupService7.extractErrorMessageForbidden(accessToken14);
        boolean boolean19 = accessToken14.isClientOnly();
        java.lang.String str20 = authService4.extractErrorMessageForbidden(accessToken14);
        org.osiam.client.oauth.Scope[] scopeArray23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken24 = authService4.retrieveAccessToken("Insufficient scopes: [GET POST PUT PATCH DELETE]", "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=GET, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]", scopeArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(authService4);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str17, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
    }

    @Test
    public void test11311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11311");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.addScope(scope16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder13.setRefreshToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken27 = builder26.build();
        java.lang.Object obj28 = null;
        boolean boolean29 = accessToken27.equals(obj28);
        boolean boolean30 = accessToken27.isExpired();
        java.util.Date date31 = accessToken27.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder19.setExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setUserName("POST");
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setUserName("2024-03-22T13:51:20.388");
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("refresh_token");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder34.setExpiresAt(date39);
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test11312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11312");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer7 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer6);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader8 = scopeSetJsonDeserializer5.getObjectIdReader();
        java.lang.Class<?> wildcardClass9 = scopeSetJsonDeserializer5.handledType();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer10 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass11 = scopeDeserializer10.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer12 = scopeDeserializer10.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection13 = scopeDeserializer10.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer14 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer15 = scopeDeserializer10.unwrappingDeserializer(nameTransformer14);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet16 = scopeDeserializer10.getEmptyValue();
        java.util.Collection<java.lang.Object> objCollection17 = scopeDeserializer10.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = scopeDeserializer10.getNullValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet19 = scopeDeserializer10.getEmptyValue();
        boolean boolean20 = scopeDeserializer10.isCachable();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer21 = scopeDeserializer10.getDelegatee();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet22 = scopeDeserializer10.getEmptyValue();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer23 = scopeSetJsonDeserializer5.replaceDelegatee((com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeDeserializer10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer7);
        org.junit.Assert.assertNull(objectIdReader8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(wildcardJsonDeserializer12);
        org.junit.Assert.assertNull(objCollection13);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer15);
        org.junit.Assert.assertNull(scopeSet16);
        org.junit.Assert.assertNull(objCollection17);
        org.junit.Assert.assertNull(scopeSet18);
        org.junit.Assert.assertNull(scopeSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(wildcardJsonDeserializer21);
        org.junit.Assert.assertNull(scopeSet22);
    }

    @Test
    public void test11313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11313");
        java.lang.Throwable throwable1 = null;
        org.osiam.client.exception.OsiamClientException osiamClientException2 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.ConnectionInitializationException: AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", throwable1);
    }

    @Test
    public void test11314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11314");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer7 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer6);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeSetJsonDeserializer5.getEmptyValue();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer9 = scopeSetJsonDeserializer5.getDelegatee();
        com.fasterxml.jackson.core.JsonParser jsonParser10 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        java.util.Date date19 = accessToken18.getExpiresAt();
        java.lang.String str20 = accessToken18.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet21 = accessToken18.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet22 = scopeSetJsonDeserializer5.deserialize(jsonParser10, deserializationContext11, scopeSet21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Can not update object of type java.util.HashSet (by deserializer of type org.osiam.client.helper.ScopeDeserializer)");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer7);
        org.junit.Assert.assertNull(scopeSet8);
        org.junit.Assert.assertNull(wildcardJsonDeserializer9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(scopeSet21);
    }

    @Test
    public void test11315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11315");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector osiamConnector9 = builder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.descending("hi!");
        org.osiam.client.query.Query query19 = queryBuilder18.build();
        java.lang.String str20 = query19.toString();
        java.lang.String str21 = query19.getSortOrder();
        java.lang.String str22 = query19.getSortBy();
        org.osiam.client.query.Query query23 = query19.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder24 = osiamConnector9.createQueryBuilder(query23);
        org.osiam.client.query.QueryBuilder queryBuilder25 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.descending("hi!");
        org.osiam.client.query.Query query34 = queryBuilder33.build();
        java.lang.String str35 = query34.toString();
        java.lang.String str36 = query34.getSortOrder();
        java.lang.String str37 = query34.getSortBy();
        java.lang.String str38 = query34.getFilter();
        java.lang.String str39 = query34.getSortOrder();
        java.lang.String str40 = query34.getAttributes();
        long long41 = query34.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder42 = osiamConnector9.createQueryBuilder(query34);
        org.osiam.client.OsiamConnector.Builder builder43 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder45 = builder43.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder47 = builder45.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder49 = builder47.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector50 = builder49.build();
        org.osiam.client.query.QueryBuilder queryBuilder51 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder53 = queryBuilder51.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder55 = queryBuilder53.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder57 = queryBuilder53.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder59 = queryBuilder57.descending("hi!");
        org.osiam.client.query.Query query60 = queryBuilder59.build();
        java.lang.String str61 = query60.toString();
        java.lang.String str62 = query60.toString();
        java.lang.String str63 = query60.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder64 = osiamConnector50.createQueryBuilder(query60);
        org.osiam.client.query.QueryBuilder queryBuilder65 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder67 = queryBuilder65.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder69 = queryBuilder67.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder71 = queryBuilder67.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder73 = queryBuilder71.descending("hi!");
        org.osiam.client.query.Query query74 = queryBuilder73.build();
        org.osiam.client.query.QueryBuilder queryBuilder75 = osiamConnector50.createQueryBuilder(query74);
        org.osiam.client.query.QueryBuilder queryBuilder76 = osiamConnector9.createQueryBuilder(query74);
        org.osiam.client.oauth.AccessToken.Builder builder78 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date79 = null;
        org.osiam.client.oauth.AccessToken.Builder builder80 = builder78.setRefreshTokenExpiresAt(date79);
        org.osiam.client.oauth.AccessToken.Builder builder82 = builder78.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken83 = builder82.build();
        boolean boolean84 = accessToken83.isRefreshTokenExpired();
        java.lang.String str85 = accessToken83.getUserId();
        java.lang.String str86 = accessToken83.getClientId();
        boolean boolean87 = accessToken83.isClientOnly();
        java.lang.String str88 = accessToken83.getClientId();
        java.lang.String str89 = accessToken83.getRefreshToken();
        java.lang.String str90 = accessToken83.getClientId();
        boolean boolean91 = accessToken83.isExpired();
        java.util.Date date92 = accessToken83.getRefreshTokenExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken83);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList94 = osiamConnector9.getAllUsers(accessToken83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str20, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "descending" + "'", str21, "descending");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(query23);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(query34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str35, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "descending" + "'", str36, "descending");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "descending" + "'", str39, "descending");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Authorization" + "'", str40, "Authorization");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(osiamConnector50);
        org.junit.Assert.assertNotNull(queryBuilder53);
        org.junit.Assert.assertNotNull(queryBuilder55);
        org.junit.Assert.assertNotNull(queryBuilder57);
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(query60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str61, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str62, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertNotNull(queryBuilder67);
        org.junit.Assert.assertNotNull(queryBuilder69);
        org.junit.Assert.assertNotNull(queryBuilder71);
        org.junit.Assert.assertNotNull(queryBuilder73);
        org.junit.Assert.assertNotNull(query74);
        org.junit.Assert.assertNotNull(queryBuilder75);
        org.junit.Assert.assertNotNull(queryBuilder76);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(accessToken83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11316");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService2.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder6 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder6.build();
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken15);
        java.lang.String str17 = osiamGroupService8.extractErrorMessageForbidden(accessToken15);
        org.osiam.client.OsiamGroupService.Builder builder19 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService20 = builder19.build();
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken27 = builder26.build();
        boolean boolean28 = accessToken27.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet29 = accessToken27.getScopes();
        java.lang.String str30 = osiamGroupService20.extractErrorMessageForbidden(accessToken27);
        boolean boolean31 = accessToken27.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken27);
        java.lang.String str33 = osiamGroupService8.extractErrorMessageForbidden(accessToken27);
        java.lang.String str34 = osiamGroupService2.extractErrorMessageForbidden(accessToken27);
        org.osiam.resources.scim.Group group36 = null;
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.addScope(scope39);
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException43 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean44 = scope41.equals((java.lang.Object) invalidAttributeException43);
        java.lang.String str45 = scope41.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder38.addScope(scope41);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder52.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken57 = builder56.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken57);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken57);
        boolean boolean60 = accessToken57.isExpired();
        java.lang.String str61 = accessToken57.getClientId();
        java.lang.String str62 = accessToken57.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group63 = osiamGroupService2.replaceResource("", group36, accessToken57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Insufficient scopes: []" + "'", str17, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(scopeSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Insufficient scopes: []" + "'", str30, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Insufficient scopes: []" + "'", str33, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Insufficient scopes: []" + "'", str34, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "GET" + "'", str45, "GET");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(accessToken57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Bearer " + "'", str61, "Bearer ");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test11317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11317");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        java.lang.String str8 = accessToken6.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder9 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.descending("hi!");
        org.osiam.client.query.Query query18 = queryBuilder17.build();
        java.lang.String str19 = query18.toString();
        java.lang.String str20 = query18.getSortOrder();
        java.lang.String str21 = query18.getSortBy();
        java.lang.String str22 = query18.getFilter();
        java.lang.String str23 = query18.getSortOrder();
        java.lang.String str24 = query18.getAttributes();
        boolean boolean25 = accessToken6.equals((java.lang.Object) query18);
        org.osiam.client.OsiamConnector.Builder builder26 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder28 = builder26.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder30 = builder28.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder32 = builder30.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder34 = builder30.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder36 = builder30.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder38 = builder36.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder40 = builder36.setClientRedirectUri("PUT");
        boolean boolean41 = accessToken6.equals((java.lang.Object) builder40);
        org.osiam.client.OsiamConnector osiamConnector42 = builder40.build();
        org.osiam.client.query.QueryBuilder queryBuilder43 = osiamConnector42.createQueryBuilder();
        org.osiam.client.oauth.AccessToken accessToken44 = null;
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector42.revokeAccessToken(accessToken44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(query18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "descending" + "'", str20, "descending");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "descending" + "'", str23, "descending");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Authorization" + "'", str24, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(osiamConnector42);
        org.junit.Assert.assertNotNull(queryBuilder43);
    }

    @Test
    public void test11318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11318");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count((int) (short) -1);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.attributes("Insufficient scopes: []");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder6.filter("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder6.filter("org.osiam.client.exception.ConflictException: org.osiam.client.exception.ForbiddenException: hi!");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
    }

    @Test
    public void test11319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11319");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        boolean boolean4 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer6 = scopeSerializer0.unwrappingSerializer(nameTransformer5);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper7 = null;
        com.fasterxml.jackson.databind.JavaType javaType8 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper7, javaType8);
        boolean boolean10 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer11 = scopeSerializer0.getDelegatee();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer12 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer13 = scopeSerializer0.unwrappingSerializer(nameTransformer12);
        org.osiam.client.helper.ScopeSerializer scopeSerializer14 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str27 = scope26.toString();
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str30 = scope29.getValue();
        java.lang.String str31 = scope29.getValue();
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException34 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean35 = scope32.equals((java.lang.Object) invalidAttributeException34);
        java.lang.String str36 = scope32.getValue();
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException42 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean43 = scope40.equals((java.lang.Object) invalidAttributeException42);
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.GET;
        boolean boolean48 = scope46.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray50 = new org.osiam.client.oauth.Scope[] { scope19, scope20, scope25, scope26, scope28, scope29, scope32, scope37, scope38, scope39, scope40, scope44, scope45, scope46, scope49 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet51 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet51, scopeArray50);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder16.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet51);
        boolean boolean54 = scopeSerializer14.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet51);
        org.osiam.client.oauth.AccessToken.Builder builder56 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date57 = null;
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.setRefreshTokenExpiresAt(date57);
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder56.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken61 = builder60.build();
        boolean boolean62 = accessToken61.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet63 = accessToken61.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator64 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider65 = null;
        scopeSerializer14.serialize(scopeSet63, jsonGenerator64, serializerProvider65);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider67 = null;
        org.osiam.client.oauth.AccessToken.Builder builder69 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date70 = null;
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder69.setRefreshTokenExpiresAt(date70);
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder69.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken74 = builder73.build();
        boolean boolean75 = accessToken74.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet76 = accessToken74.getScopes();
        boolean boolean77 = scopeSerializer14.isEmpty(serializerProvider67, scopeSet76);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper78 = null;
        com.fasterxml.jackson.databind.JavaType javaType79 = null;
        scopeSerializer14.acceptJsonFormatVisitor(jsonFormatVisitorWrapper78, javaType79);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass81 = scopeSerializer14.handledType();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer82 = scopeSetJsonSerializer13.replaceDelegatee((com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeSerializer14);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardJsonSerializer11);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ME" + "'", str27, "ME");
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PATCH" + "'", str30, "PATCH");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PATCH" + "'", str31, "PATCH");
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GET" + "'", str36, "GET");
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertNotNull(scopeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(accessToken61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(scopeSet63);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(accessToken74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(scopeSet76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(scopeSetClass81);
    }

    @Test
    public void test11320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11320");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("password");
        org.osiam.client.OsiamConnector.Builder builder10 = builder6.setAuthServerEndpoint("org.osiam.client.exception.ConnectionInitializationException: descending");
        org.osiam.client.OsiamConnector osiamConnector11 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken20 = builder17.build();
        java.util.Date date21 = accessToken20.getExpiresAt();
        java.lang.String str22 = accessToken20.toString();
        java.lang.String str23 = accessToken20.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList24 = osiamConnector11.getAllUsers(accessToken20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(osiamConnector11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str22, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str23, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
    }

    @Test
    public void test11321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11321");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet7 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader8 = scopeDeserializer0.getObjectIdReader();
        java.util.Collection<java.lang.Object> objCollection9 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.core.JsonParser jsonParser10 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext11 = null;
        org.osiam.client.AuthService.Builder builder13 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientId("ME");
        org.osiam.client.AuthService.Builder builder17 = builder15.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService18 = builder17.build();
        org.osiam.client.OsiamGroupService.Builder builder20 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService21 = builder20.build();
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        boolean boolean29 = accessToken28.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet30 = accessToken28.getScopes();
        java.lang.String str31 = osiamGroupService21.extractErrorMessageForbidden(accessToken28);
        boolean boolean32 = accessToken28.isClientOnly();
        java.lang.String str33 = authService18.extractErrorMessageForbidden(accessToken28);
        java.util.Date date34 = accessToken28.getRefreshTokenExpiresAt();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet35 = accessToken28.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet36 = scopeDeserializer0.deserialize(jsonParser10, deserializationContext11, scopeSet35);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Can not update object of type java.util.HashSet (by deserializer of type org.osiam.client.helper.ScopeDeserializer)");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNull(scopeSet7);
        org.junit.Assert.assertNull(objectIdReader8);
        org.junit.Assert.assertNull(objCollection9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(authService18);
        org.junit.Assert.assertNotNull(osiamGroupService21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(scopeSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Insufficient scopes: []" + "'", str31, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Insufficient scopes: []" + "'", str33, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scopeSet35);
    }

    @Test
    public void test11322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11322");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder5 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder5.build();
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken14);
        java.lang.String str16 = osiamGroupService7.extractErrorMessageForbidden(accessToken14);
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService7.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget18 = osiamGroupService7.targetEndpoint;
        org.osiam.client.AuthService.Builder builder20 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientId("ME");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService25 = builder24.build();
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        boolean boolean33 = accessToken32.isRefreshTokenExpired();
        boolean boolean34 = accessToken32.isClientOnly();
        java.lang.String str35 = accessToken32.getClientId();
        java.lang.String str36 = authService25.extractErrorMessageForbidden(accessToken32);
        java.lang.String str37 = accessToken32.getUserId();
        java.lang.String str38 = accessToken32.getClientId();
        java.lang.String str39 = osiamGroupService7.extractErrorMessageForbidden(accessToken32);
        boolean boolean40 = accessToken32.isRefreshTokenExpired();
        java.lang.String str41 = accessToken32.getRefreshToken();
        java.util.Date date42 = accessToken32.getExpiresAt();
        java.lang.String str43 = accessToken32.getRefreshToken();
        java.lang.String str44 = osiamGroupService2.extractErrorMessageForbidden(accessToken32);
        javax.ws.rs.core.Response.StatusType statusType46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.addScope(scope49);
        org.osiam.client.oauth.Scope scope51 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException53 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean54 = scope51.equals((java.lang.Object) invalidAttributeException53);
        java.lang.String str55 = scope51.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder48.addScope(scope51);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder60.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder62.setUserId("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken67 = builder62.build();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.checkAndHandleResponse("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamClientException: ME", statusType46, accessToken67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Insufficient scopes: []" + "'", str16, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget17);
        org.junit.Assert.assertNotNull(webTarget18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(authService25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Insufficient scopes: []" + "'", str44, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(scope51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "GET" + "'", str55, "GET");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(accessToken67);
    }

    @Test
    public void test11323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11323");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder6 = builder0.setClientId("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder8 = builder0.setClientRedirectUri("org.osiam.client.exception.ConflictException: org.osiam.client.exception.OsiamClientException: descending");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test11324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11324");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        java.lang.String str13 = query9.getFilter();
        java.lang.String str14 = query9.getSortOrder();
        java.lang.String str15 = query9.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder(query9);
        long long17 = query9.getStartIndex();
        org.osiam.client.query.Query query18 = query9.nextPage();
        long long19 = query18.getStartIndex();
        org.osiam.client.query.Query query20 = query18.nextPage();
        org.osiam.client.query.Query query21 = query18.previousPage();
        org.osiam.client.query.Query query22 = query18.previousPage();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "descending" + "'", str14, "descending");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Authorization" + "'", str15, "Authorization");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(query18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 11L + "'", long19 == 11L);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertNotNull(query22);
    }

    @Test
    public void test11325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11325");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder7 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder7.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet17 = accessToken15.getScopes();
        java.lang.String str18 = osiamGroupService8.extractErrorMessageForbidden(accessToken15);
        boolean boolean19 = accessToken15.isClientOnly();
        boolean boolean20 = accessToken15.isClientOnly();
        java.lang.String str21 = accessToken15.toString();
        java.lang.String str22 = osiamGroupService4.extractErrorMessageForbidden(accessToken15);
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken29 = builder28.build();
        boolean boolean30 = accessToken29.isRefreshTokenExpired();
        boolean boolean31 = accessToken29.isClientOnly();
        java.lang.String str32 = accessToken29.getRefreshToken();
        boolean boolean33 = accessToken29.isExpired();
        boolean boolean34 = accessToken29.isRefreshTokenExpired();
        java.lang.String str35 = accessToken29.getToken();
        java.util.Date date36 = accessToken29.getRefreshTokenExpiresAt();
        boolean boolean37 = accessToken29.isClientOnly();
        java.lang.String str38 = osiamGroupService4.extractErrorMessageForbidden(accessToken29);
        javax.ws.rs.client.WebTarget webTarget39 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder41 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.addScope(scope42);
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException46 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean47 = scope44.equals((java.lang.Object) invalidAttributeException46);
        java.lang.String str48 = scope44.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder41.addScope(scope44);
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.setRefreshToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setType("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.oauth.AccessToken.Builder builder59 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date60 = null;
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.setRefreshTokenExpiresAt(date60);
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder59.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken64 = builder63.build();
        boolean boolean65 = accessToken64.isRefreshTokenExpired();
        boolean boolean66 = accessToken64.isClientOnly();
        java.lang.String str67 = accessToken64.getRefreshToken();
        boolean boolean68 = accessToken64.isExpired();
        boolean boolean69 = accessToken64.isRefreshTokenExpired();
        java.lang.String str70 = accessToken64.getToken();
        java.util.Date date71 = accessToken64.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder55.setRefreshTokenExpiresAt(date71);
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder72.setUserId("PUT");
        org.osiam.client.oauth.AccessToken accessToken75 = builder72.build();
        java.lang.String str76 = osiamGroupService4.extractErrorMessageForbidden(accessToken75);
        org.osiam.resources.scim.Group group78 = null;
        org.osiam.client.oauth.AccessToken.Builder builder80 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date81 = null;
        org.osiam.client.oauth.AccessToken.Builder builder82 = builder80.setRefreshTokenExpiresAt(date81);
        org.osiam.client.oauth.AccessToken.Builder builder84 = builder80.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder86 = builder84.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder88 = builder84.setClientId("ME");
        org.osiam.client.oauth.AccessToken.Builder builder90 = builder84.setUserId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder92 = builder90.setRefreshToken("DELETE");
        org.osiam.client.oauth.AccessToken accessToken93 = builder92.build();
        java.lang.String str94 = accessToken93.getRefreshToken();
        java.util.Date date95 = accessToken93.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group96 = osiamGroupService4.replaceResource("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.UnauthorizedException: PATCH", group78, accessToken93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(scopeSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str21, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Insufficient scopes: []" + "'", str22, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Bearer " + "'", str35, "Bearer ");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Insufficient scopes: []" + "'", str38, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget39);
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "GET" + "'", str48, "GET");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(accessToken64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Bearer " + "'", str70, "Bearer ");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(accessToken75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Insufficient scopes: [GET, GET POST PUT PATCH DELETE]" + "'", str76, "Insufficient scopes: [GET, GET POST PUT PATCH DELETE]");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(accessToken93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "DELETE" + "'", str94, "DELETE");
        org.junit.Assert.assertNotNull(date95);
        org.junit.Assert.assertEquals(date95.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11326");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamClientException: descending");
    }

    @Test
    public void test11327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11327");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder13 = builder9.setClientSecret("PATCH");
        org.osiam.client.AuthService authService14 = builder13.build();
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet23 = accessToken21.getScopes();
        boolean boolean24 = accessToken21.isRefreshTokenExpired();
        boolean boolean25 = accessToken21.isExpired();
        org.osiam.client.AuthService.Builder builder27 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder29 = builder27.setClientId("ME");
        org.osiam.client.AuthService.Builder builder31 = builder27.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService32 = builder27.build();
        boolean boolean33 = accessToken21.equals((java.lang.Object) builder27);
        java.util.Date date34 = accessToken21.getRefreshTokenExpiresAt();
        java.lang.String str35 = authService14.extractErrorMessageForbidden(accessToken21);
        boolean boolean36 = accessToken21.isClientOnly();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(authService14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(scopeSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(authService32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test11328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11328");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector osiamConnector9 = builder8.build();
        org.osiam.client.OsiamConnector.Builder builder11 = builder8.setResourceServerEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder13 = builder8.setResourceServerEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder15 = builder13.setResourceServerEndpoint("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder17 = builder13.setEndpoint("org.osiam.client.exception.NoResultException: authorization_code");
        org.osiam.client.OsiamConnector.Builder builder19 = builder13.setClientId("Cannot connect to server");
        org.osiam.client.OsiamConnector osiamConnector20 = builder13.build();
        org.osiam.client.OsiamConnector.Builder builder22 = builder13.setClientId("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder24 = builder13.setResourceServerEndpoint("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(osiamConnector20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test11329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11329");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder12 = builder4.setResourceServerEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setResourceServerEndpoint("org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientSecret("org.osiam.client.exception.ConflictException: org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder18 = builder14.setClientRedirectUri("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test11330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11330");
        org.osiam.client.exception.UnauthorizedException unauthorizedException1 = new org.osiam.client.exception.UnauthorizedException("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
        java.lang.Throwable[] throwableArray2 = unauthorizedException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test11331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11331");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientId("client_credentials");
        org.osiam.client.AuthService authService14 = builder11.build();
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        java.lang.String str22 = accessToken21.toString();
        java.lang.String str23 = accessToken21.getType();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken21);
        boolean boolean25 = accessToken21.isRefreshTokenExpired();
        java.lang.String str26 = accessToken21.getType();
        // The following exception was thrown during execution in test generation
        try {
            authService14.revokeAccessToken(accessToken21);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(authService14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str22, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test11332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11332");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.addScope(scope17);
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException21 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean22 = scope19.equals((java.lang.Object) invalidAttributeException21);
        java.lang.String str23 = scope19.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder16.addScope(scope19);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.addScope(scope33);
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException37 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean38 = scope35.equals((java.lang.Object) invalidAttributeException37);
        java.lang.String str39 = scope35.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder32.addScope(scope35);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder28.addScope(scope35);
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder28.setRefreshToken("");
        org.osiam.client.oauth.AccessToken accessToken44 = builder43.build();
        java.lang.String str45 = accessToken44.getUserId();
        java.lang.String str46 = osiamGroupService3.extractErrorMessageForbidden(accessToken44);
        org.osiam.resources.scim.Group group48 = null;
        org.osiam.client.OsiamGroupService.Builder builder50 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService51 = builder50.build();
        javax.ws.rs.client.WebTarget webTarget52 = osiamGroupService51.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder54 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date55 = null;
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setRefreshTokenExpiresAt(date55);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder54.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken59 = builder58.build();
        boolean boolean60 = accessToken59.isRefreshTokenExpired();
        java.lang.String str61 = accessToken59.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder62 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder62.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder66 = queryBuilder64.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder68 = queryBuilder64.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder70 = queryBuilder68.descending("hi!");
        org.osiam.client.query.Query query71 = queryBuilder70.build();
        java.lang.String str72 = query71.toString();
        java.lang.String str73 = query71.getSortOrder();
        java.lang.String str74 = query71.getSortBy();
        java.lang.String str75 = query71.getFilter();
        java.lang.String str76 = query71.toString();
        boolean boolean77 = accessToken59.equals((java.lang.Object) query71);
        java.util.Date date78 = accessToken59.getExpiresAt();
        java.lang.String str79 = accessToken59.getUserName();
        java.lang.String str80 = osiamGroupService51.extractErrorMessageForbidden(accessToken59);
        org.osiam.client.oauth.AccessToken.Builder builder82 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date83 = null;
        org.osiam.client.oauth.AccessToken.Builder builder84 = builder82.setRefreshTokenExpiresAt(date83);
        org.osiam.client.oauth.AccessToken.Builder builder86 = builder82.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken87 = builder86.build();
        boolean boolean88 = accessToken87.isRefreshTokenExpired();
        boolean boolean89 = accessToken87.isClientOnly();
        java.lang.String str90 = accessToken87.getClientId();
        boolean boolean91 = accessToken87.isClientOnly();
        java.lang.String str92 = accessToken87.getToken();
        java.lang.String str93 = accessToken87.getToken();
        boolean boolean94 = accessToken87.isRefreshTokenExpired();
        java.lang.String str95 = osiamGroupService51.extractErrorMessageForbidden(accessToken87);
        java.lang.String str96 = accessToken87.getToken();
        java.util.Date date97 = accessToken87.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group98 = osiamGroupService3.updateResource("org.osiam.client.exception.ConnectionInitializationException: Bearer ", group48, accessToken87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GET" + "'", str23, "GET");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GET" + "'", str39, "GET");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(accessToken44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Insufficient scopes: [GET, GET POST PUT PATCH DELETE]" + "'", str46, "Insufficient scopes: [GET, GET POST PUT PATCH DELETE]");
        org.junit.Assert.assertNotNull(osiamGroupService51);
        org.junit.Assert.assertNotNull(webTarget52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(accessToken59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertNotNull(queryBuilder68);
        org.junit.Assert.assertNotNull(queryBuilder70);
        org.junit.Assert.assertNotNull(query71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str72, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "descending" + "'", str73, "descending");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str76, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Insufficient scopes: []" + "'", str80, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(accessToken87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Bearer " + "'", str92, "Bearer ");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Bearer " + "'", str93, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Insufficient scopes: []" + "'", str95, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "Bearer " + "'", str96, "Bearer ");
        org.junit.Assert.assertNotNull(date97);
        org.junit.Assert.assertEquals(date97.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11333");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.addScope(scope16);
        org.osiam.client.oauth.GrantType grantType18 = org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS;
        java.lang.String str19 = grantType18.getUrlParam();
        boolean boolean20 = scope16.equals((java.lang.Object) grantType18);
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.addScope(scope23);
        boolean boolean25 = scope16.equals((java.lang.Object) builder22);
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.addScope(scope28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException32 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean33 = scope30.equals((java.lang.Object) invalidAttributeException32);
        java.lang.String str34 = scope30.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder27.addScope(scope30);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder22.addScope(scope30);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setUserName("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder36.setUserId("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope42 = new org.osiam.client.oauth.Scope("ADMIN");
        java.lang.String str43 = scope42.toString();
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder40.addScope(scope42);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder40.setUserName("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE, PUT], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder40.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=org.osiam.client.exception.ConnectionInitializationException: PATCH, userId=org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]]");
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder40.setClientId("ADMIN");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + grantType18 + "' != '" + org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS + "'", grantType18.equals(org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "client_credentials" + "'", str19, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "GET" + "'", str34, "GET");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ADMIN" + "'", str43, "ADMIN");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test11334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11334");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query7 = queryBuilder4.build();
        org.osiam.client.query.Query query8 = query7.nextPage();
        org.osiam.client.query.Query query9 = query8.previousPage();
        java.lang.String str10 = query8.getFilter();
        java.lang.String str11 = query8.getAttributes();
        java.lang.String str12 = query8.toString();
        org.osiam.client.query.Query query13 = query8.nextPage();
        java.lang.String str14 = query8.getAttributes();
        java.lang.String str15 = query8.getFilter();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(query7);
        org.junit.Assert.assertNotNull(query8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Authorization" + "'", str11, "Authorization");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=null, sortOrder=null, startIndex=11, count=10]" + "'", str12, "Query [attributes=Authorization, filter=null, sortBy=null, sortOrder=null, startIndex=11, count=10]");
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Authorization" + "'", str14, "Authorization");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test11335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11335");
        org.osiam.client.exception.OsiamClientException osiamClientException1 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: descending");
        org.osiam.client.exception.OsiamRequestException osiamRequestException4 = new org.osiam.client.exception.OsiamRequestException((int) (short) -1, "authorization_code");
        osiamClientException1.addSuppressed((java.lang.Throwable) osiamRequestException4);
        int int6 = osiamRequestException4.getHttpStatusCode();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test11336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11336");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector13 = builder8.build();
        org.osiam.client.OsiamConnector.Builder builder14 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector21 = builder20.build();
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.descending("hi!");
        org.osiam.client.query.Query query31 = queryBuilder30.build();
        java.lang.String str32 = query31.toString();
        java.lang.String str33 = query31.toString();
        java.lang.String str34 = query31.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder35 = osiamConnector21.createQueryBuilder(query31);
        org.osiam.client.query.QueryBuilder queryBuilder36 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder42 = queryBuilder38.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder44 = queryBuilder42.descending("hi!");
        org.osiam.client.query.Query query45 = queryBuilder44.build();
        org.osiam.client.query.QueryBuilder queryBuilder46 = osiamConnector21.createQueryBuilder(query45);
        org.osiam.client.query.QueryBuilder queryBuilder47 = osiamConnector13.createQueryBuilder(query45);
        org.osiam.client.oauth.AccessToken accessToken48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user49 = osiamConnector13.getCurrentUser(accessToken48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The string \"Insufficient scopes\" for the URI component SCHEME contains an invalid character, ' ', at index 12.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(query31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str32, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str33, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(query45);
        org.junit.Assert.assertNotNull(queryBuilder46);
        org.junit.Assert.assertNotNull(queryBuilder47);
    }

    @Test
    public void test11337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11337");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.getUserName();
        java.lang.String str15 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken29 = builder28.build();
        java.util.Date date30 = accessToken29.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder20.setRefreshTokenExpiresAt(date30);
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder20.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder20.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken42 = builder41.build();
        boolean boolean43 = accessToken42.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet44 = accessToken42.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder35.addScopes(scopeSet44);
        org.osiam.client.oauth.AccessToken accessToken46 = builder45.build();
        java.lang.String str47 = accessToken46.getClientId();
        java.util.Date date48 = accessToken46.getExpiresAt();
        java.lang.String str49 = accessToken46.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.deleteGroup("org.osiam.client.exception.UnauthorizedException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]", accessToken46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget16);
        org.junit.Assert.assertNotNull(webTarget17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(scopeSet44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(accessToken46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test11338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11338");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.resources.scim.User user6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        java.util.Date date14 = accessToken13.getExpiresAt();
        java.lang.String str15 = accessToken13.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet16 = accessToken13.getScopes();
        java.lang.String str17 = accessToken13.getUserName();
        java.lang.String str18 = accessToken13.getType();
        java.util.Date date19 = accessToken13.getRefreshTokenExpiresAt();
        java.util.Date date20 = accessToken13.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user21 = osiamUserService5.createUser(user6, accessToken13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(scopeSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11339");
        org.osiam.client.exception.UnauthorizedException unauthorizedException1 = new org.osiam.client.exception.UnauthorizedException("Insufficient scopes: [GET, GET POST PUT PATCH DELETE]");
    }

    @Test
    public void test11340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11340");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder9.addScope(scope12);
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.addScope(scope17);
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException21 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean22 = scope19.equals((java.lang.Object) invalidAttributeException21);
        java.lang.String str23 = scope19.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder16.addScope(scope19);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder16.setRefreshToken("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        java.util.Date date34 = accessToken33.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder26.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder14.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder14.setUserId("2024-03-22T13:51:20.388");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setType("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamGroupService.Builder builder42 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService43 = builder42.build();
        org.osiam.client.OsiamGroupService osiamGroupService44 = builder42.build();
        javax.ws.rs.client.WebTarget webTarget45 = osiamGroupService44.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget46 = osiamGroupService44.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder48.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken53 = builder52.build();
        boolean boolean54 = accessToken53.isRefreshTokenExpired();
        java.lang.String str55 = accessToken53.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet56 = accessToken53.getScopes();
        java.lang.String str57 = osiamGroupService44.extractErrorMessageForbidden(accessToken53);
        java.lang.String str58 = accessToken53.getUserId();
        java.util.Date date59 = accessToken53.getRefreshTokenExpiresAt();
        java.util.Date date60 = accessToken53.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder40.setRefreshTokenExpiresAt(date60);
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder61.setRefreshToken("org.osiam.client.exception.ConflictException: org.osiam.client.exception.OsiamRequestException: hi!");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GET" + "'", str23, "GET");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(osiamGroupService43);
        org.junit.Assert.assertNotNull(osiamGroupService44);
        org.junit.Assert.assertNotNull(webTarget45);
        org.junit.Assert.assertNotNull(webTarget46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(accessToken53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(scopeSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Insufficient scopes: []" + "'", str57, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test11341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11341");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.addScope(scope18);
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder17.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder13.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.addScope(scope29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException33 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean34 = scope31.equals((java.lang.Object) invalidAttributeException33);
        java.lang.String str35 = scope31.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder28.addScope(scope31);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setUserId("");
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.addScope(scope41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken49 = builder48.build();
        java.util.Date date50 = accessToken49.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder40.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder13.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder13.setType("org.osiam.client.exception.ForbiddenException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GET" + "'", str35, "GET");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test11342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11342");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("refresh_token");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user3 = null;
        org.osiam.client.oauth.AccessToken accessToken4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user5 = osiamUserService2.createUser(user3, accessToken4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
    }

    @Test
    public void test11343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11343");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder13 = builder9.setClientSecret("PATCH");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService16 = builder13.build();
        org.osiam.client.AuthService.Builder builder18 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientId("ME");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder26 = builder24.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder28 = builder24.setClientId("");
        org.osiam.client.AuthService.Builder builder30 = builder24.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService31 = builder30.build();
        org.osiam.client.oauth.Scope scope33 = new org.osiam.client.oauth.Scope("");
        java.lang.String str34 = scope33.getValue();
        org.osiam.client.oauth.Scope scope36 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.Scope[] scopeArray37 = new org.osiam.client.oauth.Scope[] { scope33, scope36 };
        java.net.URI uRI38 = authService31.getAuthorizationUri(scopeArray37);
        java.net.URI uRI39 = authService16.getAuthorizationUri(scopeArray37);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken41 = authService16.retrieveAccessToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(authService16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(authService31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(scopeArray37);
        org.junit.Assert.assertNotNull(uRI38);
        org.junit.Assert.assertNotNull(uRI39);
    }

    @Test
    public void test11344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11344");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        boolean boolean8 = accessToken6.isClientOnly();
        java.lang.String str9 = accessToken6.getRefreshToken();
        boolean boolean10 = accessToken6.isExpired();
        boolean boolean11 = accessToken6.isExpired();
        java.lang.String str12 = accessToken6.toString();
        boolean boolean13 = accessToken6.isClientOnly();
        java.lang.String str14 = accessToken6.getUserId();
        boolean boolean15 = accessToken6.isClientOnly();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str12, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test11345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11345");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        boolean boolean18 = accessToken17.isRefreshTokenExpired();
        java.lang.String str19 = authService10.extractErrorMessageForbidden(accessToken17);
        java.util.Date date20 = accessToken17.getExpiresAt();
        java.lang.String str21 = accessToken17.getUserId();
        boolean boolean22 = accessToken17.isExpired();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test11346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11346");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("PUT");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder10 = builder6.setClientRedirectUri("org.osiam.client.exception.ConflictException: ");
        org.osiam.client.OsiamConnector.Builder builder12 = builder6.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=], sortOrder=ascending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setResourceServerEndpoint("org.osiam.client.exception.UnauthorizedException: PUT");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test11347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11347");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.OsiamConnector.Builder builder6 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector13 = builder12.build();
        org.osiam.client.query.QueryBuilder queryBuilder14 = osiamConnector13.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder15 = osiamConnector13.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder16 = osiamConnector13.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder19.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.descending("hi!");
        org.osiam.client.query.Query query26 = queryBuilder25.build();
        java.lang.String str27 = query26.toString();
        java.lang.String str28 = query26.getSortOrder();
        java.lang.String str29 = query26.getSortBy();
        java.lang.String str30 = query26.getFilter();
        java.lang.String str31 = query26.getSortOrder();
        java.lang.String str32 = query26.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder33 = new org.osiam.client.query.QueryBuilder(query26);
        long long34 = query26.getStartIndex();
        org.osiam.client.query.Query query35 = query26.nextPage();
        java.lang.String str36 = query26.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder37 = new org.osiam.client.query.QueryBuilder(query26);
        java.lang.String str38 = query26.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder39 = osiamConnector13.createQueryBuilder(query26);
        org.osiam.client.query.Query query40 = query26.nextPage();
        org.osiam.client.query.Query query41 = query40.nextPage();
        java.lang.String str42 = query40.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder43 = osiamConnector5.createQueryBuilder(query40);
        org.osiam.client.oauth.AccessToken.Builder builder46 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        java.lang.String str48 = accessToken47.toString();
        java.lang.String str49 = accessToken47.getToken();
        boolean boolean50 = accessToken47.isExpired();
        java.lang.String str51 = accessToken47.getClientId();
        boolean boolean52 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet53 = accessToken47.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group54 = osiamConnector5.getGroup("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "descending" + "'", str28, "descending");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "descending" + "'", str31, "descending");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Authorization" + "'", str32, "Authorization");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(query35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Authorization" + "'", str38, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(query40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "descending" + "'", str42, "descending");
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str48, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "client_credentials" + "'", str49, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(scopeSet53);
    }

    @Test
    public void test11348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11348");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet5 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer7 = scopeDeserializer0.unwrappingDeserializer(nameTransformer6);
        com.fasterxml.jackson.core.JsonParser jsonParser8 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext9 = null;
        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeserializer10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = scopeSetJsonDeserializer7.deserializeWithType(jsonParser8, deserializationContext9, typeDeserializer10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(scopeSet5);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer7);
    }

    @Test
    public void test11349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11349");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder8.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder8.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.descending("");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.descending("GET POST PUT PATCH DELETE");
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder13.attributes("client_credentials");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder13.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.filter("hi!");
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.descending("Query [attributes=, filter=null, sortBy=POST, sortOrder=descending, startIndex=1, count=100]");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
    }

    @Test
    public void test11350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11350");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientRedirectUri("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Authorization");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientSecret("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("org.osiam.client.exception.ConnectionInitializationException: descending");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientId("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector osiamConnector21 = builder18.build();
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.descending("hi!");
        org.osiam.client.query.Query query31 = queryBuilder30.build();
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder30.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.attributes("Cannot connect to server");
        org.osiam.client.query.Query query36 = queryBuilder33.build();
        java.lang.String str37 = query36.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder38 = osiamConnector21.createQueryBuilder(query36);
        org.osiam.client.query.QueryBuilder queryBuilder39 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder43 = queryBuilder41.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.count((int) (short) 0);
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder43.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder43.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder49.ascending("password");
        org.osiam.client.query.QueryBuilder queryBuilder53 = queryBuilder49.count((int) (short) -1);
        org.osiam.client.query.Query query54 = queryBuilder49.build();
        java.lang.String str55 = query54.toString();
        java.lang.String str56 = query54.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder57 = osiamConnector21.createQueryBuilder(query54);
        org.osiam.client.oauth.AccessToken accessToken58 = null;
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector21.revokeAccessToken(accessToken58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(query31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(queryBuilder53);
        org.junit.Assert.assertNotNull(query54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]" + "'", str55, "Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ascending" + "'", str56, "ascending");
        org.junit.Assert.assertNotNull(queryBuilder57);
    }

    @Test
    public void test11351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11351");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder3 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder5 = queryBuilder3.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder7 = queryBuilder5.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder5.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.descending("hi!");
        org.osiam.client.query.Query query12 = queryBuilder11.build();
        org.osiam.client.query.Query query13 = queryBuilder11.build();
        org.osiam.client.query.Query query14 = query13.nextPage();
        java.lang.String str15 = query14.toString();
        int int16 = query14.getCount();
        java.lang.String str17 = query14.getAttributes();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        java.util.Date date25 = accessToken24.getExpiresAt();
        java.lang.String str26 = accessToken24.getRefreshToken();
        java.lang.String str27 = accessToken24.getType();
        java.lang.String str28 = accessToken24.getClientId();
        java.lang.String str29 = accessToken24.toString();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet30 = accessToken24.getScopes();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken24);
        java.util.Date date32 = accessToken24.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult33 = osiamUserService2.searchUsers(query14, accessToken24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(queryBuilder5);
        org.junit.Assert.assertNotNull(queryBuilder7);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertNotNull(query14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]" + "'", str15, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Authorization" + "'", str17, "Authorization");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str29, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(scopeSet30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11352");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.NoResultException: authorization_code");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = osiamGroupService2.extractErrorMessageDefault("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConnectionInitializationException: PATCH", statusType4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
    }

    @Test
    public void test11353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11353");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        boolean boolean6 = scopeDeserializer0.isCachable();
        java.util.Collection<java.lang.Object> objCollection7 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer8 = scopeDeserializer0.getDelegatee();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(objCollection7);
        org.junit.Assert.assertNull(wildcardJsonDeserializer8);
    }

    @Test
    public void test11354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11354");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Cannot connect to server");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.AuthService.Builder builder4 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder6 = builder4.setClientId("ME");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService13 = builder12.build();
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        boolean boolean21 = accessToken20.isRefreshTokenExpired();
        java.lang.String str22 = accessToken20.getUserId();
        java.lang.String str23 = accessToken20.getToken();
        java.lang.String str24 = authService13.extractErrorMessageForbidden(accessToken20);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user25 = osiamUserService2.getCurrentUser(accessToken20);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(authService13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Bearer " + "'", str23, "Bearer ");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Insufficient scopes: []" + "'", str24, "Insufficient scopes: []");
    }

    @Test
    public void test11355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11355");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.descending("hi!");
        org.osiam.client.query.Query query19 = queryBuilder18.build();
        java.lang.String str20 = query19.toString();
        java.lang.String str21 = query19.getSortOrder();
        java.lang.String str22 = query19.getSortBy();
        java.lang.String str23 = query19.getFilter();
        java.lang.String str24 = query19.getSortOrder();
        java.lang.String str25 = query19.getAttributes();
        long long26 = query19.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder27 = osiamConnector9.createQueryBuilder(query19);
        org.osiam.client.query.QueryBuilder queryBuilder28 = osiamConnector9.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken36 = builder35.build();
        java.util.Date date37 = accessToken36.getExpiresAt();
        java.lang.String str38 = accessToken36.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken36);
        org.osiam.client.oauth.AccessToken.Builder builder41 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date42 = null;
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setRefreshTokenExpiresAt(date42);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder41.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken46 = builder45.build();
        boolean boolean47 = accessToken46.isRefreshTokenExpired();
        boolean boolean48 = accessToken46.isClientOnly();
        java.lang.String str49 = accessToken46.getClientId();
        boolean boolean50 = accessToken46.isClientOnly();
        boolean boolean51 = accessToken36.equals((java.lang.Object) accessToken46);
        org.osiam.client.query.QueryBuilder queryBuilder52 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder56 = queryBuilder54.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder58 = queryBuilder54.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder60 = queryBuilder58.descending("hi!");
        org.osiam.client.query.Query query61 = queryBuilder60.build();
        org.osiam.client.query.Query query62 = queryBuilder60.build();
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder60.ascending("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        boolean boolean65 = accessToken36.equals((java.lang.Object) "org.osiam.client.exception.ConnectionInitializationException: PATCH");
        java.lang.String str66 = accessToken36.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user67 = osiamConnector9.getUser("Query [attributes=Authorization, filter=null, sortBy=AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=], sortOrder=ascending, startIndex=1, count=10]", accessToken36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str20, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "descending" + "'", str21, "descending");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "descending" + "'", str24, "descending");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Authorization" + "'", str25, "Authorization");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(accessToken36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(accessToken46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(queryBuilder56);
        org.junit.Assert.assertNotNull(queryBuilder58);
        org.junit.Assert.assertNotNull(queryBuilder60);
        org.junit.Assert.assertNotNull(query61);
        org.junit.Assert.assertNotNull(query62);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Bearer " + "'", str66, "Bearer ");
    }

    @Test
    public void test11356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11356");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget15 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder17.setUserName("ascending");
        org.osiam.client.oauth.AccessToken accessToken24 = builder17.build();
        java.lang.String str25 = osiamGroupService2.extractErrorMessageForbidden(accessToken24);
        javax.ws.rs.client.WebTarget webTarget26 = osiamGroupService2.targetEndpoint;
        org.osiam.resources.scim.Group group28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken35);
        java.util.Date date37 = accessToken35.getExpiresAt();
        boolean boolean38 = accessToken35.isRefreshTokenExpired();
        java.util.Date date39 = accessToken35.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group40 = osiamGroupService2.updateResource("org.osiam.client.exception.ConnectionInitializationException: ", group28, accessToken35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(webTarget15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget26);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11357");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector5.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder33 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder35.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.descending("hi!");
        org.osiam.client.query.Query query42 = queryBuilder41.build();
        java.lang.String str43 = query42.toString();
        java.lang.String str44 = query42.toString();
        org.osiam.client.query.Query query45 = query42.nextPage();
        java.lang.String str46 = query42.toString();
        int int47 = query42.getCount();
        java.lang.String str48 = query42.getSortOrder();
        int int49 = query42.getCount();
        org.osiam.client.query.QueryBuilder queryBuilder50 = osiamConnector5.createQueryBuilder(query42);
        org.osiam.client.query.QueryBuilder queryBuilder51 = osiamConnector5.createQueryBuilder();
        org.osiam.client.OsiamGroupService.Builder builder54 = new org.osiam.client.OsiamGroupService.Builder("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamGroupService osiamGroupService55 = builder54.build();
        org.osiam.client.AuthService.Builder builder57 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder59 = builder57.setClientId("ME");
        org.osiam.client.AuthService.Builder builder61 = builder59.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder63 = builder61.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder65 = builder63.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService66 = builder65.build();
        org.osiam.client.oauth.AccessToken.Builder builder68 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date69 = null;
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder68.setRefreshTokenExpiresAt(date69);
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder68.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken73 = builder72.build();
        boolean boolean74 = accessToken73.isRefreshTokenExpired();
        java.lang.String str75 = authService66.extractErrorMessageForbidden(accessToken73);
        boolean boolean76 = accessToken73.isRefreshTokenExpired();
        java.lang.String str77 = accessToken73.getType();
        java.util.Date date78 = accessToken73.getExpiresAt();
        boolean boolean79 = accessToken73.isClientOnly();
        java.lang.String str80 = osiamGroupService55.extractErrorMessageForbidden(accessToken73);
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector5.deleteUser("ascending", accessToken73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str44, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str46, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "descending" + "'", str48, "descending");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(osiamGroupService55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(authService66);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(accessToken73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Insufficient scopes: []" + "'", str75, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Insufficient scopes: []" + "'", str80, "Insufficient scopes: []");
    }

    @Test
    public void test11358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11358");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader3 = scopeDeserializer0.getObjectIdReader();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getNullValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet5 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer6 = scopeDeserializer0.getDelegatee();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty8 = scopeDeserializer0.findBackReference("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference '': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objectIdReader3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNull(scopeSet5);
        org.junit.Assert.assertNull(wildcardJsonDeserializer6);
    }

    @Test
    public void test11359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11359");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("PUT");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientId("ADMIN");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setClientId("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.ConflictException: ");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setResourceServerEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector13 = builder12.build();
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        boolean boolean21 = accessToken20.isRefreshTokenExpired();
        java.lang.String str22 = accessToken20.getUserId();
        java.lang.String str23 = accessToken20.getToken();
        boolean boolean24 = accessToken20.isExpired();
        java.lang.String str25 = accessToken20.getRefreshToken();
        boolean boolean26 = accessToken20.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList27 = osiamConnector13.getAllGroups(accessToken20);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Bearer " + "'", str23, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test11360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11360");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector13 = builder8.build();
        org.osiam.client.OsiamConnector.Builder builder14 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector21 = builder20.build();
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.descending("hi!");
        org.osiam.client.query.Query query31 = queryBuilder30.build();
        java.lang.String str32 = query31.toString();
        java.lang.String str33 = query31.toString();
        java.lang.String str34 = query31.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder35 = osiamConnector21.createQueryBuilder(query31);
        org.osiam.client.query.QueryBuilder queryBuilder36 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder42 = queryBuilder38.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder44 = queryBuilder42.descending("hi!");
        org.osiam.client.query.Query query45 = queryBuilder44.build();
        org.osiam.client.query.QueryBuilder queryBuilder46 = osiamConnector21.createQueryBuilder(query45);
        org.osiam.client.query.QueryBuilder queryBuilder47 = osiamConnector13.createQueryBuilder(query45);
        org.osiam.client.query.QueryBuilder queryBuilder48 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder50.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder50.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder56 = queryBuilder54.descending("hi!");
        org.osiam.client.query.Query query57 = queryBuilder56.build();
        java.lang.String str58 = query57.toString();
        java.lang.String str59 = query57.getSortOrder();
        java.lang.String str60 = query57.getFilter();
        java.lang.String str61 = query57.getSortOrder();
        java.lang.String str62 = query57.getAttributes();
        int int63 = query57.getCount();
        org.osiam.client.query.Query query64 = query57.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder65 = osiamConnector13.createQueryBuilder(query64);
        org.osiam.resources.scim.UpdateUser updateUser67 = null;
        org.osiam.client.oauth.AccessToken.Builder builder69 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date70 = null;
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder69.setRefreshTokenExpiresAt(date70);
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder69.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken74 = builder73.build();
        java.lang.Object obj75 = null;
        boolean boolean76 = accessToken74.equals(obj75);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet77 = accessToken74.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user78 = osiamConnector13.updateUser("org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388", updateUser67, accessToken74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The string \"Insufficient scopes\" for the URI component SCHEME contains an invalid character, ' ', at index 12.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(query31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str32, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str33, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(query45);
        org.junit.Assert.assertNotNull(queryBuilder46);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(queryBuilder56);
        org.junit.Assert.assertNotNull(query57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str58, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "descending" + "'", str59, "descending");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "descending" + "'", str61, "descending");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Authorization" + "'", str62, "Authorization");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(query64);
        org.junit.Assert.assertNotNull(queryBuilder65);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(accessToken74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(scopeSet77);
    }

    @Test
    public void test11361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11361");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.AuthService.Builder builder10 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder16 = builder14.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder18 = builder16.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder22 = builder18.setClientSecret("PATCH");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService25 = builder22.build();
        org.osiam.client.AuthService.Builder builder27 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder29 = builder27.setClientId("ME");
        org.osiam.client.AuthService.Builder builder31 = builder29.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder33 = builder31.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder35 = builder33.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder37 = builder33.setClientId("");
        org.osiam.client.AuthService.Builder builder39 = builder33.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService40 = builder39.build();
        org.osiam.client.oauth.Scope scope42 = new org.osiam.client.oauth.Scope("");
        java.lang.String str43 = scope42.getValue();
        org.osiam.client.oauth.Scope scope45 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.Scope[] scopeArray46 = new org.osiam.client.oauth.Scope[] { scope42, scope45 };
        java.net.URI uRI47 = authService40.getAuthorizationUri(scopeArray46);
        java.net.URI uRI48 = authService25.getAuthorizationUri(scopeArray46);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken49 = authService6.retrieveAccessToken("password", "org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", scopeArray46);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(authService25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(authService40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(scopeArray46);
        org.junit.Assert.assertNotNull(uRI47);
        org.junit.Assert.assertNotNull(uRI48);
    }

    @Test
    public void test11362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11362");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getClientId();
        boolean boolean17 = accessToken13.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.addScope(scope20);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException24 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean25 = scope22.equals((java.lang.Object) invalidAttributeException24);
        java.lang.String str26 = scope22.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder19.addScope(scope22);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setUserName("Authorization");
        boolean boolean34 = accessToken13.equals((java.lang.Object) builder31);
        java.lang.String str35 = osiamGroupService6.extractErrorMessageForbidden(accessToken13);
        javax.ws.rs.client.WebTarget webTarget36 = osiamGroupService6.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget37 = osiamGroupService6.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget38 = osiamGroupService6.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder40 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.addScope(scope41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder40.setClientId("ADMIN");
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setClientId("refresh_token");
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.setRefreshToken("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setUserId("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.oauth.AccessToken accessToken51 = builder50.build();
        java.lang.String str52 = accessToken51.toString();
        java.lang.String str53 = accessToken51.getType();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList54 = osiamGroupService6.getAllGroups(accessToken51);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GET" + "'", str26, "GET");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget36);
        org.junit.Assert.assertNotNull(webTarget37);
        org.junit.Assert.assertNotNull(webTarget38);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(accessToken51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET POST PUT PATCH DELETE], refreshTokenId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=refresh_token, userId=org.osiam.client.exception.ConflictException: PATCH, userName=]" + "'", str52, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET POST PUT PATCH DELETE], refreshTokenId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=refresh_token, userId=org.osiam.client.exception.ConflictException: PATCH, userName=]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test11363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11363");
        org.osiam.client.exception.NoResultException noResultException1 = new org.osiam.client.exception.NoResultException("GET POST PUT PATCH DELETE");
        int int2 = noResultException1.getHttpStatusCode();
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException7 = new org.osiam.client.exception.ConnectionInitializationException("Cannot connect to server");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException8 = new org.osiam.client.exception.ConnectionInitializationException("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", (java.lang.Throwable) connectionInitializationException7);
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException9 = new org.osiam.client.exception.ConnectionInitializationException("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", (java.lang.Throwable) connectionInitializationException8);
        org.osiam.client.exception.OsiamClientException osiamClientException10 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.OsiamClientException: ME", (java.lang.Throwable) connectionInitializationException9);
        java.lang.Throwable[] throwableArray11 = osiamClientException10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = osiamClientException10.getSuppressed();
        noResultException1.addSuppressed((java.lang.Throwable) osiamClientException10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 404 + "'", int2 == 404);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
    }

    @Test
    public void test11364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11364");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder4.setClientId("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setResourceServerEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientId("org.osiam.client.exception.ConflictException: org.osiam.client.exception.OsiamClientException: descending");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test11365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11365");
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException4 = new org.osiam.client.exception.InvalidAttributeException("client_credentials");
        org.osiam.client.exception.OsiamClientException osiamClientException5 = new org.osiam.client.exception.OsiamClientException("descending", (java.lang.Throwable) invalidAttributeException4);
        org.osiam.client.exception.OsiamClientException osiamClientException6 = new org.osiam.client.exception.OsiamClientException("hi!", (java.lang.Throwable) osiamClientException5);
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException9 = new org.osiam.client.exception.InvalidAttributeException("");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException10 = new org.osiam.client.exception.ConnectionInitializationException("Bearer ", (java.lang.Throwable) invalidAttributeException9);
        org.osiam.client.exception.ForbiddenException forbiddenException12 = new org.osiam.client.exception.ForbiddenException("hi!");
        connectionInitializationException10.addSuppressed((java.lang.Throwable) forbiddenException12);
        org.osiam.client.exception.OsiamRequestException osiamRequestException16 = new org.osiam.client.exception.OsiamRequestException((int) (byte) 0, "hi!");
        connectionInitializationException10.addSuppressed((java.lang.Throwable) osiamRequestException16);
        osiamClientException5.addSuppressed((java.lang.Throwable) connectionInitializationException10);
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException19 = new org.osiam.client.exception.ConnectionInitializationException("client_credentials", (java.lang.Throwable) osiamClientException5);
        java.lang.Throwable throwable20 = null;
        // The following exception was thrown during execution in test generation
        try {
            osiamClientException5.addSuppressed(throwable20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11366");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        java.util.Collection<java.lang.Object> objCollection7 = scopeSetJsonDeserializer6.getKnownPropertyNames();
        java.util.Collection<java.lang.Object> objCollection8 = scopeSetJsonDeserializer6.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = scopeSetJsonDeserializer6.getNullValue();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNull(objCollection7);
        org.junit.Assert.assertNull(objCollection8);
        org.junit.Assert.assertNull(scopeSet9);
    }

    @Test
    public void test11367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11367");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        boolean boolean8 = accessToken6.isClientOnly();
        java.lang.String str9 = accessToken6.getRefreshToken();
        boolean boolean10 = accessToken6.isExpired();
        boolean boolean11 = accessToken6.isRefreshTokenExpired();
        org.osiam.client.AuthService.Builder builder13 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientId("ME");
        boolean boolean16 = accessToken6.equals((java.lang.Object) builder13);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken6);
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException19 = new org.osiam.client.exception.InvalidAttributeException("org.osiam.client.exception.NoResultException: org.osiam.client.exception.OsiamClientException: ME");
        boolean boolean20 = accessToken6.equals((java.lang.Object) invalidAttributeException19);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test11368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11368");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet7 = scopeSetJsonDeserializer6.getNullValue();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer8 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer9 = scopeSetJsonDeserializer6.unwrappingDeserializer(nameTransformer8);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet10 = scopeSetJsonDeserializer9.getNullValue();
        java.util.Collection<java.lang.Object> objCollection11 = scopeSetJsonDeserializer9.getKnownPropertyNames();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNull(scopeSet7);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer9);
        org.junit.Assert.assertNull(scopeSet10);
        org.junit.Assert.assertNull(objCollection11);
    }

    @Test
    public void test11369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11369");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.Query query5 = queryBuilder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder7 = queryBuilder4.startIndex((long) (-1));
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder7.attributes("POST");
        org.osiam.client.query.Query query10 = queryBuilder9.build();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(query5);
        org.junit.Assert.assertNotNull(queryBuilder7);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(query10);
    }

    @Test
    public void test11370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11370");
        org.osiam.client.exception.OsiamRequestException osiamRequestException2 = new org.osiam.client.exception.OsiamRequestException(52, "org.osiam.client.exception.InvalidAttributeException: Insufficient scopes: [null, PATCH, GET, ME, ADMIN, GET POST PUT PATCH DELETE, PUT]");
    }

    @Test
    public void test11371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11371");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException4 = new org.osiam.client.exception.ConnectionInitializationException("org.osiam.client.exception.ConnectionInitializationException: descending");
        org.osiam.client.exception.OsiamClientException osiamClientException5 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.NoResultException: authorization_code", (java.lang.Throwable) connectionInitializationException4);
        org.osiam.client.exception.OsiamClientException osiamClientException6 = new org.osiam.client.exception.OsiamClientException("DELETE", (java.lang.Throwable) osiamClientException5);
        org.osiam.client.exception.OsiamClientException osiamClientException7 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=null, sortOrder=null, startIndex=11, count=10]", (java.lang.Throwable) osiamClientException5);
    }

    @Test
    public void test11372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11372");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder12.setResourceServerEndpoint("hi!");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setEndpoint("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setClientSecret("Bearer ");
        org.osiam.client.OsiamConnector.Builder builder24 = builder20.setEndpoint("Query [attributes=ME, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test11373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11373");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        java.util.Date date14 = accessToken13.getExpiresAt();
        java.lang.String str15 = accessToken13.getRefreshToken();
        java.lang.String str16 = accessToken13.getType();
        java.util.Date date17 = accessToken13.getExpiresAt();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken13.getScopes();
        java.lang.String str19 = accessToken13.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService5.deleteResource("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.UnauthorizedException: PATCH", accessToken13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test11374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11374");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setEndpoint("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientRedirectUri("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET POST PUT PATCH DELETE], refreshTokenId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=refresh_token, userId=org.osiam.client.exception.ConflictException: PATCH, userName=]");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.client.AuthService.Builder builder19 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder21 = builder19.setClientId("ME");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService28 = builder27.build();
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        boolean boolean36 = accessToken35.isRefreshTokenExpired();
        java.lang.String str37 = accessToken35.getUserId();
        java.lang.String str38 = accessToken35.getToken();
        java.lang.String str39 = authService28.extractErrorMessageForbidden(accessToken35);
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str41 = scope40.getValue();
        java.lang.String str42 = scope40.toString();
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray44 = new org.osiam.client.oauth.Scope[] { scope40, scope43 };
        java.net.URI uRI45 = authService28.getAuthorizationUri(scopeArray44);
        org.osiam.client.oauth.AccessToken.Builder builder47 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date48 = null;
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.setRefreshTokenExpiresAt(date48);
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder47.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken54 = builder51.build();
        java.lang.String str55 = accessToken54.getRefreshToken();
        java.lang.String str56 = authService28.extractErrorMessageForbidden(accessToken54);
        org.osiam.client.AuthService.Builder builder58 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder60 = builder58.setClientId("ME");
        org.osiam.client.AuthService.Builder builder62 = builder60.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder64 = builder62.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder66 = builder64.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder68 = builder64.setClientId("");
        org.osiam.client.AuthService.Builder builder70 = builder64.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService71 = builder70.build();
        org.osiam.client.oauth.Scope scope73 = new org.osiam.client.oauth.Scope("");
        java.lang.String str74 = scope73.getValue();
        org.osiam.client.oauth.Scope scope76 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.Scope[] scopeArray77 = new org.osiam.client.oauth.Scope[] { scope73, scope76 };
        java.net.URI uRI78 = authService71.getAuthorizationUri(scopeArray77);
        java.net.URI uRI79 = authService28.getAuthorizationUri(scopeArray77);
        java.net.URI uRI80 = osiamConnector17.getAuthorizationUri(scopeArray77);
        org.osiam.resources.scim.Group group82 = null;
        org.osiam.client.oauth.AccessToken.Builder builder84 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken85 = builder84.build();
        java.lang.String str86 = accessToken85.toString();
        java.util.Date date87 = accessToken85.getExpiresAt();
        java.lang.String str88 = accessToken85.getUserId();
        java.lang.String str89 = accessToken85.getUserId();
        boolean boolean90 = accessToken85.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group91 = osiamConnector17.replaceGroup("org.osiam.client.exception.UnauthorizedException: PATCH", group82, accessToken85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(authService28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Bearer " + "'", str38, "Bearer ");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PATCH" + "'", str41, "PATCH");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PATCH" + "'", str42, "PATCH");
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertNotNull(scopeArray44);
        org.junit.Assert.assertNotNull(uRI45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(accessToken54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Insufficient scopes: []" + "'", str56, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(authService71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(scopeArray77);
        org.junit.Assert.assertNotNull(uRI78);
        org.junit.Assert.assertNotNull(uRI79);
        org.junit.Assert.assertNotNull(uRI80);
        org.junit.Assert.assertNotNull(accessToken85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str86, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test11375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11375");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setType("");
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder5.setClientId("authorization_code");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder5.setClientId("2024-03-22T13:51:20.388");
        org.osiam.client.helper.ScopeSerializer scopeSerializer14 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean15 = scopeSerializer14.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer16 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer17 = scopeSerializer14.unwrappingSerializer(nameTransformer16);
        boolean boolean18 = scopeSerializer14.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer19 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer20 = scopeSerializer14.unwrappingSerializer(nameTransformer19);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper21 = null;
        com.fasterxml.jackson.databind.JavaType javaType22 = null;
        scopeSerializer14.acceptJsonFormatVisitor(jsonFormatVisitorWrapper21, javaType22);
        boolean boolean24 = scopeSerializer14.usesObjectId();
        org.osiam.client.helper.ScopeSerializer scopeSerializer25 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean26 = scopeSerializer25.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer27 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer28 = scopeSerializer25.unwrappingSerializer(nameTransformer27);
        boolean boolean29 = scopeSerializer25.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer30 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer31 = scopeSerializer25.unwrappingSerializer(nameTransformer30);
        org.osiam.client.helper.ScopeSerializer scopeSerializer32 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean33 = scopeSerializer32.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder35 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date36 = null;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setRefreshTokenExpiresAt(date36);
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException41 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean42 = scope39.equals((java.lang.Object) invalidAttributeException41);
        java.lang.String str43 = scope39.getValue();
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str46 = scope45.toString();
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str49 = scope48.getValue();
        java.lang.String str50 = scope48.getValue();
        org.osiam.client.oauth.Scope scope51 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException53 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean54 = scope51.equals((java.lang.Object) invalidAttributeException53);
        java.lang.String str55 = scope51.getValue();
        org.osiam.client.oauth.Scope scope56 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope57 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope58 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope59 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException61 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean62 = scope59.equals((java.lang.Object) invalidAttributeException61);
        org.osiam.client.oauth.Scope scope63 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope64 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope65 = org.osiam.client.oauth.Scope.GET;
        boolean boolean67 = scope65.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope68 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray69 = new org.osiam.client.oauth.Scope[] { scope38, scope39, scope44, scope45, scope47, scope48, scope51, scope56, scope57, scope58, scope59, scope63, scope64, scope65, scope68 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet70 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet70, scopeArray69);
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder35.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet70);
        boolean boolean73 = scopeSerializer32.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet70);
        boolean boolean74 = scopeSetJsonSerializer31.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet70);
        boolean boolean75 = scopeSerializer14.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet70);
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder5.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet70);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "GET" + "'", str43, "GET");
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ME" + "'", str46, "ME");
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PATCH" + "'", str49, "PATCH");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PATCH" + "'", str50, "PATCH");
        org.junit.Assert.assertNotNull(scope51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "GET" + "'", str55, "GET");
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertNotNull(scope57);
        org.junit.Assert.assertNotNull(scope58);
        org.junit.Assert.assertNotNull(scope59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(scope63);
        org.junit.Assert.assertNotNull(scope64);
        org.junit.Assert.assertNotNull(scope65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(scope68);
        org.junit.Assert.assertNotNull(scopeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test11376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11376");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshToken("GET");
        org.osiam.client.OsiamGroupService.Builder builder19 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService20 = builder19.build();
        org.osiam.client.OsiamGroupService osiamGroupService21 = builder19.build();
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken28);
        java.lang.String str30 = osiamGroupService21.extractErrorMessageForbidden(accessToken28);
        java.util.Date date31 = accessToken28.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder15.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setClientId("GET POST PUT PATCH DELETE");
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setClientId("Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]");
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setClientId("descending");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(osiamGroupService20);
        org.junit.Assert.assertNotNull(osiamGroupService21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Insufficient scopes: []" + "'", str30, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test11377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11377");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str7 = scope6.toString();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        boolean boolean15 = accessToken14.isRefreshTokenExpired();
        java.lang.String str16 = accessToken14.getUserId();
        boolean boolean17 = accessToken14.isRefreshTokenExpired();
        java.lang.String str18 = accessToken14.getRefreshToken();
        boolean boolean19 = scope6.equals((java.lang.Object) accessToken14);
        java.lang.String str20 = osiamGroupService5.extractErrorMessageForbidden(accessToken14);
        javax.ws.rs.core.Response.StatusType statusType22 = null;
        org.osiam.client.AuthService.Builder builder24 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder26 = builder24.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder28 = builder26.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder30 = builder28.setClientSecret("");
        org.osiam.client.AuthService.Builder builder32 = builder30.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService authService33 = builder32.build();
        org.osiam.client.AuthService authService34 = builder32.build();
        org.osiam.client.oauth.AccessToken.Builder builder36 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date37 = null;
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setRefreshTokenExpiresAt(date37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder36.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken41 = builder40.build();
        boolean boolean42 = accessToken41.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet43 = accessToken41.getScopes();
        boolean boolean44 = accessToken41.isRefreshTokenExpired();
        boolean boolean45 = accessToken41.isExpired();
        java.util.Date date46 = accessToken41.getExpiresAt();
        java.lang.String str47 = authService34.extractErrorMessageForbidden(accessToken41);
        java.lang.String str48 = accessToken41.getRefreshToken();
        java.lang.String str49 = accessToken41.getUserName();
        java.lang.String str50 = accessToken41.getUserName();
        java.lang.String str51 = accessToken41.getType();
        java.lang.String str52 = accessToken41.getClientId();
        java.lang.String str53 = accessToken41.getType();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService5.checkAndHandleResponse("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET POST PUT PATCH DELETE], refreshTokenId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=refresh_token, userId=org.osiam.client.exception.ConflictException: PATCH, userName=]", statusType22, accessToken41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PUT" + "'", str7, "PUT");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(authService33);
        org.junit.Assert.assertNotNull(authService34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(accessToken41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(scopeSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Insufficient scopes: []" + "'", str47, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test11378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11378");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        java.lang.String str23 = accessToken21.getUserName();
        java.lang.String str24 = accessToken21.toString();
        java.lang.String str25 = osiamGroupService2.extractErrorMessageForbidden(accessToken21);
        org.osiam.resources.scim.Group group27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.addScope(scope30);
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException34 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean35 = scope32.equals((java.lang.Object) invalidAttributeException34);
        java.lang.String str36 = scope32.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder29.addScope(scope32);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder43.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken48 = builder47.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken48);
        boolean boolean50 = accessToken48.isRefreshTokenExpired();
        boolean boolean51 = accessToken48.isClientOnly();
        java.util.Date date52 = accessToken48.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group53 = osiamGroupService2.updateResource("org.osiam.client.exception.NoResultException: Insufficient scopes: [null, PATCH, GET, ME, ADMIN, GET POST PUT PATCH DELETE, PUT]", group27, accessToken48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str24, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GET" + "'", str36, "GET");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(accessToken48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11379");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService4 = builder3.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.util.Date date12 = accessToken11.getExpiresAt();
        java.lang.String str13 = accessToken11.getRefreshToken();
        java.lang.String str14 = accessToken11.getType();
        java.lang.String str15 = accessToken11.getClientId();
        java.lang.String str16 = accessToken11.getUserName();
        java.lang.String str17 = accessToken11.toString();
        java.lang.String str18 = accessToken11.getUserName();
        java.lang.String str19 = authService4.extractErrorMessageForbidden(accessToken11);
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        java.util.Date date27 = accessToken26.getExpiresAt();
        java.lang.String str28 = accessToken26.getRefreshToken();
        boolean boolean29 = accessToken26.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken26);
        java.lang.String str31 = authService4.extractErrorMessageForbidden(accessToken26);
        java.lang.String str32 = accessToken26.getRefreshToken();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(authService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str17, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Insufficient scopes: []" + "'", str31, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test11380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11380");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        boolean boolean1 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer3 = scopeDeserializer0.unwrappingDeserializer(nameTransformer2);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader4 = scopeSetJsonDeserializer3.getObjectIdReader();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeSetJsonDeserializer3.getObjectIdReader();
        com.fasterxml.jackson.core.JsonParser jsonParser6 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder9.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder9.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.addScope(scope18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setUserName("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.helper.ScopeSerializer scopeSerializer22 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean23 = scopeSerializer22.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer24 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer25 = scopeSerializer22.unwrappingSerializer(nameTransformer24);
        boolean boolean26 = scopeSerializer22.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer27 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer28 = scopeSerializer22.unwrappingSerializer(nameTransformer27);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper29 = null;
        com.fasterxml.jackson.databind.JavaType javaType30 = null;
        scopeSerializer22.acceptJsonFormatVisitor(jsonFormatVisitorWrapper29, javaType30);
        boolean boolean32 = scopeSerializer22.usesObjectId();
        boolean boolean33 = scopeSerializer22.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider34 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer35 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean36 = scopeSerializer35.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass37 = scopeSerializer35.handledType();
        org.osiam.client.oauth.AccessToken.Builder builder39 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date40 = null;
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setRefreshTokenExpiresAt(date40);
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder39.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken44 = builder43.build();
        java.util.Date date45 = accessToken44.getExpiresAt();
        java.lang.String str46 = accessToken44.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet47 = accessToken44.getScopes();
        boolean boolean48 = scopeSerializer35.isEmpty(scopeSet47);
        boolean boolean49 = scopeSerializer22.isEmpty(serializerProvider34, scopeSet47);
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder21.addScopes(scopeSet47);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder21.setType("org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setUserId("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.helper.ScopeSerializer scopeSerializer55 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean56 = scopeSerializer55.isUnwrappingSerializer();
        org.osiam.client.helper.ScopeSerializer scopeSerializer57 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder59 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date60 = null;
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.setRefreshTokenExpiresAt(date60);
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder59.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken64 = builder63.build();
        boolean boolean65 = accessToken64.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet66 = accessToken64.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator67 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider68 = null;
        scopeSerializer57.serialize(scopeSet66, jsonGenerator67, serializerProvider68);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator70 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider71 = null;
        scopeSerializer55.serialize(scopeSet66, jsonGenerator70, serializerProvider71);
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder52.addScopes(scopeSet66);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet74 = scopeSetJsonDeserializer3.deserialize(jsonParser6, deserializationContext7, scopeSet66);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Can not update object of type java.util.HashSet (by deserializer of type org.osiam.client.helper.ScopeDeserializer)");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer3);
        org.junit.Assert.assertNull(objectIdReader4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(scopeSetClass37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(accessToken44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(scopeSet47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(accessToken64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(scopeSet66);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test11381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11381");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet15 = accessToken12.getScopes();
        java.lang.String str16 = osiamGroupService3.extractErrorMessageForbidden(accessToken12);
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget18 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget19 = osiamGroupService3.targetEndpoint;
        org.osiam.resources.scim.Group group21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        boolean boolean29 = accessToken28.isRefreshTokenExpired();
        boolean boolean30 = accessToken28.isClientOnly();
        java.lang.String str31 = accessToken28.getRefreshToken();
        boolean boolean32 = accessToken28.isExpired();
        boolean boolean33 = accessToken28.isExpired();
        boolean boolean34 = accessToken28.isClientOnly();
        java.util.Date date35 = accessToken28.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group36 = osiamGroupService3.updateGroup("org.osiam.client.exception.UnauthorizedException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", group21, accessToken28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(scopeSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Insufficient scopes: []" + "'", str16, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget17);
        org.junit.Assert.assertNotNull(webTarget18);
        org.junit.Assert.assertNotNull(webTarget19);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11382");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder6.descending("PATCH");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder6.count(401);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder6.startIndex((long) '4');
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
    }

    @Test
    public void test11383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11383");
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException2 = new org.osiam.client.exception.InvalidAttributeException("org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388");
        org.osiam.client.exception.OsiamRequestException osiamRequestException5 = new org.osiam.client.exception.OsiamRequestException((int) (byte) 0, "org.osiam.client.exception.ConnectionInitializationException: descending");
        invalidAttributeException2.addSuppressed((java.lang.Throwable) osiamRequestException5);
        org.osiam.client.exception.OsiamClientException osiamClientException7 = new org.osiam.client.exception.OsiamClientException("DELETE", (java.lang.Throwable) osiamRequestException5);
        int int8 = osiamRequestException5.getHttpStatusCode();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test11384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11384");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder2.descending("authorization_code");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
    }

    @Test
    public void test11385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11385");
        org.osiam.client.exception.OAuthErrorMessage oAuthErrorMessage0 = new org.osiam.client.exception.OAuthErrorMessage();
        java.lang.String str1 = oAuthErrorMessage0.getDescription();
        java.lang.String str2 = oAuthErrorMessage0.getDescription();
        java.lang.String str3 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str4 = oAuthErrorMessage0.getDescription();
        java.lang.String str5 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str6 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str7 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str8 = oAuthErrorMessage0.getDescription();
        java.lang.String str9 = oAuthErrorMessage0.getDescription();
        java.lang.String str10 = oAuthErrorMessage0.getErrorCode();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test11386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11386");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getNullValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet5 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader6 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader7 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer8 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.core.JsonParser jsonParser9 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = scopeDeserializer0.deserialize(jsonParser9, deserializationContext10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNull(scopeSet5);
        org.junit.Assert.assertNull(objectIdReader6);
        org.junit.Assert.assertNull(objectIdReader7);
        org.junit.Assert.assertNull(wildcardJsonDeserializer8);
    }

    @Test
    public void test11387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11387");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientSecret("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Authorization");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test11388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11388");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException1 = new org.osiam.client.exception.ConnectionInitializationException("GET");
    }

    @Test
    public void test11389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11389");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setAuthServerEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder10.setClientSecret("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setAuthServerEndpoint("refresh_token");
        org.osiam.client.OsiamConnector osiamConnector19 = builder16.build();
        org.osiam.client.AuthService.Builder builder23 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientId("ME");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder29 = builder27.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder31 = builder29.setClientRedirectUri("Cannot connect to server");
        org.osiam.client.AuthService.Builder builder33 = builder31.setClientRedirectUri("hi!");
        org.osiam.client.AuthService.Builder builder35 = builder33.setClientId("Cannot connect to server");
        org.osiam.client.AuthService.Builder builder37 = builder35.setClientSecret("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.AuthService.Builder builder39 = builder35.setClientSecret("");
        org.osiam.client.AuthService authService40 = builder35.build();
        org.osiam.client.AuthService.Builder builder42 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder44 = builder42.setClientId("ME");
        org.osiam.client.AuthService.Builder builder46 = builder44.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder48 = builder46.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder50 = builder48.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder52 = builder48.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService53 = builder52.build();
        org.osiam.client.AuthService.Builder builder55 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder57 = builder55.setClientId("ME");
        org.osiam.client.AuthService.Builder builder59 = builder57.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder61 = builder59.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder63 = builder61.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService64 = builder63.build();
        org.osiam.client.oauth.AccessToken.Builder builder66 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date67 = null;
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder66.setRefreshTokenExpiresAt(date67);
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder66.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken71 = builder70.build();
        boolean boolean72 = accessToken71.isRefreshTokenExpired();
        java.lang.String str73 = accessToken71.getUserId();
        java.lang.String str74 = accessToken71.getToken();
        java.lang.String str75 = authService64.extractErrorMessageForbidden(accessToken71);
        org.osiam.client.oauth.Scope scope76 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str77 = scope76.getValue();
        java.lang.String str78 = scope76.toString();
        org.osiam.client.oauth.Scope scope79 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray80 = new org.osiam.client.oauth.Scope[] { scope76, scope79 };
        java.net.URI uRI81 = authService64.getAuthorizationUri(scopeArray80);
        java.net.URI uRI82 = authService53.getAuthorizationUri(scopeArray80);
        java.net.URI uRI83 = authService40.getAuthorizationUri(scopeArray80);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken84 = osiamConnector19.retrieveAccessToken("", "org.osiam.client.exception.OsiamClientException: client_credentials", scopeArray80);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(authService40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(authService53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(authService64);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(accessToken71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Bearer " + "'", str74, "Bearer ");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Insufficient scopes: []" + "'", str75, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "PATCH" + "'", str77, "PATCH");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "PATCH" + "'", str78, "PATCH");
        org.junit.Assert.assertNotNull(scope79);
        org.junit.Assert.assertNotNull(scopeArray80);
        org.junit.Assert.assertNotNull(uRI81);
        org.junit.Assert.assertNotNull(uRI82);
        org.junit.Assert.assertNotNull(uRI83);
    }

    @Test
    public void test11390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11390");
        org.osiam.client.oauth.Scope scope1 = new org.osiam.client.oauth.Scope("Query [attributes=ME, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        java.lang.String str2 = scope1.getValue();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Query [attributes=ME, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str2, "Query [attributes=ME, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test11391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11391");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.addScope(scope6);
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException10 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean11 = scope8.equals((java.lang.Object) invalidAttributeException10);
        java.lang.String str12 = scope8.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder5.addScope(scope8);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken24 = builder19.build();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet25 = accessToken24.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user26 = osiamUserService3.getCurrentUser(accessToken24);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GET" + "'", str12, "GET");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertNotNull(scopeSet25);
    }

    @Test
    public void test11392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11392");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer7 = scopeSetJsonDeserializer6.getDelegatee();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader8 = scopeSetJsonDeserializer6.getObjectIdReader();
        java.util.Collection<java.lang.Object> objCollection9 = scopeSetJsonDeserializer6.getKnownPropertyNames();
        com.fasterxml.jackson.core.JsonParser jsonParser10 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext11 = null;
        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeserializer12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj13 = scopeSetJsonDeserializer6.deserializeWithType(jsonParser10, deserializationContext11, typeDeserializer12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNull(wildcardJsonDeserializer7);
        org.junit.Assert.assertNull(objectIdReader8);
        org.junit.Assert.assertNull(objCollection9);
    }

    @Test
    public void test11393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11393");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.addScope(scope18);
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder17.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder13.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.addScope(scope29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException33 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean34 = scope31.equals((java.lang.Object) invalidAttributeException33);
        java.lang.String str35 = scope31.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder28.addScope(scope31);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setUserId("");
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.addScope(scope41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken49 = builder48.build();
        java.util.Date date50 = accessToken49.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder40.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder13.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setRefreshToken("");
        org.osiam.client.oauth.AccessToken.Builder builder56 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date57 = null;
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.setRefreshTokenExpiresAt(date57);
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder56.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken61 = builder60.build();
        java.util.Date date62 = accessToken61.getExpiresAt();
        java.util.Date date63 = accessToken61.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder52.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder52.setUserName("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder52.setType("GET POST PUT PATCH DELETE");
        org.osiam.client.oauth.AccessToken accessToken69 = builder68.build();
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder68.setType("ascending");
        org.osiam.client.oauth.AccessToken.Builder builder73 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date74 = null;
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder73.setRefreshTokenExpiresAt(date74);
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder73.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken78 = builder77.build();
        boolean boolean79 = accessToken78.isRefreshTokenExpired();
        boolean boolean80 = accessToken78.isClientOnly();
        java.lang.String str81 = accessToken78.getRefreshToken();
        boolean boolean82 = accessToken78.isExpired();
        boolean boolean83 = accessToken78.isExpired();
        boolean boolean84 = accessToken78.isClientOnly();
        java.util.Date date85 = accessToken78.getExpiresAt();
        java.util.Date date86 = accessToken78.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder87 = builder68.setExpiresAt(date86);
        org.osiam.client.oauth.AccessToken accessToken88 = builder87.build();
        boolean boolean89 = accessToken88.isRefreshTokenExpired();
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GET" + "'", str35, "GET");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(accessToken61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(accessToken69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(accessToken78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(accessToken88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test11394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11394");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.client.AuthService.Builder builder7 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientId("ME");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientRedirectUri("Cannot connect to server");
        org.osiam.client.AuthService.Builder builder17 = builder15.setClientRedirectUri("hi!");
        org.osiam.client.AuthService.Builder builder19 = builder17.setClientId("Cannot connect to server");
        org.osiam.client.AuthService.Builder builder21 = builder19.setClientSecret("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.AuthService.Builder builder23 = builder19.setClientSecret("");
        org.osiam.client.AuthService authService24 = builder19.build();
        org.osiam.client.AuthService.Builder builder26 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder28 = builder26.setClientId("ME");
        org.osiam.client.AuthService.Builder builder30 = builder28.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder32 = builder30.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder34 = builder32.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder36 = builder32.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService37 = builder36.build();
        org.osiam.client.AuthService.Builder builder39 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder41 = builder39.setClientId("ME");
        org.osiam.client.AuthService.Builder builder43 = builder41.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder45 = builder43.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder47 = builder45.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService48 = builder47.build();
        org.osiam.client.oauth.AccessToken.Builder builder50 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date51 = null;
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.setRefreshTokenExpiresAt(date51);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder50.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken55 = builder54.build();
        boolean boolean56 = accessToken55.isRefreshTokenExpired();
        java.lang.String str57 = accessToken55.getUserId();
        java.lang.String str58 = accessToken55.getToken();
        java.lang.String str59 = authService48.extractErrorMessageForbidden(accessToken55);
        org.osiam.client.oauth.Scope scope60 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str61 = scope60.getValue();
        java.lang.String str62 = scope60.toString();
        org.osiam.client.oauth.Scope scope63 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray64 = new org.osiam.client.oauth.Scope[] { scope60, scope63 };
        java.net.URI uRI65 = authService48.getAuthorizationUri(scopeArray64);
        java.net.URI uRI66 = authService37.getAuthorizationUri(scopeArray64);
        java.net.URI uRI67 = authService24.getAuthorizationUri(scopeArray64);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken68 = osiamConnector3.retrieveAccessToken("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.ForbiddenException: hi!", "org.osiam.client.exception.ConflictException: org.osiam.client.exception.OsiamClientException: ME", scopeArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(authService24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(authService37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(authService48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(accessToken55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Bearer " + "'", str58, "Bearer ");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Insufficient scopes: []" + "'", str59, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "PATCH" + "'", str61, "PATCH");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "PATCH" + "'", str62, "PATCH");
        org.junit.Assert.assertNotNull(scope63);
        org.junit.Assert.assertNotNull(scopeArray64);
        org.junit.Assert.assertNotNull(uRI65);
        org.junit.Assert.assertNotNull(uRI66);
        org.junit.Assert.assertNotNull(uRI67);
    }

    @Test
    public void test11395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11395");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet7 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader8 = scopeDeserializer0.getObjectIdReader();
        java.util.Collection<java.lang.Object> objCollection9 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.core.JsonParser jsonParser10 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet12 = scopeDeserializer0.deserialize(jsonParser10, deserializationContext11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNull(scopeSet7);
        org.junit.Assert.assertNull(objectIdReader8);
        org.junit.Assert.assertNull(objCollection9);
    }

    @Test
    public void test11396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11396");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder8.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.attributes("Cannot connect to server");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder11.startIndex((long) (byte) 10);
        org.osiam.client.query.Query query16 = queryBuilder15.build();
        java.lang.String str17 = query16.toString();
        java.lang.String str18 = query16.getSortBy();
        java.lang.String str19 = query16.getSortBy();
        org.osiam.client.query.Query query20 = query16.nextPage();
        java.lang.String str21 = query16.getFilter();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]" + "'", str17, "Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test11397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11397");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken20 = builder15.build();
        java.lang.String str21 = accessToken20.getClientId();
        java.util.Date date22 = accessToken20.getRefreshTokenExpiresAt();
        java.lang.String str23 = accessToken20.getClientId();
        org.osiam.client.OsiamConnector.Builder builder24 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder26 = builder24.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder28 = builder24.setResourceServerEndpoint("PATCH");
        org.osiam.client.OsiamConnector osiamConnector29 = builder28.build();
        boolean boolean30 = accessToken20.equals((java.lang.Object) osiamConnector29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        java.lang.Object obj38 = null;
        boolean boolean39 = accessToken37.equals(obj38);
        java.util.Date date40 = accessToken37.getExpiresAt();
        boolean boolean41 = accessToken37.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector29.revokeAccessToken(accessToken37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Bearer " + "'", str21, "Bearer ");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Bearer " + "'", str23, "Bearer ");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(osiamConnector29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test11398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11398");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setResourceServerEndpoint("hi!");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setEndpoint("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientSecret("Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setAuthServerEndpoint("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("org.osiam.client.exception.InvalidAttributeException: authorization_code");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test11399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11399");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        java.lang.String str19 = accessToken18.toString();
        java.lang.String str20 = accessToken18.getClientId();
        org.osiam.client.OsiamConnector.Builder builder21 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder23 = builder21.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder25 = builder23.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder27 = builder25.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector28 = builder27.build();
        org.osiam.client.query.QueryBuilder queryBuilder29 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder31.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.descending("hi!");
        org.osiam.client.query.Query query38 = queryBuilder37.build();
        java.lang.String str39 = query38.toString();
        java.lang.String str40 = query38.toString();
        java.lang.String str41 = query38.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder42 = osiamConnector28.createQueryBuilder(query38);
        org.osiam.client.query.QueryBuilder queryBuilder43 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder45.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder45.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder49.descending("hi!");
        org.osiam.client.query.Query query52 = queryBuilder51.build();
        org.osiam.client.query.QueryBuilder queryBuilder53 = osiamConnector28.createQueryBuilder(query52);
        boolean boolean54 = accessToken18.equals((java.lang.Object) queryBuilder53);
        java.util.Date date55 = accessToken18.getRefreshTokenExpiresAt();
        org.osiam.client.query.QueryBuilder queryBuilder56 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder58 = queryBuilder56.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder60 = queryBuilder58.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder62 = queryBuilder60.ascending("hi!");
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder62.ascending("org.osiam.client.exception.OsiamRequestException: hi!");
        boolean boolean65 = accessToken18.equals((java.lang.Object) "org.osiam.client.exception.OsiamRequestException: hi!");
        // The following exception was thrown during execution in test generation
        try {
            authService10.revokeAllAccessTokens("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken18);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str19, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(osiamConnector28);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(query38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str39, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str40, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(query52);
        org.junit.Assert.assertNotNull(queryBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(queryBuilder58);
        org.junit.Assert.assertNotNull(queryBuilder60);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test11400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11400");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setClientId("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.Scope scope15 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.ConnectionInitializationException: descending");
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.addScope(scope18);
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder17.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope33 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder29.addScope(scope33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setUserName("org.osiam.client.exception.NoResultException: authorization_code");
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        java.lang.Object obj44 = null;
        boolean boolean45 = accessToken43.equals(obj44);
        boolean boolean46 = accessToken43.isExpired();
        java.util.Date date47 = accessToken43.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder36.setRefreshTokenExpiresAt(date47);
        boolean boolean49 = scope15.equals((java.lang.Object) builder48);
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder9.addScope(scope15);
        java.lang.String str51 = scope15.getValue();
        org.osiam.client.OsiamConnector.Builder builder52 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder54 = builder52.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder56 = builder54.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder58 = builder56.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder60 = builder56.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder62 = builder56.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder64 = builder62.setClientRedirectUri("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder66 = builder64.setAuthServerEndpoint("Authorization");
        org.osiam.client.OsiamConnector.Builder builder68 = builder66.setClientRedirectUri("org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.OsiamConnector.Builder builder70 = builder68.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        boolean boolean71 = scope15.equals((java.lang.Object) builder68);
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "org.osiam.client.exception.ConnectionInitializationException: descending" + "'", str51, "org.osiam.client.exception.ConnectionInitializationException: descending");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test11401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11401");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken6);
        java.util.Date date8 = accessToken6.getExpiresAt();
        boolean boolean9 = accessToken6.isRefreshTokenExpired();
        java.lang.String str10 = accessToken6.toString();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str10, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test11402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11402");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder1.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setUserName("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.lang.String str11 = accessToken10.getRefreshToken();
        boolean boolean12 = accessToken10.isExpired();
        java.lang.String str13 = accessToken10.getClientId();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test11403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11403");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder1.setUserId("PATCH");
        org.osiam.client.helper.ScopeSerializer scopeSerializer8 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException16 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean17 = scope14.equals((java.lang.Object) invalidAttributeException16);
        java.lang.String str18 = scope14.getValue();
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str21 = scope20.toString();
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str24 = scope23.getValue();
        java.lang.String str25 = scope23.getValue();
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        java.lang.String str30 = scope26.getValue();
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException36 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean37 = scope34.equals((java.lang.Object) invalidAttributeException36);
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.GET;
        boolean boolean42 = scope40.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray44 = new org.osiam.client.oauth.Scope[] { scope13, scope14, scope19, scope20, scope22, scope23, scope26, scope31, scope32, scope33, scope34, scope38, scope39, scope40, scope43 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet45 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet45, scopeArray44);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder10.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet45);
        boolean boolean48 = scopeSerializer8.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet45);
        org.osiam.client.oauth.AccessToken.Builder builder50 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date51 = null;
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.setRefreshTokenExpiresAt(date51);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder50.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken55 = builder54.build();
        boolean boolean56 = accessToken55.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet57 = accessToken55.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator58 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider59 = null;
        scopeSerializer8.serialize(scopeSet57, jsonGenerator58, serializerProvider59);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider61 = null;
        org.osiam.client.oauth.AccessToken.Builder builder63 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date64 = null;
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder63.setRefreshTokenExpiresAt(date64);
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder63.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken68 = builder67.build();
        boolean boolean69 = accessToken68.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet70 = accessToken68.getScopes();
        boolean boolean71 = scopeSerializer8.isEmpty(serializerProvider61, scopeSet70);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper72 = null;
        com.fasterxml.jackson.databind.JavaType javaType73 = null;
        scopeSerializer8.acceptJsonFormatVisitor(jsonFormatVisitorWrapper72, javaType73);
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer75 = scopeSerializer8.getDelegatee();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider76 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer77 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder79 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date80 = null;
        org.osiam.client.oauth.AccessToken.Builder builder81 = builder79.setRefreshTokenExpiresAt(date80);
        org.osiam.client.oauth.AccessToken.Builder builder83 = builder79.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken84 = builder83.build();
        boolean boolean85 = accessToken84.isRefreshTokenExpired();
        java.lang.String str86 = accessToken84.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet87 = accessToken84.getScopes();
        boolean boolean88 = scopeSerializer77.isEmpty(scopeSet87);
        boolean boolean89 = scopeSerializer8.isEmpty(serializerProvider76, scopeSet87);
        org.osiam.client.oauth.AccessToken.Builder builder90 = builder1.addScopes(scopeSet87);
        org.osiam.client.oauth.AccessToken.Builder builder92 = builder1.setClientId("org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GET" + "'", str18, "GET");
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ME" + "'", str21, "ME");
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PATCH" + "'", str24, "PATCH");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PATCH" + "'", str25, "PATCH");
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GET" + "'", str30, "GET");
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertNotNull(scopeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(accessToken55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(scopeSet57);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(accessToken68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(scopeSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(wildcardJsonSerializer75);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(accessToken84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(scopeSet87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test11404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11404");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.toString();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query41);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.toString();
        org.osiam.client.query.QueryBuilder queryBuilder57 = new org.osiam.client.query.QueryBuilder(query55);
        java.lang.String str58 = query55.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder59 = new org.osiam.client.query.QueryBuilder(query55);
        org.osiam.client.oauth.AccessToken.Builder builder61 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date62 = null;
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder61.setRefreshTokenExpiresAt(date62);
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder61.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken66 = builder65.build();
        boolean boolean67 = accessToken66.isRefreshTokenExpired();
        java.lang.String str68 = accessToken66.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder69 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder71 = queryBuilder69.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder73 = queryBuilder71.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder75 = queryBuilder71.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder77 = queryBuilder75.descending("hi!");
        org.osiam.client.query.Query query78 = queryBuilder77.build();
        java.lang.String str79 = query78.toString();
        java.lang.String str80 = query78.getSortOrder();
        java.lang.String str81 = query78.getSortBy();
        java.lang.String str82 = query78.getFilter();
        java.lang.String str83 = query78.getSortOrder();
        java.lang.String str84 = query78.getAttributes();
        boolean boolean85 = accessToken66.equals((java.lang.Object) query78);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet86 = accessToken66.getScopes();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet87 = accessToken66.getScopes();
        boolean boolean88 = accessToken66.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult89 = osiamConnector5.searchGroups(query55, accessToken66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str42, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str56, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(accessToken66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(queryBuilder71);
        org.junit.Assert.assertNotNull(queryBuilder73);
        org.junit.Assert.assertNotNull(queryBuilder75);
        org.junit.Assert.assertNotNull(queryBuilder77);
        org.junit.Assert.assertNotNull(query78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str79, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "descending" + "'", str80, "descending");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hi!" + "'", str81, "hi!");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "descending" + "'", str83, "descending");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Authorization" + "'", str84, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(scopeSet86);
        org.junit.Assert.assertNotNull(scopeSet87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test11405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11405");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        java.lang.Class<?> wildcardClass6 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer7 = scopeDeserializer0.getDelegatee();
        java.lang.Class<?> wildcardClass8 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass9 = scopeDeserializer0.handledType();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer10 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass11 = scopeDeserializer10.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer12 = scopeDeserializer10.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection13 = scopeDeserializer10.getKnownPropertyNames();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer14 = scopeDeserializer10.getDelegatee();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer15 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer16 = scopeDeserializer10.unwrappingDeserializer(nameTransformer15);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer17 = scopeDeserializer0.replaceDelegatee(scopeSetJsonDeserializer16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardJsonDeserializer7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(wildcardJsonDeserializer12);
        org.junit.Assert.assertNull(objCollection13);
        org.junit.Assert.assertNull(wildcardJsonDeserializer14);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer16);
    }

    @Test
    public void test11406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11406");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        java.lang.String str23 = accessToken21.getUserName();
        java.lang.String str24 = accessToken21.toString();
        java.lang.String str25 = osiamGroupService2.extractErrorMessageForbidden(accessToken21);
        javax.ws.rs.client.WebTarget webTarget26 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        boolean boolean34 = accessToken33.isRefreshTokenExpired();
        boolean boolean35 = accessToken33.isClientOnly();
        java.lang.String str36 = accessToken33.getRefreshToken();
        boolean boolean37 = accessToken33.isExpired();
        boolean boolean38 = accessToken33.isExpired();
        java.lang.String str39 = accessToken33.getRefreshToken();
        java.lang.String str40 = osiamGroupService2.extractErrorMessageForbidden(accessToken33);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken49 = builder46.build();
        java.util.Date date50 = accessToken49.getExpiresAt();
        java.lang.String str51 = accessToken49.toString();
        java.lang.String str52 = osiamGroupService2.extractErrorMessageForbidden(accessToken49);
        org.osiam.client.oauth.AccessToken.Builder builder54 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date55 = null;
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setRefreshTokenExpiresAt(date55);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder54.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken59 = builder58.build();
        boolean boolean60 = accessToken59.isRefreshTokenExpired();
        boolean boolean61 = accessToken59.isClientOnly();
        java.lang.String str62 = accessToken59.getClientId();
        boolean boolean63 = accessToken59.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList64 = osiamGroupService2.getAllResources(accessToken59);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str24, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Insufficient scopes: []" + "'", str40, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str51, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Insufficient scopes: []" + "'", str52, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(accessToken59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test11407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11407");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector.Builder builder12 = builder2.setEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector osiamConnector13 = builder2.build();
        org.osiam.client.OsiamConnector.Builder builder14 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector19 = builder18.build();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        java.lang.String str28 = accessToken26.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder29 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder31.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.descending("hi!");
        org.osiam.client.query.Query query38 = queryBuilder37.build();
        java.lang.String str39 = query38.toString();
        java.lang.String str40 = query38.getSortOrder();
        java.lang.String str41 = query38.getSortBy();
        java.lang.String str42 = query38.getFilter();
        java.lang.String str43 = query38.toString();
        boolean boolean44 = accessToken26.equals((java.lang.Object) query38);
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector19.createQueryBuilder(query38);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.getAttributes();
        java.lang.String str57 = query55.toString();
        java.lang.String str58 = query55.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder59 = osiamConnector19.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder60 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder62 = queryBuilder60.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder62.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder66 = queryBuilder64.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query67 = queryBuilder64.build();
        org.osiam.client.query.QueryBuilder queryBuilder68 = osiamConnector19.createQueryBuilder(query67);
        java.lang.String str69 = query67.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder70 = osiamConnector13.createQueryBuilder(query67);
        org.osiam.client.query.QueryBuilder queryBuilder71 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder73 = queryBuilder71.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder75 = queryBuilder73.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder77 = queryBuilder73.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder79 = queryBuilder77.descending("hi!");
        org.osiam.client.query.Query query80 = queryBuilder79.build();
        java.lang.String str81 = query80.toString();
        java.lang.String str82 = query80.toString();
        org.osiam.client.query.Query query83 = query80.nextPage();
        org.osiam.client.query.Query query84 = query83.previousPage();
        org.osiam.client.query.QueryBuilder queryBuilder85 = osiamConnector13.createQueryBuilder(query84);
        java.lang.String str86 = query84.getSortBy();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(query38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str39, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "descending" + "'", str40, "descending");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Authorization" + "'", str56, "Authorization");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str57, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "descending" + "'", str58, "descending");
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertNotNull(query67);
        org.junit.Assert.assertNotNull(queryBuilder68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(queryBuilder70);
        org.junit.Assert.assertNotNull(queryBuilder73);
        org.junit.Assert.assertNotNull(queryBuilder75);
        org.junit.Assert.assertNotNull(queryBuilder77);
        org.junit.Assert.assertNotNull(queryBuilder79);
        org.junit.Assert.assertNotNull(query80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str81, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str82, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query83);
        org.junit.Assert.assertNotNull(query84);
        org.junit.Assert.assertNotNull(queryBuilder85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
    }

    @Test
    public void test11408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11408");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setClientId("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.OsiamConnector osiamConnector13 = builder8.build();
        org.osiam.client.AuthService.Builder builder16 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder18 = builder16.setClientId("ME");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService21 = builder20.build();
        org.osiam.client.OsiamGroupService.Builder builder23 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService24 = builder23.build();
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken31 = builder30.build();
        boolean boolean32 = accessToken31.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet33 = accessToken31.getScopes();
        java.lang.String str34 = osiamGroupService24.extractErrorMessageForbidden(accessToken31);
        boolean boolean35 = accessToken31.isClientOnly();
        java.lang.String str36 = authService21.extractErrorMessageForbidden(accessToken31);
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken45 = builder42.build();
        java.util.Date date46 = accessToken45.getExpiresAt();
        java.lang.String str47 = accessToken45.toString();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken45);
        java.lang.String str49 = authService21.extractErrorMessageForbidden(accessToken45);
        org.osiam.client.oauth.AccessToken.Builder builder51 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date52 = null;
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setRefreshTokenExpiresAt(date52);
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder51.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken56 = builder55.build();
        boolean boolean57 = accessToken56.isRefreshTokenExpired();
        boolean boolean58 = accessToken56.isClientOnly();
        java.lang.String str59 = accessToken56.getRefreshToken();
        boolean boolean60 = accessToken56.isExpired();
        boolean boolean61 = accessToken56.isExpired();
        java.lang.String str62 = accessToken56.getClientId();
        boolean boolean63 = accessToken56.isExpired();
        java.lang.String str64 = accessToken56.getType();
        boolean boolean65 = accessToken56.isClientOnly();
        java.lang.String str66 = authService21.extractErrorMessageForbidden(accessToken56);
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector13.revokeAllAccessTokens("Insufficient scopes: [null, PATCH, GET, ME, ADMIN, GET POST PUT PATCH DELETE, PUT]", accessToken56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(authService21);
        org.junit.Assert.assertNotNull(osiamGroupService24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(accessToken31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(scopeSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Insufficient scopes: []" + "'", str34, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(accessToken45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str47, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Insufficient scopes: []" + "'", str49, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(accessToken56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Insufficient scopes: []" + "'", str66, "Insufficient scopes: []");
    }

    @Test
    public void test11409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11409");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.resources.scim.User user7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        boolean boolean15 = accessToken14.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet16 = accessToken14.getScopes();
        boolean boolean17 = accessToken14.isExpired();
        java.lang.String str18 = accessToken14.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user19 = osiamUserService5.replaceUser("org.osiam.client.exception.OsiamRequestException: Query [attributes=Authorization, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=10]", user7, accessToken14);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(scopeSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str18, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test11410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11410");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer7 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer8 = scopeSetJsonDeserializer6.unwrappingDeserializer(nameTransformer7);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = scopeSetJsonDeserializer8.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader10 = scopeSetJsonDeserializer8.getObjectIdReader();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = scopeSetJsonDeserializer8.getEmptyValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet12 = scopeSetJsonDeserializer8.getNullValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet13 = scopeSetJsonDeserializer8.getEmptyValue();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer8);
        org.junit.Assert.assertNull(scopeSet9);
        org.junit.Assert.assertNull(objectIdReader10);
        org.junit.Assert.assertNull(scopeSet11);
        org.junit.Assert.assertNull(scopeSet12);
        org.junit.Assert.assertNull(scopeSet13);
    }

    @Test
    public void test11411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11411");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientRedirectUri("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Authorization");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientSecret("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder18 = builder14.setEndpoint("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientRedirectUri("Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test11412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11412");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass4 = scopeSetJsonSerializer3.handledType();
        boolean boolean5 = scopeSetJsonSerializer3.isUnwrappingSerializer();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertNull(scopeSetClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test11413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11413");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector13 = builder8.build();
        org.osiam.client.OsiamConnector.Builder builder14 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector21 = builder20.build();
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.descending("hi!");
        org.osiam.client.query.Query query31 = queryBuilder30.build();
        java.lang.String str32 = query31.toString();
        java.lang.String str33 = query31.toString();
        java.lang.String str34 = query31.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder35 = osiamConnector21.createQueryBuilder(query31);
        org.osiam.client.query.QueryBuilder queryBuilder36 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder42 = queryBuilder38.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder44 = queryBuilder42.descending("hi!");
        org.osiam.client.query.Query query45 = queryBuilder44.build();
        org.osiam.client.query.QueryBuilder queryBuilder46 = osiamConnector21.createQueryBuilder(query45);
        org.osiam.client.query.QueryBuilder queryBuilder47 = osiamConnector13.createQueryBuilder(query45);
        org.osiam.client.query.QueryBuilder queryBuilder48 = osiamConnector13.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder49 = osiamConnector13.createQueryBuilder();
        org.osiam.client.OsiamGroupService.Builder builder52 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService53 = builder52.build();
        javax.ws.rs.client.WebTarget webTarget54 = osiamGroupService53.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget55 = osiamGroupService53.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget56 = osiamGroupService53.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget57 = osiamGroupService53.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder59 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date60 = null;
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.setRefreshTokenExpiresAt(date60);
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder59.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken64 = builder63.build();
        boolean boolean65 = accessToken64.isRefreshTokenExpired();
        boolean boolean66 = accessToken64.isClientOnly();
        java.lang.String str67 = accessToken64.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet68 = accessToken64.getScopes();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken64);
        java.lang.String str70 = osiamGroupService53.extractErrorMessageForbidden(accessToken64);
        boolean boolean71 = accessToken64.isExpired();
        java.lang.String str72 = accessToken64.getToken();
        java.lang.String str73 = accessToken64.getUserName();
        java.lang.String str74 = accessToken64.getToken();
        java.lang.String str75 = accessToken64.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector13.deleteGroup("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.OsiamClientException: PATCH", accessToken64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The string \"Insufficient scopes\" for the URI component SCHEME contains an invalid character, ' ', at index 12.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(query31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str32, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str33, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(query45);
        org.junit.Assert.assertNotNull(queryBuilder46);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(osiamGroupService53);
        org.junit.Assert.assertNotNull(webTarget54);
        org.junit.Assert.assertNotNull(webTarget55);
        org.junit.Assert.assertNotNull(webTarget56);
        org.junit.Assert.assertNotNull(webTarget57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(accessToken64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(scopeSet68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Insufficient scopes: []" + "'", str70, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Bearer " + "'", str72, "Bearer ");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Bearer " + "'", str74, "Bearer ");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
    }

    @Test
    public void test11414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11414");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.ascending("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.ascending("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.attributes("org.osiam.client.exception.ConnectionInitializationException: descending");
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.count((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
    }

    @Test
    public void test11415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11415");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = osiamGroupService3.extractErrorMessageUnauthorized("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET POST PUT PATCH DELETE], refreshTokenId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=refresh_token, userId=org.osiam.client.exception.ConflictException: PATCH, userName=]", statusType6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
    }

    @Test
    public void test11416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11416");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder8.descending("client_credentials");
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder8.attributes("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.descending("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count((int) (byte) 10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.filter("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.descending("org.osiam.client.exception.InvalidAttributeException: Insufficient scopes: [null, PATCH, GET, ME, ADMIN, GET POST PUT PATCH DELETE, PUT]");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
    }

    @Test
    public void test11417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11417");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder13 = builder9.setClientSecret("PATCH");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService16 = builder13.build();
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.GET;
        java.lang.String str18 = scope17.getValue();
        java.lang.String str19 = scope17.getValue();
        java.lang.String str20 = scope17.toString();
        java.lang.String str21 = scope17.toString();
        org.osiam.client.oauth.Scope[] scopeArray22 = new org.osiam.client.oauth.Scope[] { scope17 };
        java.net.URI uRI23 = authService16.getAuthorizationUri(scopeArray22);
        org.osiam.client.AuthService.Builder builder25 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388");
        org.osiam.client.AuthService authService26 = builder25.build();
        org.osiam.client.AuthService.Builder builder28 = builder25.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        org.osiam.client.AuthService authService29 = builder28.build();
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken38 = builder35.build();
        boolean boolean39 = accessToken38.isRefreshTokenExpired();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken38);
        java.lang.String str41 = authService29.extractErrorMessageForbidden(accessToken38);
        java.lang.String str42 = authService16.extractErrorMessageForbidden(accessToken38);
        org.osiam.client.OsiamGroupService.Builder builder44 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService45 = builder44.build();
        org.osiam.client.OsiamGroupService osiamGroupService46 = builder44.build();
        javax.ws.rs.client.WebTarget webTarget47 = osiamGroupService46.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget48 = osiamGroupService46.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder50 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date51 = null;
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.setRefreshTokenExpiresAt(date51);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder50.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken55 = builder54.build();
        boolean boolean56 = accessToken55.isRefreshTokenExpired();
        java.lang.String str57 = accessToken55.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet58 = accessToken55.getScopes();
        java.lang.String str59 = osiamGroupService46.extractErrorMessageForbidden(accessToken55);
        javax.ws.rs.client.WebTarget webTarget60 = osiamGroupService46.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget61 = osiamGroupService46.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder63 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date64 = null;
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder63.setRefreshTokenExpiresAt(date64);
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder63.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder67.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken70 = builder67.build();
        boolean boolean71 = accessToken70.isClientOnly();
        java.lang.String str72 = osiamGroupService46.extractErrorMessageForbidden(accessToken70);
        org.osiam.client.oauth.AccessToken.Builder builder74 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date75 = null;
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder74.setRefreshTokenExpiresAt(date75);
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder74.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken79 = builder78.build();
        boolean boolean80 = accessToken79.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet81 = accessToken79.getScopes();
        boolean boolean82 = accessToken79.isRefreshTokenExpired();
        boolean boolean83 = accessToken79.isExpired();
        java.lang.String str84 = osiamGroupService46.extractErrorMessageForbidden(accessToken79);
        // The following exception was thrown during execution in test generation
        try {
            authService16.revokeAccessToken(accessToken79);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(authService16);
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GET" + "'", str18, "GET");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GET" + "'", str19, "GET");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GET" + "'", str20, "GET");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GET" + "'", str21, "GET");
        org.junit.Assert.assertNotNull(scopeArray22);
        org.junit.Assert.assertNotNull(uRI23);
        org.junit.Assert.assertNotNull(authService26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(authService29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: []" + "'", str41, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Insufficient scopes: []" + "'", str42, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService45);
        org.junit.Assert.assertNotNull(osiamGroupService46);
        org.junit.Assert.assertNotNull(webTarget47);
        org.junit.Assert.assertNotNull(webTarget48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(accessToken55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(scopeSet58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Insufficient scopes: []" + "'", str59, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget60);
        org.junit.Assert.assertNotNull(webTarget61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(accessToken70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Insufficient scopes: []" + "'", str72, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(accessToken79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(scopeSet81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Insufficient scopes: []" + "'", str84, "Insufficient scopes: []");
    }

    @Test
    public void test11418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11418");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.descending("hi!");
        org.osiam.client.query.Query query19 = queryBuilder18.build();
        java.lang.String str20 = query19.getAttributes();
        java.lang.String str21 = query19.toString();
        java.lang.String str22 = query19.getSortBy();
        org.osiam.client.query.Query query23 = query19.nextPage();
        int int24 = query19.getCount();
        java.lang.String str25 = query19.getFilter();
        java.lang.String str26 = query19.getSortBy();
        java.lang.String str27 = query19.getSortBy();
        java.lang.String str28 = query19.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = osiamConnector9.createQueryBuilder(query19);
        org.osiam.client.OsiamConnector.Builder builder30 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder32 = builder30.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder34 = builder32.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector35 = builder34.build();
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken42 = builder41.build();
        boolean boolean43 = accessToken42.isRefreshTokenExpired();
        java.lang.String str44 = accessToken42.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder45 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder45.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder47.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder47.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder53 = queryBuilder51.descending("hi!");
        org.osiam.client.query.Query query54 = queryBuilder53.build();
        java.lang.String str55 = query54.toString();
        java.lang.String str56 = query54.getSortOrder();
        java.lang.String str57 = query54.getSortBy();
        java.lang.String str58 = query54.getFilter();
        java.lang.String str59 = query54.toString();
        boolean boolean60 = accessToken42.equals((java.lang.Object) query54);
        org.osiam.client.query.QueryBuilder queryBuilder61 = osiamConnector35.createQueryBuilder(query54);
        org.osiam.client.query.QueryBuilder queryBuilder62 = osiamConnector35.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder63 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder65 = queryBuilder63.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder67 = queryBuilder65.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder69 = queryBuilder65.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder71 = queryBuilder69.descending("hi!");
        org.osiam.client.query.Query query72 = queryBuilder71.build();
        java.lang.String str73 = query72.toString();
        java.lang.String str74 = query72.toString();
        org.osiam.client.query.Query query75 = query72.nextPage();
        java.lang.String str76 = query72.toString();
        int int77 = query72.getCount();
        java.lang.String str78 = query72.getSortOrder();
        int int79 = query72.getCount();
        org.osiam.client.query.QueryBuilder queryBuilder80 = osiamConnector35.createQueryBuilder(query72);
        org.osiam.client.oauth.AccessToken.Builder builder82 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date83 = null;
        org.osiam.client.oauth.AccessToken.Builder builder84 = builder82.setRefreshTokenExpiresAt(date83);
        org.osiam.client.oauth.AccessToken.Builder builder86 = builder82.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken87 = builder86.build();
        boolean boolean88 = accessToken87.isRefreshTokenExpired();
        java.lang.String str89 = accessToken87.getUserId();
        java.lang.String str90 = accessToken87.getClientId();
        java.util.Date date91 = accessToken87.getRefreshTokenExpiresAt();
        java.util.Date date92 = accessToken87.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult93 = osiamConnector9.searchGroups(query72, accessToken87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Authorization" + "'", str20, "Authorization");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(query23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "descending" + "'", str28, "descending");
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(osiamConnector35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(queryBuilder53);
        org.junit.Assert.assertNotNull(query54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str55, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "descending" + "'", str56, "descending");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str59, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNotNull(queryBuilder65);
        org.junit.Assert.assertNotNull(queryBuilder67);
        org.junit.Assert.assertNotNull(queryBuilder69);
        org.junit.Assert.assertNotNull(queryBuilder71);
        org.junit.Assert.assertNotNull(query72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str73, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str74, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str76, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "descending" + "'", str78, "descending");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
        org.junit.Assert.assertNotNull(queryBuilder80);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(accessToken87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11419");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("password");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.resources.scim.UpdateUser updateUser5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken14 = builder11.build();
        org.osiam.client.oauth.AccessToken accessToken15 = builder11.build();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet16 = accessToken15.getScopes();
        java.util.Date date17 = accessToken15.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user18 = osiamUserService3.updateUser("org.osiam.client.exception.ConflictException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME", updateUser5, accessToken15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertNotNull(scopeSet16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11420");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("PATCH");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.util.Date date12 = accessToken10.getExpiresAt();
        boolean boolean13 = accessToken10.isRefreshTokenExpired();
        java.util.Date date14 = accessToken10.getExpiresAt();
        java.util.Date date15 = accessToken10.getRefreshTokenExpiresAt();
        java.lang.String str16 = accessToken10.getUserId();
        java.util.Date date17 = accessToken10.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser18 = osiamUserService3.getCurrentUserBasic(accessToken10);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11421");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder2.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken7 = builder6.build();
        boolean boolean8 = accessToken7.isRefreshTokenExpired();
        java.lang.String str9 = accessToken7.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet10 = accessToken7.getScopes();
        boolean boolean11 = scopeSerializer0.isEmpty(scopeSet10);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer12 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer13 = scopeSerializer0.unwrappingSerializer(nameTransformer12);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper14 = null;
        com.fasterxml.jackson.databind.JavaType javaType15 = null;
        scopeSetJsonSerializer13.acceptJsonFormatVisitor(jsonFormatVisitorWrapper14, javaType15);
        org.osiam.client.AuthService.Builder builder18 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientId("ME");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService23 = builder22.build();
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        boolean boolean31 = accessToken30.isRefreshTokenExpired();
        boolean boolean32 = accessToken30.isClientOnly();
        java.lang.String str33 = accessToken30.getClientId();
        java.lang.String str34 = authService23.extractErrorMessageForbidden(accessToken30);
        java.lang.String str35 = accessToken30.getUserId();
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken42 = builder41.build();
        boolean boolean43 = accessToken42.isRefreshTokenExpired();
        java.lang.String str44 = accessToken42.getUserId();
        boolean boolean45 = accessToken42.isRefreshTokenExpired();
        boolean boolean46 = accessToken30.equals((java.lang.Object) accessToken42);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet47 = accessToken42.getScopes();
        boolean boolean48 = scopeSetJsonSerializer13.isEmpty(scopeSet47);
        boolean boolean49 = scopeSetJsonSerializer13.usesObjectId();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider50 = null;
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet51 = null;
        boolean boolean52 = scopeSetJsonSerializer13.isEmpty(serializerProvider50, scopeSet51);
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer53 = scopeSetJsonSerializer13.getDelegatee();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(accessToken7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(scopeSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer13);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(authService23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Insufficient scopes: []" + "'", str34, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(scopeSet47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(wildcardJsonSerializer53);
    }

    @Test
    public void test11422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11422");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException1 = new org.osiam.client.exception.ConnectionInitializationException("Cannot connect to server");
        org.osiam.client.exception.ForbiddenException forbiddenException3 = new org.osiam.client.exception.ForbiddenException("");
        org.osiam.client.exception.UnauthorizedException unauthorizedException8 = new org.osiam.client.exception.UnauthorizedException("PATCH");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException9 = new org.osiam.client.exception.ConnectionInitializationException("PATCH", (java.lang.Throwable) unauthorizedException8);
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException10 = new org.osiam.client.exception.ConnectionInitializationException("PUT", (java.lang.Throwable) unauthorizedException8);
        org.osiam.client.exception.OsiamClientException osiamClientException11 = new org.osiam.client.exception.OsiamClientException("ascending", (java.lang.Throwable) unauthorizedException8);
        java.lang.Throwable[] throwableArray12 = osiamClientException11.getSuppressed();
        forbiddenException3.addSuppressed((java.lang.Throwable) osiamClientException11);
        connectionInitializationException1.addSuppressed((java.lang.Throwable) forbiddenException3);
        org.junit.Assert.assertNotNull(throwableArray12);
    }

    @Test
    public void test11423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11423");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder13 = new org.osiam.client.query.QueryBuilder(query9);
        java.lang.String str14 = query9.toString();
        java.lang.String str15 = query9.getFilter();
        org.osiam.client.query.Query query16 = query9.nextPage();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(query16);
    }

    @Test
    public void test11424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11424");
        org.osiam.client.oauth.Scope scope0 = org.osiam.client.oauth.Scope.PATCH;
        boolean boolean2 = scope0.equals((java.lang.Object) 401);
        java.lang.String str3 = scope0.toString();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.addScope(scope6);
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException10 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean11 = scope8.equals((java.lang.Object) invalidAttributeException10);
        java.lang.String str12 = scope8.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder5.addScope(scope8);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.addScope(scope22);
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException26 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean27 = scope24.equals((java.lang.Object) invalidAttributeException26);
        java.lang.String str28 = scope24.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder21.addScope(scope24);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder17.addScope(scope24);
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.addScope(scope33);
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException37 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean38 = scope35.equals((java.lang.Object) invalidAttributeException37);
        java.lang.String str39 = scope35.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder32.addScope(scope35);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.addScope(scope49);
        org.osiam.client.oauth.Scope scope51 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException53 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean54 = scope51.equals((java.lang.Object) invalidAttributeException53);
        java.lang.String str55 = scope51.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder48.addScope(scope51);
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder44.addScope(scope51);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder17.addScope(scope51);
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setType("");
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder58.setClientId("Insufficient scopes: []");
        org.osiam.client.oauth.Scope scope63 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str64 = scope63.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder58.addScope(scope63);
        boolean boolean66 = scope0.equals((java.lang.Object) builder58);
        java.lang.String str67 = scope0.getValue();
        org.osiam.client.helper.ScopeSerializer scopeSerializer68 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder70 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date71 = null;
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder70.setRefreshTokenExpiresAt(date71);
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder70.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken75 = builder74.build();
        boolean boolean76 = accessToken75.isRefreshTokenExpired();
        java.lang.String str77 = accessToken75.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet78 = accessToken75.getScopes();
        boolean boolean79 = scopeSerializer68.isEmpty(scopeSet78);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer80 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer81 = scopeSerializer68.unwrappingSerializer(nameTransformer80);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper82 = null;
        com.fasterxml.jackson.databind.JavaType javaType83 = null;
        scopeSetJsonSerializer81.acceptJsonFormatVisitor(jsonFormatVisitorWrapper82, javaType83);
        boolean boolean85 = scopeSetJsonSerializer81.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass86 = scopeSetJsonSerializer81.handledType();
        boolean boolean87 = scope0.equals((java.lang.Object) scopeSetClass86);
        org.junit.Assert.assertNotNull(scope0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PATCH" + "'", str3, "PATCH");
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GET" + "'", str12, "GET");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GET" + "'", str28, "GET");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GET" + "'", str39, "GET");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(scope51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "GET" + "'", str55, "GET");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(scope63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PUT" + "'", str64, "PUT");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "PATCH" + "'", str67, "PATCH");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(accessToken75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(scopeSet78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(scopeSetClass86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test11425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11425");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Bearer ");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder6 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder6.build();
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken15);
        java.lang.String str17 = osiamGroupService8.extractErrorMessageForbidden(accessToken15);
        java.util.Date date18 = accessToken15.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken15);
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean21 = accessToken15.equals((java.lang.Object) scope20);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken15);
        java.util.Date date23 = accessToken15.getExpiresAt();
        java.lang.String str24 = accessToken15.getType();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken15);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user26 = osiamUserService4.getCurrentUser(accessToken15);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Insufficient scopes: []" + "'", str17, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test11426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11426");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector osiamConnector9 = builder8.build();
        org.osiam.client.OsiamConnector.Builder builder11 = builder8.setResourceServerEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder13 = builder11.setClientSecret("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.OsiamConnector osiamConnector14 = builder13.build();
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.addScope(scope18);
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder17.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder29.addScope(scope32);
        org.osiam.client.oauth.GrantType grantType34 = org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS;
        java.lang.String str35 = grantType34.getUrlParam();
        boolean boolean36 = scope32.equals((java.lang.Object) grantType34);
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.addScope(scope39);
        boolean boolean41 = scope32.equals((java.lang.Object) builder38);
        org.osiam.client.oauth.AccessToken.Builder builder43 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.addScope(scope44);
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException48 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean49 = scope46.equals((java.lang.Object) invalidAttributeException48);
        java.lang.String str50 = scope46.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder43.addScope(scope46);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder38.addScope(scope46);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder38.setRefreshToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken55 = builder38.build();
        boolean boolean56 = accessToken55.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user57 = osiamConnector14.getUser("ADMIN", accessToken55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The string \"AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16\" for the URI component SCHEME contains an invalid character, ' ', at index 11.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(osiamConnector14);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + grantType34 + "' != '" + org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS + "'", grantType34.equals(org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "client_credentials" + "'", str35, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "GET" + "'", str50, "GET");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(accessToken55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test11427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11427");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        boolean boolean1 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer3 = scopeDeserializer0.unwrappingDeserializer(nameTransformer2);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader4 = scopeSetJsonDeserializer3.getObjectIdReader();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet5 = scopeSetJsonDeserializer3.getNullValue();
        boolean boolean6 = scopeSetJsonDeserializer3.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet7 = scopeSetJsonDeserializer3.getNullValue();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer3);
        org.junit.Assert.assertNull(objectIdReader4);
        org.junit.Assert.assertNull(scopeSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(scopeSet7);
    }

    @Test
    public void test11428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11428");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken19 = builder16.build();
        org.osiam.client.oauth.AccessToken accessToken20 = builder16.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken20);
        java.lang.String str22 = accessToken20.getUserName();
        boolean boolean23 = accessToken20.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken24 = authService10.validateAccessToken(accessToken20);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test11429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11429");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.resources.scim.User user6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        java.lang.String str15 = accessToken13.getUserId();
        java.lang.String str16 = accessToken13.getClientId();
        java.lang.String str17 = accessToken13.getUserId();
        boolean boolean18 = accessToken13.isClientOnly();
        java.lang.String str19 = accessToken13.toString();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer20 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass21 = scopeDeserializer20.handledType();
        boolean boolean22 = scopeDeserializer20.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet23 = scopeDeserializer20.getNullValue();
        java.lang.Class<?> wildcardClass24 = scopeDeserializer20.handledType();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader25 = scopeDeserializer20.getObjectIdReader();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader26 = scopeDeserializer20.getObjectIdReader();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet27 = scopeDeserializer20.getNullValue();
        boolean boolean28 = accessToken13.equals((java.lang.Object) scopeDeserializer20);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user29 = osiamUserService5.createUser(user6, accessToken13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str19, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(scopeSet23);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNull(objectIdReader25);
        org.junit.Assert.assertNull(objectIdReader26);
        org.junit.Assert.assertNull(scopeSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test11430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11430");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        org.osiam.resources.scim.Group group15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        boolean boolean23 = accessToken22.isRefreshTokenExpired();
        boolean boolean24 = accessToken22.isClientOnly();
        java.lang.String str25 = accessToken22.getRefreshToken();
        boolean boolean26 = accessToken22.isExpired();
        boolean boolean27 = accessToken22.isRefreshTokenExpired();
        java.lang.String str28 = accessToken22.getToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken22);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group30 = osiamGroupService2.updateResource("org.osiam.client.exception.OsiamClientException: PUT", group15, accessToken22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Bearer " + "'", str28, "Bearer ");
    }

    @Test
    public void test11431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11431");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setType("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        boolean boolean25 = accessToken24.isRefreshTokenExpired();
        boolean boolean26 = accessToken24.isClientOnly();
        java.lang.String str27 = accessToken24.getRefreshToken();
        boolean boolean28 = accessToken24.isExpired();
        boolean boolean29 = accessToken24.isRefreshTokenExpired();
        java.lang.String str30 = accessToken24.getToken();
        java.util.Date date31 = accessToken24.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder15.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setClientId("");
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setType("");
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.PATCH;
        boolean boolean39 = scope37.equals((java.lang.Object) 401);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder32.addScope(scope37);
        java.lang.String str41 = scope37.getValue();
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Bearer " + "'", str30, "Bearer ");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PATCH" + "'", str41, "PATCH");
    }

    @Test
    public void test11432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11432");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer7 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer6);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeSetJsonDeserializer7.getEmptyValue();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer7);
        org.junit.Assert.assertNull(scopeSet8);
    }

    @Test
    public void test11433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11433");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        boolean boolean7 = scopeSetJsonDeserializer6.isCachable();
        boolean boolean8 = scopeSetJsonDeserializer6.isCachable();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer9 = scopeSetJsonDeserializer6.getDelegatee();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer10 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer11 = scopeSetJsonDeserializer6.unwrappingDeserializer(nameTransformer10);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader12 = scopeSetJsonDeserializer6.getObjectIdReader();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardJsonDeserializer9);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer11);
        org.junit.Assert.assertNull(objectIdReader12);
    }

    @Test
    public void test11434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11434");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.Query query10 = queryBuilder8.build();
        long long11 = query10.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder12 = new org.osiam.client.query.QueryBuilder(query10);
        java.lang.String str13 = query10.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder14 = new org.osiam.client.query.QueryBuilder(query10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder(query10);
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(query10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "descending" + "'", str13, "descending");
    }

    @Test
    public void test11435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11435");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet62 = accessToken60.getScopes();
        boolean boolean63 = scopeSerializer0.isEmpty(serializerProvider53, scopeSet62);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper64 = null;
        com.fasterxml.jackson.databind.JavaType javaType65 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper64, javaType65);
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer67 = scopeSerializer0.getDelegatee();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer68 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer69 = scopeSerializer0.unwrappingSerializer(nameTransformer68);
        org.osiam.client.oauth.AccessToken.Builder builder71 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date72 = null;
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder71.setRefreshTokenExpiresAt(date72);
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder71.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder75.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken78 = builder75.build();
        org.osiam.client.oauth.AccessToken accessToken79 = builder75.build();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet80 = accessToken79.getScopes();
        boolean boolean81 = scopeSerializer0.isEmpty(scopeSet80);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper82 = null;
        com.fasterxml.jackson.databind.JavaType javaType83 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper82, javaType83);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(scopeSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(wildcardJsonSerializer67);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer69);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(accessToken78);
        org.junit.Assert.assertNotNull(accessToken79);
        org.junit.Assert.assertNotNull(scopeSet80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test11436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11436");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService2.targetEndpoint;
        org.osiam.client.query.QueryBuilder queryBuilder7 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder7.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder9.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.descending("hi!");
        org.osiam.client.query.Query query16 = queryBuilder15.build();
        java.lang.String str17 = query16.toString();
        java.lang.String str18 = query16.toString();
        org.osiam.client.query.Query query19 = query16.nextPage();
        org.osiam.client.query.Query query20 = query16.nextPage();
        org.osiam.client.query.Query query21 = query20.nextPage();
        org.osiam.client.query.Query query22 = query21.nextPage();
        java.lang.String str23 = query21.getSortBy();
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        boolean boolean31 = accessToken30.isRefreshTokenExpired();
        java.lang.String str32 = accessToken30.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder33 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder35.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.descending("hi!");
        org.osiam.client.query.Query query42 = queryBuilder41.build();
        java.lang.String str43 = query42.toString();
        java.lang.String str44 = query42.getSortOrder();
        java.lang.String str45 = query42.getSortBy();
        java.lang.String str46 = query42.getFilter();
        java.lang.String str47 = query42.toString();
        boolean boolean48 = accessToken30.equals((java.lang.Object) query42);
        java.util.Date date49 = accessToken30.getExpiresAt();
        java.lang.String str50 = accessToken30.getUserName();
        java.lang.String str51 = accessToken30.toString();
        java.util.Date date52 = accessToken30.getExpiresAt();
        java.util.Date date53 = accessToken30.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult54 = osiamGroupService2.searchGroups(query21, accessToken30);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str17, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertNotNull(query22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str47, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str51, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11437");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder12.setClientRedirectUri("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector23 = builder20.build();
        org.osiam.client.OsiamGroupService.Builder builder25 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService26 = builder25.build();
        org.osiam.client.OsiamGroupService osiamGroupService27 = builder25.build();
        javax.ws.rs.client.WebTarget webTarget28 = osiamGroupService27.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget29 = osiamGroupService27.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken36 = builder35.build();
        boolean boolean37 = accessToken36.isRefreshTokenExpired();
        java.lang.String str38 = accessToken36.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet39 = accessToken36.getScopes();
        java.lang.String str40 = osiamGroupService27.extractErrorMessageForbidden(accessToken36);
        java.lang.String str41 = accessToken36.getUserId();
        java.lang.String str42 = accessToken36.getClientId();
        java.lang.String str43 = accessToken36.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList44 = osiamConnector23.getAllGroups(accessToken36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(osiamConnector23);
        org.junit.Assert.assertNotNull(osiamGroupService26);
        org.junit.Assert.assertNotNull(osiamGroupService27);
        org.junit.Assert.assertNotNull(webTarget28);
        org.junit.Assert.assertNotNull(webTarget29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(accessToken36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(scopeSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Insufficient scopes: []" + "'", str40, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test11438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11438");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.getUserName();
        java.lang.String str15 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.addScope(scope20);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException24 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean25 = scope22.equals((java.lang.Object) invalidAttributeException24);
        java.lang.String str26 = scope22.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder19.addScope(scope22);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder19.setRefreshToken("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken36 = builder35.build();
        java.util.Date date37 = accessToken36.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder29.setRefreshTokenExpiresAt(date37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder29.setRefreshToken("");
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setUserName("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.oauth.AccessToken accessToken43 = builder40.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group44 = osiamGroupService2.getResource("org.osiam.client.exception.ConnectionInitializationException: Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]", accessToken43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget16);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GET" + "'", str26, "GET");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(accessToken36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
    }

    @Test
    public void test11439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11439");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader3 = scopeDeserializer0.getObjectIdReader();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getNullValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet5 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass6 = scopeDeserializer0.handledType();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objectIdReader3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNull(scopeSet5);
        org.junit.Assert.assertNull(wildcardClass6);
    }

    @Test
    public void test11440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11440");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        boolean boolean4 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer6 = scopeSerializer0.unwrappingSerializer(nameTransformer5);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper7 = null;
        com.fasterxml.jackson.databind.JavaType javaType8 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper7, javaType8);
        boolean boolean10 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper11 = null;
        com.fasterxml.jackson.databind.JavaType javaType12 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper11, javaType12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.addScope(scope16);
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder15.addScope(scope18);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.addScope(scope30);
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setUserName("DELETE");
        org.osiam.client.oauth.AccessToken.Builder builder35 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date36 = null;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setRefreshTokenExpiresAt(date36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder35.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken40 = builder39.build();
        boolean boolean41 = accessToken40.isRefreshTokenExpired();
        boolean boolean42 = accessToken40.isClientOnly();
        java.lang.String str43 = accessToken40.getClientId();
        boolean boolean44 = accessToken40.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder46 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.addScope(scope47);
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException51 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean52 = scope49.equals((java.lang.Object) invalidAttributeException51);
        java.lang.String str53 = scope49.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder46.addScope(scope49);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setUserName("Authorization");
        boolean boolean61 = accessToken40.equals((java.lang.Object) builder58);
        org.osiam.client.oauth.AccessToken.Builder builder63 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope64 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder63.addScope(scope64);
        org.osiam.client.oauth.Scope scope66 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException68 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean69 = scope66.equals((java.lang.Object) invalidAttributeException68);
        java.lang.String str70 = scope66.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder63.addScope(scope66);
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder71.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder73.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder75.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope78 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder75.addScope(scope78);
        org.osiam.client.oauth.GrantType grantType80 = org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS;
        java.lang.String str81 = grantType80.getUrlParam();
        boolean boolean82 = scope78.equals((java.lang.Object) grantType80);
        org.osiam.client.oauth.AccessToken.Builder builder83 = builder58.addScope(scope78);
        org.osiam.client.oauth.AccessToken.Builder builder84 = builder31.addScope(scope78);
        org.osiam.client.oauth.AccessToken accessToken85 = builder84.build();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet86 = accessToken85.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator87 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider88 = null;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer typeSerializer89 = null;
        // The following exception was thrown during execution in test generation
        try {
            scopeSerializer0.serializeWithType(scopeSet86, jsonGenerator87, serializerProvider88, typeSerializer89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(accessToken40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "GET" + "'", str53, "GET");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(scope64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(scope66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "GET" + "'", str70, "GET");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(scope78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + grantType80 + "' != '" + org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS + "'", grantType80.equals(org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS));
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "client_credentials" + "'", str81, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(accessToken85);
        org.junit.Assert.assertNotNull(scopeSet86);
    }

    @Test
    public void test11441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11441");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("authorization_code");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.addScope(scope6);
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException10 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean11 = scope8.equals((java.lang.Object) invalidAttributeException10);
        java.lang.String str12 = scope8.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder5.addScope(scope8);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken24);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken24);
        java.lang.String str27 = accessToken24.toString();
        java.lang.String str28 = accessToken24.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user29 = osiamUserService2.createUser(user3, accessToken24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GET" + "'", str12, "GET");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=GET, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=Cannot connect to server, userName=Authorization]" + "'", str27, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=GET, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=Cannot connect to server, userName=Authorization]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Cannot connect to server" + "'", str28, "Cannot connect to server");
    }

    @Test
    public void test11442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11442");
        org.osiam.client.oauth.Scope scope1 = new org.osiam.client.oauth.Scope("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        java.lang.String str2 = scope1.getValue();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str2, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test11443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11443");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer3 = scopeDeserializer0.getDelegatee();
        boolean boolean4 = scopeDeserializer0.isCachable();
        java.util.Collection<java.lang.Object> objCollection5 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.getEmptyValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader7 = scopeDeserializer0.getObjectIdReader();
        java.util.Collection<java.lang.Object> objCollection8 = scopeDeserializer0.getKnownPropertyNames();
        java.lang.Class<?> wildcardClass9 = scopeDeserializer0.handledType();
        java.util.Collection<java.lang.Object> objCollection10 = scopeDeserializer0.getKnownPropertyNames();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(wildcardJsonDeserializer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(objCollection5);
        org.junit.Assert.assertNull(scopeSet6);
        org.junit.Assert.assertNull(objectIdReader7);
        org.junit.Assert.assertNull(objCollection8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(objCollection10);
    }

    @Test
    public void test11444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11444");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.descending("hi!");
        org.osiam.client.query.Query query31 = queryBuilder30.build();
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector7.createQueryBuilder(query31);
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.descending("ADMIN");
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.descending("PUT");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.startIndex((long) '#');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(query31);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
    }

    @Test
    public void test11445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11445");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.OsiamConnector.Builder builder9 = builder6.setClientId("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector osiamConnector10 = builder9.build();
        org.osiam.resources.scim.UpdateUser updateUser12 = null;
        org.osiam.client.oauth.AccessToken accessToken13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user14 = osiamConnector10.updateUser("", updateUser12, accessToken13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(osiamConnector10);
    }

    @Test
    public void test11446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11446");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        java.lang.String str13 = query9.getFilter();
        java.lang.String str14 = query9.getSortOrder();
        java.lang.String str15 = query9.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder(query9);
        long long17 = query9.getStartIndex();
        org.osiam.client.query.Query query18 = query9.nextPage();
        org.osiam.client.query.Query query19 = query18.previousPage();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "descending" + "'", str14, "descending");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Authorization" + "'", str15, "Authorization");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(query18);
        org.junit.Assert.assertNotNull(query19);
    }

    @Test
    public void test11447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11447");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector9.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.getSortOrder();
        java.lang.String str23 = query20.getSortBy();
        java.lang.String str24 = query20.getFilter();
        java.lang.String str25 = query20.getSortOrder();
        java.lang.String str26 = query20.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder(query20);
        long long28 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder29 = new org.osiam.client.query.QueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder30 = osiamConnector9.createQueryBuilder(query20);
        org.osiam.client.OsiamConnector.Builder builder31 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder33 = builder31.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder35 = builder31.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector36 = builder35.build();
        org.osiam.client.query.QueryBuilder queryBuilder37 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder37.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder43 = queryBuilder39.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.descending("hi!");
        org.osiam.client.query.Query query46 = queryBuilder45.build();
        java.lang.String str47 = query46.getAttributes();
        java.lang.String str48 = query46.toString();
        java.lang.String str49 = query46.getSortBy();
        org.osiam.client.query.Query query50 = query46.nextPage();
        java.lang.String str51 = query50.getAttributes();
        java.lang.String str52 = query50.getFilter();
        org.osiam.client.query.Query query53 = query50.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder54 = osiamConnector36.createQueryBuilder(query50);
        org.osiam.client.query.QueryBuilder queryBuilder55 = osiamConnector9.createQueryBuilder(query50);
        org.osiam.client.query.Query query56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.query.QueryBuilder queryBuilder57 = osiamConnector9.createQueryBuilder(query56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "descending" + "'", str22, "descending");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "descending" + "'", str25, "descending");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Authorization" + "'", str26, "Authorization");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(osiamConnector36);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(query46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Authorization" + "'", str47, "Authorization");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str48, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(query50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Authorization" + "'", str51, "Authorization");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(query53);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(queryBuilder55);
    }

    @Test
    public void test11448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11448");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.OsiamRequestException: hi!");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        boolean boolean12 = accessToken10.isClientOnly();
        java.lang.String str13 = accessToken10.getRefreshToken();
        boolean boolean14 = accessToken10.isExpired();
        boolean boolean15 = accessToken10.isExpired();
        boolean boolean16 = accessToken10.isClientOnly();
        java.util.Date date17 = accessToken10.getExpiresAt();
        java.util.Date date18 = accessToken10.getExpiresAt();
        java.util.Date date19 = accessToken10.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user20 = osiamUserService2.getUser("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME", accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11449");
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException1 = new org.osiam.client.exception.InvalidAttributeException("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConflictException: PATCH");
        java.lang.String str2 = invalidAttributeException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConflictException: PATCH" + "'", str2, "org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConflictException: PATCH");
    }

    @Test
    public void test11450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11450");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getNullValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet5 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader6 = scopeDeserializer0.getObjectIdReader();
        boolean boolean7 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer8 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer9 = scopeDeserializer0.unwrappingDeserializer(nameTransformer8);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader10 = scopeSetJsonDeserializer9.getObjectIdReader();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNull(scopeSet5);
        org.junit.Assert.assertNull(objectIdReader6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer9);
        org.junit.Assert.assertNull(objectIdReader10);
    }

    @Test
    public void test11451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11451");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("password");
        org.osiam.client.OsiamConnector.Builder builder10 = builder6.setAuthServerEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder12 = builder6.setClientRedirectUri("client_credentials");
        org.osiam.client.OsiamConnector osiamConnector13 = builder12.build();
        org.osiam.client.query.QueryBuilder queryBuilder14 = osiamConnector13.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        java.util.Date date22 = accessToken21.getExpiresAt();
        java.lang.String str23 = accessToken21.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet24 = accessToken21.getScopes();
        java.lang.String str25 = accessToken21.getUserName();
        java.lang.String str26 = accessToken21.getType();
        boolean boolean27 = accessToken21.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user28 = osiamConnector13.getCurrentUser(accessToken21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(scopeSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test11452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11452");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.OsiamConnector.Builder builder11 = builder6.setAuthServerEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder13 = builder11.setClientId("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector osiamConnector14 = builder11.build();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getFilter();
        java.lang.String str28 = query24.getSortOrder();
        java.lang.String str29 = query24.getAttributes();
        org.osiam.client.query.Query query30 = query24.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector14.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.toString();
        java.lang.String str43 = query41.getSortOrder();
        java.lang.String str44 = query41.getSortBy();
        java.lang.String str45 = query41.getFilter();
        java.lang.String str46 = query41.getSortOrder();
        java.lang.String str47 = query41.getAttributes();
        java.lang.String str48 = query41.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder49 = new org.osiam.client.query.QueryBuilder(query41);
        java.lang.String str50 = query41.getAttributes();
        org.osiam.client.query.Query query51 = query41.nextPage();
        java.lang.String str52 = query51.getSortOrder();
        org.osiam.client.OsiamGroupService.Builder builder54 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService55 = builder54.build();
        org.osiam.client.OsiamGroupService osiamGroupService56 = builder54.build();
        org.osiam.client.oauth.AccessToken.Builder builder58 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date59 = null;
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setRefreshTokenExpiresAt(date59);
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder58.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken63 = builder62.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken63);
        java.lang.String str65 = osiamGroupService56.extractErrorMessageForbidden(accessToken63);
        javax.ws.rs.client.WebTarget webTarget66 = osiamGroupService56.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget67 = osiamGroupService56.targetEndpoint;
        org.osiam.client.AuthService.Builder builder69 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder71 = builder69.setClientId("ME");
        org.osiam.client.AuthService.Builder builder73 = builder71.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService74 = builder73.build();
        org.osiam.client.OsiamGroupService.Builder builder76 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService77 = builder76.build();
        org.osiam.client.oauth.AccessToken.Builder builder79 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date80 = null;
        org.osiam.client.oauth.AccessToken.Builder builder81 = builder79.setRefreshTokenExpiresAt(date80);
        org.osiam.client.oauth.AccessToken.Builder builder83 = builder79.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken84 = builder83.build();
        boolean boolean85 = accessToken84.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet86 = accessToken84.getScopes();
        java.lang.String str87 = osiamGroupService77.extractErrorMessageForbidden(accessToken84);
        boolean boolean88 = accessToken84.isClientOnly();
        java.lang.String str89 = authService74.extractErrorMessageForbidden(accessToken84);
        java.lang.String str90 = accessToken84.getUserId();
        java.lang.String str91 = accessToken84.getToken();
        java.lang.String str92 = osiamGroupService56.extractErrorMessageForbidden(accessToken84);
        java.lang.String str93 = accessToken84.toString();
        boolean boolean94 = accessToken84.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult95 = osiamConnector14.searchUsers(query51, accessToken84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(osiamConnector14);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "descending" + "'", str28, "descending");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Authorization" + "'", str29, "Authorization");
        org.junit.Assert.assertNotNull(query30);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str42, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "descending" + "'", str43, "descending");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "descending" + "'", str46, "descending");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Authorization" + "'", str47, "Authorization");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "descending" + "'", str48, "descending");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Authorization" + "'", str50, "Authorization");
        org.junit.Assert.assertNotNull(query51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "descending" + "'", str52, "descending");
        org.junit.Assert.assertNotNull(osiamGroupService55);
        org.junit.Assert.assertNotNull(osiamGroupService56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(accessToken63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Insufficient scopes: []" + "'", str65, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget66);
        org.junit.Assert.assertNotNull(webTarget67);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(authService74);
        org.junit.Assert.assertNotNull(osiamGroupService77);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(accessToken84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(scopeSet86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Insufficient scopes: []" + "'", str87, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Insufficient scopes: []" + "'", str89, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Bearer " + "'", str91, "Bearer ");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Insufficient scopes: []" + "'", str92, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str93, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test11453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11453");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.client.OsiamConnector.Builder builder13 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder15 = builder13.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder17 = builder15.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder19 = builder17.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector20 = builder19.build();
        org.osiam.client.query.QueryBuilder queryBuilder21 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder23.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.descending("hi!");
        org.osiam.client.query.Query query30 = queryBuilder29.build();
        java.lang.String str31 = query30.toString();
        java.lang.String str32 = query30.toString();
        java.lang.String str33 = query30.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder34 = osiamConnector20.createQueryBuilder(query30);
        org.osiam.client.query.QueryBuilder queryBuilder35 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder37.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder37.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder43 = queryBuilder41.descending("hi!");
        org.osiam.client.query.Query query44 = queryBuilder43.build();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector20.createQueryBuilder(query44);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder50.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query53 = queryBuilder50.build();
        org.osiam.client.query.Query query54 = query53.nextPage();
        org.osiam.client.query.Query query55 = query54.previousPage();
        org.osiam.client.query.QueryBuilder queryBuilder56 = new org.osiam.client.query.QueryBuilder(query55);
        int int57 = query55.getCount();
        java.lang.String str58 = query55.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder59 = osiamConnector20.createQueryBuilder(query55);
        java.lang.String str60 = query55.getAttributes();
        org.osiam.client.OsiamGroupService.Builder builder62 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService63 = builder62.build();
        org.osiam.client.oauth.AccessToken.Builder builder65 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date66 = null;
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder65.setRefreshTokenExpiresAt(date66);
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder65.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken70 = builder69.build();
        java.util.Date date71 = accessToken70.getExpiresAt();
        java.lang.String str72 = accessToken70.getRefreshToken();
        boolean boolean73 = accessToken70.isClientOnly();
        java.lang.String str74 = osiamGroupService63.extractErrorMessageForbidden(accessToken70);
        org.osiam.client.oauth.AccessToken.Builder builder76 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date77 = null;
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder76.setRefreshTokenExpiresAt(date77);
        org.osiam.client.oauth.AccessToken.Builder builder80 = builder76.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken81 = builder80.build();
        java.util.Date date82 = accessToken81.getExpiresAt();
        java.lang.String str83 = accessToken81.getUserName();
        java.util.Date date84 = accessToken81.getRefreshTokenExpiresAt();
        java.lang.String str85 = osiamGroupService63.extractErrorMessageForbidden(accessToken81);
        java.lang.String str86 = accessToken81.getToken();
        java.lang.String str87 = accessToken81.getClientId();
        java.lang.String str88 = accessToken81.getUserId();
        boolean boolean90 = accessToken81.equals((java.lang.Object) "org.osiam.client.exception.UnauthorizedException: GET");
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult91 = osiamGroupService2.searchResources(query55, accessToken81);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(osiamConnector20);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(query30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str31, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str32, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(query44);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(query53);
        org.junit.Assert.assertNotNull(query54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Authorization" + "'", str58, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Authorization" + "'", str60, "Authorization");
        org.junit.Assert.assertNotNull(osiamGroupService63);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(accessToken70);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Insufficient scopes: []" + "'", str74, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(accessToken81);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Insufficient scopes: []" + "'", str85, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Bearer " + "'", str86, "Bearer ");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test11454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11454");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("password");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        java.util.Date date14 = accessToken13.getExpiresAt();
        java.lang.String str15 = accessToken13.getRefreshToken();
        java.lang.String str16 = accessToken13.getType();
        java.lang.String str17 = accessToken13.getClientId();
        java.lang.String str18 = accessToken13.toString();
        java.lang.String str19 = accessToken13.getUserId();
        boolean boolean20 = accessToken13.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user21 = osiamUserService5.getUser("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]", accessToken13);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str18, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test11455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11455");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException1 = new org.osiam.client.exception.ConnectionInitializationException("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test11456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11456");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamConnector.Builder builder4 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector osiamConnector13 = builder12.build();
        org.osiam.client.query.QueryBuilder queryBuilder14 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder16.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.descending("hi!");
        org.osiam.client.query.Query query23 = queryBuilder22.build();
        java.lang.String str24 = query23.toString();
        java.lang.String str25 = query23.getSortOrder();
        java.lang.String str26 = query23.getSortBy();
        org.osiam.client.query.Query query27 = query23.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder28 = osiamConnector13.createQueryBuilder(query27);
        org.osiam.client.AuthService.Builder builder30 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder32 = builder30.setClientId("ME");
        org.osiam.client.AuthService.Builder builder34 = builder32.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService35 = builder34.build();
        org.osiam.client.OsiamGroupService.Builder builder37 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService38 = builder37.build();
        org.osiam.client.oauth.AccessToken.Builder builder40 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date41 = null;
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setRefreshTokenExpiresAt(date41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder40.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken45 = builder44.build();
        boolean boolean46 = accessToken45.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet47 = accessToken45.getScopes();
        java.lang.String str48 = osiamGroupService38.extractErrorMessageForbidden(accessToken45);
        boolean boolean49 = accessToken45.isClientOnly();
        java.lang.String str50 = authService35.extractErrorMessageForbidden(accessToken45);
        org.osiam.client.oauth.AccessToken.Builder builder52 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setRefreshTokenExpiresAt(date53);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder52.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken59 = builder56.build();
        java.lang.String str60 = accessToken59.toString();
        java.lang.String str61 = authService35.extractErrorMessageForbidden(accessToken59);
        java.lang.String str62 = accessToken59.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult63 = osiamUserService3.searchUsers(query27, accessToken59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(query23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str24, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "descending" + "'", str25, "descending");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(query27);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(authService35);
        org.junit.Assert.assertNotNull(osiamGroupService38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(accessToken45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(scopeSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Insufficient scopes: []" + "'", str48, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Insufficient scopes: []" + "'", str50, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(accessToken59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str60, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Insufficient scopes: []" + "'", str61, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str62, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
    }

    @Test
    public void test11457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11457");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setAuthServerEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setAuthServerEndpoint("refresh_token");
        org.osiam.client.OsiamConnector osiamConnector15 = builder10.build();
        org.osiam.client.OsiamConnector.Builder builder16 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector23 = builder22.build();
        org.osiam.client.query.QueryBuilder queryBuilder24 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder26.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder26.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder32 = queryBuilder30.descending("hi!");
        org.osiam.client.query.Query query33 = queryBuilder32.build();
        java.lang.String str34 = query33.toString();
        java.lang.String str35 = query33.toString();
        java.lang.String str36 = query33.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder37 = osiamConnector23.createQueryBuilder(query33);
        org.osiam.client.query.QueryBuilder queryBuilder38 = osiamConnector23.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder39 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder43 = queryBuilder41.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder41.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder45.descending("hi!");
        org.osiam.client.query.Query query48 = queryBuilder47.build();
        java.lang.String str49 = query48.toString();
        java.lang.String str50 = query48.toString();
        org.osiam.client.query.Query query51 = query48.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder52 = osiamConnector23.createQueryBuilder(query48);
        org.osiam.client.query.Query query53 = query48.nextPage();
        org.osiam.client.query.Query query54 = query53.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder55 = osiamConnector15.createQueryBuilder(query54);
        org.osiam.client.oauth.AccessToken.Builder builder58 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date59 = null;
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setRefreshTokenExpiresAt(date59);
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder58.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken63 = builder62.build();
        java.lang.String str64 = accessToken63.toString();
        java.lang.String str65 = accessToken63.getType();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken63);
        java.lang.String str67 = accessToken63.getClientId();
        java.lang.String str68 = accessToken63.getUserName();
        boolean boolean69 = accessToken63.isRefreshTokenExpired();
        java.lang.String str70 = accessToken63.toString();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector15.deleteUser("org.osiam.client.exception.ConflictException: Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]", accessToken63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(osiamConnector23);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(query33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str34, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str35, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(query48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str49, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str50, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query51);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(query53);
        org.junit.Assert.assertNotNull(query54);
        org.junit.Assert.assertNotNull(queryBuilder55);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(accessToken63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str64, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str70, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test11458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11458");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientId("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.Scope scope9 = new org.osiam.client.oauth.Scope("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        java.lang.String str10 = scope9.toString();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        java.util.Date date22 = accessToken21.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder12.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder12.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder12.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.Scope scope29 = new org.osiam.client.oauth.Scope("");
        java.lang.String str30 = scope29.toString();
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.addScope(scope29);
        java.lang.String str32 = scope29.toString();
        java.lang.String str33 = scope29.toString();
        java.lang.String str34 = scope29.toString();
        org.osiam.client.oauth.Scope[] scopeArray35 = new org.osiam.client.oauth.Scope[] { scope9, scope29 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken36 = osiamConnector5.retrieveAccessToken("authorization_code", "org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", scopeArray35);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str10, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(scopeArray35);
    }

    @Test
    public void test11459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11459");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.addScope(scope18);
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder17.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder13.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.addScope(scope29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException33 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean34 = scope31.equals((java.lang.Object) invalidAttributeException33);
        java.lang.String str35 = scope31.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder28.addScope(scope31);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.addScope(scope45);
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException49 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean50 = scope47.equals((java.lang.Object) invalidAttributeException49);
        java.lang.String str51 = scope47.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder44.addScope(scope47);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder40.addScope(scope47);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder13.addScope(scope47);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setType("");
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder54.setClientId("Insufficient scopes: []");
        org.osiam.client.oauth.Scope scope59 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str60 = scope59.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder54.addScope(scope59);
        org.osiam.client.oauth.AccessToken.Builder builder63 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date64 = null;
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder63.setRefreshTokenExpiresAt(date64);
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder63.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder63.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder63.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope72 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder71.addScope(scope72);
        org.osiam.client.oauth.AccessToken.Builder builder75 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date76 = null;
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder75.setRefreshTokenExpiresAt(date76);
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder75.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken80 = builder79.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken80);
        java.util.Date date82 = accessToken80.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder83 = builder73.setExpiresAt(date82);
        org.osiam.client.oauth.AccessToken.Builder builder84 = builder61.setRefreshTokenExpiresAt(date82);
        org.osiam.client.oauth.AccessToken.Builder builder86 = builder84.setUserId("password");
        org.osiam.client.oauth.AccessToken.Builder builder88 = builder86.setClientId("");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GET" + "'", str35, "GET");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "GET" + "'", str51, "GET");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(scope59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PUT" + "'", str60, "PUT");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(scope72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(accessToken80);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test11460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11460");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.ascending("descending");
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.startIndex(0L);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder33.descending("org.osiam.client.exception.ConflictException: Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder37.attributes("org.osiam.client.exception.OsiamRequestException: descending");
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.count(409);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
    }

    @Test
    public void test11461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11461");
        org.osiam.client.exception.ScimErrorMessage scimErrorMessage0 = new org.osiam.client.exception.ScimErrorMessage();
        java.lang.String str1 = scimErrorMessage0.getErrorCode();
        java.lang.String str2 = scimErrorMessage0.getDescription();
        java.lang.String str3 = scimErrorMessage0.getDescription();
        java.lang.String str4 = scimErrorMessage0.getErrorCode();
        java.lang.String str5 = scimErrorMessage0.getDescription();
        java.lang.String str6 = scimErrorMessage0.getErrorCode();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test11462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11462");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        java.util.Date date13 = accessToken10.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean16 = accessToken10.equals((java.lang.Object) scope15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        boolean boolean24 = accessToken23.isRefreshTokenExpired();
        boolean boolean25 = accessToken23.isClientOnly();
        java.lang.String str26 = accessToken23.getClientId();
        boolean boolean27 = accessToken23.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.addScope(scope30);
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException34 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean35 = scope32.equals((java.lang.Object) invalidAttributeException34);
        java.lang.String str36 = scope32.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder29.addScope(scope32);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setUserName("Authorization");
        boolean boolean44 = accessToken23.equals((java.lang.Object) builder41);
        org.osiam.client.oauth.AccessToken.Builder builder46 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.addScope(scope47);
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException51 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean52 = scope49.equals((java.lang.Object) invalidAttributeException51);
        java.lang.String str53 = scope49.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder46.addScope(scope49);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope61 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder58.addScope(scope61);
        org.osiam.client.oauth.GrantType grantType63 = org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS;
        java.lang.String str64 = grantType63.getUrlParam();
        boolean boolean65 = scope61.equals((java.lang.Object) grantType63);
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder41.addScope(scope61);
        boolean boolean67 = scope15.equals((java.lang.Object) builder66);
        java.lang.String str68 = scope15.toString();
        java.lang.String str69 = scope15.getValue();
        org.osiam.client.exception.NoResultException noResultException71 = new org.osiam.client.exception.NoResultException("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        java.lang.Throwable[] throwableArray72 = noResultException71.getSuppressed();
        boolean boolean73 = scope15.equals((java.lang.Object) throwableArray72);
        java.lang.String str74 = scope15.getValue();
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GET" + "'", str36, "GET");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "GET" + "'", str53, "GET");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(scope61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + grantType63 + "' != '" + org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS + "'", grantType63.equals(org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "client_credentials" + "'", str64, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ADMIN" + "'", str68, "ADMIN");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ADMIN" + "'", str69, "ADMIN");
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ADMIN" + "'", str74, "ADMIN");
    }

    @Test
    public void test11463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11463");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.resources.scim.Group group3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.util.Date date11 = accessToken10.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group12 = osiamGroupService2.createGroup(group3, accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11464");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer7 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer8 = scopeDeserializer0.unwrappingDeserializer(nameTransformer7);
        java.lang.Class<?> wildcardClass9 = scopeDeserializer0.handledType();
        boolean boolean10 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer11 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection12 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.core.JsonParser jsonParser13 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext14 = null;
        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeserializer15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj16 = scopeDeserializer0.deserializeWithType(jsonParser13, deserializationContext14, typeDeserializer15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardJsonDeserializer11);
        org.junit.Assert.assertNull(objCollection12);
    }

    @Test
    public void test11465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11465");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder5 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder5.build();
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken14);
        java.lang.String str16 = osiamGroupService7.extractErrorMessageForbidden(accessToken14);
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService7.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget18 = osiamGroupService7.targetEndpoint;
        org.osiam.client.AuthService.Builder builder20 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientId("ME");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService25 = builder24.build();
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        boolean boolean33 = accessToken32.isRefreshTokenExpired();
        boolean boolean34 = accessToken32.isClientOnly();
        java.lang.String str35 = accessToken32.getClientId();
        java.lang.String str36 = authService25.extractErrorMessageForbidden(accessToken32);
        java.lang.String str37 = accessToken32.getUserId();
        java.lang.String str38 = accessToken32.getClientId();
        java.lang.String str39 = osiamGroupService7.extractErrorMessageForbidden(accessToken32);
        boolean boolean40 = accessToken32.isRefreshTokenExpired();
        java.lang.String str41 = accessToken32.getRefreshToken();
        java.util.Date date42 = accessToken32.getExpiresAt();
        java.lang.String str43 = accessToken32.getRefreshToken();
        java.lang.String str44 = osiamGroupService2.extractErrorMessageForbidden(accessToken32);
        javax.ws.rs.core.Response.StatusType statusType46 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = osiamGroupService2.extractErrorMessageUnauthorized("org.osiam.client.exception.NoResultException: ME", statusType46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Insufficient scopes: []" + "'", str16, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget17);
        org.junit.Assert.assertNotNull(webTarget18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(authService25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Insufficient scopes: []" + "'", str44, "Insufficient scopes: []");
    }

    @Test
    public void test11466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11466");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder8.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder8.filter("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder8.descending("ME");
        org.osiam.client.query.Query query16 = queryBuilder8.build();
        long long17 = query16.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder(query16);
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
    }

    @Test
    public void test11467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11467");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("password");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService6 = builder1.build();
        org.osiam.client.AuthService.Builder builder9 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientSecret("");
        org.osiam.client.AuthService.Builder builder17 = builder13.setClientId("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService18 = builder13.build();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        boolean boolean26 = accessToken25.isRefreshTokenExpired();
        boolean boolean27 = accessToken25.isClientOnly();
        java.lang.String str28 = accessToken25.getClientId();
        boolean boolean29 = accessToken25.isClientOnly();
        java.lang.String str30 = accessToken25.getToken();
        java.lang.String str31 = accessToken25.getToken();
        boolean boolean32 = accessToken25.isRefreshTokenExpired();
        java.lang.String str33 = authService18.extractErrorMessageForbidden(accessToken25);
        org.osiam.client.oauth.AccessToken.Builder builder35 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date36 = null;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setRefreshTokenExpiresAt(date36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder35.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken42 = builder39.build();
        org.osiam.client.oauth.AccessToken accessToken43 = builder39.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken43);
        java.lang.String str45 = authService18.extractErrorMessageForbidden(accessToken43);
        // The following exception was thrown during execution in test generation
        try {
            osiamUserService6.deleteUser("org.osiam.client.exception.OsiamRequestException: ", accessToken43);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(osiamUserService6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(authService18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Bearer " + "'", str30, "Bearer ");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Bearer " + "'", str31, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Insufficient scopes: []" + "'", str33, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Insufficient scopes: []" + "'", str45, "Insufficient scopes: []");
    }

    @Test
    public void test11468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11468");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.addScope(scope23);
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException27 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean28 = scope25.equals((java.lang.Object) invalidAttributeException27);
        java.lang.String str29 = scope25.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder22.addScope(scope25);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder36.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder36.setUserName("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder36.setUserName("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder46 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date47 = null;
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.setRefreshTokenExpiresAt(date47);
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder46.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken51 = builder50.build();
        boolean boolean52 = accessToken51.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet53 = accessToken51.getScopes();
        boolean boolean54 = accessToken51.isRefreshTokenExpired();
        boolean boolean55 = accessToken51.isExpired();
        java.util.Date date56 = accessToken51.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder36.setExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date60 = null;
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.setRefreshTokenExpiresAt(date60);
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder59.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken64 = builder63.build();
        java.util.Date date65 = accessToken64.getExpiresAt();
        java.lang.String str66 = accessToken64.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken64);
        org.osiam.client.oauth.AccessToken.Builder builder69 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date70 = null;
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder69.setRefreshTokenExpiresAt(date70);
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder69.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken74 = builder73.build();
        boolean boolean75 = accessToken74.isRefreshTokenExpired();
        boolean boolean76 = accessToken74.isClientOnly();
        java.lang.String str77 = accessToken74.getClientId();
        boolean boolean78 = accessToken74.isClientOnly();
        boolean boolean79 = accessToken64.equals((java.lang.Object) accessToken74);
        org.osiam.client.query.QueryBuilder queryBuilder80 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder82 = queryBuilder80.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder84 = queryBuilder82.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder86 = queryBuilder82.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder88 = queryBuilder86.descending("hi!");
        org.osiam.client.query.Query query89 = queryBuilder88.build();
        org.osiam.client.query.Query query90 = queryBuilder88.build();
        org.osiam.client.query.QueryBuilder queryBuilder92 = queryBuilder88.ascending("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        boolean boolean93 = accessToken64.equals((java.lang.Object) "org.osiam.client.exception.ConnectionInitializationException: PATCH");
        java.lang.String str94 = accessToken64.getRefreshToken();
        java.util.Date date95 = accessToken64.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder96 = builder57.setExpiresAt(date95);
        org.osiam.client.oauth.AccessToken.Builder builder97 = builder19.setRefreshTokenExpiresAt(date95);
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GET" + "'", str29, "GET");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(accessToken51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(scopeSet53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(accessToken64);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(accessToken74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(queryBuilder82);
        org.junit.Assert.assertNotNull(queryBuilder84);
        org.junit.Assert.assertNotNull(queryBuilder86);
        org.junit.Assert.assertNotNull(queryBuilder88);
        org.junit.Assert.assertNotNull(query89);
        org.junit.Assert.assertNotNull(query90);
        org.junit.Assert.assertNotNull(queryBuilder92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertNotNull(date95);
        org.junit.Assert.assertEquals(date95.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test11469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11469");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder23 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.descending("hi!");
        org.osiam.client.query.Query query32 = queryBuilder31.build();
        java.lang.String str33 = query32.toString();
        java.lang.String str34 = query32.toString();
        org.osiam.client.query.Query query35 = query32.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder36 = osiamConnector7.createQueryBuilder(query32);
        org.osiam.client.query.QueryBuilder queryBuilder37 = osiamConnector7.createQueryBuilder();
        org.osiam.resources.scim.UpdateUser updateUser39 = null;
        org.osiam.client.OsiamGroupService.Builder builder41 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService42 = builder41.build();
        org.osiam.client.OsiamGroupService osiamGroupService43 = builder41.build();
        javax.ws.rs.client.WebTarget webTarget44 = osiamGroupService43.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget45 = osiamGroupService43.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget46 = osiamGroupService43.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget47 = osiamGroupService43.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder49 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date50 = null;
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder49.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken54 = builder53.build();
        boolean boolean55 = accessToken54.isRefreshTokenExpired();
        java.lang.String str56 = accessToken54.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder57 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder59 = queryBuilder57.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder61 = queryBuilder59.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder63 = queryBuilder59.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder65 = queryBuilder63.descending("hi!");
        org.osiam.client.query.Query query66 = queryBuilder65.build();
        java.lang.String str67 = query66.toString();
        java.lang.String str68 = query66.getSortOrder();
        java.lang.String str69 = query66.getSortBy();
        java.lang.String str70 = query66.getFilter();
        java.lang.String str71 = query66.toString();
        boolean boolean72 = accessToken54.equals((java.lang.Object) query66);
        java.lang.String str73 = osiamGroupService43.extractErrorMessageForbidden(accessToken54);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user74 = osiamConnector7.updateUser("org.osiam.client.exception.ConnectionInitializationException: Cannot connect to server", updateUser39, accessToken54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(query32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str33, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str34, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query35);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(osiamGroupService42);
        org.junit.Assert.assertNotNull(osiamGroupService43);
        org.junit.Assert.assertNotNull(webTarget44);
        org.junit.Assert.assertNotNull(webTarget45);
        org.junit.Assert.assertNotNull(webTarget46);
        org.junit.Assert.assertNotNull(webTarget47);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(accessToken54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(queryBuilder63);
        org.junit.Assert.assertNotNull(queryBuilder65);
        org.junit.Assert.assertNotNull(query66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str67, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "descending" + "'", str68, "descending");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str71, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Insufficient scopes: []" + "'", str73, "Insufficient scopes: []");
    }

    @Test
    public void test11470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11470");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder7.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        java.util.Date date25 = accessToken24.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder15.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder13.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setClientId("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        java.util.Date date31 = accessToken30.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList32 = osiamUserService5.getAllUsers(accessToken30);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11471");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader4 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer5 = scopeDeserializer0.getDelegatee();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.core.JsonParser jsonParser7 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext8 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer9 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean10 = scopeSerializer9.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer11 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer12 = scopeSerializer9.unwrappingSerializer(nameTransformer11);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass13 = scopeSetJsonSerializer12.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer14 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer15 = scopeSetJsonSerializer12.unwrappingSerializer(nameTransformer14);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet16 = null;
        boolean boolean17 = scopeSetJsonSerializer15.isEmpty(scopeSet16);
        boolean boolean18 = scopeSetJsonSerializer15.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.addScope(scope21);
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException25 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean26 = scope23.equals((java.lang.Object) invalidAttributeException25);
        java.lang.String str27 = scope23.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder20.addScope(scope23);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder20.setRefreshToken("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        java.util.Date date38 = accessToken37.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder30.setRefreshTokenExpiresAt(date38);
        org.osiam.client.helper.ScopeSerializer scopeSerializer40 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException48 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean49 = scope46.equals((java.lang.Object) invalidAttributeException48);
        java.lang.String str50 = scope46.getValue();
        org.osiam.client.oauth.Scope scope51 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope52 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str53 = scope52.toString();
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str56 = scope55.getValue();
        java.lang.String str57 = scope55.getValue();
        org.osiam.client.oauth.Scope scope58 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException60 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean61 = scope58.equals((java.lang.Object) invalidAttributeException60);
        java.lang.String str62 = scope58.getValue();
        org.osiam.client.oauth.Scope scope63 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope64 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope65 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope66 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException68 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean69 = scope66.equals((java.lang.Object) invalidAttributeException68);
        org.osiam.client.oauth.Scope scope70 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope71 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope72 = org.osiam.client.oauth.Scope.GET;
        boolean boolean74 = scope72.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope75 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray76 = new org.osiam.client.oauth.Scope[] { scope45, scope46, scope51, scope52, scope54, scope55, scope58, scope63, scope64, scope65, scope66, scope70, scope71, scope72, scope75 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet77 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet77, scopeArray76);
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder42.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet77);
        boolean boolean80 = scopeSerializer40.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet77);
        org.osiam.client.oauth.AccessToken.Builder builder82 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date83 = null;
        org.osiam.client.oauth.AccessToken.Builder builder84 = builder82.setRefreshTokenExpiresAt(date83);
        org.osiam.client.oauth.AccessToken.Builder builder86 = builder82.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken87 = builder86.build();
        boolean boolean88 = accessToken87.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet89 = accessToken87.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator90 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider91 = null;
        scopeSerializer40.serialize(scopeSet89, jsonGenerator90, serializerProvider91);
        org.osiam.client.oauth.AccessToken.Builder builder93 = builder39.addScopes(scopeSet89);
        boolean boolean94 = scopeSetJsonSerializer15.isEmpty(scopeSet89);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet95 = scopeDeserializer0.deserialize(jsonParser7, deserializationContext8, scopeSet89);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Can not update object of type java.util.HashSet (by deserializer of type org.osiam.client.helper.ScopeDeserializer)");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(objectIdReader4);
        org.junit.Assert.assertNull(wildcardJsonDeserializer5);
        org.junit.Assert.assertNull(scopeSet6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer12);
        org.junit.Assert.assertNull(scopeSetClass13);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "GET" + "'", str27, "GET");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "GET" + "'", str50, "GET");
        org.junit.Assert.assertNotNull(scope51);
        org.junit.Assert.assertNotNull(scope52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ME" + "'", str53, "ME");
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PATCH" + "'", str56, "PATCH");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PATCH" + "'", str57, "PATCH");
        org.junit.Assert.assertNotNull(scope58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "GET" + "'", str62, "GET");
        org.junit.Assert.assertNotNull(scope63);
        org.junit.Assert.assertNotNull(scope64);
        org.junit.Assert.assertNotNull(scope65);
        org.junit.Assert.assertNotNull(scope66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(scope70);
        org.junit.Assert.assertNotNull(scope71);
        org.junit.Assert.assertNotNull(scope72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(scope75);
        org.junit.Assert.assertNotNull(scopeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(accessToken87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(scopeSet89);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test11472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11472");
        org.osiam.client.exception.UnauthorizedException unauthorizedException1 = new org.osiam.client.exception.UnauthorizedException("Bearer ");
        java.lang.Throwable[] throwableArray2 = unauthorizedException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test11473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11473");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder2.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken7 = builder6.build();
        boolean boolean8 = accessToken7.isRefreshTokenExpired();
        java.lang.String str9 = accessToken7.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet10 = accessToken7.getScopes();
        boolean boolean11 = scopeSerializer0.isEmpty(scopeSet10);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer12 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer13 = scopeSerializer0.unwrappingSerializer(nameTransformer12);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper14 = null;
        com.fasterxml.jackson.databind.JavaType javaType15 = null;
        scopeSetJsonSerializer13.acceptJsonFormatVisitor(jsonFormatVisitorWrapper14, javaType15);
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer17 = scopeSetJsonSerializer13.getDelegatee();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass18 = scopeSetJsonSerializer13.handledType();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(accessToken7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(scopeSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer13);
        org.junit.Assert.assertNull(wildcardJsonSerializer17);
        org.junit.Assert.assertNull(scopeSetClass18);
    }

    @Test
    public void test11474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11474");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass2 = scopeSerializer0.handledType();
        boolean boolean3 = scopeSerializer0.isUnwrappingSerializer();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(scopeSetClass2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test11475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11475");
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException3 = new org.osiam.client.exception.InvalidAttributeException("");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException4 = new org.osiam.client.exception.ConnectionInitializationException("Bearer ", (java.lang.Throwable) invalidAttributeException3);
        org.osiam.client.exception.ForbiddenException forbiddenException6 = new org.osiam.client.exception.ForbiddenException("hi!");
        connectionInitializationException4.addSuppressed((java.lang.Throwable) forbiddenException6);
        org.osiam.client.exception.OsiamRequestException osiamRequestException10 = new org.osiam.client.exception.OsiamRequestException(401, "org.osiam.client.exception.OsiamRequestException: hi!");
        connectionInitializationException4.addSuppressed((java.lang.Throwable) osiamRequestException10);
        org.osiam.client.exception.OsiamClientException osiamClientException12 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConflictException: PATCH", (java.lang.Throwable) connectionInitializationException4);
    }

    @Test
    public void test11476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11476");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget7 = osiamGroupService3.targetEndpoint;
        org.osiam.resources.scim.Group group9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        boolean boolean18 = accessToken16.isClientOnly();
        java.lang.String str19 = accessToken16.getClientId();
        java.lang.String str20 = accessToken16.getClientId();
        java.lang.String str21 = accessToken16.getToken();
        java.lang.String str22 = accessToken16.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group23 = osiamGroupService3.replaceGroup("org.osiam.client.exception.UnauthorizedException: ", group9, accessToken16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(webTarget7);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Bearer " + "'", str21, "Bearer ");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str22, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test11477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11477");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.toString();
        java.lang.String str23 = query20.toString();
        int int24 = query20.getCount();
        long long25 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder26 = osiamConnector7.createQueryBuilder(query20);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        java.lang.String str34 = accessToken33.toString();
        java.lang.String str35 = accessToken33.getType();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken33);
        java.util.Date date37 = accessToken33.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList38 = osiamConnector7.getAllUsers(accessToken33);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str34, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11478");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setResourceServerEndpoint("GET POST PUT PATCH DELETE");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.descending("hi!");
        org.osiam.client.query.Query query27 = queryBuilder26.build();
        java.lang.String str28 = query27.toString();
        java.lang.String str29 = query27.getSortOrder();
        java.lang.String str30 = query27.getFilter();
        java.lang.String str31 = query27.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector17.createQueryBuilder(query27);
        int int33 = query27.getCount();
        org.osiam.client.query.Query query34 = query27.nextPage();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(query27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str28, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "descending" + "'", str29, "descending");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "descending" + "'", str31, "descending");
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(query34);
    }

    @Test
    public void test11479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11479");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.toString();
        org.osiam.client.query.Query query12 = query9.nextPage();
        org.osiam.client.query.Query query13 = query9.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder14 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder14.ascending("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.query.Query query18 = queryBuilder14.build();
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder14.filter("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str11, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(query18);
        org.junit.Assert.assertNotNull(queryBuilder20);
    }

    @Test
    public void test11480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11480");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Bearer ");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService6 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService7 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService8 = builder1.build();
        org.osiam.resources.scim.User user10 = null;
        org.osiam.client.OsiamGroupService.Builder builder12 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService13 = builder12.build();
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        java.util.Date date21 = accessToken20.getExpiresAt();
        java.lang.String str22 = accessToken20.getRefreshToken();
        java.lang.String str23 = accessToken20.getType();
        java.lang.String str24 = accessToken20.getClientId();
        java.lang.String str25 = accessToken20.getUserName();
        java.lang.String str26 = osiamGroupService13.extractErrorMessageForbidden(accessToken20);
        org.osiam.client.OsiamGroupService.Builder builder28 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService29 = builder28.build();
        org.osiam.client.OsiamGroupService osiamGroupService30 = builder28.build();
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken37);
        java.lang.String str39 = osiamGroupService30.extractErrorMessageForbidden(accessToken37);
        java.util.Date date40 = accessToken37.getExpiresAt();
        boolean boolean41 = accessToken37.isRefreshTokenExpired();
        java.lang.String str42 = accessToken37.getUserId();
        java.lang.String str43 = accessToken37.getType();
        java.lang.String str44 = osiamGroupService13.extractErrorMessageForbidden(accessToken37);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user45 = osiamUserService8.replaceUser("", user10, accessToken37);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(osiamUserService6);
        org.junit.Assert.assertNotNull(osiamUserService7);
        org.junit.Assert.assertNotNull(osiamUserService8);
        org.junit.Assert.assertNotNull(osiamGroupService13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Insufficient scopes: []" + "'", str26, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService29);
        org.junit.Assert.assertNotNull(osiamGroupService30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Insufficient scopes: []" + "'", str44, "Insufficient scopes: []");
    }

    @Test
    public void test11481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11481");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder8.descending("client_credentials");
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder8.attributes("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.descending("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count((int) (byte) 10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.filter("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.ascending("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
    }

    @Test
    public void test11482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11482");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.client.OsiamConnector.Builder builder18 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder24 = builder22.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder26 = builder22.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder28 = builder26.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder30 = builder28.setClientSecret("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder32 = builder30.setEndpoint("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.OsiamConnector osiamConnector33 = builder32.build();
        org.osiam.client.query.QueryBuilder queryBuilder34 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query41 = queryBuilder38.build();
        org.osiam.client.query.Query query42 = query41.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder43 = new org.osiam.client.query.QueryBuilder(query42);
        org.osiam.client.query.QueryBuilder queryBuilder44 = osiamConnector33.createQueryBuilder(query42);
        org.osiam.client.query.QueryBuilder queryBuilder45 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder45.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder47.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder47.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder53 = queryBuilder51.descending("hi!");
        org.osiam.client.query.Query query54 = queryBuilder53.build();
        java.lang.String str55 = query54.getAttributes();
        java.lang.String str56 = query54.toString();
        java.lang.String str57 = query54.getSortBy();
        org.osiam.client.query.Query query58 = query54.nextPage();
        java.lang.String str59 = query58.getAttributes();
        long long60 = query58.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder61 = osiamConnector33.createQueryBuilder(query58);
        org.osiam.client.query.QueryBuilder queryBuilder62 = osiamConnector17.createQueryBuilder(query58);
        org.osiam.resources.scim.UpdateGroup updateGroup64 = null;
        org.osiam.client.oauth.AccessToken.Builder builder66 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date67 = null;
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder66.setRefreshTokenExpiresAt(date67);
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder66.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken71 = builder70.build();
        java.lang.String str72 = accessToken71.toString();
        java.lang.String str73 = accessToken71.getType();
        boolean boolean74 = accessToken71.isExpired();
        java.lang.String str75 = accessToken71.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group76 = osiamConnector17.updateGroup("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET POST PUT PATCH DELETE], refreshTokenId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=refresh_token, userId=org.osiam.client.exception.ConflictException: PATCH, userName=]", updateGroup64, accessToken71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(osiamConnector33);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(queryBuilder53);
        org.junit.Assert.assertNotNull(query54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Authorization" + "'", str55, "Authorization");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str56, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertNotNull(query58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Authorization" + "'", str59, "Authorization");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 11L + "'", long60 == 11L);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(accessToken71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str72, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
    }

    @Test
    public void test11483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11483");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder1.setUserName("ascending");
        org.osiam.client.oauth.AccessToken accessToken8 = builder7.build();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(accessToken8);
    }

    @Test
    public void test11484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11484");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        boolean boolean6 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer7 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader8 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer9 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer10 = scopeDeserializer0.unwrappingDeserializer(nameTransformer9);
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer11 = scopeSetJsonDeserializer10.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection12 = scopeSetJsonDeserializer10.getKnownPropertyNames();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardJsonDeserializer7);
        org.junit.Assert.assertNull(objectIdReader8);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer10);
        org.junit.Assert.assertNull(wildcardJsonDeserializer11);
        org.junit.Assert.assertNull(objCollection12);
    }

    @Test
    public void test11485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11485");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setEndpoint("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.OsiamConnector osiamConnector15 = builder14.build();
        org.osiam.client.AuthService.Builder builder19 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder21 = builder19.setClientId("ME");
        org.osiam.client.AuthService.Builder builder23 = builder19.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService.Builder builder25 = builder19.setClientRedirectUri("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.AuthService authService26 = builder19.build();
        org.osiam.client.OsiamConnector.Builder builder27 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder29 = builder27.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder31 = builder29.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder33 = builder31.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder35 = builder33.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector36 = builder33.build();
        org.osiam.client.OsiamConnector.Builder builder38 = builder33.setAuthServerEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder40 = builder38.setClientId("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector osiamConnector41 = builder38.build();
        org.osiam.client.AuthService.Builder builder43 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder45 = builder43.setClientId("ME");
        org.osiam.client.AuthService.Builder builder47 = builder45.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder49 = builder47.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder51 = builder49.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService52 = builder51.build();
        org.osiam.client.oauth.AccessToken.Builder builder54 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date55 = null;
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setRefreshTokenExpiresAt(date55);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder54.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken59 = builder58.build();
        boolean boolean60 = accessToken59.isRefreshTokenExpired();
        java.lang.String str61 = accessToken59.getUserId();
        java.lang.String str62 = accessToken59.getToken();
        java.lang.String str63 = authService52.extractErrorMessageForbidden(accessToken59);
        org.osiam.client.oauth.Scope scope64 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str65 = scope64.getValue();
        java.lang.String str66 = scope64.toString();
        org.osiam.client.oauth.Scope scope67 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray68 = new org.osiam.client.oauth.Scope[] { scope64, scope67 };
        java.net.URI uRI69 = authService52.getAuthorizationUri(scopeArray68);
        java.net.URI uRI70 = osiamConnector41.getAuthorizationUri(scopeArray68);
        java.net.URI uRI71 = authService26.getAuthorizationUri(scopeArray68);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken72 = osiamConnector15.retrieveAccessToken("org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388", "org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", scopeArray68);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(authService26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(osiamConnector36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(osiamConnector41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(authService52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(accessToken59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Bearer " + "'", str62, "Bearer ");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Insufficient scopes: []" + "'", str63, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "PATCH" + "'", str65, "PATCH");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PATCH" + "'", str66, "PATCH");
        org.junit.Assert.assertNotNull(scope67);
        org.junit.Assert.assertNotNull(scopeArray68);
        org.junit.Assert.assertNotNull(uRI69);
        org.junit.Assert.assertNotNull(uRI70);
        org.junit.Assert.assertNotNull(uRI71);
    }

    @Test
    public void test11486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11486");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("hi!");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder3.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope9 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.addScope(scope9);
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException13 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean14 = scope11.equals((java.lang.Object) invalidAttributeException13);
        java.lang.String str15 = scope11.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder8.addScope(scope11);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder22.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken27 = builder26.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken27);
        boolean boolean29 = accessToken27.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            authService6.revokeAccessToken(accessToken27);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(scope9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GET" + "'", str15, "GET");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test11487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11487");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        java.util.Date date7 = accessToken6.getExpiresAt();
        boolean boolean8 = accessToken6.isExpired();
        java.lang.String str9 = accessToken6.getUserId();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test11488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11488");
        org.osiam.client.exception.ScimErrorMessage scimErrorMessage0 = new org.osiam.client.exception.ScimErrorMessage();
        java.lang.String str1 = scimErrorMessage0.getErrorCode();
        java.lang.String str2 = scimErrorMessage0.getDescription();
        java.lang.String str3 = scimErrorMessage0.getErrorCode();
        java.lang.String str4 = scimErrorMessage0.getDescription();
        java.lang.String str5 = scimErrorMessage0.getDescription();
        java.lang.String str6 = scimErrorMessage0.getErrorCode();
        java.lang.String str7 = scimErrorMessage0.getErrorCode();
        java.lang.String str8 = scimErrorMessage0.getDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test11489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11489");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.UnauthorizedException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder4.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder4.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.addScope(scope13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken21);
        java.util.Date date23 = accessToken21.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder14.setExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.addScope(scope27);
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException31 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean32 = scope29.equals((java.lang.Object) invalidAttributeException31);
        java.lang.String str33 = scope29.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder26.addScope(scope29);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setUserId("");
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str40 = scope39.toString();
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder38.addScope(scope39);
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setType("Insufficient scopes: []");
        org.osiam.client.oauth.Scope scope45 = new org.osiam.client.oauth.Scope("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder43.addScope(scope45);
        java.lang.String str47 = scope45.getValue();
        java.lang.String str48 = scope45.getValue();
        java.lang.String str49 = scope45.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder24.addScope(scope45);
        java.lang.String str51 = scope45.getValue();
        org.osiam.client.OsiamGroupService.Builder builder53 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService54 = builder53.build();
        org.osiam.client.OsiamGroupService osiamGroupService55 = builder53.build();
        javax.ws.rs.client.WebTarget webTarget56 = osiamGroupService55.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget57 = osiamGroupService55.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget58 = osiamGroupService55.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder60 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date61 = null;
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder60.setRefreshTokenExpiresAt(date61);
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder60.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken65 = builder64.build();
        java.lang.String str66 = osiamGroupService55.extractErrorMessageForbidden(accessToken65);
        org.osiam.client.oauth.AccessToken.Builder builder68 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date69 = null;
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder68.setRefreshTokenExpiresAt(date69);
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder68.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken73 = builder72.build();
        java.lang.String str74 = accessToken73.toString();
        java.lang.String str75 = accessToken73.getType();
        boolean boolean76 = accessToken73.isExpired();
        java.lang.String str77 = accessToken73.getToken();
        java.lang.String str78 = osiamGroupService55.extractErrorMessageForbidden(accessToken73);
        org.osiam.client.oauth.AccessToken.Builder builder80 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date81 = null;
        org.osiam.client.oauth.AccessToken.Builder builder82 = builder80.setRefreshTokenExpiresAt(date81);
        org.osiam.client.oauth.AccessToken.Builder builder84 = builder80.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken85 = builder84.build();
        boolean boolean86 = accessToken85.isRefreshTokenExpired();
        boolean boolean87 = accessToken85.isClientOnly();
        java.lang.String str88 = accessToken85.getUserName();
        java.lang.String str89 = osiamGroupService55.extractErrorMessageForbidden(accessToken85);
        boolean boolean90 = scope45.equals((java.lang.Object) accessToken85);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser91 = osiamUserService2.getCurrentUserBasic(accessToken85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GET" + "'", str33, "GET");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PUT" + "'", str40, "PUT");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Authorization" + "'", str47, "Authorization");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Authorization" + "'", str48, "Authorization");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Authorization" + "'", str49, "Authorization");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Authorization" + "'", str51, "Authorization");
        org.junit.Assert.assertNotNull(osiamGroupService54);
        org.junit.Assert.assertNotNull(osiamGroupService55);
        org.junit.Assert.assertNotNull(webTarget56);
        org.junit.Assert.assertNotNull(webTarget57);
        org.junit.Assert.assertNotNull(webTarget58);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(accessToken65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Insufficient scopes: []" + "'", str66, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(accessToken73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str74, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Bearer " + "'", str77, "Bearer ");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Insufficient scopes: []" + "'", str78, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(accessToken85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Insufficient scopes: []" + "'", str89, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test11490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11490");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setEndpoint("org.osiam.client.exception.OsiamClientException: client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientId("org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector9 = builder8.build();
        org.osiam.client.OsiamGroupService.Builder builder12 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService13 = builder12.build();
        org.osiam.client.OsiamGroupService osiamGroupService14 = builder12.build();
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken21);
        java.lang.String str23 = osiamGroupService14.extractErrorMessageForbidden(accessToken21);
        javax.ws.rs.client.WebTarget webTarget24 = osiamGroupService14.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget25 = osiamGroupService14.targetEndpoint;
        org.osiam.client.AuthService.Builder builder27 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder29 = builder27.setClientId("ME");
        org.osiam.client.AuthService.Builder builder31 = builder29.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService32 = builder31.build();
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        boolean boolean40 = accessToken39.isRefreshTokenExpired();
        boolean boolean41 = accessToken39.isClientOnly();
        java.lang.String str42 = accessToken39.getClientId();
        java.lang.String str43 = authService32.extractErrorMessageForbidden(accessToken39);
        java.lang.String str44 = accessToken39.getUserId();
        java.lang.String str45 = accessToken39.getClientId();
        java.lang.String str46 = osiamGroupService14.extractErrorMessageForbidden(accessToken39);
        java.util.Date date47 = accessToken39.getRefreshTokenExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken39);
        java.lang.String str49 = accessToken39.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector9.deleteUser("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.ForbiddenException: hi!", accessToken39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(osiamGroupService13);
        org.junit.Assert.assertNotNull(osiamGroupService14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Insufficient scopes: []" + "'", str23, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget24);
        org.junit.Assert.assertNotNull(webTarget25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(authService32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Insufficient scopes: []" + "'", str43, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Insufficient scopes: []" + "'", str46, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test11491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11491");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = osiamGroupService3.extractErrorMessage("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET POST PUT PATCH DELETE], refreshTokenId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=refresh_token, userId=org.osiam.client.exception.ConflictException: PATCH, userName=]", statusType6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
    }

    @Test
    public void test11492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11492");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.resources.scim.Group group4 = null;
        org.osiam.client.AuthService.Builder builder6 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService authService11 = builder10.build();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        boolean boolean19 = accessToken18.isRefreshTokenExpired();
        java.lang.String str20 = accessToken18.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder21 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder23.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.descending("hi!");
        org.osiam.client.query.Query query30 = queryBuilder29.build();
        java.lang.String str31 = query30.toString();
        java.lang.String str32 = query30.getSortOrder();
        java.lang.String str33 = query30.getSortBy();
        java.lang.String str34 = query30.getFilter();
        java.lang.String str35 = query30.getSortOrder();
        java.lang.String str36 = query30.getAttributes();
        boolean boolean37 = accessToken18.equals((java.lang.Object) query30);
        java.lang.String str38 = authService11.extractErrorMessageForbidden(accessToken18);
        org.osiam.client.oauth.AccessToken.Builder builder40 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date41 = null;
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setRefreshTokenExpiresAt(date41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder40.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken45 = builder44.build();
        java.lang.String str46 = accessToken45.toString();
        java.lang.String str47 = accessToken45.getClientId();
        org.osiam.client.OsiamConnector.Builder builder48 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder50 = builder48.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder52 = builder50.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder54 = builder52.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector55 = builder54.build();
        org.osiam.client.query.QueryBuilder queryBuilder56 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder58 = queryBuilder56.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder60 = queryBuilder58.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder62 = queryBuilder58.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder62.descending("hi!");
        org.osiam.client.query.Query query65 = queryBuilder64.build();
        java.lang.String str66 = query65.toString();
        java.lang.String str67 = query65.toString();
        java.lang.String str68 = query65.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder69 = osiamConnector55.createQueryBuilder(query65);
        org.osiam.client.query.QueryBuilder queryBuilder70 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder72 = queryBuilder70.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder74 = queryBuilder72.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder76 = queryBuilder72.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder78 = queryBuilder76.descending("hi!");
        org.osiam.client.query.Query query79 = queryBuilder78.build();
        org.osiam.client.query.QueryBuilder queryBuilder80 = osiamConnector55.createQueryBuilder(query79);
        boolean boolean81 = accessToken45.equals((java.lang.Object) queryBuilder80);
        java.util.Date date82 = accessToken45.getRefreshTokenExpiresAt();
        org.osiam.client.query.QueryBuilder queryBuilder83 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder85 = queryBuilder83.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder87 = queryBuilder85.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder89 = queryBuilder87.ascending("hi!");
        org.osiam.client.query.QueryBuilder queryBuilder91 = queryBuilder89.ascending("org.osiam.client.exception.OsiamRequestException: hi!");
        boolean boolean92 = accessToken45.equals((java.lang.Object) "org.osiam.client.exception.OsiamRequestException: hi!");
        java.lang.String str93 = authService11.extractErrorMessageForbidden(accessToken45);
        boolean boolean94 = accessToken45.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group95 = osiamGroupService2.replaceResource("Query [attributes=Authorization, filter=null, sortBy=null, sortOrder=null, startIndex=11, count=10]", group4, accessToken45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(authService11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(query30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str31, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "descending" + "'", str32, "descending");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "descending" + "'", str35, "descending");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Authorization" + "'", str36, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Insufficient scopes: []" + "'", str38, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(accessToken45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str46, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(osiamConnector55);
        org.junit.Assert.assertNotNull(queryBuilder58);
        org.junit.Assert.assertNotNull(queryBuilder60);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertNotNull(query65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str66, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str67, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(queryBuilder69);
        org.junit.Assert.assertNotNull(queryBuilder72);
        org.junit.Assert.assertNotNull(queryBuilder74);
        org.junit.Assert.assertNotNull(queryBuilder76);
        org.junit.Assert.assertNotNull(queryBuilder78);
        org.junit.Assert.assertNotNull(query79);
        org.junit.Assert.assertNotNull(queryBuilder80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(queryBuilder85);
        org.junit.Assert.assertNotNull(queryBuilder87);
        org.junit.Assert.assertNotNull(queryBuilder89);
        org.junit.Assert.assertNotNull(queryBuilder91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Insufficient scopes: []" + "'", str93, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test11493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11493");
        org.osiam.client.exception.NoResultException noResultException1 = new org.osiam.client.exception.NoResultException("");
        java.lang.String str2 = noResultException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.osiam.client.exception.NoResultException: " + "'", str2, "org.osiam.client.exception.NoResultException: ");
    }

    @Test
    public void test11494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11494");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str15 = scope14.toString();
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder13.addScope(scope14);
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException19 = new org.osiam.client.exception.ConnectionInitializationException("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException20 = new org.osiam.client.exception.ConnectionInitializationException("org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", (java.lang.Throwable) connectionInitializationException19);
        boolean boolean21 = scope14.equals((java.lang.Object) connectionInitializationException20);
        java.lang.String str22 = scope14.getValue();
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PUT" + "'", str15, "PUT");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PUT" + "'", str22, "PUT");
    }

    @Test
    public void test11495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11495");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("refresh_token");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = osiamGroupService4.extractErrorMessageDefault("org.osiam.client.exception.NoResultException: refresh_token", statusType7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
    }

    @Test
    public void test11496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11496");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer7 = scopeSetJsonDeserializer6.getDelegatee();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer8 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer9 = scopeSetJsonDeserializer6.unwrappingDeserializer(nameTransformer8);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNull(wildcardJsonDeserializer7);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer9);
    }

    @Test
    public void test11497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11497");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        java.util.Date date13 = accessToken10.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.attributes("Authorization");
        org.osiam.client.query.Query query24 = queryBuilder21.build();
        boolean boolean25 = accessToken10.equals((java.lang.Object) query24);
        boolean boolean26 = accessToken10.isRefreshTokenExpired();
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test11498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11498");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Bearer ");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService6 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService7 = builder1.build();
        org.osiam.resources.scim.User user8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        java.util.Date date16 = accessToken15.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user17 = osiamUserService7.createUser(user8, accessToken15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(osiamUserService6);
        org.junit.Assert.assertNotNull(osiamUserService7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test11499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11499");
        org.osiam.client.exception.OsiamRequestException osiamRequestException2 = new org.osiam.client.exception.OsiamRequestException(404, "org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        java.lang.Throwable[] throwableArray3 = osiamRequestException2.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
    }

    @Test
    public void test11500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11500");
        org.osiam.client.exception.OsiamRequestException osiamRequestException3 = new org.osiam.client.exception.OsiamRequestException((int) (short) 1, "Bearer ");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException4 = new org.osiam.client.exception.ConnectionInitializationException("hi!", (java.lang.Throwable) osiamRequestException3);
        java.lang.Throwable[] throwableArray5 = connectionInitializationException4.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray5);
    }
}

