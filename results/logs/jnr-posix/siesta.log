[INFO] Error stacktraces are turned on.
[INFO] Scanning for projects...
achou:/home/mopuser/workspace/loadLibrary.csv
Modifying surefire to add Siesta-MOP...
=====Version:: 2.16
=====Current ArgLine:: -Xmx1024m -XX:MaxPermSize=256m
=====Current ArgLine:UFPE: -javaagent:/root/.m2/repository/siestamop-agent/siestamop-agent/1.0/siestamop-agent-1.0.jar -Xmx1024m -XX:MaxPermSize=256m
=====Version:: [default-test]
[INFO] 
[INFO] ----------------------< com.github.jnr:jnr-posix >----------------------
[INFO] Building jnr-posix 3.0.2-SNAPSHOT
[INFO]   from pom.xml
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- enforcer:1.0:enforce (enforce-maven) @ jnr-posix ---
[INFO] 
[INFO] --- resources:3.3.1:resources (default-resources) @ jnr-posix ---
[INFO] skip non existing resourceDirectory /home/mopuser/workspace/jnr-posix/src/main/resources
[INFO] 
[INFO] --- compiler:3.11.0:compile (default-compile) @ jnr-posix ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- resources:3.3.1:testResources (default-testResources) @ jnr-posix ---
[INFO] skip non existing resourceDirectory /home/mopuser/workspace/jnr-posix/src/test/resources
[INFO] 
[INFO] --- compiler:3.11.0:testCompile (default-testCompile) @ jnr-posix ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- surefire:2.16:test (default-test) @ jnr-posix ---
[INFO] Surefire report directory: /home/mopuser/workspace/jnr-posix/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0
Running jnr.posix.IDTest
Running jnr.posix.SpawnTest
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.ffi.Library.loadLibrary(Library.java:80), jnr.posix.SpawnTest.setUpClass(SpawnTest.java:34), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.ffi.Library.loadLibrary(Library.java:80), jnr.posix.SpawnTest.setUpClass(SpawnTest.java:34), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.ffi.Library.loadLibrary(Library.java:80), jnr.posix.SpawnTest.setUpClass(SpawnTest.java:34), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.ffi.Library.loadLibrary(Library.java:80), jnr.posix.SpawnTest.setUpClass(SpawnTest.java:34), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.ffi.Library.loadLibrary(Library.java:80), jnr.posix.SpawnTest.setUpClass(SpawnTest.java:34), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.ffi.Library.loadLibrary(Library.java:80), jnr.posix.SpawnTest.setUpClass(SpawnTest.java:34), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.ffi.Library.loadLibrary(Library.java:80), jnr.posix.SpawnTest.setUpClass(SpawnTest.java:34), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.getStubLibraryPath(StubLoader.java:215), com.kenai.jffi.internal.StubLoader.getStubLibraryStream(StubLoader.java:338), com.kenai.jffi.internal.StubLoader.loadFromJar(StubLoader.java:300), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:235), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.ffi.Library.loadLibrary(Library.java:80), jnr.posix.SpawnTest.setUpClass(SpawnTest.java:34), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getgid(LazyPOSIX.java:124), jnr.posix.IDTest.getgid(IDTest.java:68), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getgid(LazyPOSIX.java:124), jnr.posix.IDTest.getgid(IDTest.java:68), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getgid(LazyPOSIX.java:124), jnr.posix.IDTest.getgid(IDTest.java:68), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getgid(LazyPOSIX.java:124), jnr.posix.IDTest.getgid(IDTest.java:68), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getgid(LazyPOSIX.java:124), jnr.posix.IDTest.getgid(IDTest.java:68), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getgid(LazyPOSIX.java:124), jnr.posix.IDTest.getgid(IDTest.java:68), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getgid(LazyPOSIX.java:124), jnr.posix.IDTest.getgid(IDTest.java:68), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.getStubLibraryPath(StubLoader.java:215), com.kenai.jffi.internal.StubLoader.getStubLibraryStream(StubLoader.java:338), com.kenai.jffi.internal.StubLoader.loadFromJar(StubLoader.java:300), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:235), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getgid(LazyPOSIX.java:124), jnr.posix.IDTest.getgid(IDTest.java:68), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.ffi.Platform$CPU.toString(Platform.java:125), jnr.ffi.provider.jffi.NativeRuntime.buildNativeTypeAliases(NativeRuntime.java:85), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:58), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.ffi.Library.loadLibrary(Library.java:80), jnr.posix.SpawnTest.setUpClass(SpawnTest.java:34), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.ffi.Platform$OS.toString(Platform.java:72), jnr.ffi.provider.jffi.NativeRuntime.buildNativeTypeAliases(NativeRuntime.java:86), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:58), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.ffi.Library.loadLibrary(Library.java:80), jnr.posix.SpawnTest.setUpClass(SpawnTest.java:34), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.ffi.Platform$CPU.toString(Platform.java:125), jnr.ffi.provider.jffi.NativeRuntime.buildNativeTypeAliases(NativeRuntime.java:85), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:58), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getgid(LazyPOSIX.java:124), jnr.posix.IDTest.getgid(IDTest.java:68), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.ffi.Platform$OS.toString(Platform.java:72), jnr.ffi.provider.jffi.NativeRuntime.buildNativeTypeAliases(NativeRuntime.java:86), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:58), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getgid(LazyPOSIX.java:124), jnr.posix.IDTest.getgid(IDTest.java:68), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Collection_StandardConstructors has been violated on line [jnr.ffi.provider.InterfaceScanner$1.<clinit>(InterfaceScanner.java:1), jnr.ffi.provider.InterfaceScanner.functions(InterfaceScanner.java:27), jnr.ffi.provider.jffi.AsmLibraryLoader.generateInterfaceImpl(AsmLibraryLoader.java:113), jnr.ffi.provider.jffi.AsmLibraryLoader.loadLibrary(AsmLibraryLoader.java:59), jnr.ffi.provider.jffi.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:43), jnr.ffi.LibraryLoader.load(LibraryLoader.java:265), jnr.ffi.Library.loadLibrary(Library.java:123), jnr.ffi.Library.loadLibrary(Library.java:80), jnr.posix.SpawnTest.setUpClass(SpawnTest.java:34), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
jnr.ffi.provider.InterfaceScanner$1 does not define the 'standard' constructors.
[Siesta] Specification Collection_StandardConstructors has been violated on line [jnr.ffi.provider.InterfaceScanner$1.<clinit>(InterfaceScanner.java:1), jnr.ffi.provider.InterfaceScanner.functions(InterfaceScanner.java:27), jnr.ffi.provider.jffi.AsmLibraryLoader.generateInterfaceImpl(AsmLibraryLoader.java:113), jnr.ffi.provider.jffi.AsmLibraryLoader.loadLibrary(AsmLibraryLoader.java:59), jnr.ffi.provider.jffi.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:43), jnr.ffi.LibraryLoader.load(LibraryLoader.java:265), jnr.ffi.Library.loadLibrary(Library.java:123), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getgid(LazyPOSIX.java:124), jnr.posix.IDTest.getgid(IDTest.java:68), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
jnr.ffi.provider.InterfaceScanner$1 does not define the 'standard' constructors.
[Siesta] Specification Collection_StandardConstructors has been violated on line [jnr.ffi.provider.InterfaceScanner$2.<clinit>(InterfaceScanner.java:1), jnr.ffi.provider.InterfaceScanner.variables(InterfaceScanner.java:41), jnr.ffi.provider.jffi.AsmLibraryLoader.generateInterfaceImpl(AsmLibraryLoader.java:147), jnr.ffi.provider.jffi.AsmLibraryLoader.loadLibrary(AsmLibraryLoader.java:59), jnr.ffi.provider.jffi.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:43), jnr.ffi.LibraryLoader.load(LibraryLoader.java:265), jnr.ffi.Library.loadLibrary(Library.java:123), jnr.ffi.Library.loadLibrary(Library.java:80), jnr.posix.SpawnTest.setUpClass(SpawnTest.java:34), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
jnr.ffi.provider.InterfaceScanner$2 does not define the 'standard' constructors.
[Siesta] Specification Collection_StandardConstructors has been violated on line [jnr.ffi.provider.InterfaceScanner$2.<clinit>(InterfaceScanner.java:1), jnr.ffi.provider.InterfaceScanner.variables(InterfaceScanner.java:41), jnr.ffi.provider.jffi.AsmLibraryLoader.generateInterfaceImpl(AsmLibraryLoader.java:147), jnr.ffi.provider.jffi.AsmLibraryLoader.loadLibrary(AsmLibraryLoader.java:59), jnr.ffi.provider.jffi.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:43), jnr.ffi.LibraryLoader.load(LibraryLoader.java:265), jnr.ffi.Library.loadLibrary(Library.java:123), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getgid(LazyPOSIX.java:124), jnr.posix.IDTest.getgid(IDTest.java:68), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
jnr.ffi.provider.InterfaceScanner$2 does not define the 'standard' constructors.
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 12.698 sec - in jnr.posix.IDTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 12.724 sec - in jnr.posix.SpawnTest
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0
Running jnr.posix.DTableSizeTest
Running jnr.posix.JavaFileStatTest
[Siesta] Specification File_LengthOnDirectory has been violated on line [jnr.posix.JavaFileStat.setup(JavaFileStat.java:31), jnr.posix.JavaFileStatTest.testSetup(JavaFileStatTest.java:23), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), junit.framework.TestCase.runTest(TestCase.java:176), junit.framework.TestCase.runBare(TestCase.java:141), junit.framework.TestResult$1.protect(TestResult.java:122), junit.framework.TestResult.runProtected(TestResult.java:142), junit.framework.TestResult.run(TestResult.java:125), junit.framework.TestCase.run(TestCase.java:129), junit.framework.TestSuite.runTest(TestSuite.java:255), junit.framework.TestSuite.run(TestSuite.java:250), org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
length() was invoked on a File instance that represents a directory.
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.704 sec - in jnr.posix.JavaFileStatTest
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.isNative(LazyPOSIX.java:300), jnr.posix.DTableSizeTest.testGetDtableSize(DTableSizeTest.java:14), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.isNative(LazyPOSIX.java:300), jnr.posix.DTableSizeTest.testGetDtableSize(DTableSizeTest.java:14), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.isNative(LazyPOSIX.java:300), jnr.posix.DTableSizeTest.testGetDtableSize(DTableSizeTest.java:14), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.isNative(LazyPOSIX.java:300), jnr.posix.DTableSizeTest.testGetDtableSize(DTableSizeTest.java:14), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.isNative(LazyPOSIX.java:300), jnr.posix.DTableSizeTest.testGetDtableSize(DTableSizeTest.java:14), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.isNative(LazyPOSIX.java:300), jnr.posix.DTableSizeTest.testGetDtableSize(DTableSizeTest.java:14), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.isNative(LazyPOSIX.java:300), jnr.posix.DTableSizeTest.testGetDtableSize(DTableSizeTest.java:14), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.getStubLibraryPath(StubLoader.java:215), com.kenai.jffi.internal.StubLoader.getStubLibraryStream(StubLoader.java:338), com.kenai.jffi.internal.StubLoader.loadFromJar(StubLoader.java:300), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:235), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.isNative(LazyPOSIX.java:300), jnr.posix.DTableSizeTest.testGetDtableSize(DTableSizeTest.java:14), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.ffi.Platform$CPU.toString(Platform.java:125), jnr.ffi.provider.jffi.NativeRuntime.buildNativeTypeAliases(NativeRuntime.java:85), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:58), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.isNative(LazyPOSIX.java:300), jnr.posix.DTableSizeTest.testGetDtableSize(DTableSizeTest.java:14), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.ffi.Platform$OS.toString(Platform.java:72), jnr.ffi.provider.jffi.NativeRuntime.buildNativeTypeAliases(NativeRuntime.java:86), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:58), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.isNative(LazyPOSIX.java:300), jnr.posix.DTableSizeTest.testGetDtableSize(DTableSizeTest.java:14), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Collection_StandardConstructors has been violated on line [jnr.ffi.provider.InterfaceScanner$1.<clinit>(InterfaceScanner.java:1), jnr.ffi.provider.InterfaceScanner.functions(InterfaceScanner.java:27), jnr.ffi.provider.jffi.AsmLibraryLoader.generateInterfaceImpl(AsmLibraryLoader.java:113), jnr.ffi.provider.jffi.AsmLibraryLoader.loadLibrary(AsmLibraryLoader.java:59), jnr.ffi.provider.jffi.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:43), jnr.ffi.LibraryLoader.load(LibraryLoader.java:265), jnr.ffi.Library.loadLibrary(Library.java:123), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.isNative(LazyPOSIX.java:300), jnr.posix.DTableSizeTest.testGetDtableSize(DTableSizeTest.java:14), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
jnr.ffi.provider.InterfaceScanner$1 does not define the 'standard' constructors.
Running jnr.posix.HANDLETest
[Siesta] Specification Collection_StandardConstructors has been violated on line [jnr.ffi.provider.InterfaceScanner$2.<clinit>(InterfaceScanner.java:1), jnr.ffi.provider.InterfaceScanner.variables(InterfaceScanner.java:41), jnr.ffi.provider.jffi.AsmLibraryLoader.generateInterfaceImpl(AsmLibraryLoader.java:147), jnr.ffi.provider.jffi.AsmLibraryLoader.loadLibrary(AsmLibraryLoader.java:59), jnr.ffi.provider.jffi.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:43), jnr.ffi.LibraryLoader.load(LibraryLoader.java:265), jnr.ffi.Library.loadLibrary(Library.java:123), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.isNative(LazyPOSIX.java:300), jnr.posix.DTableSizeTest.testGetDtableSize(DTableSizeTest.java:14), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
jnr.ffi.provider.InterfaceScanner$2 does not define the 'standard' constructors.
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 9.784 sec - in jnr.posix.DTableSizeTest
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Runtime$SingletonHolder.<clinit>(Runtime.java:85), jnr.ffi.Runtime.getSystemRuntime(Runtime.java:70), jnr.posix.HANDLE.valueOf(HANDLE.java:29), jnr.posix.HANDLETest.invalidHandleIsInValid(HANDLETest.java:18), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Runtime$SingletonHolder.<clinit>(Runtime.java:85), jnr.ffi.Runtime.getSystemRuntime(Runtime.java:70), jnr.posix.HANDLE.valueOf(HANDLE.java:29), jnr.posix.HANDLETest.invalidHandleIsInValid(HANDLETest.java:18), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Runtime$SingletonHolder.<clinit>(Runtime.java:85), jnr.ffi.Runtime.getSystemRuntime(Runtime.java:70), jnr.posix.HANDLE.valueOf(HANDLE.java:29), jnr.posix.HANDLETest.invalidHandleIsInValid(HANDLETest.java:18), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Runtime$SingletonHolder.<clinit>(Runtime.java:85), jnr.ffi.Runtime.getSystemRuntime(Runtime.java:70), jnr.posix.HANDLE.valueOf(HANDLE.java:29), jnr.posix.HANDLETest.invalidHandleIsInValid(HANDLETest.java:18), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Runtime$SingletonHolder.<clinit>(Runtime.java:85), jnr.ffi.Runtime.getSystemRuntime(Runtime.java:70), jnr.posix.HANDLE.valueOf(HANDLE.java:29), jnr.posix.HANDLETest.invalidHandleIsInValid(HANDLETest.java:18), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Runtime$SingletonHolder.<clinit>(Runtime.java:85), jnr.ffi.Runtime.getSystemRuntime(Runtime.java:70), jnr.posix.HANDLE.valueOf(HANDLE.java:29), jnr.posix.HANDLETest.invalidHandleIsInValid(HANDLETest.java:18), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Runtime$SingletonHolder.<clinit>(Runtime.java:85), jnr.ffi.Runtime.getSystemRuntime(Runtime.java:70), jnr.posix.HANDLE.valueOf(HANDLE.java:29), jnr.posix.HANDLETest.invalidHandleIsInValid(HANDLETest.java:18), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.getStubLibraryPath(StubLoader.java:215), com.kenai.jffi.internal.StubLoader.getStubLibraryStream(StubLoader.java:338), com.kenai.jffi.internal.StubLoader.loadFromJar(StubLoader.java:300), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:235), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Runtime$SingletonHolder.<clinit>(Runtime.java:85), jnr.ffi.Runtime.getSystemRuntime(Runtime.java:70), jnr.posix.HANDLE.valueOf(HANDLE.java:29), jnr.posix.HANDLETest.invalidHandleIsInValid(HANDLETest.java:18), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.ffi.Platform$CPU.toString(Platform.java:125), jnr.ffi.provider.jffi.NativeRuntime.buildNativeTypeAliases(NativeRuntime.java:85), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:58), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Runtime$SingletonHolder.<clinit>(Runtime.java:85), jnr.ffi.Runtime.getSystemRuntime(Runtime.java:70), jnr.posix.HANDLE.valueOf(HANDLE.java:29), jnr.posix.HANDLETest.invalidHandleIsInValid(HANDLETest.java:18), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.ffi.Platform$OS.toString(Platform.java:72), jnr.ffi.provider.jffi.NativeRuntime.buildNativeTypeAliases(NativeRuntime.java:86), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:58), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Runtime$SingletonHolder.<clinit>(Runtime.java:85), jnr.ffi.Runtime.getSystemRuntime(Runtime.java:70), jnr.posix.HANDLE.valueOf(HANDLE.java:29), jnr.posix.HANDLETest.invalidHandleIsInValid(HANDLETest.java:18), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.802 sec - in jnr.posix.HANDLETest
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0
Running jnr.posix.ProcessTest
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.getStubLibraryPath(StubLoader.java:215), com.kenai.jffi.internal.StubLoader.getStubLibraryStream(StubLoader.java:338), com.kenai.jffi.internal.StubLoader.loadFromJar(StubLoader.java:300), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:235), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
Running jnr.posix.FileTest
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.ffi.Platform$CPU.toString(Platform.java:125), jnr.ffi.provider.jffi.NativeRuntime.buildNativeTypeAliases(NativeRuntime.java:85), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:58), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.ffi.Platform$OS.toString(Platform.java:72), jnr.ffi.provider.jffi.NativeRuntime.buildNativeTypeAliases(NativeRuntime.java:86), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:58), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Collection_StandardConstructors has been violated on line [jnr.ffi.provider.InterfaceScanner$1.<clinit>(InterfaceScanner.java:1), jnr.ffi.provider.InterfaceScanner.functions(InterfaceScanner.java:27), jnr.ffi.provider.jffi.AsmLibraryLoader.generateInterfaceImpl(AsmLibraryLoader.java:113), jnr.ffi.provider.jffi.AsmLibraryLoader.loadLibrary(AsmLibraryLoader.java:59), jnr.ffi.provider.jffi.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:43), jnr.ffi.LibraryLoader.load(LibraryLoader.java:265), jnr.ffi.Library.loadLibrary(Library.java:123), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
jnr.ffi.provider.InterfaceScanner$1 does not define the 'standard' constructors.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.dup2(LazyPOSIX.java:346), jnr.posix.FileTest.dup2Test(FileTest.java:116), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.dup2(LazyPOSIX.java:346), jnr.posix.FileTest.dup2Test(FileTest.java:116), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.dup2(LazyPOSIX.java:346), jnr.posix.FileTest.dup2Test(FileTest.java:116), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.dup2(LazyPOSIX.java:346), jnr.posix.FileTest.dup2Test(FileTest.java:116), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.dup2(LazyPOSIX.java:346), jnr.posix.FileTest.dup2Test(FileTest.java:116), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.dup2(LazyPOSIX.java:346), jnr.posix.FileTest.dup2Test(FileTest.java:116), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.dup2(LazyPOSIX.java:346), jnr.posix.FileTest.dup2Test(FileTest.java:116), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.getStubLibraryPath(StubLoader.java:215), com.kenai.jffi.internal.StubLoader.getStubLibraryStream(StubLoader.java:338), com.kenai.jffi.internal.StubLoader.loadFromJar(StubLoader.java:300), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:235), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.dup2(LazyPOSIX.java:346), jnr.posix.FileTest.dup2Test(FileTest.java:116), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.ffi.Platform$CPU.toString(Platform.java:125), jnr.ffi.provider.jffi.NativeRuntime.buildNativeTypeAliases(NativeRuntime.java:85), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:58), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.dup2(LazyPOSIX.java:346), jnr.posix.FileTest.dup2Test(FileTest.java:116), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.ffi.Platform$OS.toString(Platform.java:72), jnr.ffi.provider.jffi.NativeRuntime.buildNativeTypeAliases(NativeRuntime.java:86), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:58), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.dup2(LazyPOSIX.java:346), jnr.posix.FileTest.dup2Test(FileTest.java:116), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Collection_StandardConstructors has been violated on line [jnr.ffi.provider.InterfaceScanner$2.<clinit>(InterfaceScanner.java:1), jnr.ffi.provider.InterfaceScanner.variables(InterfaceScanner.java:41), jnr.ffi.provider.jffi.AsmLibraryLoader.generateInterfaceImpl(AsmLibraryLoader.java:147), jnr.ffi.provider.jffi.AsmLibraryLoader.loadLibrary(AsmLibraryLoader.java:59), jnr.ffi.provider.jffi.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:43), jnr.ffi.LibraryLoader.load(LibraryLoader.java:265), jnr.ffi.Library.loadLibrary(Library.java:123), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
jnr.ffi.provider.InterfaceScanner$2 does not define the 'standard' constructors.
[Siesta] Specification Collection_StandardConstructors has been violated on line [jnr.constants.ConstantSet.<clinit>(ConstantSet.java:41), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
jnr.constants.ConstantSet does not define the 'standard' constructors.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:135), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:135), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:135), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:135), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:135), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:135), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:135), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Sysconf.intValue(Sysconf.java:136), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:549), jnr.posix.BaseNativePOSIX$5.toNative(BaseNativePOSIX.java:546), jnr.posix.LinuxLibC$jnr$ffi$0.sysconf(Unknown Source), jnr.posix.LinuxPOSIX.sysconf(LinuxPOSIX.java:132), jnr.posix.CheckedPOSIX.sysconf(CheckedPOSIX.java:329), jnr.posix.LazyPOSIX.sysconf(LazyPOSIX.java:330), jnr.posix.ProcessTest.times(ProcessTest.java:20), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 10.178 sec - in jnr.posix.ProcessTest
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0
[Siesta] Specification Collection_StandardConstructors has been violated on line [jnr.ffi.provider.InterfaceScanner$1.<clinit>(InterfaceScanner.java:1), jnr.ffi.provider.InterfaceScanner.functions(InterfaceScanner.java:27), jnr.ffi.provider.jffi.AsmLibraryLoader.generateInterfaceImpl(AsmLibraryLoader.java:113), jnr.ffi.provider.jffi.AsmLibraryLoader.loadLibrary(AsmLibraryLoader.java:59), jnr.ffi.provider.jffi.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:43), jnr.ffi.LibraryLoader.load(LibraryLoader.java:265), jnr.ffi.Library.loadLibrary(Library.java:123), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.dup2(LazyPOSIX.java:346), jnr.posix.FileTest.dup2Test(FileTest.java:116), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
jnr.ffi.provider.InterfaceScanner$1 does not define the 'standard' constructors.
[Siesta] Specification Collection_StandardConstructors has been violated on line [jnr.ffi.provider.InterfaceScanner$2.<clinit>(InterfaceScanner.java:1), jnr.ffi.provider.InterfaceScanner.variables(InterfaceScanner.java:41), jnr.ffi.provider.jffi.AsmLibraryLoader.generateInterfaceImpl(AsmLibraryLoader.java:147), jnr.ffi.provider.jffi.AsmLibraryLoader.loadLibrary(AsmLibraryLoader.java:59), jnr.ffi.provider.jffi.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:43), jnr.ffi.LibraryLoader.load(LibraryLoader.java:265), jnr.ffi.Library.loadLibrary(Library.java:123), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.dup2(LazyPOSIX.java:346), jnr.posix.FileTest.dup2Test(FileTest.java:116), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
jnr.ffi.provider.InterfaceScanner$2 does not define the 'standard' constructors.
[Siesta] Specification Collection_StandardConstructors has been violated on line [jnr.constants.ConstantSet.<clinit>(ConstantSet.java:41), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
jnr.constants.ConstantSet does not define the 'standard' constructors.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:135), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:135), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:135), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:135), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:135), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:135), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:135), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:135), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:135), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:135), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:135), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:135), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:135), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:135), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:135), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:135), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:135), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:135), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:135), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:135), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Fcntl.intValue(Fcntl.java:40), jnr.posix.BaseNativePOSIX.fcntl(BaseNativePOSIX.java:457), jnr.posix.CheckedPOSIX.fcntl(CheckedPOSIX.java:349), jnr.posix.LazyPOSIX.fcntl(LazyPOSIX.java:350), jnr.posix.FileTest.fcntlDupfdTest(FileTest.java:135), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
Running jnr.posix.GroupTest
Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 11.791 sec - in jnr.posix.FileTest
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getgrnam(LazyPOSIX.java:140), jnr.posix.GroupTest.nonExistantGroupReturnsNull(GroupTest.java:58), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getgrnam(LazyPOSIX.java:140), jnr.posix.GroupTest.nonExistantGroupReturnsNull(GroupTest.java:58), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getgrnam(LazyPOSIX.java:140), jnr.posix.GroupTest.nonExistantGroupReturnsNull(GroupTest.java:58), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getgrnam(LazyPOSIX.java:140), jnr.posix.GroupTest.nonExistantGroupReturnsNull(GroupTest.java:58), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getgrnam(LazyPOSIX.java:140), jnr.posix.GroupTest.nonExistantGroupReturnsNull(GroupTest.java:58), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getgrnam(LazyPOSIX.java:140), jnr.posix.GroupTest.nonExistantGroupReturnsNull(GroupTest.java:58), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getgrnam(LazyPOSIX.java:140), jnr.posix.GroupTest.nonExistantGroupReturnsNull(GroupTest.java:58), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.getStubLibraryPath(StubLoader.java:215), com.kenai.jffi.internal.StubLoader.getStubLibraryStream(StubLoader.java:338), com.kenai.jffi.internal.StubLoader.loadFromJar(StubLoader.java:300), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:235), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getgrnam(LazyPOSIX.java:140), jnr.posix.GroupTest.nonExistantGroupReturnsNull(GroupTest.java:58), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.ffi.Platform$CPU.toString(Platform.java:125), jnr.ffi.provider.jffi.NativeRuntime.buildNativeTypeAliases(NativeRuntime.java:85), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:58), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getgrnam(LazyPOSIX.java:140), jnr.posix.GroupTest.nonExistantGroupReturnsNull(GroupTest.java:58), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.ffi.Platform$OS.toString(Platform.java:72), jnr.ffi.provider.jffi.NativeRuntime.buildNativeTypeAliases(NativeRuntime.java:86), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:58), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getgrnam(LazyPOSIX.java:140), jnr.posix.GroupTest.nonExistantGroupReturnsNull(GroupTest.java:58), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
Running jnr.posix.PasswdTest
[Siesta] Specification Collection_StandardConstructors has been violated on line [jnr.ffi.provider.InterfaceScanner$1.<clinit>(InterfaceScanner.java:1), jnr.ffi.provider.InterfaceScanner.functions(InterfaceScanner.java:27), jnr.ffi.provider.jffi.AsmLibraryLoader.generateInterfaceImpl(AsmLibraryLoader.java:113), jnr.ffi.provider.jffi.AsmLibraryLoader.loadLibrary(AsmLibraryLoader.java:59), jnr.ffi.provider.jffi.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:43), jnr.ffi.LibraryLoader.load(LibraryLoader.java:265), jnr.ffi.Library.loadLibrary(Library.java:123), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getgrnam(LazyPOSIX.java:140), jnr.posix.GroupTest.nonExistantGroupReturnsNull(GroupTest.java:58), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
jnr.ffi.provider.InterfaceScanner$1 does not define the 'standard' constructors.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getpwnam(LazyPOSIX.java:176), jnr.posix.PasswdTest.nonExistantUserReturnsNull(PasswdTest.java:66), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getpwnam(LazyPOSIX.java:176), jnr.posix.PasswdTest.nonExistantUserReturnsNull(PasswdTest.java:66), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getpwnam(LazyPOSIX.java:176), jnr.posix.PasswdTest.nonExistantUserReturnsNull(PasswdTest.java:66), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getpwnam(LazyPOSIX.java:176), jnr.posix.PasswdTest.nonExistantUserReturnsNull(PasswdTest.java:66), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getpwnam(LazyPOSIX.java:176), jnr.posix.PasswdTest.nonExistantUserReturnsNull(PasswdTest.java:66), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getpwnam(LazyPOSIX.java:176), jnr.posix.PasswdTest.nonExistantUserReturnsNull(PasswdTest.java:66), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getpwnam(LazyPOSIX.java:176), jnr.posix.PasswdTest.nonExistantUserReturnsNull(PasswdTest.java:66), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.getStubLibraryPath(StubLoader.java:215), com.kenai.jffi.internal.StubLoader.getStubLibraryStream(StubLoader.java:338), com.kenai.jffi.internal.StubLoader.loadFromJar(StubLoader.java:300), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:235), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getpwnam(LazyPOSIX.java:176), jnr.posix.PasswdTest.nonExistantUserReturnsNull(PasswdTest.java:66), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Collection_StandardConstructors has been violated on line [jnr.ffi.provider.InterfaceScanner$2.<clinit>(InterfaceScanner.java:1), jnr.ffi.provider.InterfaceScanner.variables(InterfaceScanner.java:41), jnr.ffi.provider.jffi.AsmLibraryLoader.generateInterfaceImpl(AsmLibraryLoader.java:147), jnr.ffi.provider.jffi.AsmLibraryLoader.loadLibrary(AsmLibraryLoader.java:59), jnr.ffi.provider.jffi.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:43), jnr.ffi.LibraryLoader.load(LibraryLoader.java:265), jnr.ffi.Library.loadLibrary(Library.java:123), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getgrnam(LazyPOSIX.java:140), jnr.posix.GroupTest.nonExistantGroupReturnsNull(GroupTest.java:58), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
jnr.ffi.provider.InterfaceScanner$2 does not define the 'standard' constructors.
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 9.851 sec - in jnr.posix.GroupTest
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.ffi.Platform$CPU.toString(Platform.java:125), jnr.ffi.provider.jffi.NativeRuntime.buildNativeTypeAliases(NativeRuntime.java:85), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:58), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getpwnam(LazyPOSIX.java:176), jnr.posix.PasswdTest.nonExistantUserReturnsNull(PasswdTest.java:66), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.ffi.Platform$OS.toString(Platform.java:72), jnr.ffi.provider.jffi.NativeRuntime.buildNativeTypeAliases(NativeRuntime.java:86), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:58), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getpwnam(LazyPOSIX.java:176), jnr.posix.PasswdTest.nonExistantUserReturnsNull(PasswdTest.java:66), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Collection_StandardConstructors has been violated on line [jnr.ffi.provider.InterfaceScanner$1.<clinit>(InterfaceScanner.java:1), jnr.ffi.provider.InterfaceScanner.functions(InterfaceScanner.java:27), jnr.ffi.provider.jffi.AsmLibraryLoader.generateInterfaceImpl(AsmLibraryLoader.java:113), jnr.ffi.provider.jffi.AsmLibraryLoader.loadLibrary(AsmLibraryLoader.java:59), jnr.ffi.provider.jffi.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:43), jnr.ffi.LibraryLoader.load(LibraryLoader.java:265), jnr.ffi.Library.loadLibrary(Library.java:123), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getpwnam(LazyPOSIX.java:176), jnr.posix.PasswdTest.nonExistantUserReturnsNull(PasswdTest.java:66), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
jnr.ffi.provider.InterfaceScanner$1 does not define the 'standard' constructors.
[Siesta] Specification Collection_StandardConstructors has been violated on line [jnr.ffi.provider.InterfaceScanner$2.<clinit>(InterfaceScanner.java:1), jnr.ffi.provider.InterfaceScanner.variables(InterfaceScanner.java:41), jnr.ffi.provider.jffi.AsmLibraryLoader.generateInterfaceImpl(AsmLibraryLoader.java:147), jnr.ffi.provider.jffi.AsmLibraryLoader.loadLibrary(AsmLibraryLoader.java:59), jnr.ffi.provider.jffi.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:43), jnr.ffi.LibraryLoader.load(LibraryLoader.java:265), jnr.ffi.Library.loadLibrary(Library.java:123), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getpwnam(LazyPOSIX.java:176), jnr.posix.PasswdTest.nonExistantUserReturnsNull(PasswdTest.java:66), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
jnr.ffi.provider.InterfaceScanner$2 does not define the 'standard' constructors.
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 9.355 sec - in jnr.posix.PasswdTest
Running jnr.posix.util.DefaultPOSIXHandlerTest
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getpid(LazyPOSIX.java:160), jnr.posix.util.DefaultPOSIXHandlerTest.testGetPid(DefaultPOSIXHandlerTest.java:22), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getpid(LazyPOSIX.java:160), jnr.posix.util.DefaultPOSIXHandlerTest.testGetPid(DefaultPOSIXHandlerTest.java:22), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getpid(LazyPOSIX.java:160), jnr.posix.util.DefaultPOSIXHandlerTest.testGetPid(DefaultPOSIXHandlerTest.java:22), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getpid(LazyPOSIX.java:160), jnr.posix.util.DefaultPOSIXHandlerTest.testGetPid(DefaultPOSIXHandlerTest.java:22), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getpid(LazyPOSIX.java:160), jnr.posix.util.DefaultPOSIXHandlerTest.testGetPid(DefaultPOSIXHandlerTest.java:22), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getpid(LazyPOSIX.java:160), jnr.posix.util.DefaultPOSIXHandlerTest.testGetPid(DefaultPOSIXHandlerTest.java:22), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getpid(LazyPOSIX.java:160), jnr.posix.util.DefaultPOSIXHandlerTest.testGetPid(DefaultPOSIXHandlerTest.java:22), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.getStubLibraryPath(StubLoader.java:215), com.kenai.jffi.internal.StubLoader.getStubLibraryStream(StubLoader.java:338), com.kenai.jffi.internal.StubLoader.loadFromJar(StubLoader.java:300), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:235), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getpid(LazyPOSIX.java:160), jnr.posix.util.DefaultPOSIXHandlerTest.testGetPid(DefaultPOSIXHandlerTest.java:22), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.ffi.Platform$CPU.toString(Platform.java:125), jnr.ffi.provider.jffi.NativeRuntime.buildNativeTypeAliases(NativeRuntime.java:85), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:58), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getpid(LazyPOSIX.java:160), jnr.posix.util.DefaultPOSIXHandlerTest.testGetPid(DefaultPOSIXHandlerTest.java:22), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.ffi.Platform$OS.toString(Platform.java:72), jnr.ffi.provider.jffi.NativeRuntime.buildNativeTypeAliases(NativeRuntime.java:86), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:58), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getpid(LazyPOSIX.java:160), jnr.posix.util.DefaultPOSIXHandlerTest.testGetPid(DefaultPOSIXHandlerTest.java:22), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
Running jnr.posix.util.PlatformTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.537 sec - in jnr.posix.util.PlatformTest
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0
[Siesta] Specification Collection_StandardConstructors has been violated on line [jnr.ffi.provider.InterfaceScanner$1.<clinit>(InterfaceScanner.java:1), jnr.ffi.provider.InterfaceScanner.functions(InterfaceScanner.java:27), jnr.ffi.provider.jffi.AsmLibraryLoader.generateInterfaceImpl(AsmLibraryLoader.java:113), jnr.ffi.provider.jffi.AsmLibraryLoader.loadLibrary(AsmLibraryLoader.java:59), jnr.ffi.provider.jffi.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:43), jnr.ffi.LibraryLoader.load(LibraryLoader.java:265), jnr.ffi.Library.loadLibrary(Library.java:123), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getpid(LazyPOSIX.java:160), jnr.posix.util.DefaultPOSIXHandlerTest.testGetPid(DefaultPOSIXHandlerTest.java:22), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
jnr.ffi.provider.InterfaceScanner$1 does not define the 'standard' constructors.
[Siesta] Specification Collection_StandardConstructors has been violated on line [jnr.ffi.provider.InterfaceScanner$2.<clinit>(InterfaceScanner.java:1), jnr.ffi.provider.InterfaceScanner.variables(InterfaceScanner.java:41), jnr.ffi.provider.jffi.AsmLibraryLoader.generateInterfaceImpl(AsmLibraryLoader.java:147), jnr.ffi.provider.jffi.AsmLibraryLoader.loadLibrary(AsmLibraryLoader.java:59), jnr.ffi.provider.jffi.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:43), jnr.ffi.LibraryLoader.load(LibraryLoader.java:265), jnr.ffi.Library.loadLibrary(Library.java:123), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.getpid(LazyPOSIX.java:160), jnr.posix.util.DefaultPOSIXHandlerTest.testGetPid(DefaultPOSIXHandlerTest.java:22), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
jnr.ffi.provider.InterfaceScanner$2 does not define the 'standard' constructors.
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 8.546 sec - in jnr.posix.util.DefaultPOSIXHandlerTest
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0
Running jnr.posix.util.RegressionTest
Running jnr.posix.util.WindowsHelpersTest
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Runtime$SingletonHolder.<clinit>(Runtime.java:85), jnr.ffi.Runtime.getSystemRuntime(Runtime.java:70), jnr.posix.util.WindowsHelpers.<clinit>(WindowsHelpers.java:21), jnr.posix.util.WindowsHelpersTest.testIsBatch(WindowsHelpersTest.java:39), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), junit.framework.TestCase.runTest(TestCase.java:176), junit.framework.TestCase.runBare(TestCase.java:141), junit.framework.TestResult$1.protect(TestResult.java:122), junit.framework.TestResult.runProtected(TestResult.java:142), junit.framework.TestResult.run(TestResult.java:125), junit.framework.TestCase.run(TestCase.java:129), junit.framework.TestSuite.runTest(TestSuite.java:255), junit.framework.TestSuite.run(TestSuite.java:250), org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Runtime$SingletonHolder.<clinit>(Runtime.java:85), jnr.ffi.Runtime.getSystemRuntime(Runtime.java:70), jnr.posix.util.WindowsHelpers.<clinit>(WindowsHelpers.java:21), jnr.posix.util.WindowsHelpersTest.testIsBatch(WindowsHelpersTest.java:39), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), junit.framework.TestCase.runTest(TestCase.java:176), junit.framework.TestCase.runBare(TestCase.java:141), junit.framework.TestResult$1.protect(TestResult.java:122), junit.framework.TestResult.runProtected(TestResult.java:142), junit.framework.TestResult.run(TestResult.java:125), junit.framework.TestCase.run(TestCase.java:129), junit.framework.TestSuite.runTest(TestSuite.java:255), junit.framework.TestSuite.run(TestSuite.java:250), org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Runtime$SingletonHolder.<clinit>(Runtime.java:85), jnr.ffi.Runtime.getSystemRuntime(Runtime.java:70), jnr.posix.util.WindowsHelpers.<clinit>(WindowsHelpers.java:21), jnr.posix.util.WindowsHelpersTest.testIsBatch(WindowsHelpersTest.java:39), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), junit.framework.TestCase.runTest(TestCase.java:176), junit.framework.TestCase.runBare(TestCase.java:141), junit.framework.TestResult$1.protect(TestResult.java:122), junit.framework.TestResult.runProtected(TestResult.java:142), junit.framework.TestResult.run(TestResult.java:125), junit.framework.TestCase.run(TestCase.java:129), junit.framework.TestSuite.runTest(TestSuite.java:255), junit.framework.TestSuite.run(TestSuite.java:250), org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Runtime$SingletonHolder.<clinit>(Runtime.java:85), jnr.ffi.Runtime.getSystemRuntime(Runtime.java:70), jnr.posix.util.WindowsHelpers.<clinit>(WindowsHelpers.java:21), jnr.posix.util.WindowsHelpersTest.testIsBatch(WindowsHelpersTest.java:39), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), junit.framework.TestCase.runTest(TestCase.java:176), junit.framework.TestCase.runBare(TestCase.java:141), junit.framework.TestResult$1.protect(TestResult.java:122), junit.framework.TestResult.runProtected(TestResult.java:142), junit.framework.TestResult.run(TestResult.java:125), junit.framework.TestCase.run(TestCase.java:129), junit.framework.TestSuite.runTest(TestSuite.java:255), junit.framework.TestSuite.run(TestSuite.java:250), org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Runtime$SingletonHolder.<clinit>(Runtime.java:85), jnr.ffi.Runtime.getSystemRuntime(Runtime.java:70), jnr.posix.util.WindowsHelpers.<clinit>(WindowsHelpers.java:21), jnr.posix.util.WindowsHelpersTest.testIsBatch(WindowsHelpersTest.java:39), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), junit.framework.TestCase.runTest(TestCase.java:176), junit.framework.TestCase.runBare(TestCase.java:141), junit.framework.TestResult$1.protect(TestResult.java:122), junit.framework.TestResult.runProtected(TestResult.java:142), junit.framework.TestResult.run(TestResult.java:125), junit.framework.TestCase.run(TestCase.java:129), junit.framework.TestSuite.runTest(TestSuite.java:255), junit.framework.TestSuite.run(TestSuite.java:250), org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Runtime$SingletonHolder.<clinit>(Runtime.java:85), jnr.ffi.Runtime.getSystemRuntime(Runtime.java:70), jnr.posix.util.WindowsHelpers.<clinit>(WindowsHelpers.java:21), jnr.posix.util.WindowsHelpersTest.testIsBatch(WindowsHelpersTest.java:39), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), junit.framework.TestCase.runTest(TestCase.java:176), junit.framework.TestCase.runBare(TestCase.java:141), junit.framework.TestResult$1.protect(TestResult.java:122), junit.framework.TestResult.runProtected(TestResult.java:142), junit.framework.TestResult.run(TestResult.java:125), junit.framework.TestCase.run(TestCase.java:129), junit.framework.TestSuite.runTest(TestSuite.java:255), junit.framework.TestSuite.run(TestSuite.java:250), org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Runtime$SingletonHolder.<clinit>(Runtime.java:85), jnr.ffi.Runtime.getSystemRuntime(Runtime.java:70), jnr.posix.util.WindowsHelpers.<clinit>(WindowsHelpers.java:21), jnr.posix.util.WindowsHelpersTest.testIsBatch(WindowsHelpersTest.java:39), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), junit.framework.TestCase.runTest(TestCase.java:176), junit.framework.TestCase.runBare(TestCase.java:141), junit.framework.TestResult$1.protect(TestResult.java:122), junit.framework.TestResult.runProtected(TestResult.java:142), junit.framework.TestResult.run(TestResult.java:125), junit.framework.TestCase.run(TestCase.java:129), junit.framework.TestSuite.runTest(TestSuite.java:255), junit.framework.TestSuite.run(TestSuite.java:250), org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.getStubLibraryPath(StubLoader.java:215), com.kenai.jffi.internal.StubLoader.getStubLibraryStream(StubLoader.java:338), com.kenai.jffi.internal.StubLoader.loadFromJar(StubLoader.java:300), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:235), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Runtime$SingletonHolder.<clinit>(Runtime.java:85), jnr.ffi.Runtime.getSystemRuntime(Runtime.java:70), jnr.posix.util.WindowsHelpers.<clinit>(WindowsHelpers.java:21), jnr.posix.util.WindowsHelpersTest.testIsBatch(WindowsHelpersTest.java:39), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), junit.framework.TestCase.runTest(TestCase.java:176), junit.framework.TestCase.runBare(TestCase.java:141), junit.framework.TestResult$1.protect(TestResult.java:122), junit.framework.TestResult.runProtected(TestResult.java:142), junit.framework.TestResult.run(TestResult.java:125), junit.framework.TestCase.run(TestCase.java:129), junit.framework.TestSuite.runTest(TestSuite.java:255), junit.framework.TestSuite.run(TestSuite.java:250), org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.ffi.Platform$CPU.toString(Platform.java:125), jnr.ffi.provider.jffi.NativeRuntime.buildNativeTypeAliases(NativeRuntime.java:85), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:58), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Runtime$SingletonHolder.<clinit>(Runtime.java:85), jnr.ffi.Runtime.getSystemRuntime(Runtime.java:70), jnr.posix.util.WindowsHelpers.<clinit>(WindowsHelpers.java:21), jnr.posix.util.WindowsHelpersTest.testIsBatch(WindowsHelpersTest.java:39), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), junit.framework.TestCase.runTest(TestCase.java:176), junit.framework.TestCase.runBare(TestCase.java:141), junit.framework.TestResult$1.protect(TestResult.java:122), junit.framework.TestResult.runProtected(TestResult.java:142), junit.framework.TestResult.run(TestResult.java:125), junit.framework.TestCase.run(TestCase.java:129), junit.framework.TestSuite.runTest(TestSuite.java:255), junit.framework.TestSuite.run(TestSuite.java:250), org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.ffi.Platform$OS.toString(Platform.java:72), jnr.ffi.provider.jffi.NativeRuntime.buildNativeTypeAliases(NativeRuntime.java:86), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:58), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Runtime$SingletonHolder.<clinit>(Runtime.java:85), jnr.ffi.Runtime.getSystemRuntime(Runtime.java:70), jnr.posix.util.WindowsHelpers.<clinit>(WindowsHelpers.java:21), jnr.posix.util.WindowsHelpersTest.testIsBatch(WindowsHelpersTest.java:39), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), junit.framework.TestCase.runTest(TestCase.java:176), junit.framework.TestCase.runBare(TestCase.java:141), junit.framework.TestResult$1.protect(TestResult.java:122), junit.framework.TestResult.runProtected(TestResult.java:142), junit.framework.TestResult.run(TestResult.java:125), junit.framework.TestCase.run(TestCase.java:129), junit.framework.TestSuite.runTest(TestSuite.java:255), junit.framework.TestSuite.run(TestSuite.java:250), org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.765 sec - in jnr.posix.util.WindowsHelpersTest
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0
Running jnr.posix.SignalTest
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.getStubLibraryPath(StubLoader.java:215), com.kenai.jffi.internal.StubLoader.getStubLibraryStream(StubLoader.java:338), com.kenai.jffi.internal.StubLoader.loadFromJar(StubLoader.java:300), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:235), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.ffi.Platform$CPU.toString(Platform.java:125), jnr.ffi.provider.jffi.NativeRuntime.buildNativeTypeAliases(NativeRuntime.java:85), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:58), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.ffi.Platform$OS.toString(Platform.java:72), jnr.ffi.provider.jffi.NativeRuntime.buildNativeTypeAliases(NativeRuntime.java:86), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:58), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Collection_StandardConstructors has been violated on line [jnr.ffi.provider.InterfaceScanner$1.<clinit>(InterfaceScanner.java:1), jnr.ffi.provider.InterfaceScanner.functions(InterfaceScanner.java:27), jnr.ffi.provider.jffi.AsmLibraryLoader.generateInterfaceImpl(AsmLibraryLoader.java:113), jnr.ffi.provider.jffi.AsmLibraryLoader.loadLibrary(AsmLibraryLoader.java:59), jnr.ffi.provider.jffi.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:43), jnr.ffi.LibraryLoader.load(LibraryLoader.java:265), jnr.ffi.Library.loadLibrary(Library.java:123), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
jnr.ffi.provider.InterfaceScanner$1 does not define the 'standard' constructors.
[Siesta] Specification Collection_StandardConstructors has been violated on line [jnr.ffi.provider.InterfaceScanner$2.<clinit>(InterfaceScanner.java:1), jnr.ffi.provider.InterfaceScanner.variables(InterfaceScanner.java:41), jnr.ffi.provider.jffi.AsmLibraryLoader.generateInterfaceImpl(AsmLibraryLoader.java:147), jnr.ffi.provider.jffi.AsmLibraryLoader.loadLibrary(AsmLibraryLoader.java:59), jnr.ffi.provider.jffi.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:43), jnr.ffi.LibraryLoader.load(LibraryLoader.java:265), jnr.ffi.Library.loadLibrary(Library.java:123), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
jnr.ffi.provider.InterfaceScanner$2 does not define the 'standard' constructors.
[Siesta] Specification Collection_StandardConstructors has been violated on line [jnr.constants.ConstantSet.<clinit>(ConstantSet.java:41), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
jnr.constants.ConstantSet does not define the 'standard' constructors.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.ConstantSet.<init>(ConstantSet.java:108), jnr.constants.ConstantSet.loadConstantSet(ConstantSet.java:67), jnr.constants.ConstantSet.getConstantSet(ConstantSet.java:51), jnr.constants.platform.ConstantResolver.getConstants(ConstantResolver.java:211), jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:119), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:126), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.constants.platform.ConstantResolver.lookupAndCacheConstant(ConstantResolver.java:135), jnr.constants.platform.ConstantResolver.getConstant(ConstantResolver.java:107), jnr.constants.platform.ConstantResolver.longValue(ConstantResolver.java:170), jnr.constants.platform.Signal.intValue(Signal.java:46), jnr.posix.BaseNativePOSIX.signal(BaseNativePOSIX.java:246), jnr.posix.CheckedPOSIX.signal(CheckedPOSIX.java:194), jnr.posix.LazyPOSIX.signal(LazyPOSIX.java:196), jnr.posix.SignalTest.testBasicSignal(SignalTest.java:35), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.posix.JavaPOSIX.signal(JavaPOSIX.java:213), jnr.posix.SignalTest.testJavaSignal(SignalTest.java:50), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 8.808 sec - in jnr.posix.SignalTest
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0
Running jnr.posix.FileStatTest
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.allocateStat(LazyPOSIX.java:48), jnr.posix.FileStatTest.filestatInt(FileStatTest.java:76), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.allocateStat(LazyPOSIX.java:48), jnr.posix.FileStatTest.filestatInt(FileStatTest.java:76), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.allocateStat(LazyPOSIX.java:48), jnr.posix.FileStatTest.filestatInt(FileStatTest.java:76), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.allocateStat(LazyPOSIX.java:48), jnr.posix.FileStatTest.filestatInt(FileStatTest.java:76), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.allocateStat(LazyPOSIX.java:48), jnr.posix.FileStatTest.filestatInt(FileStatTest.java:76), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.allocateStat(LazyPOSIX.java:48), jnr.posix.FileStatTest.filestatInt(FileStatTest.java:76), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.allocateStat(LazyPOSIX.java:48), jnr.posix.FileStatTest.filestatInt(FileStatTest.java:76), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.getStubLibraryPath(StubLoader.java:215), com.kenai.jffi.internal.StubLoader.getStubLibraryStream(StubLoader.java:338), com.kenai.jffi.internal.StubLoader.loadFromJar(StubLoader.java:300), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:235), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.allocateStat(LazyPOSIX.java:48), jnr.posix.FileStatTest.filestatInt(FileStatTest.java:76), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.ffi.Platform$CPU.toString(Platform.java:125), jnr.ffi.provider.jffi.NativeRuntime.buildNativeTypeAliases(NativeRuntime.java:85), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:58), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.allocateStat(LazyPOSIX.java:48), jnr.posix.FileStatTest.filestatInt(FileStatTest.java:76), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.ffi.Platform$OS.toString(Platform.java:72), jnr.ffi.provider.jffi.NativeRuntime.buildNativeTypeAliases(NativeRuntime.java:86), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:58), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Library.loadLibrary(Library.java:110), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.allocateStat(LazyPOSIX.java:48), jnr.posix.FileStatTest.filestatInt(FileStatTest.java:76), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Collection_StandardConstructors has been violated on line [jnr.ffi.provider.InterfaceScanner$1.<clinit>(InterfaceScanner.java:1), jnr.ffi.provider.InterfaceScanner.functions(InterfaceScanner.java:27), jnr.ffi.provider.jffi.AsmLibraryLoader.generateInterfaceImpl(AsmLibraryLoader.java:113), jnr.ffi.provider.jffi.AsmLibraryLoader.loadLibrary(AsmLibraryLoader.java:59), jnr.ffi.provider.jffi.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:43), jnr.ffi.LibraryLoader.load(LibraryLoader.java:265), jnr.ffi.Library.loadLibrary(Library.java:123), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.allocateStat(LazyPOSIX.java:48), jnr.posix.FileStatTest.filestatInt(FileStatTest.java:76), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
jnr.ffi.provider.InterfaceScanner$1 does not define the 'standard' constructors.
[Siesta] Specification Collection_StandardConstructors has been violated on line [jnr.ffi.provider.InterfaceScanner$2.<clinit>(InterfaceScanner.java:1), jnr.ffi.provider.InterfaceScanner.variables(InterfaceScanner.java:41), jnr.ffi.provider.jffi.AsmLibraryLoader.generateInterfaceImpl(AsmLibraryLoader.java:147), jnr.ffi.provider.jffi.AsmLibraryLoader.loadLibrary(AsmLibraryLoader.java:59), jnr.ffi.provider.jffi.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:43), jnr.ffi.LibraryLoader.load(LibraryLoader.java:265), jnr.ffi.Library.loadLibrary(Library.java:123), jnr.posix.POSIXFactory$DefaultLibCProvider$SingletonHolder.<clinit>(POSIXFactory.java:219), jnr.posix.POSIXFactory$DefaultLibCProvider.getLibC(POSIXFactory.java:223), jnr.posix.BaseNativePOSIX.<init>(BaseNativePOSIX.java:40), jnr.posix.LinuxPOSIX.<init>(LinuxPOSIX.java:20), jnr.posix.POSIXFactory.loadLinuxPOSIX(POSIXFactory.java:95), jnr.posix.POSIXFactory.loadNativePOSIX(POSIXFactory.java:69), jnr.posix.POSIXFactory.loadPOSIX(POSIXFactory.java:38), jnr.posix.LazyPOSIX.loadPOSIX(LazyPOSIX.java:36), jnr.posix.LazyPOSIX.posix(LazyPOSIX.java:30), jnr.posix.LazyPOSIX.allocateStat(LazyPOSIX.java:48), jnr.posix.FileStatTest.filestatInt(FileStatTest.java:76), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26), org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
jnr.ffi.provider.InterfaceScanner$2 does not define the 'standard' constructors.
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 7.98 sec - in jnr.posix.FileStatTest
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0
Running jnr.posix.JavaPOSIXTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.648 sec - in jnr.posix.JavaPOSIXTest
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Runtime$SingletonHolder.<clinit>(Runtime.java:85), jnr.ffi.Runtime.getSystemRuntime(Runtime.java:70), jnr.posix.util.WindowsHelpers.<clinit>(WindowsHelpers.java:21), jnr.posix.util.RegressionTest0.test0011(RegressionTest0.java:120), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.junit.runners.Suite.runChild(Suite.java:127), org.junit.runners.Suite.runChild(Suite.java:26), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Runtime$SingletonHolder.<clinit>(Runtime.java:85), jnr.ffi.Runtime.getSystemRuntime(Runtime.java:70), jnr.posix.util.WindowsHelpers.<clinit>(WindowsHelpers.java:21), jnr.posix.util.RegressionTest0.test0011(RegressionTest0.java:120), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.junit.runners.Suite.runChild(Suite.java:127), org.junit.runners.Suite.runChild(Suite.java:26), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Runtime$SingletonHolder.<clinit>(Runtime.java:85), jnr.ffi.Runtime.getSystemRuntime(Runtime.java:70), jnr.posix.util.WindowsHelpers.<clinit>(WindowsHelpers.java:21), jnr.posix.util.RegressionTest0.test0011(RegressionTest0.java:120), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.junit.runners.Suite.runChild(Suite.java:127), org.junit.runners.Suite.runChild(Suite.java:26), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Runtime$SingletonHolder.<clinit>(Runtime.java:85), jnr.ffi.Runtime.getSystemRuntime(Runtime.java:70), jnr.posix.util.WindowsHelpers.<clinit>(WindowsHelpers.java:21), jnr.posix.util.RegressionTest0.test0011(RegressionTest0.java:120), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.junit.runners.Suite.runChild(Suite.java:127), org.junit.runners.Suite.runChild(Suite.java:26), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Runtime$SingletonHolder.<clinit>(Runtime.java:85), jnr.ffi.Runtime.getSystemRuntime(Runtime.java:70), jnr.posix.util.WindowsHelpers.<clinit>(WindowsHelpers.java:21), jnr.posix.util.RegressionTest0.test0011(RegressionTest0.java:120), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.junit.runners.Suite.runChild(Suite.java:127), org.junit.runners.Suite.runChild(Suite.java:26), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Runtime$SingletonHolder.<clinit>(Runtime.java:85), jnr.ffi.Runtime.getSystemRuntime(Runtime.java:70), jnr.posix.util.WindowsHelpers.<clinit>(WindowsHelpers.java:21), jnr.posix.util.RegressionTest0.test0011(RegressionTest0.java:120), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.junit.runners.Suite.runChild(Suite.java:127), org.junit.runners.Suite.runChild(Suite.java:26), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.loadFromBootPath(StubLoader.java:278), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:231), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Runtime$SingletonHolder.<clinit>(Runtime.java:85), jnr.ffi.Runtime.getSystemRuntime(Runtime.java:70), jnr.posix.util.WindowsHelpers.<clinit>(WindowsHelpers.java:21), jnr.posix.util.RegressionTest0.test0011(RegressionTest0.java:120), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.junit.runners.Suite.runChild(Suite.java:127), org.junit.runners.Suite.runChild(Suite.java:26), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [com.kenai.jffi.internal.StubLoader.getPlatformName(StubLoader.java:207), com.kenai.jffi.internal.StubLoader.getStubLibraryPath(StubLoader.java:215), com.kenai.jffi.internal.StubLoader.getStubLibraryStream(StubLoader.java:338), com.kenai.jffi.internal.StubLoader.loadFromJar(StubLoader.java:300), com.kenai.jffi.internal.StubLoader.load(StubLoader.java:235), com.kenai.jffi.internal.StubLoader.<clinit>(StubLoader.java:403), java.lang.Class.forName0(Native Method), java.lang.Class.forName(Class.java:348), com.kenai.jffi.Init.load(Init.java:68), com.kenai.jffi.Foreign$InstanceHolder.getInstanceHolder(Foreign.java:49), com.kenai.jffi.Foreign$InstanceHolder.<clinit>(Foreign.java:45), com.kenai.jffi.Foreign.getInstance(Foreign.java:103), com.kenai.jffi.Type$Builtin.lookupTypeInfo(Type.java:242), com.kenai.jffi.Type$Builtin.getTypeInfo(Type.java:237), com.kenai.jffi.Type.resolveSize(Type.java:155), com.kenai.jffi.Type.size(Type.java:138), jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate.size(NativeRuntime.java:178), jnr.ffi.provider.AbstractRuntime.<init>(AbstractRuntime.java:48), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:57), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Runtime$SingletonHolder.<clinit>(Runtime.java:85), jnr.ffi.Runtime.getSystemRuntime(Runtime.java:70), jnr.posix.util.WindowsHelpers.<clinit>(WindowsHelpers.java:21), jnr.posix.util.RegressionTest0.test0011(RegressionTest0.java:120), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.junit.runners.Suite.runChild(Suite.java:127), org.junit.runners.Suite.runChild(Suite.java:26), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.ffi.Platform$CPU.toString(Platform.java:125), jnr.ffi.provider.jffi.NativeRuntime.buildNativeTypeAliases(NativeRuntime.java:85), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:58), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Runtime$SingletonHolder.<clinit>(Runtime.java:85), jnr.ffi.Runtime.getSystemRuntime(Runtime.java:70), jnr.posix.util.WindowsHelpers.<clinit>(WindowsHelpers.java:21), jnr.posix.util.RegressionTest0.test0011(RegressionTest0.java:120), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.junit.runners.Suite.runChild(Suite.java:127), org.junit.runners.Suite.runChild(Suite.java:26), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
[Siesta] Specification Enum_UserFriendlyName has been violated on line [jnr.ffi.Platform$OS.toString(Platform.java:72), jnr.ffi.provider.jffi.NativeRuntime.buildNativeTypeAliases(NativeRuntime.java:86), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:58), jnr.ffi.provider.jffi.NativeRuntime.<init>(NativeRuntime.java:41), jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder.<clinit>(NativeRuntime.java:53), jnr.ffi.provider.jffi.NativeRuntime.getInstance(NativeRuntime.java:49), jnr.ffi.provider.jffi.Provider.<init>(Provider.java:29), sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method), sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62), sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45), java.lang.reflect.Constructor.newInstance(Constructor.java:423), java.lang.Class.newInstance(Class.java:442), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.getInstance(FFIProvider.java:60), jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder.<clinit>(FFIProvider.java:49), jnr.ffi.provider.FFIProvider.getSystemProvider(FFIProvider.java:35), jnr.ffi.Runtime$SingletonHolder.<clinit>(Runtime.java:85), jnr.ffi.Runtime.getSystemRuntime(Runtime.java:70), jnr.posix.util.WindowsHelpers.<clinit>(WindowsHelpers.java:21), jnr.posix.util.RegressionTest0.test0011(RegressionTest0.java:120), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47), org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12), org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44), org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17), org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70), org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.junit.runners.Suite.runChild(Suite.java:127), org.junit.runners.Suite.runChild(Suite.java:26), org.junit.runners.ParentRunner$3.run(ParentRunner.java:238), org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63), org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236), org.junit.runners.ParentRunner.access$000(ParentRunner.java:53), org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229), org.junit.runners.ParentRunner.run(ParentRunner.java:309), org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264), org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153), org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124), org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200), org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153), org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)]
Most programmers should use toString(). It gives a more user-friendly name.
env: 'invoke0': No such file or directory
Tests run: 6262, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 61.494 sec - in jnr.posix.util.RegressionTest

Results :

Tests run: 6303, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  02:24 min
[INFO] Finished at: 2024-03-28T22:11:14Z
[INFO] ------------------------------------------------------------------------
